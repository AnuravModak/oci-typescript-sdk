/**
 * Cloud Guard APIs
 * A description of the Cloud Guard APIs
 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { CloudGuardWaiter } from "./cloudguard-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CloudGuardApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class CloudGuardClient {
  protected static serviceEndpointTemplate =
    "https://cloudguard-cp-api.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": CloudGuardWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200131";
    if (this.logger) this.logger.info(`CloudGuardClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      CloudGuardClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      CloudGuardClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new CloudGuardWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): CloudGuardWaiter {
    this._waiters = new CloudGuardWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): CloudGuardWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Moves the DetectorRecipe from current compartment to another.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeDetectorRecipeCompartmentRequest
   * @return ChangeDetectorRecipeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ChangeDetectorRecipeCompartment.ts.html |here} to see how to use ChangeDetectorRecipeCompartment API.
   */
  public async changeDetectorRecipeCompartment(
    changeDetectorRecipeCompartmentRequest: requests.ChangeDetectorRecipeCompartmentRequest
  ): Promise<responses.ChangeDetectorRecipeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#changeDetectorRecipeCompartment.");
    const pathParams = {
      "{detectorRecipeId}": changeDetectorRecipeCompartmentRequest.detectorRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDetectorRecipeCompartmentRequest.ifMatch,
      "opc-request-id": changeDetectorRecipeCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDetectorRecipeCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDetectorRecipeCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectorRecipes/{detectorRecipeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDetectorRecipeCompartmentRequest.changeDetectorRecipeCompartmentDetails,
        "ChangeDetectorRecipeCompartmentDetails",
        model.ChangeDetectorRecipeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDetectorRecipeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the ManagedList from current compartment to another.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeManagedListCompartmentRequest
   * @return ChangeManagedListCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ChangeManagedListCompartment.ts.html |here} to see how to use ChangeManagedListCompartment API.
   */
  public async changeManagedListCompartment(
    changeManagedListCompartmentRequest: requests.ChangeManagedListCompartmentRequest
  ): Promise<responses.ChangeManagedListCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#changeManagedListCompartment.");
    const pathParams = {
      "{managedListId}": changeManagedListCompartmentRequest.managedListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeManagedListCompartmentRequest.ifMatch,
      "opc-request-id": changeManagedListCompartmentRequest.opcRequestId,
      "opc-retry-token": changeManagedListCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeManagedListCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedLists/{managedListId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeManagedListCompartmentRequest.changeManagedListCompartmentDetails,
        "ChangeManagedListCompartmentDetails",
        model.ChangeManagedListCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeManagedListCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the ResponderRecipe from current compartment to another.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeResponderRecipeCompartmentRequest
   * @return ChangeResponderRecipeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ChangeResponderRecipeCompartment.ts.html |here} to see how to use ChangeResponderRecipeCompartment API.
   */
  public async changeResponderRecipeCompartment(
    changeResponderRecipeCompartmentRequest: requests.ChangeResponderRecipeCompartmentRequest
  ): Promise<responses.ChangeResponderRecipeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#changeResponderRecipeCompartment.");
    const pathParams = {
      "{responderRecipeId}": changeResponderRecipeCompartmentRequest.responderRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeResponderRecipeCompartmentRequest.ifMatch,
      "opc-request-id": changeResponderRecipeCompartmentRequest.opcRequestId,
      "opc-retry-token": changeResponderRecipeCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeResponderRecipeCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderRecipes/{responderRecipeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeResponderRecipeCompartmentRequest.changeResponderRecipeCompartmentDetails,
        "ChangeResponderRecipeCompartmentDetails",
        model.ChangeResponderRecipeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeResponderRecipeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Data Mask Rule Definition
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDataMaskRuleRequest
   * @return CreateDataMaskRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/CreateDataMaskRule.ts.html |here} to see how to use CreateDataMaskRule API.
   */
  public async createDataMaskRule(
    createDataMaskRuleRequest: requests.CreateDataMaskRuleRequest
  ): Promise<responses.CreateDataMaskRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#createDataMaskRule.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDataMaskRuleRequest.opcRetryToken,
      "opc-request-id": createDataMaskRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDataMaskRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataMaskRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDataMaskRuleRequest.createDataMaskRuleDetails,
        "CreateDataMaskRuleDetails",
        model.CreateDataMaskRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDataMaskRuleResponse>{},
        body: await response.json(),
        bodyKey: "dataMaskRule",
        bodyModel: model.DataMaskRule,
        type: "model.DataMaskRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a DetectorRecipe
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDetectorRecipeRequest
   * @return CreateDetectorRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/CreateDetectorRecipe.ts.html |here} to see how to use CreateDetectorRecipe API.
   */
  public async createDetectorRecipe(
    createDetectorRecipeRequest: requests.CreateDetectorRecipeRequest
  ): Promise<responses.CreateDetectorRecipeResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#createDetectorRecipe.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDetectorRecipeRequest.opcRetryToken,
      "opc-request-id": createDetectorRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDetectorRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectorRecipes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDetectorRecipeRequest.createDetectorRecipeDetails,
        "CreateDetectorRecipeDetails",
        model.CreateDetectorRecipeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDetectorRecipeResponse>{},
        body: await response.json(),
        bodyKey: "detectorRecipe",
        bodyModel: model.DetectorRecipe,
        type: "model.DetectorRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new ManagedList.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateManagedListRequest
   * @return CreateManagedListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/CreateManagedList.ts.html |here} to see how to use CreateManagedList API.
   */
  public async createManagedList(
    createManagedListRequest: requests.CreateManagedListRequest
  ): Promise<responses.CreateManagedListResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#createManagedList.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createManagedListRequest.opcRetryToken,
      "opc-request-id": createManagedListRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createManagedListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedLists",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createManagedListRequest.createManagedListDetails,
        "CreateManagedListDetails",
        model.CreateManagedListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateManagedListResponse>{},
        body: await response.json(),
        bodyKey: "managedList",
        bodyModel: model.ManagedList,
        type: "model.ManagedList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a ResponderRecipe.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateResponderRecipeRequest
   * @return CreateResponderRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/CreateResponderRecipe.ts.html |here} to see how to use CreateResponderRecipe API.
   */
  public async createResponderRecipe(
    createResponderRecipeRequest: requests.CreateResponderRecipeRequest
  ): Promise<responses.CreateResponderRecipeResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#createResponderRecipe.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createResponderRecipeRequest.opcRetryToken,
      "opc-request-id": createResponderRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createResponderRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderRecipes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createResponderRecipeRequest.createResponderRecipeDetails,
        "CreateResponderRecipeDetails",
        model.CreateResponderRecipeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateResponderRecipeResponse>{},
        body: await response.json(),
        bodyKey: "responderRecipe",
        bodyModel: model.ResponderRecipe,
        type: "model.ResponderRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Target
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateTargetRequest
   * @return CreateTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/CreateTarget.ts.html |here} to see how to use CreateTarget API.
   */
  public async createTarget(
    createTargetRequest: requests.CreateTargetRequest
  ): Promise<responses.CreateTargetResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#createTarget.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTargetRequest.opcRetryToken,
      "opc-request-id": createTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTargetRequest.createTargetDetails,
        "CreateTargetDetails",
        model.CreateTargetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTargetResponse>{},
        body: await response.json(),
        bodyKey: "target",
        bodyModel: model.Target,
        type: "model.Target",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Attach a DetectorRecipe with the Target
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateTargetDetectorRecipeRequest
   * @return CreateTargetDetectorRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/CreateTargetDetectorRecipe.ts.html |here} to see how to use CreateTargetDetectorRecipe API.
   */
  public async createTargetDetectorRecipe(
    createTargetDetectorRecipeRequest: requests.CreateTargetDetectorRecipeRequest
  ): Promise<responses.CreateTargetDetectorRecipeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#createTargetDetectorRecipe.");
    const pathParams = {
      "{targetId}": createTargetDetectorRecipeRequest.targetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTargetDetectorRecipeRequest.opcRetryToken,
      "opc-request-id": createTargetDetectorRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTargetDetectorRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetDetectorRecipes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTargetDetectorRecipeRequest.attachTargetDetectorRecipeDetails,
        "AttachTargetDetectorRecipeDetails",
        model.AttachTargetDetectorRecipeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTargetDetectorRecipeResponse>{},
        body: await response.json(),
        bodyKey: "targetDetectorRecipe",
        bodyModel: model.TargetDetectorRecipe,
        type: "model.TargetDetectorRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Attach a ResponderRecipe with the Target
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateTargetResponderRecipeRequest
   * @return CreateTargetResponderRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/CreateTargetResponderRecipe.ts.html |here} to see how to use CreateTargetResponderRecipe API.
   */
  public async createTargetResponderRecipe(
    createTargetResponderRecipeRequest: requests.CreateTargetResponderRecipeRequest
  ): Promise<responses.CreateTargetResponderRecipeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#createTargetResponderRecipe.");
    const pathParams = {
      "{targetId}": createTargetResponderRecipeRequest.targetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTargetResponderRecipeRequest.opcRetryToken,
      "opc-request-id": createTargetResponderRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTargetResponderRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetResponderRecipes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTargetResponderRecipeRequest.attachTargetResponderRecipeDetails,
        "AttachTargetResponderRecipeDetails",
        model.AttachTargetResponderRecipeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTargetResponderRecipeResponse>{},
        body: await response.json(),
        bodyKey: "targetResponderRecipe",
        bodyModel: model.TargetResponderRecipe,
        type: "model.TargetResponderRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a DataMaskRule identified by dataMaskRuleId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDataMaskRuleRequest
   * @return DeleteDataMaskRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/DeleteDataMaskRule.ts.html |here} to see how to use DeleteDataMaskRule API.
   */
  public async deleteDataMaskRule(
    deleteDataMaskRuleRequest: requests.DeleteDataMaskRuleRequest
  ): Promise<responses.DeleteDataMaskRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#deleteDataMaskRule.");
    const pathParams = {
      "{dataMaskRuleId}": deleteDataMaskRuleRequest.dataMaskRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDataMaskRuleRequest.ifMatch,
      "opc-request-id": deleteDataMaskRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDataMaskRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataMaskRules/{dataMaskRuleId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDataMaskRuleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a DetectorRecipe identified by detectorRecipeId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDetectorRecipeRequest
   * @return DeleteDetectorRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/DeleteDetectorRecipe.ts.html |here} to see how to use DeleteDetectorRecipe API.
   */
  public async deleteDetectorRecipe(
    deleteDetectorRecipeRequest: requests.DeleteDetectorRecipeRequest
  ): Promise<responses.DeleteDetectorRecipeResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#deleteDetectorRecipe.");
    const pathParams = {
      "{detectorRecipeId}": deleteDetectorRecipeRequest.detectorRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDetectorRecipeRequest.ifMatch,
      "opc-request-id": deleteDetectorRecipeRequest.opcRequestId,
      "opc-retry-token": deleteDetectorRecipeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDetectorRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectorRecipes/{detectorRecipeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDetectorRecipeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a managed list identified by managedListId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteManagedListRequest
   * @return DeleteManagedListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/DeleteManagedList.ts.html |here} to see how to use DeleteManagedList API.
   */
  public async deleteManagedList(
    deleteManagedListRequest: requests.DeleteManagedListRequest
  ): Promise<responses.DeleteManagedListResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#deleteManagedList.");
    const pathParams = {
      "{managedListId}": deleteManagedListRequest.managedListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteManagedListRequest.ifMatch,
      "opc-request-id": deleteManagedListRequest.opcRequestId,
      "opc-retry-token": deleteManagedListRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteManagedListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedLists/{managedListId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteManagedListResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the ResponderRecipe resource by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteResponderRecipeRequest
   * @return DeleteResponderRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/DeleteResponderRecipe.ts.html |here} to see how to use DeleteResponderRecipe API.
   */
  public async deleteResponderRecipe(
    deleteResponderRecipeRequest: requests.DeleteResponderRecipeRequest
  ): Promise<responses.DeleteResponderRecipeResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#deleteResponderRecipe.");
    const pathParams = {
      "{responderRecipeId}": deleteResponderRecipeRequest.responderRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteResponderRecipeRequest.ifMatch,
      "opc-request-id": deleteResponderRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteResponderRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderRecipes/{responderRecipeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteResponderRecipeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Target identified by targetId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteTargetRequest
   * @return DeleteTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/DeleteTarget.ts.html |here} to see how to use DeleteTarget API.
   */
  public async deleteTarget(
    deleteTargetRequest: requests.DeleteTargetRequest
  ): Promise<responses.DeleteTargetResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#deleteTarget.");
    const pathParams = {
      "{targetId}": deleteTargetRequest.targetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTargetRequest.ifMatch,
      "opc-request-id": deleteTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTargetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the TargetDetectorRecipe resource by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteTargetDetectorRecipeRequest
   * @return DeleteTargetDetectorRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/DeleteTargetDetectorRecipe.ts.html |here} to see how to use DeleteTargetDetectorRecipe API.
   */
  public async deleteTargetDetectorRecipe(
    deleteTargetDetectorRecipeRequest: requests.DeleteTargetDetectorRecipeRequest
  ): Promise<responses.DeleteTargetDetectorRecipeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#deleteTargetDetectorRecipe.");
    const pathParams = {
      "{targetId}": deleteTargetDetectorRecipeRequest.targetId,
      "{targetDetectorRecipeId}": deleteTargetDetectorRecipeRequest.targetDetectorRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTargetDetectorRecipeRequest.ifMatch,
      "opc-request-id": deleteTargetDetectorRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTargetDetectorRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTargetDetectorRecipeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the TargetResponderRecipe resource by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteTargetResponderRecipeRequest
   * @return DeleteTargetResponderRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/DeleteTargetResponderRecipe.ts.html |here} to see how to use DeleteTargetResponderRecipe API.
   */
  public async deleteTargetResponderRecipe(
    deleteTargetResponderRecipeRequest: requests.DeleteTargetResponderRecipeRequest
  ): Promise<responses.DeleteTargetResponderRecipeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#deleteTargetResponderRecipe.");
    const pathParams = {
      "{targetId}": deleteTargetResponderRecipeRequest.targetId,
      "{targetResponderRecipeId}": deleteTargetResponderRecipeRequest.targetResponderRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTargetResponderRecipeRequest.ifMatch,
      "opc-request-id": deleteTargetResponderRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTargetResponderRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTargetResponderRecipeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Executes the responder execution. When provided, If-Match is checked against ETag values of the resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ExecuteResponderExecutionRequest
   * @return ExecuteResponderExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ExecuteResponderExecution.ts.html |here} to see how to use ExecuteResponderExecution API.
   */
  public async executeResponderExecution(
    executeResponderExecutionRequest: requests.ExecuteResponderExecutionRequest
  ): Promise<responses.ExecuteResponderExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#executeResponderExecution.");
    const pathParams = {
      "{responderExecutionId}": executeResponderExecutionRequest.responderExecutionId
    };

    const queryParams = {
      "compartmentId": executeResponderExecutionRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": executeResponderExecutionRequest.ifMatch,
      "opc-request-id": executeResponderExecutionRequest.opcRequestId,
      "opc-retry-token": executeResponderExecutionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      executeResponderExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderExecutions/{responderExecutionId}/actions/execute",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        executeResponderExecutionRequest.executeResponderExecutionDetails,
        "ExecuteResponderExecutionDetails",
        model.ExecuteResponderExecutionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ExecuteResponderExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns ConditionType with its details.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetConditionMetadataTypeRequest
   * @return GetConditionMetadataTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetConditionMetadataType.ts.html |here} to see how to use GetConditionMetadataType API.
   */
  public async getConditionMetadataType(
    getConditionMetadataTypeRequest: requests.GetConditionMetadataTypeRequest
  ): Promise<responses.GetConditionMetadataTypeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#getConditionMetadataType.");
    const pathParams = {
      "{conditionMetadataTypeId}": getConditionMetadataTypeRequest.conditionMetadataTypeId
    };

    const queryParams = {
      "serviceType": getConditionMetadataTypeRequest.serviceType,
      "resourceType": getConditionMetadataTypeRequest.resourceType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConditionMetadataTypeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConditionMetadataTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/conditionMetadataTypes/{conditionMetadataTypeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConditionMetadataTypeResponse>{},
        body: await response.json(),
        bodyKey: "conditionMetadataType",
        bodyModel: model.ConditionMetadataType,
        type: "model.ConditionMetadataType",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * GET Cloud Guard Configuration Details for a Tenancy.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetConfigurationRequest
   * @return GetConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetConfiguration.ts.html |here} to see how to use GetConfiguration API.
   */
  public async getConfiguration(
    getConfigurationRequest: requests.GetConfigurationRequest
  ): Promise<responses.GetConfigurationResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#getConfiguration.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": getConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "configuration",
        bodyModel: model.Configuration,
        type: "model.Configuration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a DataMaskRule identified by DataMaskRuleId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDataMaskRuleRequest
   * @return GetDataMaskRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetDataMaskRule.ts.html |here} to see how to use GetDataMaskRule API.
   */
  public async getDataMaskRule(
    getDataMaskRuleRequest: requests.GetDataMaskRuleRequest
  ): Promise<responses.GetDataMaskRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#getDataMaskRule.");
    const pathParams = {
      "{dataMaskRuleId}": getDataMaskRuleRequest.dataMaskRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataMaskRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDataMaskRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataMaskRules/{dataMaskRuleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataMaskRuleResponse>{},
        body: await response.json(),
        bodyKey: "dataMaskRule",
        bodyModel: model.DataMaskRule,
        type: "model.DataMaskRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a Detector identified by detectorId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDetectorRequest
   * @return GetDetectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetDetector.ts.html |here} to see how to use GetDetector API.
   */
  public async getDetector(
    getDetectorRequest: requests.GetDetectorRequest
  ): Promise<responses.GetDetectorResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#getDetector.");
    const pathParams = {
      "{detectorId}": getDetectorRequest.detectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDetectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDetectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectors/{detectorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDetectorResponse>{},
        body: await response.json(),
        bodyKey: "detector",
        bodyModel: model.Detector,
        type: "model.Detector",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a DetectorRecipe identified by detectorRecipeId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDetectorRecipeRequest
   * @return GetDetectorRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetDetectorRecipe.ts.html |here} to see how to use GetDetectorRecipe API.
   */
  public async getDetectorRecipe(
    getDetectorRecipeRequest: requests.GetDetectorRecipeRequest
  ): Promise<responses.GetDetectorRecipeResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#getDetectorRecipe.");
    const pathParams = {
      "{detectorRecipeId}": getDetectorRecipeRequest.detectorRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDetectorRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDetectorRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectorRecipes/{detectorRecipeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDetectorRecipeResponse>{},
        body: await response.json(),
        bodyKey: "detectorRecipe",
        bodyModel: model.DetectorRecipe,
        type: "model.DetectorRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get DetectorRule by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDetectorRecipeDetectorRuleRequest
   * @return GetDetectorRecipeDetectorRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetDetectorRecipeDetectorRule.ts.html |here} to see how to use GetDetectorRecipeDetectorRule API.
   */
  public async getDetectorRecipeDetectorRule(
    getDetectorRecipeDetectorRuleRequest: requests.GetDetectorRecipeDetectorRuleRequest
  ): Promise<responses.GetDetectorRecipeDetectorRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#getDetectorRecipeDetectorRule.");
    const pathParams = {
      "{detectorRecipeId}": getDetectorRecipeDetectorRuleRequest.detectorRecipeId,
      "{detectorRuleId}": getDetectorRecipeDetectorRuleRequest.detectorRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDetectorRecipeDetectorRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDetectorRecipeDetectorRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectorRecipes/{detectorRecipeId}/detectorRules/{detectorRuleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDetectorRecipeDetectorRuleResponse>{},
        body: await response.json(),
        bodyKey: "detectorRecipeDetectorRule",
        bodyModel: model.DetectorRecipeDetectorRule,
        type: "model.DetectorRecipeDetectorRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a Detector Rule identified by detectorRuleId
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDetectorRuleRequest
   * @return GetDetectorRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetDetectorRule.ts.html |here} to see how to use GetDetectorRule API.
   */
  public async getDetectorRule(
    getDetectorRuleRequest: requests.GetDetectorRuleRequest
  ): Promise<responses.GetDetectorRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#getDetectorRule.");
    const pathParams = {
      "{detectorId}": getDetectorRuleRequest.detectorId,
      "{detectorRuleId}": getDetectorRuleRequest.detectorRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDetectorRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDetectorRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectors/{detectorId}/detectorRules/{detectorRuleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDetectorRuleResponse>{},
        body: await response.json(),
        bodyKey: "detectorRule",
        bodyModel: model.DetectorRule,
        type: "model.DetectorRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a managed list identified by managedListId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetManagedListRequest
   * @return GetManagedListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetManagedList.ts.html |here} to see how to use GetManagedList API.
   */
  public async getManagedList(
    getManagedListRequest: requests.GetManagedListRequest
  ): Promise<responses.GetManagedListResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#getManagedList.");
    const pathParams = {
      "{managedListId}": getManagedListRequest.managedListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagedListRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getManagedListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedLists/{managedListId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedListResponse>{},
        body: await response.json(),
        bodyKey: "managedList",
        bodyModel: model.ManagedList,
        type: "model.ManagedList",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a Problems response
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetProblemRequest
   * @return GetProblemResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetProblem.ts.html |here} to see how to use GetProblem API.
   */
  public async getProblem(
    getProblemRequest: requests.GetProblemRequest
  ): Promise<responses.GetProblemResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#getProblem.");
    const pathParams = {
      "{problemId}": getProblemRequest.problemId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProblemRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProblemRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/{problemId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProblemResponse>{},
        body: await response.json(),
        bodyKey: "problem",
        bodyModel: model.Problem,
        type: "model.Problem",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a Responder Execution identified by responderExecutionId
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetResponderExecutionRequest
   * @return GetResponderExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetResponderExecution.ts.html |here} to see how to use GetResponderExecution API.
   */
  public async getResponderExecution(
    getResponderExecutionRequest: requests.GetResponderExecutionRequest
  ): Promise<responses.GetResponderExecutionResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#getResponderExecution.");
    const pathParams = {
      "{responderExecutionId}": getResponderExecutionRequest.responderExecutionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getResponderExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getResponderExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderExecutions/{responderExecutionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetResponderExecutionResponse>{},
        body: await response.json(),
        bodyKey: "responderExecution",
        bodyModel: model.ResponderExecution,
        type: "model.ResponderExecution",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a ResponderRecipe by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetResponderRecipeRequest
   * @return GetResponderRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetResponderRecipe.ts.html |here} to see how to use GetResponderRecipe API.
   */
  public async getResponderRecipe(
    getResponderRecipeRequest: requests.GetResponderRecipeRequest
  ): Promise<responses.GetResponderRecipeResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#getResponderRecipe.");
    const pathParams = {
      "{responderRecipeId}": getResponderRecipeRequest.responderRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getResponderRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getResponderRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderRecipes/{responderRecipeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetResponderRecipeResponse>{},
        body: await response.json(),
        bodyKey: "responderRecipe",
        bodyModel: model.ResponderRecipe,
        type: "model.ResponderRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get ResponderRule by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetResponderRecipeResponderRuleRequest
   * @return GetResponderRecipeResponderRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetResponderRecipeResponderRule.ts.html |here} to see how to use GetResponderRecipeResponderRule API.
   */
  public async getResponderRecipeResponderRule(
    getResponderRecipeResponderRuleRequest: requests.GetResponderRecipeResponderRuleRequest
  ): Promise<responses.GetResponderRecipeResponderRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#getResponderRecipeResponderRule.");
    const pathParams = {
      "{responderRecipeId}": getResponderRecipeResponderRuleRequest.responderRecipeId,
      "{responderRuleId}": getResponderRecipeResponderRuleRequest.responderRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getResponderRecipeResponderRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getResponderRecipeResponderRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderRecipes/{responderRecipeId}/responderRules/{responderRuleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetResponderRecipeResponderRuleResponse>{},
        body: await response.json(),
        bodyKey: "responderRecipeResponderRule",
        bodyModel: model.ResponderRecipeResponderRule,
        type: "model.ResponderRecipeResponderRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a ResponderRule by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetResponderRuleRequest
   * @return GetResponderRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetResponderRule.ts.html |here} to see how to use GetResponderRule API.
   */
  public async getResponderRule(
    getResponderRuleRequest: requests.GetResponderRuleRequest
  ): Promise<responses.GetResponderRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#getResponderRule.");
    const pathParams = {
      "{responderRuleId}": getResponderRuleRequest.responderRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getResponderRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getResponderRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderRules/{responderRuleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetResponderRuleResponse>{},
        body: await response.json(),
        bodyKey: "responderRule",
        bodyModel: model.ResponderRule,
        type: "model.ResponderRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a Target identified by targetId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTargetRequest
   * @return GetTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetTarget.ts.html |here} to see how to use GetTarget API.
   */
  public async getTarget(
    getTargetRequest: requests.GetTargetRequest
  ): Promise<responses.GetTargetResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#getTarget.");
    const pathParams = {
      "{targetId}": getTargetRequest.targetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTargetResponse>{},
        body: await response.json(),
        bodyKey: "target",
        bodyModel: model.Target,
        type: "model.Target",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a TargetDetectorRecipe by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTargetDetectorRecipeRequest
   * @return GetTargetDetectorRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetTargetDetectorRecipe.ts.html |here} to see how to use GetTargetDetectorRecipe API.
   */
  public async getTargetDetectorRecipe(
    getTargetDetectorRecipeRequest: requests.GetTargetDetectorRecipeRequest
  ): Promise<responses.GetTargetDetectorRecipeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#getTargetDetectorRecipe.");
    const pathParams = {
      "{targetId}": getTargetDetectorRecipeRequest.targetId,
      "{targetDetectorRecipeId}": getTargetDetectorRecipeRequest.targetDetectorRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTargetDetectorRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTargetDetectorRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTargetDetectorRecipeResponse>{},
        body: await response.json(),
        bodyKey: "targetDetectorRecipe",
        bodyModel: model.TargetDetectorRecipe,
        type: "model.TargetDetectorRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get DetectorRule by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTargetDetectorRecipeDetectorRuleRequest
   * @return GetTargetDetectorRecipeDetectorRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetTargetDetectorRecipeDetectorRule.ts.html |here} to see how to use GetTargetDetectorRecipeDetectorRule API.
   */
  public async getTargetDetectorRecipeDetectorRule(
    getTargetDetectorRecipeDetectorRuleRequest: requests.GetTargetDetectorRecipeDetectorRuleRequest
  ): Promise<responses.GetTargetDetectorRecipeDetectorRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#getTargetDetectorRecipeDetectorRule.");
    const pathParams = {
      "{targetId}": getTargetDetectorRecipeDetectorRuleRequest.targetId,
      "{targetDetectorRecipeId}": getTargetDetectorRecipeDetectorRuleRequest.targetDetectorRecipeId,
      "{detectorRuleId}": getTargetDetectorRecipeDetectorRuleRequest.detectorRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTargetDetectorRecipeDetectorRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTargetDetectorRecipeDetectorRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}/detectorRules/{detectorRuleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTargetDetectorRecipeDetectorRuleResponse>{},
        body: await response.json(),
        bodyKey: "targetDetectorRecipeDetectorRule",
        bodyModel: model.TargetDetectorRecipeDetectorRule,
        type: "model.TargetDetectorRecipeDetectorRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a TargetResponderRecipe by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTargetResponderRecipeRequest
   * @return GetTargetResponderRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetTargetResponderRecipe.ts.html |here} to see how to use GetTargetResponderRecipe API.
   */
  public async getTargetResponderRecipe(
    getTargetResponderRecipeRequest: requests.GetTargetResponderRecipeRequest
  ): Promise<responses.GetTargetResponderRecipeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#getTargetResponderRecipe.");
    const pathParams = {
      "{targetId}": getTargetResponderRecipeRequest.targetId,
      "{targetResponderRecipeId}": getTargetResponderRecipeRequest.targetResponderRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTargetResponderRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTargetResponderRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTargetResponderRecipeResponse>{},
        body: await response.json(),
        bodyKey: "targetResponderRecipe",
        bodyModel: model.TargetResponderRecipe,
        type: "model.TargetResponderRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get ResponderRule by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTargetResponderRecipeResponderRuleRequest
   * @return GetTargetResponderRecipeResponderRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/GetTargetResponderRecipeResponderRule.ts.html |here} to see how to use GetTargetResponderRecipeResponderRule API.
   */
  public async getTargetResponderRecipeResponderRule(
    getTargetResponderRecipeResponderRuleRequest: requests.GetTargetResponderRecipeResponderRuleRequest
  ): Promise<responses.GetTargetResponderRecipeResponderRuleResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CloudGuardClient#getTargetResponderRecipeResponderRule."
      );
    const pathParams = {
      "{targetId}": getTargetResponderRecipeResponderRuleRequest.targetId,
      "{targetResponderRecipeId}":
        getTargetResponderRecipeResponderRuleRequest.targetResponderRecipeId,
      "{responderRuleId}": getTargetResponderRecipeResponderRuleRequest.responderRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTargetResponderRecipeResponderRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTargetResponderRecipeResponderRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}/responderRules/{responderRuleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTargetResponderRecipeResponderRuleResponse>{},
        body: await response.json(),
        bodyKey: "targetResponderRecipeResponderRule",
        bodyModel: model.TargetResponderRecipeResponderRule,
        type: "model.TargetResponderRecipeResponderRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of condition types.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListConditionMetadataTypesRequest
   * @return ListConditionMetadataTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListConditionMetadataTypes.ts.html |here} to see how to use ListConditionMetadataTypes API.
   */
  public async listConditionMetadataTypes(
    listConditionMetadataTypesRequest: requests.ListConditionMetadataTypesRequest
  ): Promise<responses.ListConditionMetadataTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#listConditionMetadataTypes.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listConditionMetadataTypesRequest.compartmentId,
      "lifecycleState": listConditionMetadataTypesRequest.lifecycleState,
      "limit": listConditionMetadataTypesRequest.limit,
      "page": listConditionMetadataTypesRequest.page,
      "sortOrder": listConditionMetadataTypesRequest.sortOrder,
      "sortBy": listConditionMetadataTypesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listConditionMetadataTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConditionMetadataTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/conditionMetadataTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConditionMetadataTypesResponse>{},
        body: await response.json(),
        bodyKey: "conditionMetadataTypeCollection",
        bodyModel: model.ConditionMetadataTypeCollection,
        type: "model.ConditionMetadataTypeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of all Data Mask Rules in the root 'compartmentId' passed.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDataMaskRulesRequest
   * @return ListDataMaskRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListDataMaskRules.ts.html |here} to see how to use ListDataMaskRules API.
   */
  public async listDataMaskRules(
    listDataMaskRulesRequest: requests.ListDataMaskRulesRequest
  ): Promise<responses.ListDataMaskRulesResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listDataMaskRules.");
    const pathParams = {};

    const queryParams = {
      "displayName": listDataMaskRulesRequest.displayName,
      "compartmentId": listDataMaskRulesRequest.compartmentId,
      "lifecycleState": listDataMaskRulesRequest.lifecycleState,
      "accessLevel": listDataMaskRulesRequest.accessLevel,
      "limit": listDataMaskRulesRequest.limit,
      "page": listDataMaskRulesRequest.page,
      "sortOrder": listDataMaskRulesRequest.sortOrder,
      "sortBy": listDataMaskRulesRequest.sortBy,
      "dataMaskRuleStatus": listDataMaskRulesRequest.dataMaskRuleStatus,
      "targetId": listDataMaskRulesRequest.targetId,
      "iamGroupId": listDataMaskRulesRequest.iamGroupId,
      "targetType": listDataMaskRulesRequest.targetType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDataMaskRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDataMaskRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataMaskRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDataMaskRulesResponse>{},
        body: await response.json(),
        bodyKey: "dataMaskRuleCollection",
        bodyModel: model.DataMaskRuleCollection,
        type: "model.DataMaskRuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of DetectorRule associated with DetectorRecipe.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDetectorRecipeDetectorRulesRequest
   * @return ListDetectorRecipeDetectorRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListDetectorRecipeDetectorRules.ts.html |here} to see how to use ListDetectorRecipeDetectorRules API.
   */
  public async listDetectorRecipeDetectorRules(
    listDetectorRecipeDetectorRulesRequest: requests.ListDetectorRecipeDetectorRulesRequest
  ): Promise<responses.ListDetectorRecipeDetectorRulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#listDetectorRecipeDetectorRules.");
    const pathParams = {
      "{detectorRecipeId}": listDetectorRecipeDetectorRulesRequest.detectorRecipeId
    };

    const queryParams = {
      "compartmentId": listDetectorRecipeDetectorRulesRequest.compartmentId,
      "displayName": listDetectorRecipeDetectorRulesRequest.displayName,
      "lifecycleState": listDetectorRecipeDetectorRulesRequest.lifecycleState,
      "limit": listDetectorRecipeDetectorRulesRequest.limit,
      "page": listDetectorRecipeDetectorRulesRequest.page,
      "sortOrder": listDetectorRecipeDetectorRulesRequest.sortOrder,
      "sortBy": listDetectorRecipeDetectorRulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDetectorRecipeDetectorRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDetectorRecipeDetectorRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectorRecipes/{detectorRecipeId}/detectorRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDetectorRecipeDetectorRulesResponse>{},
        body: await response.json(),
        bodyKey: "detectorRecipeDetectorRuleCollection",
        bodyModel: model.DetectorRecipeDetectorRuleCollection,
        type: "model.DetectorRecipeDetectorRuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a list of all Detector Recipes in a compartment
* <p>
The ListDetectorRecipes operation returns only the detector recipes in `compartmentId` passed.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListDetectorRecipes on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDetectorRecipesRequest
     * @return ListDetectorRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListDetectorRecipes.ts.html |here} to see how to use ListDetectorRecipes API.
     */
  public async listDetectorRecipes(
    listDetectorRecipesRequest: requests.ListDetectorRecipesRequest
  ): Promise<responses.ListDetectorRecipesResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listDetectorRecipes.");
    const pathParams = {};

    const queryParams = {
      "displayName": listDetectorRecipesRequest.displayName,
      "resourceMetadataOnly": listDetectorRecipesRequest.resourceMetadataOnly,
      "compartmentId": listDetectorRecipesRequest.compartmentId,
      "lifecycleState": listDetectorRecipesRequest.lifecycleState,
      "limit": listDetectorRecipesRequest.limit,
      "page": listDetectorRecipesRequest.page,
      "compartmentIdInSubtree": listDetectorRecipesRequest.compartmentIdInSubtree,
      "accessLevel": listDetectorRecipesRequest.accessLevel,
      "sortOrder": listDetectorRecipesRequest.sortOrder,
      "sortBy": listDetectorRecipesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDetectorRecipesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDetectorRecipesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectorRecipes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDetectorRecipesResponse>{},
        body: await response.json(),
        bodyKey: "detectorRecipeCollection",
        bodyModel: model.DetectorRecipeCollection,
        type: "model.DetectorRecipeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of detector rules for the detectorId passed.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDetectorRulesRequest
   * @return ListDetectorRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListDetectorRules.ts.html |here} to see how to use ListDetectorRules API.
   */
  public async listDetectorRules(
    listDetectorRulesRequest: requests.ListDetectorRulesRequest
  ): Promise<responses.ListDetectorRulesResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listDetectorRules.");
    const pathParams = {
      "{detectorId}": listDetectorRulesRequest.detectorId
    };

    const queryParams = {
      "compartmentId": listDetectorRulesRequest.compartmentId,
      "displayName": listDetectorRulesRequest.displayName,
      "limit": listDetectorRulesRequest.limit,
      "lifecycleState": listDetectorRulesRequest.lifecycleState,
      "page": listDetectorRulesRequest.page,
      "sortOrder": listDetectorRulesRequest.sortOrder,
      "sortBy": listDetectorRulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDetectorRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDetectorRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectors/{detectorId}/detectorRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDetectorRulesResponse>{},
        body: await response.json(),
        bodyKey: "detectorRuleCollection",
        bodyModel: model.DetectorRuleCollection,
        type: "model.DetectorRuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns detector catalog - list of detectors supported by Cloud Guard
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDetectorsRequest
   * @return ListDetectorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListDetectors.ts.html |here} to see how to use ListDetectors API.
   */
  public async listDetectors(
    listDetectorsRequest: requests.ListDetectorsRequest
  ): Promise<responses.ListDetectorsResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listDetectors.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDetectorsRequest.compartmentId,
      "limit": listDetectorsRequest.limit,
      "lifecycleState": listDetectorsRequest.lifecycleState,
      "page": listDetectorsRequest.page,
      "sortOrder": listDetectorsRequest.sortOrder,
      "sortBy": listDetectorsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDetectorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDetectorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDetectorsResponse>{},
        body: await response.json(),
        bodyKey: "detectorCollection",
        bodyModel: model.DetectorCollection,
        type: "model.DetectorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Impacted Resources for a CloudGuard Problem
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListImpactedResourcesRequest
   * @return ListImpactedResourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListImpactedResources.ts.html |here} to see how to use ListImpactedResources API.
   */
  public async listImpactedResources(
    listImpactedResourcesRequest: requests.ListImpactedResourcesRequest
  ): Promise<responses.ListImpactedResourcesResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listImpactedResources.");
    const pathParams = {
      "{problemId}": listImpactedResourcesRequest.problemId
    };

    const queryParams = {
      "limit": listImpactedResourcesRequest.limit,
      "page": listImpactedResourcesRequest.page,
      "sortOrder": listImpactedResourcesRequest.sortOrder,
      "sortBy": listImpactedResourcesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listImpactedResourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listImpactedResourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/{problemId}/impactedResources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListImpactedResourcesResponse>{},
        body: await response.json(),
        bodyKey: "impactedResourceCollection",
        bodyModel: model.ImpactedResourceCollection,
        type: "model.ImpactedResourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns all ManagedList types supported by Cloud Guard
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListManagedListTypesRequest
   * @return ListManagedListTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListManagedListTypes.ts.html |here} to see how to use ListManagedListTypes API.
   */
  public async listManagedListTypes(
    listManagedListTypesRequest: requests.ListManagedListTypesRequest
  ): Promise<responses.ListManagedListTypesResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listManagedListTypes.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagedListTypesRequest.compartmentId,
      "lifecycleState": listManagedListTypesRequest.lifecycleState,
      "limit": listManagedListTypesRequest.limit,
      "page": listManagedListTypesRequest.page,
      "sortOrder": listManagedListTypesRequest.sortOrder,
      "sortBy": listManagedListTypesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedListTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedListTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedListTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedListTypesResponse>{},
        body: await response.json(),
        bodyKey: "managedListTypeCollection",
        bodyModel: model.ManagedListTypeCollection,
        type: "model.ManagedListTypeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a list of ListManagedLists.
* The ListManagedLists operation returns only the managed lists in `compartmentId` passed.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return ManagedLists in only
* those compartments for which the requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListManagedLists on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagedListsRequest
     * @return ListManagedListsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListManagedLists.ts.html |here} to see how to use ListManagedLists API.
     */
  public async listManagedLists(
    listManagedListsRequest: requests.ListManagedListsRequest
  ): Promise<responses.ListManagedListsResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listManagedLists.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagedListsRequest.compartmentId,
      "displayName": listManagedListsRequest.displayName,
      "resourceMetadataOnly": listManagedListsRequest.resourceMetadataOnly,
      "lifecycleState": listManagedListsRequest.lifecycleState,
      "listType": listManagedListsRequest.listType,
      "limit": listManagedListsRequest.limit,
      "page": listManagedListsRequest.page,
      "compartmentIdInSubtree": listManagedListsRequest.compartmentIdInSubtree,
      "accessLevel": listManagedListsRequest.accessLevel,
      "sortOrder": listManagedListsRequest.sortOrder,
      "sortBy": listManagedListsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedListsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedListsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedLists",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedListsResponse>{},
        body: await response.json(),
        bodyKey: "managedListCollection",
        bodyModel: model.ManagedListCollection,
        type: "model.ManagedListCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the list of global policy statements needed by Cloud Guard when enabling
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPoliciesRequest
   * @return ListPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListPolicies.ts.html |here} to see how to use ListPolicies API.
   */
  public async listPolicies(
    listPoliciesRequest: requests.ListPoliciesRequest
  ): Promise<responses.ListPoliciesResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listPolicies.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listPoliciesRequest.compartmentId,
      "limit": listPoliciesRequest.limit,
      "page": listPoliciesRequest.page,
      "sortOrder": listPoliciesRequest.sortOrder,
      "sortBy": listPoliciesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPoliciesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/policies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "policyCollection",
        bodyModel: model.PolicyCollection,
        type: "model.PolicyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Actions done on CloudGuard Problem
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListProblemHistoriesRequest
   * @return ListProblemHistoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListProblemHistories.ts.html |here} to see how to use ListProblemHistories API.
   */
  public async listProblemHistories(
    listProblemHistoriesRequest: requests.ListProblemHistoriesRequest
  ): Promise<responses.ListProblemHistoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listProblemHistories.");
    const pathParams = {
      "{problemId}": listProblemHistoriesRequest.problemId
    };

    const queryParams = {
      "compartmentId": listProblemHistoriesRequest.compartmentId,
      "limit": listProblemHistoriesRequest.limit,
      "page": listProblemHistoriesRequest.page,
      "sortOrder": listProblemHistoriesRequest.sortOrder,
      "sortBy": listProblemHistoriesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProblemHistoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProblemHistoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/{problemId}/histories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProblemHistoriesResponse>{},
        body: await response.json(),
        bodyKey: "problemHistoryCollection",
        bodyModel: model.ProblemHistoryCollection,
        type: "model.ProblemHistoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a list of all Problems identified by the Cloud Guard
* <p>
The ListProblems operation returns only the problems in `compartmentId` passed.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListProblems on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListProblemsRequest
     * @return ListProblemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListProblems.ts.html |here} to see how to use ListProblems API.
     */
  public async listProblems(
    listProblemsRequest: requests.ListProblemsRequest
  ): Promise<responses.ListProblemsResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listProblems.");
    const pathParams = {};

    const queryParams = {
      "timeLastDetectedGreaterThanOrEqualTo":
        listProblemsRequest.timeLastDetectedGreaterThanOrEqualTo,
      "timeLastDetectedLessThanOrEqualTo": listProblemsRequest.timeLastDetectedLessThanOrEqualTo,
      "timeFirstDetectedGreaterThanOrEqualTo":
        listProblemsRequest.timeFirstDetectedGreaterThanOrEqualTo,
      "timeFirstDetectedLessThanOrEqualTo": listProblemsRequest.timeFirstDetectedLessThanOrEqualTo,
      "lifecycleDetail": listProblemsRequest.lifecycleDetail,
      "lifecycleState": listProblemsRequest.lifecycleState,
      "region": listProblemsRequest.region,
      "compartmentId": listProblemsRequest.compartmentId,
      "riskLevel": listProblemsRequest.riskLevel,
      "resourceType": listProblemsRequest.resourceType,
      "city": listProblemsRequest.city,
      "state": listProblemsRequest.state,
      "country": listProblemsRequest.country,
      "label": listProblemsRequest.label,
      "detectorRuleIdList": listProblemsRequest.detectorRuleIdList,
      "detectorType": listProblemsRequest.detectorType,
      "targetId": listProblemsRequest.targetId,
      "compartmentIdInSubtree": listProblemsRequest.compartmentIdInSubtree,
      "accessLevel": listProblemsRequest.accessLevel,
      "resourceId": listProblemsRequest.resourceId,
      "limit": listProblemsRequest.limit,
      "page": listProblemsRequest.page,
      "sortOrder": listProblemsRequest.sortOrder,
      "sortBy": listProblemsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProblemsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProblemsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProblemsResponse>{},
        body: await response.json(),
        bodyKey: "problemCollection",
        bodyModel: model.ProblemCollection,
        type: "model.ProblemCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of all Recommendations.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListRecommendationsRequest
   * @return ListRecommendationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListRecommendations.ts.html |here} to see how to use ListRecommendations API.
   */
  public async listRecommendations(
    listRecommendationsRequest: requests.ListRecommendationsRequest
  ): Promise<responses.ListRecommendationsResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listRecommendations.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRecommendationsRequest.compartmentId,
      "sortOrder": listRecommendationsRequest.sortOrder,
      "sortBy": listRecommendationsRequest.sortBy,
      "targetId": listRecommendationsRequest.targetId,
      "compartmentIdInSubtree": listRecommendationsRequest.compartmentIdInSubtree,
      "accessLevel": listRecommendationsRequest.accessLevel,
      "lifecycleState": listRecommendationsRequest.lifecycleState,
      "lifecycleDetail": listRecommendationsRequest.lifecycleDetail,
      "limit": listRecommendationsRequest.limit,
      "page": listRecommendationsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRecommendationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRecommendationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recommendations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRecommendationsResponse>{},
        body: await response.json(),
        bodyKey: "recommendationSummaryCollection",
        bodyModel: model.RecommendationSummaryCollection,
        type: "model.RecommendationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of resource types.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListResourceTypesRequest
   * @return ListResourceTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListResourceTypes.ts.html |here} to see how to use ListResourceTypes API.
   */
  public async listResourceTypes(
    listResourceTypesRequest: requests.ListResourceTypesRequest
  ): Promise<responses.ListResourceTypesResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listResourceTypes.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listResourceTypesRequest.compartmentId,
      "lifecycleState": listResourceTypesRequest.lifecycleState,
      "limit": listResourceTypesRequest.limit,
      "page": listResourceTypesRequest.page,
      "sortOrder": listResourceTypesRequest.sortOrder,
      "sortBy": listResourceTypesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResourceTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResourceTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResourceTypesResponse>{},
        body: await response.json(),
        bodyKey: "resourceTypeCollection",
        bodyModel: model.ResourceTypeCollection,
        type: "model.ResourceTypeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Responder activities done on CloudGuard Problem
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListResponderActivitiesRequest
   * @return ListResponderActivitiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListResponderActivities.ts.html |here} to see how to use ListResponderActivities API.
   */
  public async listResponderActivities(
    listResponderActivitiesRequest: requests.ListResponderActivitiesRequest
  ): Promise<responses.ListResponderActivitiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#listResponderActivities.");
    const pathParams = {
      "{problemId}": listResponderActivitiesRequest.problemId
    };

    const queryParams = {
      "limit": listResponderActivitiesRequest.limit,
      "page": listResponderActivitiesRequest.page,
      "sortOrder": listResponderActivitiesRequest.sortOrder,
      "sortBy": listResponderActivitiesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResponderActivitiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResponderActivitiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/{problemId}/responderActivities",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResponderActivitiesResponse>{},
        body: await response.json(),
        bodyKey: "responderActivityCollection",
        bodyModel: model.ResponderActivityCollection,
        type: "model.ResponderActivityCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Responder Executions. A Responder Execution is an entity that tracks the collective execution of multiple Responder Rule Executions for a given Problem.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListResponderExecutionsRequest
   * @return ListResponderExecutionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListResponderExecutions.ts.html |here} to see how to use ListResponderExecutions API.
   */
  public async listResponderExecutions(
    listResponderExecutionsRequest: requests.ListResponderExecutionsRequest
  ): Promise<responses.ListResponderExecutionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#listResponderExecutions.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listResponderExecutionsRequest.compartmentId,
      "compartmentIdInSubtree": listResponderExecutionsRequest.compartmentIdInSubtree,
      "accessLevel": listResponderExecutionsRequest.accessLevel,
      "responderRuleIds": listResponderExecutionsRequest.responderRuleIds,
      "timeCreatedGreaterThanOrEqualTo":
        listResponderExecutionsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThanOrEqualTo": listResponderExecutionsRequest.timeCreatedLessThanOrEqualTo,
      "timeCompletedGreaterThanOrEqualTo":
        listResponderExecutionsRequest.timeCompletedGreaterThanOrEqualTo,
      "timeCompletedLessThanOrEqualTo":
        listResponderExecutionsRequest.timeCompletedLessThanOrEqualTo,
      "targetId": listResponderExecutionsRequest.targetId,
      "resourceType": listResponderExecutionsRequest.resourceType,
      "responderType": listResponderExecutionsRequest.responderType,
      "responderExecutionStatus": listResponderExecutionsRequest.responderExecutionStatus,
      "responderExecutionMode": listResponderExecutionsRequest.responderExecutionMode,
      "limit": listResponderExecutionsRequest.limit,
      "page": listResponderExecutionsRequest.page,
      "sortOrder": listResponderExecutionsRequest.sortOrder,
      "sortBy": listResponderExecutionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResponderExecutionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResponderExecutionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderExecutions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResponderExecutionsResponse>{},
        body: await response.json(),
        bodyKey: "responderExecutionCollection",
        bodyModel: model.ResponderExecutionCollection,
        type: "model.ResponderExecutionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of ResponderRule associated with ResponderRecipe.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListResponderRecipeResponderRulesRequest
   * @return ListResponderRecipeResponderRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListResponderRecipeResponderRules.ts.html |here} to see how to use ListResponderRecipeResponderRules API.
   */
  public async listResponderRecipeResponderRules(
    listResponderRecipeResponderRulesRequest: requests.ListResponderRecipeResponderRulesRequest
  ): Promise<responses.ListResponderRecipeResponderRulesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#listResponderRecipeResponderRules.");
    const pathParams = {
      "{responderRecipeId}": listResponderRecipeResponderRulesRequest.responderRecipeId
    };

    const queryParams = {
      "compartmentId": listResponderRecipeResponderRulesRequest.compartmentId,
      "displayName": listResponderRecipeResponderRulesRequest.displayName,
      "lifecycleState": listResponderRecipeResponderRulesRequest.lifecycleState,
      "limit": listResponderRecipeResponderRulesRequest.limit,
      "page": listResponderRecipeResponderRulesRequest.page,
      "sortOrder": listResponderRecipeResponderRulesRequest.sortOrder,
      "sortBy": listResponderRecipeResponderRulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResponderRecipeResponderRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResponderRecipeResponderRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderRecipes/{responderRecipeId}/responderRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResponderRecipeResponderRulesResponse>{},
        body: await response.json(),
        bodyKey: "responderRecipeResponderRuleCollection",
        bodyModel: model.ResponderRecipeResponderRuleCollection,
        type: "model.ResponderRecipeResponderRuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a list of all ResponderRecipes in a compartment
* The ListResponderRecipe operation returns only the targets in `compartmentId` passed.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListResponderRecipe on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListResponderRecipesRequest
     * @return ListResponderRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListResponderRecipes.ts.html |here} to see how to use ListResponderRecipes API.
     */
  public async listResponderRecipes(
    listResponderRecipesRequest: requests.ListResponderRecipesRequest
  ): Promise<responses.ListResponderRecipesResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listResponderRecipes.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listResponderRecipesRequest.compartmentId,
      "resourceMetadataOnly": listResponderRecipesRequest.resourceMetadataOnly,
      "displayName": listResponderRecipesRequest.displayName,
      "lifecycleState": listResponderRecipesRequest.lifecycleState,
      "limit": listResponderRecipesRequest.limit,
      "page": listResponderRecipesRequest.page,
      "compartmentIdInSubtree": listResponderRecipesRequest.compartmentIdInSubtree,
      "accessLevel": listResponderRecipesRequest.accessLevel,
      "sortOrder": listResponderRecipesRequest.sortOrder,
      "sortBy": listResponderRecipesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResponderRecipesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResponderRecipesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderRecipes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResponderRecipesResponse>{},
        body: await response.json(),
        bodyKey: "responderRecipeCollection",
        bodyModel: model.ResponderRecipeCollection,
        type: "model.ResponderRecipeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of ResponderRule.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListResponderRulesRequest
   * @return ListResponderRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListResponderRules.ts.html |here} to see how to use ListResponderRules API.
   */
  public async listResponderRules(
    listResponderRulesRequest: requests.ListResponderRulesRequest
  ): Promise<responses.ListResponderRulesResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listResponderRules.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listResponderRulesRequest.compartmentId,
      "displayName": listResponderRulesRequest.displayName,
      "lifecycleState": listResponderRulesRequest.lifecycleState,
      "limit": listResponderRulesRequest.limit,
      "page": listResponderRulesRequest.page,
      "sortOrder": listResponderRulesRequest.sortOrder,
      "sortBy": listResponderRulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResponderRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResponderRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResponderRulesResponse>{},
        body: await response.json(),
        bodyKey: "responderRuleCollection",
        bodyModel: model.ResponderRuleCollection,
        type: "model.ResponderRuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of DetectorRule associated with DetectorRecipe within a Target.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTargetDetectorRecipeDetectorRulesRequest
   * @return ListTargetDetectorRecipeDetectorRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListTargetDetectorRecipeDetectorRules.ts.html |here} to see how to use ListTargetDetectorRecipeDetectorRules API.
   */
  public async listTargetDetectorRecipeDetectorRules(
    listTargetDetectorRecipeDetectorRulesRequest: requests.ListTargetDetectorRecipeDetectorRulesRequest
  ): Promise<responses.ListTargetDetectorRecipeDetectorRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CloudGuardClient#listTargetDetectorRecipeDetectorRules."
      );
    const pathParams = {
      "{targetId}": listTargetDetectorRecipeDetectorRulesRequest.targetId,
      "{targetDetectorRecipeId}":
        listTargetDetectorRecipeDetectorRulesRequest.targetDetectorRecipeId
    };

    const queryParams = {
      "compartmentId": listTargetDetectorRecipeDetectorRulesRequest.compartmentId,
      "displayName": listTargetDetectorRecipeDetectorRulesRequest.displayName,
      "lifecycleState": listTargetDetectorRecipeDetectorRulesRequest.lifecycleState,
      "limit": listTargetDetectorRecipeDetectorRulesRequest.limit,
      "page": listTargetDetectorRecipeDetectorRulesRequest.page,
      "sortOrder": listTargetDetectorRecipeDetectorRulesRequest.sortOrder,
      "sortBy": listTargetDetectorRecipeDetectorRulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTargetDetectorRecipeDetectorRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTargetDetectorRecipeDetectorRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}/detectorRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTargetDetectorRecipeDetectorRulesResponse>{},
        body: await response.json(),
        bodyKey: "targetDetectorRecipeDetectorRuleCollection",
        bodyModel: model.TargetDetectorRecipeDetectorRuleCollection,
        type: "model.TargetDetectorRecipeDetectorRuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of all detector recipes associated with the target identified by targetId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTargetDetectorRecipesRequest
   * @return ListTargetDetectorRecipesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListTargetDetectorRecipes.ts.html |here} to see how to use ListTargetDetectorRecipes API.
   */
  public async listTargetDetectorRecipes(
    listTargetDetectorRecipesRequest: requests.ListTargetDetectorRecipesRequest
  ): Promise<responses.ListTargetDetectorRecipesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#listTargetDetectorRecipes.");
    const pathParams = {
      "{targetId}": listTargetDetectorRecipesRequest.targetId
    };

    const queryParams = {
      "displayName": listTargetDetectorRecipesRequest.displayName,
      "compartmentId": listTargetDetectorRecipesRequest.compartmentId,
      "lifecycleState": listTargetDetectorRecipesRequest.lifecycleState,
      "limit": listTargetDetectorRecipesRequest.limit,
      "page": listTargetDetectorRecipesRequest.page,
      "sortOrder": listTargetDetectorRecipesRequest.sortOrder,
      "sortBy": listTargetDetectorRecipesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTargetDetectorRecipesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTargetDetectorRecipesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetDetectorRecipes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTargetDetectorRecipesResponse>{},
        body: await response.json(),
        bodyKey: "targetDetectorRecipeCollection",
        bodyModel: model.TargetDetectorRecipeCollection,
        type: "model.TargetDetectorRecipeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of ResponderRule associated with ResponderRecipe within a Target.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTargetResponderRecipeResponderRulesRequest
   * @return ListTargetResponderRecipeResponderRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListTargetResponderRecipeResponderRules.ts.html |here} to see how to use ListTargetResponderRecipeResponderRules API.
   */
  public async listTargetResponderRecipeResponderRules(
    listTargetResponderRecipeResponderRulesRequest: requests.ListTargetResponderRecipeResponderRulesRequest
  ): Promise<responses.ListTargetResponderRecipeResponderRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CloudGuardClient#listTargetResponderRecipeResponderRules."
      );
    const pathParams = {
      "{targetId}": listTargetResponderRecipeResponderRulesRequest.targetId,
      "{targetResponderRecipeId}":
        listTargetResponderRecipeResponderRulesRequest.targetResponderRecipeId
    };

    const queryParams = {
      "compartmentId": listTargetResponderRecipeResponderRulesRequest.compartmentId,
      "displayName": listTargetResponderRecipeResponderRulesRequest.displayName,
      "lifecycleState": listTargetResponderRecipeResponderRulesRequest.lifecycleState,
      "limit": listTargetResponderRecipeResponderRulesRequest.limit,
      "page": listTargetResponderRecipeResponderRulesRequest.page,
      "sortOrder": listTargetResponderRecipeResponderRulesRequest.sortOrder,
      "sortBy": listTargetResponderRecipeResponderRulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTargetResponderRecipeResponderRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTargetResponderRecipeResponderRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}/responderRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTargetResponderRecipeResponderRulesResponse>{},
        body: await response.json(),
        bodyKey: "targetResponderRecipeResponderRuleCollection",
        bodyModel: model.TargetResponderRecipeResponderRuleCollection,
        type: "model.TargetResponderRecipeResponderRuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of all responder recipes associated with the target identified by targetId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTargetResponderRecipesRequest
   * @return ListTargetResponderRecipesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListTargetResponderRecipes.ts.html |here} to see how to use ListTargetResponderRecipes API.
   */
  public async listTargetResponderRecipes(
    listTargetResponderRecipesRequest: requests.ListTargetResponderRecipesRequest
  ): Promise<responses.ListTargetResponderRecipesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#listTargetResponderRecipes.");
    const pathParams = {
      "{targetId}": listTargetResponderRecipesRequest.targetId
    };

    const queryParams = {
      "displayName": listTargetResponderRecipesRequest.displayName,
      "compartmentId": listTargetResponderRecipesRequest.compartmentId,
      "lifecycleState": listTargetResponderRecipesRequest.lifecycleState,
      "limit": listTargetResponderRecipesRequest.limit,
      "page": listTargetResponderRecipesRequest.page,
      "sortOrder": listTargetResponderRecipesRequest.sortOrder,
      "sortBy": listTargetResponderRecipesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTargetResponderRecipesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTargetResponderRecipesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetResponderRecipes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTargetResponderRecipesResponse>{},
        body: await response.json(),
        bodyKey: "targetResponderRecipeCollection",
        bodyModel: model.TargetResponderRecipeCollection,
        type: "model.TargetResponderRecipeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a list of all Targets in a compartment
* The ListTargets operation returns only the targets in `compartmentId` passed.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListTargets on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListTargetsRequest
     * @return ListTargetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListTargets.ts.html |here} to see how to use ListTargets API.
     */
  public async listTargets(
    listTargetsRequest: requests.ListTargetsRequest
  ): Promise<responses.ListTargetsResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#listTargets.");
    const pathParams = {};

    const queryParams = {
      "displayName": listTargetsRequest.displayName,
      "compartmentId": listTargetsRequest.compartmentId,
      "lifecycleState": listTargetsRequest.lifecycleState,
      "compartmentIdInSubtree": listTargetsRequest.compartmentIdInSubtree,
      "accessLevel": listTargetsRequest.accessLevel,
      "limit": listTargetsRequest.limit,
      "page": listTargetsRequest.page,
      "sortOrder": listTargetsRequest.sortOrder,
      "sortBy": listTargetsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTargetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTargetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTargetsResponse>{},
        body: await response.json(),
        bodyKey: "targetCollection",
        bodyModel: model.TargetCollection,
        type: "model.TargetCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Examines the number of problems related to the resource and the relative severity of those problems.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestRiskScoresRequest
   * @return RequestRiskScoresResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/RequestRiskScores.ts.html |here} to see how to use RequestRiskScores API.
   */
  public async requestRiskScores(
    requestRiskScoresRequest: requests.RequestRiskScoresRequest
  ): Promise<responses.RequestRiskScoresResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#requestRiskScores.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": requestRiskScoresRequest.compartmentId,
      "limit": requestRiskScoresRequest.limit,
      "page": requestRiskScoresRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestRiskScoresRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestRiskScoresRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/riskScores",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestRiskScoresResponse>{},
        body: await response.json(),
        bodyKey: "riskScoreAggregationCollection",
        bodyModel: model.RiskScoreAggregationCollection,
        type: "model.RiskScoreAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Measures the number of resources examined across all regions and compares it with the
   * number of problems detected, for a given time period.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestSecurityScoreSummarizedTrendRequest
   * @return RequestSecurityScoreSummarizedTrendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/RequestSecurityScoreSummarizedTrend.ts.html |here} to see how to use RequestSecurityScoreSummarizedTrend API.
   */
  public async requestSecurityScoreSummarizedTrend(
    requestSecurityScoreSummarizedTrendRequest: requests.RequestSecurityScoreSummarizedTrendRequest
  ): Promise<responses.RequestSecurityScoreSummarizedTrendResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#requestSecurityScoreSummarizedTrend.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": requestSecurityScoreSummarizedTrendRequest.compartmentId,
      "timeScoreComputedGreaterThanOrEqualTo":
        requestSecurityScoreSummarizedTrendRequest.timeScoreComputedGreaterThanOrEqualTo,
      "timeScoreComputedLessThanOrEqualTo":
        requestSecurityScoreSummarizedTrendRequest.timeScoreComputedLessThanOrEqualTo,
      "limit": requestSecurityScoreSummarizedTrendRequest.limit,
      "page": requestSecurityScoreSummarizedTrendRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSecurityScoreSummarizedTrendRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSecurityScoreSummarizedTrendRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityScores/actions/summarizeTrend",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSecurityScoreSummarizedTrendResponse>{},
        body: await response.json(),
        bodyKey: "securityScoreTrendAggregationCollection",
        bodyModel: model.SecurityScoreTrendAggregationCollection,
        type: "model.SecurityScoreTrendAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Measures the number of resources examined across all regions and compares it with the number of problems detected.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestSecurityScoresRequest
   * @return RequestSecurityScoresResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/RequestSecurityScores.ts.html |here} to see how to use RequestSecurityScores API.
   */
  public async requestSecurityScores(
    requestSecurityScoresRequest: requests.RequestSecurityScoresRequest
  ): Promise<responses.RequestSecurityScoresResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#requestSecurityScores.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": requestSecurityScoresRequest.compartmentId,
      "limit": requestSecurityScoresRequest.limit,
      "page": requestSecurityScoresRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSecurityScoresRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSecurityScoresRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityScores",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSecurityScoresResponse>{},
        body: await response.json(),
        bodyKey: "securityScoreAggregationCollection",
        bodyModel: model.SecurityScoreAggregationCollection,
        type: "model.SecurityScoreAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns the summary of Activity type problems identified by cloud guard, for a given set of dimensions.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* <p>
The compartmentId to be passed with `accessLevel` and `compartmentIdInSubtree` params has to be the root
* compartment id (tenant-id) only.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSummarizedActivityProblemsRequest
     * @return RequestSummarizedActivityProblemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/RequestSummarizedActivityProblems.ts.html |here} to see how to use RequestSummarizedActivityProblems API.
     */
  public async requestSummarizedActivityProblems(
    requestSummarizedActivityProblemsRequest: requests.RequestSummarizedActivityProblemsRequest
  ): Promise<responses.RequestSummarizedActivityProblemsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#requestSummarizedActivityProblems.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": requestSummarizedActivityProblemsRequest.compartmentId,
      "compartmentIdInSubtree": requestSummarizedActivityProblemsRequest.compartmentIdInSubtree,
      "accessLevel": requestSummarizedActivityProblemsRequest.accessLevel,
      "limit": requestSummarizedActivityProblemsRequest.limit,
      "includeUnknownLocations": requestSummarizedActivityProblemsRequest.includeUnknownLocations,
      "page": requestSummarizedActivityProblemsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSummarizedActivityProblemsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSummarizedActivityProblemsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/actions/summarizeActivityProblems",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSummarizedActivityProblemsResponse>{},
        body: await response.json(),
        bodyKey: "activityProblemAggregationCollection",
        bodyModel: model.ActivityProblemAggregationCollection,
        type: "model.ActivityProblemAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns the number of problems identified by cloud guard, for a given set of dimensions.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSummarizedProblemsRequest
     * @return RequestSummarizedProblemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/RequestSummarizedProblems.ts.html |here} to see how to use RequestSummarizedProblems API.
     */
  public async requestSummarizedProblems(
    requestSummarizedProblemsRequest: requests.RequestSummarizedProblemsRequest
  ): Promise<responses.RequestSummarizedProblemsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#requestSummarizedProblems.");
    const pathParams = {};

    const queryParams = {
      "listDimensions": requestSummarizedProblemsRequest.listDimensions,
      "compartmentId": requestSummarizedProblemsRequest.compartmentId,
      "compartmentIdInSubtree": requestSummarizedProblemsRequest.compartmentIdInSubtree,
      "accessLevel": requestSummarizedProblemsRequest.accessLevel,
      "limit": requestSummarizedProblemsRequest.limit,
      "page": requestSummarizedProblemsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSummarizedProblemsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSummarizedProblemsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/actions/summarize",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSummarizedProblemsResponse>{},
        body: await response.json(),
        bodyKey: "problemAggregationCollection",
        bodyModel: model.ProblemAggregationCollection,
        type: "model.ProblemAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns the number of Responder Executions, for a given set of dimensions.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSummarizedResponderExecutionsRequest
     * @return RequestSummarizedResponderExecutionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/RequestSummarizedResponderExecutions.ts.html |here} to see how to use RequestSummarizedResponderExecutions API.
     */
  public async requestSummarizedResponderExecutions(
    requestSummarizedResponderExecutionsRequest: requests.RequestSummarizedResponderExecutionsRequest
  ): Promise<responses.RequestSummarizedResponderExecutionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#requestSummarizedResponderExecutions.");
    const pathParams = {};

    const queryParams = {
      "responderExecutionsDimensions":
        requestSummarizedResponderExecutionsRequest.responderExecutionsDimensions,
      "responderTypeFilter": requestSummarizedResponderExecutionsRequest.responderTypeFilter,
      "responderExecutionStatusFilter":
        requestSummarizedResponderExecutionsRequest.responderExecutionStatusFilter,
      "compartmentId": requestSummarizedResponderExecutionsRequest.compartmentId,
      "compartmentIdInSubtree": requestSummarizedResponderExecutionsRequest.compartmentIdInSubtree,
      "accessLevel": requestSummarizedResponderExecutionsRequest.accessLevel,
      "limit": requestSummarizedResponderExecutionsRequest.limit,
      "page": requestSummarizedResponderExecutionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSummarizedResponderExecutionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSummarizedResponderExecutionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderExecutions/actions/summarize",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSummarizedResponderExecutionsResponse>{},
        body: await response.json(),
        bodyKey: "responderExecutionAggregationCollection",
        bodyModel: model.ResponderExecutionAggregationCollection,
        type: "model.ResponderExecutionAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * DEPRECATED
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestSummarizedRiskScoresRequest
   * @return RequestSummarizedRiskScoresResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/RequestSummarizedRiskScores.ts.html |here} to see how to use RequestSummarizedRiskScores API.
   */
  public async requestSummarizedRiskScores(
    requestSummarizedRiskScoresRequest: requests.RequestSummarizedRiskScoresRequest
  ): Promise<responses.RequestSummarizedRiskScoresResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#requestSummarizedRiskScores.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": requestSummarizedRiskScoresRequest.compartmentId,
      "limit": requestSummarizedRiskScoresRequest.limit,
      "page": requestSummarizedRiskScoresRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSummarizedRiskScoresRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSummarizedRiskScoresRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/actions/summarizeRiskScore",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSummarizedRiskScoresResponse>{},
        body: await response.json(),
        bodyKey: "riskScoreAggregationCollection",
        bodyModel: model.RiskScoreAggregationCollection,
        type: "model.RiskScoreAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * DEPRECATED
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestSummarizedSecurityScoresRequest
   * @return RequestSummarizedSecurityScoresResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/RequestSummarizedSecurityScores.ts.html |here} to see how to use RequestSummarizedSecurityScores API.
   */
  public async requestSummarizedSecurityScores(
    requestSummarizedSecurityScoresRequest: requests.RequestSummarizedSecurityScoresRequest
  ): Promise<responses.RequestSummarizedSecurityScoresResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#requestSummarizedSecurityScores.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": requestSummarizedSecurityScoresRequest.compartmentId,
      "limit": requestSummarizedSecurityScoresRequest.limit,
      "page": requestSummarizedSecurityScoresRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSummarizedSecurityScoresRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSummarizedSecurityScoresRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/actions/summarizeSecurityScore",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSummarizedSecurityScoresResponse>{},
        body: await response.json(),
        bodyKey: "securityScoreAggregationCollection",
        bodyModel: model.SecurityScoreAggregationCollection,
        type: "model.SecurityScoreAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns the number of problems identified by cloud guard, for a given time period.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSummarizedTrendProblemsRequest
     * @return RequestSummarizedTrendProblemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/RequestSummarizedTrendProblems.ts.html |here} to see how to use RequestSummarizedTrendProblems API.
     */
  public async requestSummarizedTrendProblems(
    requestSummarizedTrendProblemsRequest: requests.RequestSummarizedTrendProblemsRequest
  ): Promise<responses.RequestSummarizedTrendProblemsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#requestSummarizedTrendProblems.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": requestSummarizedTrendProblemsRequest.compartmentId,
      "timeFirstDetectedGreaterThanOrEqualTo":
        requestSummarizedTrendProblemsRequest.timeFirstDetectedGreaterThanOrEqualTo,
      "timeFirstDetectedLessThanOrEqualTo":
        requestSummarizedTrendProblemsRequest.timeFirstDetectedLessThanOrEqualTo,
      "compartmentIdInSubtree": requestSummarizedTrendProblemsRequest.compartmentIdInSubtree,
      "accessLevel": requestSummarizedTrendProblemsRequest.accessLevel,
      "limit": requestSummarizedTrendProblemsRequest.limit,
      "page": requestSummarizedTrendProblemsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSummarizedTrendProblemsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSummarizedTrendProblemsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/actions/summarizeTrend",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSummarizedTrendProblemsResponse>{},
        body: await response.json(),
        bodyKey: "problemTrendAggregationCollection",
        bodyModel: model.ProblemTrendAggregationCollection,
        type: "model.ProblemTrendAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns the number of remediations performed by Responders, for a given time period.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RequestSummarizedTrendResponderExecutionsRequest
     * @return RequestSummarizedTrendResponderExecutionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/RequestSummarizedTrendResponderExecutions.ts.html |here} to see how to use RequestSummarizedTrendResponderExecutions API.
     */
  public async requestSummarizedTrendResponderExecutions(
    requestSummarizedTrendResponderExecutionsRequest: requests.RequestSummarizedTrendResponderExecutionsRequest
  ): Promise<responses.RequestSummarizedTrendResponderExecutionsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CloudGuardClient#requestSummarizedTrendResponderExecutions."
      );
    const pathParams = {};

    const queryParams = {
      "timeCompletedGreaterThanOrEqualTo":
        requestSummarizedTrendResponderExecutionsRequest.timeCompletedGreaterThanOrEqualTo,
      "timeCompletedLessThanOrEqualTo":
        requestSummarizedTrendResponderExecutionsRequest.timeCompletedLessThanOrEqualTo,
      "compartmentId": requestSummarizedTrendResponderExecutionsRequest.compartmentId,
      "compartmentIdInSubtree":
        requestSummarizedTrendResponderExecutionsRequest.compartmentIdInSubtree,
      "accessLevel": requestSummarizedTrendResponderExecutionsRequest.accessLevel,
      "limit": requestSummarizedTrendResponderExecutionsRequest.limit,
      "page": requestSummarizedTrendResponderExecutionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSummarizedTrendResponderExecutionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSummarizedTrendResponderExecutionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderExecutions/actions/summarizeTrend",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSummarizedTrendResponderExecutionsResponse>{},
        body: await response.json(),
        bodyKey: "responderExecutionTrendAggregationCollection",
        bodyModel: model.ResponderExecutionTrendAggregationCollection,
        type: "model.ResponderExecutionTrendAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * DEPRECATED
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RequestSummarizedTrendSecurityScoresRequest
   * @return RequestSummarizedTrendSecurityScoresResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/RequestSummarizedTrendSecurityScores.ts.html |here} to see how to use RequestSummarizedTrendSecurityScores API.
   */
  public async requestSummarizedTrendSecurityScores(
    requestSummarizedTrendSecurityScoresRequest: requests.RequestSummarizedTrendSecurityScoresRequest
  ): Promise<responses.RequestSummarizedTrendSecurityScoresResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#requestSummarizedTrendSecurityScores.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": requestSummarizedTrendSecurityScoresRequest.compartmentId,
      "timeScoreComputedGreaterThanOrEqualTo":
        requestSummarizedTrendSecurityScoresRequest.timeScoreComputedGreaterThanOrEqualTo,
      "timeScoreComputedLessThanOrEqualTo":
        requestSummarizedTrendSecurityScoresRequest.timeScoreComputedLessThanOrEqualTo,
      "limit": requestSummarizedTrendSecurityScoresRequest.limit,
      "page": requestSummarizedTrendSecurityScoresRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": requestSummarizedTrendSecurityScoresRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      requestSummarizedTrendSecurityScoresRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/actions/summarizeSecurityScoreTrend",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RequestSummarizedTrendSecurityScoresResponse>{},
        body: await response.json(),
        bodyKey: "securityScoreTrendAggregationCollection",
        bodyModel: model.SecurityScoreTrendAggregationCollection,
        type: "model.SecurityScoreTrendAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Skips the execution for a bulk of responder executions
   * The operation is atomic in nature
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SkipBulkResponderExecutionRequest
   * @return SkipBulkResponderExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/SkipBulkResponderExecution.ts.html |here} to see how to use SkipBulkResponderExecution API.
   */
  public async skipBulkResponderExecution(
    skipBulkResponderExecutionRequest: requests.SkipBulkResponderExecutionRequest
  ): Promise<responses.SkipBulkResponderExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#skipBulkResponderExecution.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": skipBulkResponderExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      skipBulkResponderExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderExecutions/actions/bulkSkip",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        skipBulkResponderExecutionRequest.skipBulkResponderExecutionDetails,
        "SkipBulkResponderExecutionDetails",
        model.SkipBulkResponderExecutionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SkipBulkResponderExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Skips the execution of the responder execution. When provided, If-Match is checked against ETag values of the resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SkipResponderExecutionRequest
   * @return SkipResponderExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/SkipResponderExecution.ts.html |here} to see how to use SkipResponderExecution API.
   */
  public async skipResponderExecution(
    skipResponderExecutionRequest: requests.SkipResponderExecutionRequest
  ): Promise<responses.SkipResponderExecutionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#skipResponderExecution.");
    const pathParams = {
      "{responderExecutionId}": skipResponderExecutionRequest.responderExecutionId
    };

    const queryParams = {
      "compartmentId": skipResponderExecutionRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": skipResponderExecutionRequest.ifMatch,
      "opc-request-id": skipResponderExecutionRequest.opcRequestId,
      "opc-retry-token": skipResponderExecutionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      skipResponderExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderExecutions/{responderExecutionId}/actions/skip",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SkipResponderExecutionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * push the problem to responder
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param TriggerResponderRequest
   * @return TriggerResponderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/TriggerResponder.ts.html |here} to see how to use TriggerResponder API.
   */
  public async triggerResponder(
    triggerResponderRequest: requests.TriggerResponderRequest
  ): Promise<responses.TriggerResponderResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#triggerResponder.");
    const pathParams = {
      "{problemId}": triggerResponderRequest.problemId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": triggerResponderRequest.opcRetryToken,
      "opc-request-id": triggerResponderRequest.opcRequestId,
      "if-match": triggerResponderRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      triggerResponderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/{problemId}/actions/triggerResponder",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        triggerResponderRequest.triggerResponderDetails,
        "TriggerResponderDetails",
        model.TriggerResponderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.TriggerResponderResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the statuses in bulk for a list of problems
   * The operation is atomic in nature
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateBulkProblemStatusRequest
   * @return UpdateBulkProblemStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateBulkProblemStatus.ts.html |here} to see how to use UpdateBulkProblemStatus API.
   */
  public async updateBulkProblemStatus(
    updateBulkProblemStatusRequest: requests.UpdateBulkProblemStatusRequest
  ): Promise<responses.UpdateBulkProblemStatusResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#updateBulkProblemStatus.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateBulkProblemStatusRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBulkProblemStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/actions/bulkUpdateStatus",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateBulkProblemStatusRequest.updateBulkProblemStatusDetails,
        "UpdateBulkProblemStatusDetails",
        model.UpdateBulkProblemStatusDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBulkProblemStatusResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enable/Disable Cloud Guard. The reporting region cannot be updated once created.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateConfigurationRequest
   * @return UpdateConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateConfiguration.ts.html |here} to see how to use UpdateConfiguration API.
   */
  public async updateConfiguration(
    updateConfigurationRequest: requests.UpdateConfigurationRequest
  ): Promise<responses.UpdateConfigurationResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#updateConfiguration.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": updateConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateConfigurationRequest.opcRequestId,
      "opc-retry-token": updateConfigurationRequest.opcRetryToken,
      "if-match": updateConfigurationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConfigurationRequest.updateConfigurationDetails,
        "UpdateConfigurationDetails",
        model.UpdateConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "configuration",
        bodyModel: model.Configuration,
        type: "model.Configuration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a DataMaskRule identified by dataMaskRuleId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDataMaskRuleRequest
   * @return UpdateDataMaskRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateDataMaskRule.ts.html |here} to see how to use UpdateDataMaskRule API.
   */
  public async updateDataMaskRule(
    updateDataMaskRuleRequest: requests.UpdateDataMaskRuleRequest
  ): Promise<responses.UpdateDataMaskRuleResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#updateDataMaskRule.");
    const pathParams = {
      "{dataMaskRuleId}": updateDataMaskRuleRequest.dataMaskRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDataMaskRuleRequest.ifMatch,
      "opc-request-id": updateDataMaskRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDataMaskRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataMaskRules/{dataMaskRuleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDataMaskRuleRequest.updateDataMaskRuleDetails,
        "UpdateDataMaskRuleDetails",
        model.UpdateDataMaskRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDataMaskRuleResponse>{},
        body: await response.json(),
        bodyKey: "dataMaskRule",
        bodyModel: model.DataMaskRule,
        type: "model.DataMaskRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a detector recipe identified by detectorRecipeId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDetectorRecipeRequest
   * @return UpdateDetectorRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateDetectorRecipe.ts.html |here} to see how to use UpdateDetectorRecipe API.
   */
  public async updateDetectorRecipe(
    updateDetectorRecipeRequest: requests.UpdateDetectorRecipeRequest
  ): Promise<responses.UpdateDetectorRecipeResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#updateDetectorRecipe.");
    const pathParams = {
      "{detectorRecipeId}": updateDetectorRecipeRequest.detectorRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDetectorRecipeRequest.ifMatch,
      "opc-request-id": updateDetectorRecipeRequest.opcRequestId,
      "opc-retry-token": updateDetectorRecipeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDetectorRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectorRecipes/{detectorRecipeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDetectorRecipeRequest.updateDetectorRecipeDetails,
        "UpdateDetectorRecipeDetails",
        model.UpdateDetectorRecipeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDetectorRecipeResponse>{},
        body: await response.json(),
        bodyKey: "detectorRecipe",
        bodyModel: model.DetectorRecipe,
        type: "model.DetectorRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the DetectorRule by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDetectorRecipeDetectorRuleRequest
   * @return UpdateDetectorRecipeDetectorRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateDetectorRecipeDetectorRule.ts.html |here} to see how to use UpdateDetectorRecipeDetectorRule API.
   */
  public async updateDetectorRecipeDetectorRule(
    updateDetectorRecipeDetectorRuleRequest: requests.UpdateDetectorRecipeDetectorRuleRequest
  ): Promise<responses.UpdateDetectorRecipeDetectorRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#updateDetectorRecipeDetectorRule.");
    const pathParams = {
      "{detectorRecipeId}": updateDetectorRecipeDetectorRuleRequest.detectorRecipeId,
      "{detectorRuleId}": updateDetectorRecipeDetectorRuleRequest.detectorRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDetectorRecipeDetectorRuleRequest.ifMatch,
      "opc-request-id": updateDetectorRecipeDetectorRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDetectorRecipeDetectorRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/detectorRecipes/{detectorRecipeId}/detectorRules/{detectorRuleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDetectorRecipeDetectorRuleRequest.updateDetectorRecipeDetectorRuleDetails,
        "UpdateDetectorRecipeDetectorRuleDetails",
        model.UpdateDetectorRecipeDetectorRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDetectorRecipeDetectorRuleResponse>{},
        body: await response.json(),
        bodyKey: "detectorRecipeDetectorRule",
        bodyModel: model.DetectorRecipeDetectorRule,
        type: "model.DetectorRecipeDetectorRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a managed list identified by managedListId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateManagedListRequest
   * @return UpdateManagedListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateManagedList.ts.html |here} to see how to use UpdateManagedList API.
   */
  public async updateManagedList(
    updateManagedListRequest: requests.UpdateManagedListRequest
  ): Promise<responses.UpdateManagedListResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#updateManagedList.");
    const pathParams = {
      "{managedListId}": updateManagedListRequest.managedListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateManagedListRequest.ifMatch,
      "opc-request-id": updateManagedListRequest.opcRequestId,
      "opc-retry-token": updateManagedListRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateManagedListRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedLists/{managedListId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateManagedListRequest.updateManagedListDetails,
        "UpdateManagedListDetails",
        model.UpdateManagedListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateManagedListResponse>{},
        body: await response.json(),
        bodyKey: "managedList",
        bodyModel: model.ManagedList,
        type: "model.ManagedList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * updates the problem details
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateProblemStatusRequest
   * @return UpdateProblemStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateProblemStatus.ts.html |here} to see how to use UpdateProblemStatus API.
   */
  public async updateProblemStatus(
    updateProblemStatusRequest: requests.UpdateProblemStatusRequest
  ): Promise<responses.UpdateProblemStatusResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#updateProblemStatus.");
    const pathParams = {
      "{problemId}": updateProblemStatusRequest.problemId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateProblemStatusRequest.opcRetryToken,
      "opc-request-id": updateProblemStatusRequest.opcRequestId,
      "if-match": updateProblemStatusRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateProblemStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/problems/{problemId}/actions/updateStatus",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateProblemStatusRequest.updateProblemStatusDetails,
        "UpdateProblemStatusDetails",
        model.UpdateProblemStatusDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProblemStatusResponse>{},
        body: await response.json(),
        bodyKey: "problem",
        bodyModel: model.Problem,
        type: "model.Problem",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the ResponderRecipe resource by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateResponderRecipeRequest
   * @return UpdateResponderRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateResponderRecipe.ts.html |here} to see how to use UpdateResponderRecipe API.
   */
  public async updateResponderRecipe(
    updateResponderRecipeRequest: requests.UpdateResponderRecipeRequest
  ): Promise<responses.UpdateResponderRecipeResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#updateResponderRecipe.");
    const pathParams = {
      "{responderRecipeId}": updateResponderRecipeRequest.responderRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateResponderRecipeRequest.ifMatch,
      "opc-request-id": updateResponderRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateResponderRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderRecipes/{responderRecipeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateResponderRecipeRequest.updateResponderRecipeDetails,
        "UpdateResponderRecipeDetails",
        model.UpdateResponderRecipeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateResponderRecipeResponse>{},
        body: await response.json(),
        bodyKey: "responderRecipe",
        bodyModel: model.ResponderRecipe,
        type: "model.ResponderRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the ResponderRule by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateResponderRecipeResponderRuleRequest
   * @return UpdateResponderRecipeResponderRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateResponderRecipeResponderRule.ts.html |here} to see how to use UpdateResponderRecipeResponderRule API.
   */
  public async updateResponderRecipeResponderRule(
    updateResponderRecipeResponderRuleRequest: requests.UpdateResponderRecipeResponderRuleRequest
  ): Promise<responses.UpdateResponderRecipeResponderRuleResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#updateResponderRecipeResponderRule.");
    const pathParams = {
      "{responderRecipeId}": updateResponderRecipeResponderRuleRequest.responderRecipeId,
      "{responderRuleId}": updateResponderRecipeResponderRuleRequest.responderRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateResponderRecipeResponderRuleRequest.ifMatch,
      "opc-request-id": updateResponderRecipeResponderRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateResponderRecipeResponderRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/responderRecipes/{responderRecipeId}/responderRules/{responderRuleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateResponderRecipeResponderRuleRequest.updateResponderRecipeResponderRuleDetails,
        "UpdateResponderRecipeResponderRuleDetails",
        model.UpdateResponderRecipeResponderRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateResponderRecipeResponderRuleResponse>{},
        body: await response.json(),
        bodyKey: "responderRecipeResponderRule",
        bodyModel: model.ResponderRecipeResponderRule,
        type: "model.ResponderRecipeResponderRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a Target identified by targetId
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateTargetRequest
   * @return UpdateTargetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateTarget.ts.html |here} to see how to use UpdateTarget API.
   */
  public async updateTarget(
    updateTargetRequest: requests.UpdateTargetRequest
  ): Promise<responses.UpdateTargetResponse> {
    if (this.logger) this.logger.debug("Calling operation CloudGuardClient#updateTarget.");
    const pathParams = {
      "{targetId}": updateTargetRequest.targetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTargetRequest.ifMatch,
      "opc-request-id": updateTargetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTargetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTargetRequest.updateTargetDetails,
        "UpdateTargetDetails",
        model.UpdateTargetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTargetResponse>{},
        body: await response.json(),
        bodyKey: "target",
        bodyModel: model.Target,
        type: "model.Target",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the TargetDetectorRecipe resource by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateTargetDetectorRecipeRequest
   * @return UpdateTargetDetectorRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateTargetDetectorRecipe.ts.html |here} to see how to use UpdateTargetDetectorRecipe API.
   */
  public async updateTargetDetectorRecipe(
    updateTargetDetectorRecipeRequest: requests.UpdateTargetDetectorRecipeRequest
  ): Promise<responses.UpdateTargetDetectorRecipeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#updateTargetDetectorRecipe.");
    const pathParams = {
      "{targetId}": updateTargetDetectorRecipeRequest.targetId,
      "{targetDetectorRecipeId}": updateTargetDetectorRecipeRequest.targetDetectorRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTargetDetectorRecipeRequest.ifMatch,
      "opc-request-id": updateTargetDetectorRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTargetDetectorRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTargetDetectorRecipeRequest.updateTargetDetectorRecipeDetails,
        "UpdateTargetDetectorRecipeDetails",
        model.UpdateTargetDetectorRecipeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTargetDetectorRecipeResponse>{},
        body: await response.json(),
        bodyKey: "targetDetectorRecipe",
        bodyModel: model.TargetDetectorRecipe,
        type: "model.TargetDetectorRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the DetectorRule by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateTargetDetectorRecipeDetectorRuleRequest
   * @return UpdateTargetDetectorRecipeDetectorRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateTargetDetectorRecipeDetectorRule.ts.html |here} to see how to use UpdateTargetDetectorRecipeDetectorRule API.
   */
  public async updateTargetDetectorRecipeDetectorRule(
    updateTargetDetectorRecipeDetectorRuleRequest: requests.UpdateTargetDetectorRecipeDetectorRuleRequest
  ): Promise<responses.UpdateTargetDetectorRecipeDetectorRuleResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CloudGuardClient#updateTargetDetectorRecipeDetectorRule."
      );
    const pathParams = {
      "{targetId}": updateTargetDetectorRecipeDetectorRuleRequest.targetId,
      "{targetDetectorRecipeId}":
        updateTargetDetectorRecipeDetectorRuleRequest.targetDetectorRecipeId,
      "{detectorRuleId}": updateTargetDetectorRecipeDetectorRuleRequest.detectorRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTargetDetectorRecipeDetectorRuleRequest.ifMatch,
      "opc-request-id": updateTargetDetectorRecipeDetectorRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTargetDetectorRecipeDetectorRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}/detectorRules/{detectorRuleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTargetDetectorRecipeDetectorRuleRequest.updateTargetDetectorRecipeDetectorRuleDetails,
        "UpdateTargetDetectorRecipeDetectorRuleDetails",
        model.UpdateTargetDetectorRecipeDetectorRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTargetDetectorRecipeDetectorRuleResponse>{},
        body: await response.json(),
        bodyKey: "targetDetectorRecipeDetectorRule",
        bodyModel: model.TargetDetectorRecipeDetectorRule,
        type: "model.TargetDetectorRecipeDetectorRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the TargetResponderRecipe resource by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateTargetResponderRecipeRequest
   * @return UpdateTargetResponderRecipeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateTargetResponderRecipe.ts.html |here} to see how to use UpdateTargetResponderRecipe API.
   */
  public async updateTargetResponderRecipe(
    updateTargetResponderRecipeRequest: requests.UpdateTargetResponderRecipeRequest
  ): Promise<responses.UpdateTargetResponderRecipeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation CloudGuardClient#updateTargetResponderRecipe.");
    const pathParams = {
      "{targetId}": updateTargetResponderRecipeRequest.targetId,
      "{targetResponderRecipeId}": updateTargetResponderRecipeRequest.targetResponderRecipeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTargetResponderRecipeRequest.ifMatch,
      "opc-request-id": updateTargetResponderRecipeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTargetResponderRecipeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTargetResponderRecipeRequest.updateTargetResponderRecipeDetails,
        "UpdateTargetResponderRecipeDetails",
        model.UpdateTargetResponderRecipeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTargetResponderRecipeResponse>{},
        body: await response.json(),
        bodyKey: "targetResponderRecipe",
        bodyModel: model.TargetResponderRecipe,
        type: "model.TargetResponderRecipe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the ResponderRule by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateTargetResponderRecipeResponderRuleRequest
   * @return UpdateTargetResponderRecipeResponderRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/UpdateTargetResponderRecipeResponderRule.ts.html |here} to see how to use UpdateTargetResponderRecipeResponderRule API.
   */
  public async updateTargetResponderRecipeResponderRule(
    updateTargetResponderRecipeResponderRuleRequest: requests.UpdateTargetResponderRecipeResponderRuleRequest
  ): Promise<responses.UpdateTargetResponderRecipeResponderRuleResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation CloudGuardClient#updateTargetResponderRecipeResponderRule."
      );
    const pathParams = {
      "{targetId}": updateTargetResponderRecipeResponderRuleRequest.targetId,
      "{targetResponderRecipeId}":
        updateTargetResponderRecipeResponderRuleRequest.targetResponderRecipeId,
      "{responderRuleId}": updateTargetResponderRecipeResponderRuleRequest.responderRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTargetResponderRecipeResponderRuleRequest.ifMatch,
      "opc-request-id": updateTargetResponderRecipeResponderRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTargetResponderRecipeResponderRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}/responderRules/{responderRuleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTargetResponderRecipeResponderRuleRequest.updateTargetResponderRecipeResponderRuleDetails,
        "UpdateTargetResponderRecipeResponderRuleDetails",
        model.UpdateTargetResponderRecipeResponderRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTargetResponderRecipeResponderRuleResponse>{},
        body: await response.json(),
        bodyKey: "targetResponderRecipeResponderRule",
        bodyModel: model.TargetResponderRecipeResponderRule,
        type: "model.TargetResponderRecipeResponderRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

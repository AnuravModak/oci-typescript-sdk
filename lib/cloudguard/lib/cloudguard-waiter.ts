/**
 * Cloud Guard APIs
 * A description of the Cloud Guard APIs
 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { CloudGuardClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class CloudGuardWaiter {
  public constructor(
    private client: CloudGuardClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forDataMaskRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDataMaskRuleResponse | null (null in case of 404 response)
   */
  public async forDataMaskRule(
    request: serviceRequests.GetDataMaskRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDataMaskRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDataMaskRule(request),
      response => targetStates.includes(response.dataMaskRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDetector till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDetectorResponse | null (null in case of 404 response)
   */
  public async forDetector(
    request: serviceRequests.GetDetectorRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDetectorResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDetector(request),
      response => targetStates.includes(response.detector.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDetectorRecipe till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDetectorRecipeResponse | null (null in case of 404 response)
   */
  public async forDetectorRecipe(
    request: serviceRequests.GetDetectorRecipeRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDetectorRecipeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDetectorRecipe(request),
      response => targetStates.includes(response.detectorRecipe.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDetectorRecipeDetectorRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDetectorRecipeDetectorRuleResponse | null (null in case of 404 response)
   */
  public async forDetectorRecipeDetectorRule(
    request: serviceRequests.GetDetectorRecipeDetectorRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDetectorRecipeDetectorRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDetectorRecipeDetectorRule(request),
      response => targetStates.includes(response.detectorRecipeDetectorRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDetectorRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDetectorRuleResponse | null (null in case of 404 response)
   */
  public async forDetectorRule(
    request: serviceRequests.GetDetectorRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetDetectorRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDetectorRule(request),
      response => targetStates.includes(response.detectorRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forManagedList till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetManagedListResponse | null (null in case of 404 response)
   */
  public async forManagedList(
    request: serviceRequests.GetManagedListRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetManagedListResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getManagedList(request),
      response => targetStates.includes(response.managedList.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forProblem till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetProblemResponse
   */
  public async forProblem(
    request: serviceRequests.GetProblemRequest,
    ...targetStates: models.ProblemLifecycleState[]
  ): Promise<serviceResponses.GetProblemResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getProblem(request),
      response => targetStates.includes(response.problem.lifecycleState!)
    );
  }

  /**
   * Waits forResponderRecipe till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetResponderRecipeResponse | null (null in case of 404 response)
   */
  public async forResponderRecipe(
    request: serviceRequests.GetResponderRecipeRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetResponderRecipeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getResponderRecipe(request),
      response => targetStates.includes(response.responderRecipe.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forResponderRecipeResponderRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetResponderRecipeResponderRuleResponse | null (null in case of 404 response)
   */
  public async forResponderRecipeResponderRule(
    request: serviceRequests.GetResponderRecipeResponderRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetResponderRecipeResponderRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getResponderRecipeResponderRule(request),
      response => targetStates.includes(response.responderRecipeResponderRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forResponderRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetResponderRuleResponse | null (null in case of 404 response)
   */
  public async forResponderRule(
    request: serviceRequests.GetResponderRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetResponderRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getResponderRule(request),
      response => targetStates.includes(response.responderRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forTarget till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTargetResponse | null (null in case of 404 response)
   */
  public async forTarget(
    request: serviceRequests.GetTargetRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetTargetResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTarget(request),
      response => targetStates.includes(response.target.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forTargetDetectorRecipe till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTargetDetectorRecipeResponse | null (null in case of 404 response)
   */
  public async forTargetDetectorRecipe(
    request: serviceRequests.GetTargetDetectorRecipeRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetTargetDetectorRecipeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTargetDetectorRecipe(request),
      response => targetStates.includes(response.targetDetectorRecipe.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forTargetDetectorRecipeDetectorRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTargetDetectorRecipeDetectorRuleResponse | null (null in case of 404 response)
   */
  public async forTargetDetectorRecipeDetectorRule(
    request: serviceRequests.GetTargetDetectorRecipeDetectorRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetTargetDetectorRecipeDetectorRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTargetDetectorRecipeDetectorRule(request),
      response => targetStates.includes(response.targetDetectorRecipeDetectorRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forTargetResponderRecipeResponderRule till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTargetResponderRecipeResponderRuleResponse | null (null in case of 404 response)
   */
  public async forTargetResponderRecipeResponderRule(
    request: serviceRequests.GetTargetResponderRecipeResponderRuleRequest,
    ...targetStates: models.LifecycleState[]
  ): Promise<serviceResponses.GetTargetResponderRecipeResponderRuleResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTargetResponderRecipeResponderRule(request),
      response =>
        targetStates.includes(response.targetResponderRecipeResponderRule.lifecycleState!),
      targetStates.includes(models.LifecycleState.Deleted)
    );
  }
}

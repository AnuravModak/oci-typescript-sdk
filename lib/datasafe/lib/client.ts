/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { DataSafeWaiter } from "./datasafe-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DataSafeApiKeys {}
/**
 * This service client does not use circuit breakers by default if the user has not defined a circuit breaker configuration.
 */
export class DataSafeClient {
  protected static serviceEndpointTemplate = "https://datasafe.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DataSafeWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = false;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20181201";
    if (this.logger) this.logger.info(`DataSafeClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DataSafeClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DataSafeClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new DataSafeWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DataSafeWaiter {
    this._waiters = new DataSafeWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DataSafeWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Reactivates a previously deactivated Data Safe target database.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ActivateTargetDatabaseRequest
   * @return ActivateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ActivateTargetDatabase.ts.html |here} to see how to use ActivateTargetDatabase API.
   */
  public async activateTargetDatabase(
    activateTargetDatabaseRequest: requests.ActivateTargetDatabaseRequest
  ): Promise<responses.ActivateTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#activateTargetDatabase.");
    const pathParams = {
      "{targetDatabaseId}": activateTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": activateTargetDatabaseRequest.opcRetryToken,
      "if-match": activateTargetDatabaseRequest.ifMatch,
      "opc-request-id": activateTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      activateTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/actions/activate",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        activateTargetDatabaseRequest.activateTargetDatabaseDetails,
        "ActivateTargetDatabaseDetails",
        model.ActivateTargetDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ActivateTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Data Safe private endpoint and its dependent resources to the specified compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeDataSafePrivateEndpointCompartmentRequest
   * @return ChangeDataSafePrivateEndpointCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeDataSafePrivateEndpointCompartment.ts.html |here} to see how to use ChangeDataSafePrivateEndpointCompartment API.
   */
  public async changeDataSafePrivateEndpointCompartment(
    changeDataSafePrivateEndpointCompartmentRequest: requests.ChangeDataSafePrivateEndpointCompartmentRequest
  ): Promise<responses.ChangeDataSafePrivateEndpointCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataSafeClient#changeDataSafePrivateEndpointCompartment."
      );
    const pathParams = {
      "{dataSafePrivateEndpointId}":
        changeDataSafePrivateEndpointCompartmentRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDataSafePrivateEndpointCompartmentRequest.opcRequestId,
      "if-match": changeDataSafePrivateEndpointCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDataSafePrivateEndpointCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDataSafePrivateEndpointCompartmentRequest.changeDataSafePrivateEndpointCompartmentDetails,
        "ChangeDataSafePrivateEndpointCompartmentDetails",
        model.ChangeDataSafePrivateEndpointCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDataSafePrivateEndpointCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified on-premises connector into a different compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeOnPremConnectorCompartmentRequest
   * @return ChangeOnPremConnectorCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeOnPremConnectorCompartment.ts.html |here} to see how to use ChangeOnPremConnectorCompartment API.
   */
  public async changeOnPremConnectorCompartment(
    changeOnPremConnectorCompartmentRequest: requests.ChangeOnPremConnectorCompartmentRequest
  ): Promise<responses.ChangeOnPremConnectorCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeOnPremConnectorCompartment.");
    const pathParams = {
      "{onPremConnectorId}": changeOnPremConnectorCompartmentRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeOnPremConnectorCompartmentRequest.opcRequestId,
      "if-match": changeOnPremConnectorCompartmentRequest.ifMatch,
      "opc-retry-token": changeOnPremConnectorCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeOnPremConnectorCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeOnPremConnectorCompartmentRequest.changeOnPremConnectorCompartmentDetails,
        "ChangeOnPremConnectorCompartmentDetails",
        model.ChangeOnPremConnectorCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeOnPremConnectorCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves the specified saved security assessment or future scheduled assessments into a different compartment.
* <p>
To start, call first the operation ListSecurityAssessments with filters \"type = save_schedule\". This returns the scheduleAssessmentId. Then, call this changeCompartment with the scheduleAssessmentId.
* <p>
The existing saved security assessments created due to the schedule are not moved. However, all new saves will be associated with the new compartment.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeSecurityAssessmentCompartmentRequest
     * @return ChangeSecurityAssessmentCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSecurityAssessmentCompartment.ts.html |here} to see how to use ChangeSecurityAssessmentCompartment API.
     */
  public async changeSecurityAssessmentCompartment(
    changeSecurityAssessmentCompartmentRequest: requests.ChangeSecurityAssessmentCompartmentRequest
  ): Promise<responses.ChangeSecurityAssessmentCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeSecurityAssessmentCompartment.");
    const pathParams = {
      "{securityAssessmentId}": changeSecurityAssessmentCompartmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeSecurityAssessmentCompartmentRequest.opcRequestId,
      "if-match": changeSecurityAssessmentCompartmentRequest.ifMatch,
      "opc-retry-token": changeSecurityAssessmentCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeSecurityAssessmentCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSecurityAssessmentCompartmentRequest.changeSecurityAssessmentCompartmentDetails,
        "ChangeSecurityAssessmentCompartmentDetails",
        model.ChangeSecurityAssessmentCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSecurityAssessmentCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Data Safe target database to the specified compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeTargetDatabaseCompartmentRequest
   * @return ChangeTargetDatabaseCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeTargetDatabaseCompartment.ts.html |here} to see how to use ChangeTargetDatabaseCompartment API.
   */
  public async changeTargetDatabaseCompartment(
    changeTargetDatabaseCompartmentRequest: requests.ChangeTargetDatabaseCompartmentRequest
  ): Promise<responses.ChangeTargetDatabaseCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeTargetDatabaseCompartment.");
    const pathParams = {
      "{targetDatabaseId}": changeTargetDatabaseCompartmentRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeTargetDatabaseCompartmentRequest.ifMatch,
      "opc-request-id": changeTargetDatabaseCompartmentRequest.opcRequestId,
      "opc-retry-token": changeTargetDatabaseCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeTargetDatabaseCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeTargetDatabaseCompartmentRequest.changeTargetDatabaseCompartmentDetails,
        "ChangeTargetDatabaseCompartmentDetails",
        model.ChangeTargetDatabaseCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeTargetDatabaseCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified saved user assessment or future scheduled assessments into a different compartment.
   * To start storing scheduled user assessments on a different compartment, first call the operation ListUserAssessments with
   * the filters \"type = save_schedule\". That call returns the scheduleAssessmentId. Then call
   * ChangeUserAssessmentCompartment with the scheduleAssessmentId. The existing saved user assessments created per the schedule
   * are not be moved. However, all new saves will be associated with the new compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeUserAssessmentCompartmentRequest
   * @return ChangeUserAssessmentCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeUserAssessmentCompartment.ts.html |here} to see how to use ChangeUserAssessmentCompartment API.
   */
  public async changeUserAssessmentCompartment(
    changeUserAssessmentCompartmentRequest: requests.ChangeUserAssessmentCompartmentRequest
  ): Promise<responses.ChangeUserAssessmentCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeUserAssessmentCompartment.");
    const pathParams = {
      "{userAssessmentId}": changeUserAssessmentCompartmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeUserAssessmentCompartmentRequest.ifMatch,
      "opc-retry-token": changeUserAssessmentCompartmentRequest.opcRetryToken,
      "opc-request-id": changeUserAssessmentCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeUserAssessmentCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeUserAssessmentCompartmentRequest.changeUserAssessmentCompartmentDetails,
        "ChangeUserAssessmentCompartmentDetails",
        model.ChangeUserAssessmentCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeUserAssessmentCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Compares two security assessments. For this comparison, a security assessment can be a saved assessment, a latest assessment, or a baseline assessment.
   * For example, you can compare saved assessment or a latest assessment against a baseline.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CompareSecurityAssessmentRequest
   * @return CompareSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CompareSecurityAssessment.ts.html |here} to see how to use CompareSecurityAssessment API.
   */
  public async compareSecurityAssessment(
    compareSecurityAssessmentRequest: requests.CompareSecurityAssessmentRequest
  ): Promise<responses.CompareSecurityAssessmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#compareSecurityAssessment.");
    const pathParams = {
      "{securityAssessmentId}": compareSecurityAssessmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": compareSecurityAssessmentRequest.opcRetryToken,
      "opc-request-id": compareSecurityAssessmentRequest.opcRequestId,
      "if-match": compareSecurityAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      compareSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/compare",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        compareSecurityAssessmentRequest.compareSecurityAssessmentDetails,
        "CompareSecurityAssessmentDetails",
        model.CompareSecurityAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CompareSecurityAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Compares two user assessments. For this comparison, a user assessment can be a saved, a latest assessment, or a baseline.
   * As an example, it can be used to compare a user assessment saved or a latest assessment with a baseline.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CompareUserAssessmentRequest
   * @return CompareUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CompareUserAssessment.ts.html |here} to see how to use CompareUserAssessment API.
   */
  public async compareUserAssessment(
    compareUserAssessmentRequest: requests.CompareUserAssessmentRequest
  ): Promise<responses.CompareUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#compareUserAssessment.");
    const pathParams = {
      "{userAssessmentId}": compareUserAssessmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": compareUserAssessmentRequest.opcRetryToken,
      "opc-request-id": compareUserAssessmentRequest.opcRequestId,
      "if-match": compareUserAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      compareUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/compare",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        compareUserAssessmentRequest.compareUserAssessmentDetails,
        "CompareUserAssessmentDetails",
        model.CompareUserAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CompareUserAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Data Safe private endpoint.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDataSafePrivateEndpointRequest
   * @return CreateDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateDataSafePrivateEndpoint.ts.html |here} to see how to use CreateDataSafePrivateEndpoint API.
   */
  public async createDataSafePrivateEndpoint(
    createDataSafePrivateEndpointRequest: requests.CreateDataSafePrivateEndpointRequest
  ): Promise<responses.CreateDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#createDataSafePrivateEndpoint.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDataSafePrivateEndpointRequest.opcRetryToken,
      "opc-request-id": createDataSafePrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDataSafePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDataSafePrivateEndpointRequest.createDataSafePrivateEndpointDetails,
        "CreateDataSafePrivateEndpointDetails",
        model.CreateDataSafePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDataSafePrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "dataSafePrivateEndpoint",
        bodyModel: model.DataSafePrivateEndpoint,
        type: "model.DataSafePrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new on-premises connector.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateOnPremConnectorRequest
   * @return CreateOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateOnPremConnector.ts.html |here} to see how to use CreateOnPremConnector API.
   */
  public async createOnPremConnector(
    createOnPremConnectorRequest: requests.CreateOnPremConnectorRequest
  ): Promise<responses.CreateOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createOnPremConnector.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOnPremConnectorRequest.opcRetryToken,
      "opc-request-id": createOnPremConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOnPremConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOnPremConnectorRequest.createOnPremConnectorDetails,
        "CreateOnPremConnectorDetails",
        model.CreateOnPremConnectorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOnPremConnectorResponse>{},
        body: await response.json(),
        bodyKey: "onPremConnector",
        bodyModel: model.OnPremConnector,
        type: "model.OnPremConnector",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new saved security assessment for one or multiple targets in a compartment. When this operation is performed,
   * it will save the latest assessments in the specified compartment. If a schedule is passed, it will persist the latest assessments,
   * at the defined date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateSecurityAssessmentRequest
   * @return CreateSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSecurityAssessment.ts.html |here} to see how to use CreateSecurityAssessment API.
   */
  public async createSecurityAssessment(
    createSecurityAssessmentRequest: requests.CreateSecurityAssessmentRequest
  ): Promise<responses.CreateSecurityAssessmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#createSecurityAssessment.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSecurityAssessmentRequest.opcRetryToken,
      "opc-request-id": createSecurityAssessmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSecurityAssessmentRequest.createSecurityAssessmentDetails,
        "CreateSecurityAssessmentDetails",
        model.CreateSecurityAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSecurityAssessmentResponse>{},
        body: await response.json(),
        bodyKey: "securityAssessment",
        bodyModel: model.SecurityAssessment,
        type: "model.SecurityAssessment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Registers the specified database with Data Safe and creates a Data Safe target database in the Data Safe Console.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateTargetDatabaseRequest
   * @return CreateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateTargetDatabase.ts.html |here} to see how to use CreateTargetDatabase API.
   */
  public async createTargetDatabase(
    createTargetDatabaseRequest: requests.CreateTargetDatabaseRequest
  ): Promise<responses.CreateTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createTargetDatabase.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTargetDatabaseRequest.opcRetryToken,
      "opc-request-id": createTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTargetDatabaseRequest.createTargetDatabaseDetails,
        "CreateTargetDatabaseDetails",
        model.CreateTargetDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTargetDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "targetDatabase",
        bodyModel: model.TargetDatabase,
        type: "model.TargetDatabase",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new saved user assessment for one or multiple targets in a compartment. It saves the latest assessments in the
   * specified compartment. If a scheduled is passed in, this operation persists the latest assessments that exist at the defined
   * date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateUserAssessmentRequest
   * @return CreateUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateUserAssessment.ts.html |here} to see how to use CreateUserAssessment API.
   */
  public async createUserAssessment(
    createUserAssessmentRequest: requests.CreateUserAssessmentRequest
  ): Promise<responses.CreateUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createUserAssessment.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createUserAssessmentRequest.opcRetryToken,
      "opc-request-id": createUserAssessmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createUserAssessmentRequest.createUserAssessmentDetails,
        "CreateUserAssessmentDetails",
        model.CreateUserAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateUserAssessmentResponse>{},
        body: await response.json(),
        bodyKey: "userAssessment",
        bodyModel: model.UserAssessment,
        type: "model.UserAssessment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deactivates a target database in Data Safe.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeactivateTargetDatabaseRequest
   * @return DeactivateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeactivateTargetDatabase.ts.html |here} to see how to use DeactivateTargetDatabase API.
   */
  public async deactivateTargetDatabase(
    deactivateTargetDatabaseRequest: requests.DeactivateTargetDatabaseRequest
  ): Promise<responses.DeactivateTargetDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deactivateTargetDatabase.");
    const pathParams = {
      "{targetDatabaseId}": deactivateTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": deactivateTargetDatabaseRequest.opcRetryToken,
      "if-match": deactivateTargetDatabaseRequest.ifMatch,
      "opc-request-id": deactivateTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deactivateTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/actions/deactivate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeactivateTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified Data Safe private endpoint.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDataSafePrivateEndpointRequest
   * @return DeleteDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteDataSafePrivateEndpoint.ts.html |here} to see how to use DeleteDataSafePrivateEndpoint API.
   */
  public async deleteDataSafePrivateEndpoint(
    deleteDataSafePrivateEndpointRequest: requests.DeleteDataSafePrivateEndpointRequest
  ): Promise<responses.DeleteDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteDataSafePrivateEndpoint.");
    const pathParams = {
      "{dataSafePrivateEndpointId}": deleteDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDataSafePrivateEndpointRequest.ifMatch,
      "opc-request-id": deleteDataSafePrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDataSafePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDataSafePrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified on-premises connector.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteOnPremConnectorRequest
   * @return DeleteOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteOnPremConnector.ts.html |here} to see how to use DeleteOnPremConnector API.
   */
  public async deleteOnPremConnector(
    deleteOnPremConnectorRequest: requests.DeleteOnPremConnectorRequest
  ): Promise<responses.DeleteOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteOnPremConnector.");
    const pathParams = {
      "{onPremConnectorId}": deleteOnPremConnectorRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOnPremConnectorRequest.ifMatch,
      "opc-request-id": deleteOnPremConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOnPremConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOnPremConnectorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified saved security assessment or schedule. To delete a security assessment schedule,
   * first call the operation ListSecurityAssessments with filters \"type = save_schedule\".
   * That operation returns the scheduleAssessmentId. Then, call DeleteSecurityAssessment with the scheduleAssessmentId.
   * If the assessment being deleted is the baseline for that compartment, then it will impact all baselines in the compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteSecurityAssessmentRequest
   * @return DeleteSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSecurityAssessment.ts.html |here} to see how to use DeleteSecurityAssessment API.
   */
  public async deleteSecurityAssessment(
    deleteSecurityAssessmentRequest: requests.DeleteSecurityAssessmentRequest
  ): Promise<responses.DeleteSecurityAssessmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteSecurityAssessment.");
    const pathParams = {
      "{securityAssessmentId}": deleteSecurityAssessmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteSecurityAssessmentRequest.opcRequestId,
      "if-match": deleteSecurityAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSecurityAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deregisters the specified database from Data Safe and removes the target database from the Data Safe Console.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteTargetDatabaseRequest
   * @return DeleteTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteTargetDatabase.ts.html |here} to see how to use DeleteTargetDatabase API.
   */
  public async deleteTargetDatabase(
    deleteTargetDatabaseRequest: requests.DeleteTargetDatabaseRequest
  ): Promise<responses.DeleteTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteTargetDatabase.");
    const pathParams = {
      "{targetDatabaseId}": deleteTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTargetDatabaseRequest.ifMatch,
      "opc-request-id": deleteTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified saved user assessment or schedule. To delete a user assessment schedule, first call the operation
   * ListUserAssessments with filters \"type = save_schedule\".
   * That call returns the scheduleAssessmentId. Then call DeleteUserAssessment with the scheduleAssessmentId.
   * If the assessment being deleted is the baseline for that compartment, then it will impact all baselines in the compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteUserAssessmentRequest
   * @return DeleteUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteUserAssessment.ts.html |here} to see how to use DeleteUserAssessment API.
   */
  public async deleteUserAssessment(
    deleteUserAssessmentRequest: requests.DeleteUserAssessmentRequest
  ): Promise<responses.DeleteUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteUserAssessment.");
    const pathParams = {
      "{userAssessmentId}": deleteUserAssessmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteUserAssessmentRequest.ifMatch,
      "opc-request-id": deleteUserAssessmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUserAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the privilege script to grant/revoke required roles from the Data Safe account on the target database.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DownloadPrivilegeScriptRequest
   * @return DownloadPrivilegeScriptResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadPrivilegeScript.ts.html |here} to see how to use DownloadPrivilegeScript API.
   */
  public async downloadPrivilegeScript(
    downloadPrivilegeScriptRequest: requests.DownloadPrivilegeScriptRequest
  ): Promise<responses.DownloadPrivilegeScriptResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#downloadPrivilegeScript.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": downloadPrivilegeScriptRequest.opcRetryToken,
      "opc-request-id": downloadPrivilegeScriptRequest.opcRequestId,
      "if-match": downloadPrivilegeScriptRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadPrivilegeScriptRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/downloadPrivilegeScript",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadPrivilegeScriptResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the report of the specified security assessment. To download the security assessment report, it needs to be generated first.
   * Please use GenerateSecurityAssessmentReport to generate a downloadable report in the preferred format (PDF, XLS).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DownloadSecurityAssessmentReportRequest
   * @return DownloadSecurityAssessmentReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadSecurityAssessmentReport.ts.html |here} to see how to use DownloadSecurityAssessmentReport API.
   */
  public async downloadSecurityAssessmentReport(
    downloadSecurityAssessmentReportRequest: requests.DownloadSecurityAssessmentReportRequest
  ): Promise<responses.DownloadSecurityAssessmentReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#downloadSecurityAssessmentReport.");
    const pathParams = {
      "{securityAssessmentId}": downloadSecurityAssessmentReportRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": downloadSecurityAssessmentReportRequest.ifMatch,
      "opc-retry-token": downloadSecurityAssessmentReportRequest.opcRetryToken,
      "opc-request-id": downloadSecurityAssessmentReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadSecurityAssessmentReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/downloadReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        downloadSecurityAssessmentReportRequest.downloadSecurityAssessmentReportDetails,
        "DownloadSecurityAssessmentReportDetails",
        model.DownloadSecurityAssessmentReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadSecurityAssessmentReportResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the report of the specified user assessment. To download the user assessment report, it needs to be generated first.
   * Please use GenerateUserAssessmentReport to generate a downloadable report in the preferred format (PDF, XLS).
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DownloadUserAssessmentReportRequest
   * @return DownloadUserAssessmentReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadUserAssessmentReport.ts.html |here} to see how to use DownloadUserAssessmentReport API.
   */
  public async downloadUserAssessmentReport(
    downloadUserAssessmentReportRequest: requests.DownloadUserAssessmentReportRequest
  ): Promise<responses.DownloadUserAssessmentReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#downloadUserAssessmentReport.");
    const pathParams = {
      "{userAssessmentId}": downloadUserAssessmentReportRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": downloadUserAssessmentReportRequest.ifMatch,
      "opc-retry-token": downloadUserAssessmentReportRequest.opcRetryToken,
      "opc-request-id": downloadUserAssessmentReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      downloadUserAssessmentReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/downloadReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        downloadUserAssessmentReportRequest.downloadUserAssessmentReportDetails,
        "DownloadUserAssessmentReportDetails",
        model.DownloadUserAssessmentReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadUserAssessmentReportResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enables Data Safe in the tenancy and region.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param EnableDataSafeConfigurationRequest
   * @return EnableDataSafeConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/EnableDataSafeConfiguration.ts.html |here} to see how to use EnableDataSafeConfiguration API.
   */
  public async enableDataSafeConfiguration(
    enableDataSafeConfigurationRequest: requests.EnableDataSafeConfigurationRequest
  ): Promise<responses.EnableDataSafeConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#enableDataSafeConfiguration.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": enableDataSafeConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": enableDataSafeConfigurationRequest.ifMatch,
      "opc-request-id": enableDataSafeConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      enableDataSafeConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        enableDataSafeConfigurationRequest.enableDataSafeConfigurationDetails,
        "EnableDataSafeConfigurationDetails",
        model.EnableDataSafeConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.EnableDataSafeConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates and downloads the configuration of the specified on-premises connector.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GenerateOnPremConnectorConfigurationRequest
   * @return GenerateOnPremConnectorConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateOnPremConnectorConfiguration.ts.html |here} to see how to use GenerateOnPremConnectorConfiguration API.
   */
  public async generateOnPremConnectorConfiguration(
    generateOnPremConnectorConfigurationRequest: requests.GenerateOnPremConnectorConfigurationRequest
  ): Promise<responses.GenerateOnPremConnectorConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateOnPremConnectorConfiguration.");
    const pathParams = {
      "{onPremConnectorId}": generateOnPremConnectorConfigurationRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": generateOnPremConnectorConfigurationRequest.opcRetryToken,
      "opc-request-id": generateOnPremConnectorConfigurationRequest.opcRequestId,
      "if-match": generateOnPremConnectorConfigurationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateOnPremConnectorConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}/actions/generateConfiguration",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateOnPremConnectorConfigurationRequest.generateOnPremConnectorConfigurationDetails,
        "GenerateOnPremConnectorConfigurationDetails",
        model.GenerateOnPremConnectorConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateOnPremConnectorConfigurationResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates the report of the specified security assessment. You can get the report in PDF or XLS format.
   * After generating the report, use DownloadSecurityAssessmentReport to download it in the preferred format.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GenerateSecurityAssessmentReportRequest
   * @return GenerateSecurityAssessmentReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateSecurityAssessmentReport.ts.html |here} to see how to use GenerateSecurityAssessmentReport API.
   */
  public async generateSecurityAssessmentReport(
    generateSecurityAssessmentReportRequest: requests.GenerateSecurityAssessmentReportRequest
  ): Promise<responses.GenerateSecurityAssessmentReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateSecurityAssessmentReport.");
    const pathParams = {
      "{securityAssessmentId}": generateSecurityAssessmentReportRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": generateSecurityAssessmentReportRequest.ifMatch,
      "opc-retry-token": generateSecurityAssessmentReportRequest.opcRetryToken,
      "opc-request-id": generateSecurityAssessmentReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateSecurityAssessmentReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/generateReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateSecurityAssessmentReportRequest.generateSecurityAssessmentReportDetails,
        "GenerateSecurityAssessmentReportDetails",
        model.GenerateSecurityAssessmentReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateSecurityAssessmentReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Generates the report of the specified user assessment. The report is available in PDF or XLS format.
   * After generating the report, use DownloadUserAssessmentReport to download it in the preferred format.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GenerateUserAssessmentReportRequest
   * @return GenerateUserAssessmentReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateUserAssessmentReport.ts.html |here} to see how to use GenerateUserAssessmentReport API.
   */
  public async generateUserAssessmentReport(
    generateUserAssessmentReportRequest: requests.GenerateUserAssessmentReportRequest
  ): Promise<responses.GenerateUserAssessmentReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateUserAssessmentReport.");
    const pathParams = {
      "{userAssessmentId}": generateUserAssessmentReportRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": generateUserAssessmentReportRequest.ifMatch,
      "opc-retry-token": generateUserAssessmentReportRequest.opcRetryToken,
      "opc-request-id": generateUserAssessmentReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      generateUserAssessmentReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/generateReport",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateUserAssessmentReportRequest.generateUserAssessmentReportDetails,
        "GenerateUserAssessmentReportDetails",
        model.GenerateUserAssessmentReportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateUserAssessmentReportResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the Data Safe configuration.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDataSafeConfigurationRequest
   * @return GetDataSafeConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDataSafeConfiguration.ts.html |here} to see how to use GetDataSafeConfiguration API.
   */
  public async getDataSafeConfiguration(
    getDataSafeConfigurationRequest: requests.GetDataSafeConfigurationRequest
  ): Promise<responses.GetDataSafeConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getDataSafeConfiguration.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": getDataSafeConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataSafeConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDataSafeConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataSafeConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "dataSafeConfiguration",
        bodyModel: model.DataSafeConfiguration,
        type: "model.DataSafeConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified Data Safe private endpoint.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDataSafePrivateEndpointRequest
   * @return GetDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDataSafePrivateEndpoint.ts.html |here} to see how to use GetDataSafePrivateEndpoint API.
   */
  public async getDataSafePrivateEndpoint(
    getDataSafePrivateEndpointRequest: requests.GetDataSafePrivateEndpointRequest
  ): Promise<responses.GetDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getDataSafePrivateEndpoint.");
    const pathParams = {
      "{dataSafePrivateEndpointId}": getDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataSafePrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDataSafePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataSafePrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "dataSafePrivateEndpoint",
        bodyModel: model.DataSafePrivateEndpoint,
        type: "model.DataSafePrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified on-premises connector.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetOnPremConnectorRequest
   * @return GetOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetOnPremConnector.ts.html |here} to see how to use GetOnPremConnector API.
   */
  public async getOnPremConnector(
    getOnPremConnectorRequest: requests.GetOnPremConnectorRequest
  ): Promise<responses.GetOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getOnPremConnector.");
    const pathParams = {
      "{onPremConnectorId}": getOnPremConnectorRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOnPremConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOnPremConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOnPremConnectorResponse>{},
        body: await response.json(),
        bodyKey: "onPremConnector",
        bodyModel: model.OnPremConnector,
        type: "model.OnPremConnector",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified security assessment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSecurityAssessmentRequest
   * @return GetSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityAssessment.ts.html |here} to see how to use GetSecurityAssessment API.
   */
  public async getSecurityAssessment(
    getSecurityAssessmentRequest: requests.GetSecurityAssessmentRequest
  ): Promise<responses.GetSecurityAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getSecurityAssessment.");
    const pathParams = {
      "{securityAssessmentId}": getSecurityAssessmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityAssessmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityAssessmentResponse>{},
        body: await response.json(),
        bodyKey: "securityAssessment",
        bodyModel: model.SecurityAssessment,
        type: "model.SecurityAssessment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the comparison report on the security assessments submitted for comparison.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSecurityAssessmentComparisonRequest
   * @return GetSecurityAssessmentComparisonResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityAssessmentComparison.ts.html |here} to see how to use GetSecurityAssessmentComparison API.
   */
  public async getSecurityAssessmentComparison(
    getSecurityAssessmentComparisonRequest: requests.GetSecurityAssessmentComparisonRequest
  ): Promise<responses.GetSecurityAssessmentComparisonResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getSecurityAssessmentComparison.");
    const pathParams = {
      "{securityAssessmentId}": getSecurityAssessmentComparisonRequest.securityAssessmentId,
      "{comparisonSecurityAssessmentId}":
        getSecurityAssessmentComparisonRequest.comparisonSecurityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSecurityAssessmentComparisonRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityAssessmentComparisonRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/securityAssessments/{securityAssessmentId}/comparison/{comparisonSecurityAssessmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityAssessmentComparisonResponse>{},
        body: await response.json(),
        bodyKey: "securityAssessmentComparison",
        bodyModel: model.SecurityAssessmentComparison,
        type: "model.SecurityAssessmentComparison",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the details of the specified Data Safe target database.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTargetDatabaseRequest
   * @return GetTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetTargetDatabase.ts.html |here} to see how to use GetTargetDatabase API.
   */
  public async getTargetDatabase(
    getTargetDatabaseRequest: requests.GetTargetDatabaseRequest
  ): Promise<responses.GetTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getTargetDatabase.");
    const pathParams = {
      "{targetDatabaseId}": getTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTargetDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTargetDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "targetDatabase",
        bodyModel: model.TargetDatabase,
        type: "model.TargetDatabase",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a user assessment by identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUserAssessmentRequest
   * @return GetUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetUserAssessment.ts.html |here} to see how to use GetUserAssessment API.
   */
  public async getUserAssessment(
    getUserAssessmentRequest: requests.GetUserAssessmentRequest
  ): Promise<responses.GetUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getUserAssessment.");
    const pathParams = {
      "{userAssessmentId}": getUserAssessmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUserAssessmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUserAssessmentResponse>{},
        body: await response.json(),
        bodyKey: "userAssessment",
        bodyModel: model.UserAssessment,
        type: "model.UserAssessment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the comparison report for the user assessments provided.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUserAssessmentComparisonRequest
   * @return GetUserAssessmentComparisonResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetUserAssessmentComparison.ts.html |here} to see how to use GetUserAssessmentComparison API.
   */
  public async getUserAssessmentComparison(
    getUserAssessmentComparisonRequest: requests.GetUserAssessmentComparisonRequest
  ): Promise<responses.GetUserAssessmentComparisonResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getUserAssessmentComparison.");
    const pathParams = {
      "{userAssessmentId}": getUserAssessmentComparisonRequest.userAssessmentId,
      "{comparisonUserAssessmentId}": getUserAssessmentComparisonRequest.comparisonUserAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUserAssessmentComparisonRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUserAssessmentComparisonRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/comparison/{comparisonUserAssessmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUserAssessmentComparisonResponse>{},
        body: await response.json(),
        bodyKey: "userAssessmentComparison",
        bodyModel: model.UserAssessmentComparison,
        type: "model.UserAssessmentComparison",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified work request.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getWorkRequest.");
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of Data Safe private endpoints.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDataSafePrivateEndpointsRequest
   * @return ListDataSafePrivateEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDataSafePrivateEndpoints.ts.html |here} to see how to use ListDataSafePrivateEndpoints API.
   */
  public async listDataSafePrivateEndpoints(
    listDataSafePrivateEndpointsRequest: requests.ListDataSafePrivateEndpointsRequest
  ): Promise<responses.ListDataSafePrivateEndpointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listDataSafePrivateEndpoints.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDataSafePrivateEndpointsRequest.compartmentId,
      "displayName": listDataSafePrivateEndpointsRequest.displayName,
      "vcnId": listDataSafePrivateEndpointsRequest.vcnId,
      "lifecycleState": listDataSafePrivateEndpointsRequest.lifecycleState,
      "limit": listDataSafePrivateEndpointsRequest.limit,
      "page": listDataSafePrivateEndpointsRequest.page,
      "sortOrder": listDataSafePrivateEndpointsRequest.sortOrder,
      "sortBy": listDataSafePrivateEndpointsRequest.sortBy,
      "compartmentIdInSubtree": listDataSafePrivateEndpointsRequest.compartmentIdInSubtree,
      "accessLevel": listDataSafePrivateEndpointsRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDataSafePrivateEndpointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDataSafePrivateEndpointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDataSafePrivateEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DataSafePrivateEndpointSummary,
        type: "Array<model.DataSafePrivateEndpointSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listDataSafePrivateEndpointsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.DataSafePrivateEndpointSummary objects
   * contained in responses from the listDataSafePrivateEndpoints operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDataSafePrivateEndpoints(
    request: requests.ListDataSafePrivateEndpointsRequest
  ): AsyncIterableIterator<model.DataSafePrivateEndpointSummary> {
    return paginateRecords(request, req => this.listDataSafePrivateEndpoints(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listDataSafePrivateEndpointsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listDataSafePrivateEndpoints operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDataSafePrivateEndpointsResponses(
    request: requests.ListDataSafePrivateEndpointsRequest
  ): AsyncIterableIterator<responses.ListDataSafePrivateEndpointsResponse> {
    return paginateResponses(request, req => this.listDataSafePrivateEndpoints(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.DataSafePrivateEndpointSummary objects
   * contained in responses from the listDataSafePrivateEndpoints operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDataSafePrivateEndpointsRecordIterator(
    request: requests.ListDataSafePrivateEndpointsRequest
  ): AsyncIterableIterator<model.DataSafePrivateEndpointSummary> {
    return paginateRecords(request, req => this.listDataSafePrivateEndpoints(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDataSafePrivateEndpoints operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listDataSafePrivateEndpointsResponseIterator(
    request: requests.ListDataSafePrivateEndpointsRequest
  ): AsyncIterableIterator<responses.ListDataSafePrivateEndpointsResponse> {
    return paginateResponses(request, req => this.listDataSafePrivateEndpoints(req));
  }

  /**
   * List all the findings from all the targets in the specified assessment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListFindingsRequest
   * @return ListFindingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListFindings.ts.html |here} to see how to use ListFindings API.
   */
  public async listFindings(
    listFindingsRequest: requests.ListFindingsRequest
  ): Promise<responses.ListFindingsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listFindings.");
    const pathParams = {
      "{securityAssessmentId}": listFindingsRequest.securityAssessmentId
    };

    const queryParams = {
      "severity": listFindingsRequest.severity,
      "limit": listFindingsRequest.limit,
      "page": listFindingsRequest.page,
      "compartmentIdInSubtree": listFindingsRequest.compartmentIdInSubtree,
      "accessLevel": listFindingsRequest.accessLevel,
      "findingKey": listFindingsRequest.findingKey
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFindingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFindingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/findings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFindingsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.FindingSummary,
        type: "Array<model.FindingSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listFindingsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.FindingSummary objects
   * contained in responses from the listFindings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFindings(
    request: requests.ListFindingsRequest
  ): AsyncIterableIterator<model.FindingSummary> {
    return paginateRecords(request, req => this.listFindings(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listFindingsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listFindings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFindingsResponses(
    request: requests.ListFindingsRequest
  ): AsyncIterableIterator<responses.ListFindingsResponse> {
    return paginateResponses(request, req => this.listFindings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.FindingSummary objects
   * contained in responses from the listFindings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFindingsRecordIterator(
    request: requests.ListFindingsRequest
  ): AsyncIterableIterator<model.FindingSummary> {
    return paginateRecords(request, req => this.listFindings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listFindings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFindingsResponseIterator(
    request: requests.ListFindingsRequest
  ): AsyncIterableIterator<responses.ListFindingsResponse> {
    return paginateResponses(request, req => this.listFindings(req));
  }

  /**
   * Gets a list of grants for a particular user in the specified user assessment. A user grant contains details such as the
   * privilege name, type, category, and depth level. The depth level indicates how deep in the hierarchy of roles granted to
   * roles a privilege grant is. The userKey in this operation is a system-generated identifier. Perform the operation ListUsers
   * to get the userKey for a particular user.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListGrantsRequest
   * @return ListGrantsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListGrants.ts.html |here} to see how to use ListGrants API.
   */
  public async listGrants(
    listGrantsRequest: requests.ListGrantsRequest
  ): Promise<responses.ListGrantsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listGrants.");
    const pathParams = {
      "{userAssessmentId}": listGrantsRequest.userAssessmentId,
      "{userKey}": listGrantsRequest.userKey
    };

    const queryParams = {
      "grantKey": listGrantsRequest.grantKey,
      "grantName": listGrantsRequest.grantName,
      "privilegeType": listGrantsRequest.privilegeType,
      "privilegeCategory": listGrantsRequest.privilegeCategory,
      "depthLevel": listGrantsRequest.depthLevel,
      "depthLevelGreaterThanOrEqualTo": listGrantsRequest.depthLevelGreaterThanOrEqualTo,
      "depthLevelLessThan": listGrantsRequest.depthLevelLessThan,
      "limit": listGrantsRequest.limit,
      "page": listGrantsRequest.page,
      "sortOrder": listGrantsRequest.sortOrder,
      "sortBy": listGrantsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listGrantsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listGrantsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/users/{userKey}/grants",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListGrantsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.GrantSummary,
        type: "Array<model.GrantSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listGrantsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.GrantSummary objects
   * contained in responses from the listGrants operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllGrants(
    request: requests.ListGrantsRequest
  ): AsyncIterableIterator<model.GrantSummary> {
    return paginateRecords(request, req => this.listGrants(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listGrantsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listGrants operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllGrantsResponses(
    request: requests.ListGrantsRequest
  ): AsyncIterableIterator<responses.ListGrantsResponse> {
    return paginateResponses(request, req => this.listGrants(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.GrantSummary objects
   * contained in responses from the listGrants operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listGrantsRecordIterator(
    request: requests.ListGrantsRequest
  ): AsyncIterableIterator<model.GrantSummary> {
    return paginateRecords(request, req => this.listGrants(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listGrants operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listGrantsResponseIterator(
    request: requests.ListGrantsRequest
  ): AsyncIterableIterator<responses.ListGrantsResponse> {
    return paginateResponses(request, req => this.listGrants(req));
  }

  /**
   * Gets a list of on-premises connectors.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListOnPremConnectorsRequest
   * @return ListOnPremConnectorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListOnPremConnectors.ts.html |here} to see how to use ListOnPremConnectors API.
   */
  public async listOnPremConnectors(
    listOnPremConnectorsRequest: requests.ListOnPremConnectorsRequest
  ): Promise<responses.ListOnPremConnectorsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listOnPremConnectors.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOnPremConnectorsRequest.compartmentId,
      "onPremConnectorId": listOnPremConnectorsRequest.onPremConnectorId,
      "displayName": listOnPremConnectorsRequest.displayName,
      "onPremConnectorLifecycleState": listOnPremConnectorsRequest.onPremConnectorLifecycleState,
      "limit": listOnPremConnectorsRequest.limit,
      "page": listOnPremConnectorsRequest.page,
      "sortOrder": listOnPremConnectorsRequest.sortOrder,
      "sortBy": listOnPremConnectorsRequest.sortBy,
      "compartmentIdInSubtree": listOnPremConnectorsRequest.compartmentIdInSubtree,
      "accessLevel": listOnPremConnectorsRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOnPremConnectorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOnPremConnectorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOnPremConnectorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.OnPremConnectorSummary,
        type: "Array<model.OnPremConnectorSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listOnPremConnectorsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.OnPremConnectorSummary objects
   * contained in responses from the listOnPremConnectors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllOnPremConnectors(
    request: requests.ListOnPremConnectorsRequest
  ): AsyncIterableIterator<model.OnPremConnectorSummary> {
    return paginateRecords(request, req => this.listOnPremConnectors(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listOnPremConnectorsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listOnPremConnectors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllOnPremConnectorsResponses(
    request: requests.ListOnPremConnectorsRequest
  ): AsyncIterableIterator<responses.ListOnPremConnectorsResponse> {
    return paginateResponses(request, req => this.listOnPremConnectors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.OnPremConnectorSummary objects
   * contained in responses from the listOnPremConnectors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listOnPremConnectorsRecordIterator(
    request: requests.ListOnPremConnectorsRequest
  ): AsyncIterableIterator<model.OnPremConnectorSummary> {
    return paginateRecords(request, req => this.listOnPremConnectors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listOnPremConnectors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listOnPremConnectorsResponseIterator(
    request: requests.ListOnPremConnectorsRequest
  ): AsyncIterableIterator<responses.ListOnPremConnectorsResponse> {
    return paginateResponses(request, req => this.listOnPremConnectors(req));
  }

  /**
     * Gets a list of security assessments.
* <p>
The ListSecurityAssessments operation returns only the assessments in the specified `compartmentId`.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListSecurityAssessments on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSecurityAssessmentsRequest
     * @return ListSecurityAssessmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityAssessments.ts.html |here} to see how to use ListSecurityAssessments API.
     */
  public async listSecurityAssessments(
    listSecurityAssessmentsRequest: requests.ListSecurityAssessmentsRequest
  ): Promise<responses.ListSecurityAssessmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listSecurityAssessments.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSecurityAssessmentsRequest.compartmentId,
      "compartmentIdInSubtree": listSecurityAssessmentsRequest.compartmentIdInSubtree,
      "accessLevel": listSecurityAssessmentsRequest.accessLevel,
      "displayName": listSecurityAssessmentsRequest.displayName,
      "type": listSecurityAssessmentsRequest.type,
      "scheduleAssessmentId": listSecurityAssessmentsRequest.scheduleAssessmentId,
      "isScheduleAssessment": listSecurityAssessmentsRequest.isScheduleAssessment,
      "triggeredBy": listSecurityAssessmentsRequest.triggeredBy,
      "targetId": listSecurityAssessmentsRequest.targetId,
      "sortOrder": listSecurityAssessmentsRequest.sortOrder,
      "isBaseline": listSecurityAssessmentsRequest.isBaseline,
      "sortBy": listSecurityAssessmentsRequest.sortBy,
      "timeCreatedGreaterThanOrEqualTo":
        listSecurityAssessmentsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listSecurityAssessmentsRequest.timeCreatedLessThan,
      "limit": listSecurityAssessmentsRequest.limit,
      "page": listSecurityAssessmentsRequest.page,
      "lifecycleState": listSecurityAssessmentsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSecurityAssessmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityAssessmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityAssessmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SecurityAssessmentSummary,
        type: "Array<model.SecurityAssessmentSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAssessmentsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SecurityAssessmentSummary objects
   * contained in responses from the listSecurityAssessments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAssessments(
    request: requests.ListSecurityAssessmentsRequest
  ): AsyncIterableIterator<model.SecurityAssessmentSummary> {
    return paginateRecords(request, req => this.listSecurityAssessments(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSecurityAssessmentsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAssessments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityAssessmentsResponses(
    request: requests.ListSecurityAssessmentsRequest
  ): AsyncIterableIterator<responses.ListSecurityAssessmentsResponse> {
    return paginateResponses(request, req => this.listSecurityAssessments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SecurityAssessmentSummary objects
   * contained in responses from the listSecurityAssessments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAssessmentsRecordIterator(
    request: requests.ListSecurityAssessmentsRequest
  ): AsyncIterableIterator<model.SecurityAssessmentSummary> {
    return paginateRecords(request, req => this.listSecurityAssessments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSecurityAssessments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSecurityAssessmentsResponseIterator(
    request: requests.ListSecurityAssessmentsRequest
  ): AsyncIterableIterator<responses.ListSecurityAssessmentsResponse> {
    return paginateResponses(request, req => this.listSecurityAssessments(req));
  }

  /**
   * Returns the list of registered target databases in Data Safe.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTargetDatabasesRequest
   * @return ListTargetDatabasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListTargetDatabases.ts.html |here} to see how to use ListTargetDatabases API.
   */
  public async listTargetDatabases(
    listTargetDatabasesRequest: requests.ListTargetDatabasesRequest
  ): Promise<responses.ListTargetDatabasesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listTargetDatabases.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listTargetDatabasesRequest.compartmentId,
      "targetDatabaseId": listTargetDatabasesRequest.targetDatabaseId,
      "displayName": listTargetDatabasesRequest.displayName,
      "lifecycleState": listTargetDatabasesRequest.lifecycleState,
      "databaseType": listTargetDatabasesRequest.databaseType,
      "infrastructureType": listTargetDatabasesRequest.infrastructureType,
      "limit": listTargetDatabasesRequest.limit,
      "page": listTargetDatabasesRequest.page,
      "compartmentIdInSubtree": listTargetDatabasesRequest.compartmentIdInSubtree,
      "accessLevel": listTargetDatabasesRequest.accessLevel,
      "sortOrder": listTargetDatabasesRequest.sortOrder,
      "sortBy": listTargetDatabasesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTargetDatabasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTargetDatabasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTargetDatabasesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.TargetDatabaseSummary,
        type: "Array<model.TargetDatabaseSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listTargetDatabasesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.TargetDatabaseSummary objects
   * contained in responses from the listTargetDatabases operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTargetDatabases(
    request: requests.ListTargetDatabasesRequest
  ): AsyncIterableIterator<model.TargetDatabaseSummary> {
    return paginateRecords(request, req => this.listTargetDatabases(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listTargetDatabasesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listTargetDatabases operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTargetDatabasesResponses(
    request: requests.ListTargetDatabasesRequest
  ): AsyncIterableIterator<responses.ListTargetDatabasesResponse> {
    return paginateResponses(request, req => this.listTargetDatabases(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.TargetDatabaseSummary objects
   * contained in responses from the listTargetDatabases operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listTargetDatabasesRecordIterator(
    request: requests.ListTargetDatabasesRequest
  ): AsyncIterableIterator<model.TargetDatabaseSummary> {
    return paginateRecords(request, req => this.listTargetDatabases(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listTargetDatabases operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listTargetDatabasesResponseIterator(
    request: requests.ListTargetDatabasesRequest
  ): AsyncIterableIterator<responses.ListTargetDatabasesResponse> {
    return paginateResponses(request, req => this.listTargetDatabases(req));
  }

  /**
     * Gets a list of aggregated user details from the specified user assessment. This provides information about the overall state
* of database user security.  For example, the user details include how many users have the DBA role and how many users are in
* the critical category. This data is especially useful content for dashboards or to support analytics.
* <p>
When you perform the ListUserAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
* parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
* permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
* root compartment. If the requestor does not have access to at least one subcompartment of the compartment specified by
* compartmentId, then \"Not Authorized\" is returned.
* <p>
The parameter compartmentIdInSubtree applies when you perform ListUserAnalytics on the compartmentId passed and when it is
* set to true, the entire hierarchy of compartments can be returned.
* <p>
To use ListUserAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
* set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListUserAnalyticsRequest
     * @return ListUserAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListUserAnalytics.ts.html |here} to see how to use ListUserAnalytics API.
     */
  public async listUserAnalytics(
    listUserAnalyticsRequest: requests.ListUserAnalyticsRequest
  ): Promise<responses.ListUserAnalyticsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listUserAnalytics.");
    const pathParams = {
      "{userAssessmentId}": listUserAnalyticsRequest.userAssessmentId
    };

    const queryParams = {
      "compartmentIdInSubtree": listUserAnalyticsRequest.compartmentIdInSubtree,
      "accessLevel": listUserAnalyticsRequest.accessLevel,
      "limit": listUserAnalyticsRequest.limit,
      "userCategory": listUserAnalyticsRequest.userCategory,
      "userKey": listUserAnalyticsRequest.userKey,
      "accountStatus": listUserAnalyticsRequest.accountStatus,
      "authenticationType": listUserAnalyticsRequest.authenticationType,
      "userName": listUserAnalyticsRequest.userName,
      "targetId": listUserAnalyticsRequest.targetId,
      "timeLastLoginGreaterThanOrEqualTo":
        listUserAnalyticsRequest.timeLastLoginGreaterThanOrEqualTo,
      "timeLastLoginLessThan": listUserAnalyticsRequest.timeLastLoginLessThan,
      "timeUserCreatedGreaterThanOrEqualTo":
        listUserAnalyticsRequest.timeUserCreatedGreaterThanOrEqualTo,
      "timeUserCreatedLessThan": listUserAnalyticsRequest.timeUserCreatedLessThan,
      "timePasswordLastChangedGreaterThanOrEqualTo":
        listUserAnalyticsRequest.timePasswordLastChangedGreaterThanOrEqualTo,
      "timePasswordLastChangedLessThan": listUserAnalyticsRequest.timePasswordLastChangedLessThan,
      "page": listUserAnalyticsRequest.page,
      "sortOrder": listUserAnalyticsRequest.sortOrder,
      "sortBy": listUserAnalyticsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUserAnalyticsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUserAnalyticsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/userAnalytics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUserAnalyticsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.UserAggregation,
        type: "Array<model.UserAggregation>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listUserAnalyticsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.UserAggregation objects
   * contained in responses from the listUserAnalytics operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUserAnalytics(
    request: requests.ListUserAnalyticsRequest
  ): AsyncIterableIterator<model.UserAggregation> {
    return paginateRecords(request, req => this.listUserAnalytics(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listUserAnalyticsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listUserAnalytics operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUserAnalyticsResponses(
    request: requests.ListUserAnalyticsRequest
  ): AsyncIterableIterator<responses.ListUserAnalyticsResponse> {
    return paginateResponses(request, req => this.listUserAnalytics(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.UserAggregation objects
   * contained in responses from the listUserAnalytics operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUserAnalyticsRecordIterator(
    request: requests.ListUserAnalyticsRequest
  ): AsyncIterableIterator<model.UserAggregation> {
    return paginateRecords(request, req => this.listUserAnalytics(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listUserAnalytics operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUserAnalyticsResponseIterator(
    request: requests.ListUserAnalyticsRequest
  ): AsyncIterableIterator<responses.ListUserAnalyticsResponse> {
    return paginateResponses(request, req => this.listUserAnalytics(req));
  }

  /**
     * Gets a list of user assessments.
* <p>
The ListUserAssessments operation returns only the assessments in the specified `compartmentId`.
* The list does not include any subcompartments of the compartmentId passed.
* <p>
The parameter `accessLevel` specifies whether to return only those compartments for which the
* requestor has INSPECT permissions on at least one resource directly
* or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
* Principal doesn't have access to even one of the child compartments. This is valid only when
* `compartmentIdInSubtree` is set to `true`.
* <p>
The parameter `compartmentIdInSubtree` applies when you perform ListUserAssessments on the
* `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
* To get a full list of all compartments and subcompartments in the tenancy (root compartment),
* set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListUserAssessmentsRequest
     * @return ListUserAssessmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListUserAssessments.ts.html |here} to see how to use ListUserAssessments API.
     */
  public async listUserAssessments(
    listUserAssessmentsRequest: requests.ListUserAssessmentsRequest
  ): Promise<responses.ListUserAssessmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listUserAssessments.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listUserAssessmentsRequest.compartmentId,
      "compartmentIdInSubtree": listUserAssessmentsRequest.compartmentIdInSubtree,
      "accessLevel": listUserAssessmentsRequest.accessLevel,
      "displayName": listUserAssessmentsRequest.displayName,
      "scheduleUserAssessmentId": listUserAssessmentsRequest.scheduleUserAssessmentId,
      "isScheduleAssessment": listUserAssessmentsRequest.isScheduleAssessment,
      "isBaseline": listUserAssessmentsRequest.isBaseline,
      "targetId": listUserAssessmentsRequest.targetId,
      "type": listUserAssessmentsRequest.type,
      "triggeredBy": listUserAssessmentsRequest.triggeredBy,
      "timeCreatedGreaterThanOrEqualTo": listUserAssessmentsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listUserAssessmentsRequest.timeCreatedLessThan,
      "limit": listUserAssessmentsRequest.limit,
      "page": listUserAssessmentsRequest.page,
      "lifecycleState": listUserAssessmentsRequest.lifecycleState,
      "sortOrder": listUserAssessmentsRequest.sortOrder,
      "sortBy": listUserAssessmentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUserAssessmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUserAssessmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUserAssessmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.UserAssessmentSummary,
        type: "Array<model.UserAssessmentSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listUserAssessmentsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.UserAssessmentSummary objects
   * contained in responses from the listUserAssessments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUserAssessments(
    request: requests.ListUserAssessmentsRequest
  ): AsyncIterableIterator<model.UserAssessmentSummary> {
    return paginateRecords(request, req => this.listUserAssessments(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listUserAssessmentsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listUserAssessments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUserAssessmentsResponses(
    request: requests.ListUserAssessmentsRequest
  ): AsyncIterableIterator<responses.ListUserAssessmentsResponse> {
    return paginateResponses(request, req => this.listUserAssessments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.UserAssessmentSummary objects
   * contained in responses from the listUserAssessments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUserAssessmentsRecordIterator(
    request: requests.ListUserAssessmentsRequest
  ): AsyncIterableIterator<model.UserAssessmentSummary> {
    return paginateRecords(request, req => this.listUserAssessments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listUserAssessments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUserAssessmentsResponseIterator(
    request: requests.ListUserAssessmentsRequest
  ): AsyncIterableIterator<responses.ListUserAssessmentsResponse> {
    return paginateResponses(request, req => this.listUserAssessments(req));
  }

  /**
   * Gets a list of users of the specified user assessment. The result contains the database user details for each user, such
   * as user type, account status, last login time, user creation time, authentication type, user profile, and the date and time
   * of the latest password change. It also contains the user category derived from these user details as well as privileges
   * granted to each user.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListUsersRequest
   * @return ListUsersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListUsers.ts.html |here} to see how to use ListUsers API.
   */
  public async listUsers(
    listUsersRequest: requests.ListUsersRequest
  ): Promise<responses.ListUsersResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listUsers.");
    const pathParams = {
      "{userAssessmentId}": listUsersRequest.userAssessmentId
    };

    const queryParams = {
      "limit": listUsersRequest.limit,
      "compartmentIdInSubtree": listUsersRequest.compartmentIdInSubtree,
      "accessLevel": listUsersRequest.accessLevel,
      "userCategory": listUsersRequest.userCategory,
      "userKey": listUsersRequest.userKey,
      "accountStatus": listUsersRequest.accountStatus,
      "authenticationType": listUsersRequest.authenticationType,
      "userName": listUsersRequest.userName,
      "targetId": listUsersRequest.targetId,
      "timeLastLoginGreaterThanOrEqualTo": listUsersRequest.timeLastLoginGreaterThanOrEqualTo,
      "timeLastLoginLessThan": listUsersRequest.timeLastLoginLessThan,
      "timeUserCreatedGreaterThanOrEqualTo": listUsersRequest.timeUserCreatedGreaterThanOrEqualTo,
      "timeUserCreatedLessThan": listUsersRequest.timeUserCreatedLessThan,
      "timePasswordLastChangedGreaterThanOrEqualTo":
        listUsersRequest.timePasswordLastChangedGreaterThanOrEqualTo,
      "timePasswordLastChangedLessThan": listUsersRequest.timePasswordLastChangedLessThan,
      "page": listUsersRequest.page,
      "sortOrder": listUsersRequest.sortOrder,
      "sortBy": listUsersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUsersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUsersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/users",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUsersResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.UserSummary,
        type: "Array<model.UserSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listUsersRecordIterator function.
   * Creates a new async iterator which will iterate over the models.UserSummary objects
   * contained in responses from the listUsers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUsers(
    request: requests.ListUsersRequest
  ): AsyncIterableIterator<model.UserSummary> {
    return paginateRecords(request, req => this.listUsers(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listUsersResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllUsersResponses(
    request: requests.ListUsersRequest
  ): AsyncIterableIterator<responses.ListUsersResponse> {
    return paginateResponses(request, req => this.listUsers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.UserSummary objects
   * contained in responses from the listUsers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUsersRecordIterator(
    request: requests.ListUsersRequest
  ): AsyncIterableIterator<model.UserSummary> {
    return paginateRecords(request, req => this.listUsers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listUsersResponseIterator(
    request: requests.ListUsersRequest
  ): AsyncIterableIterator<responses.ListUsersResponse> {
    return paginateResponses(request, req => this.listUsers(req));
  }

  /**
   * Gets a list of errors for the specified work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listWorkRequestErrors.");
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsRecordIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsResponseIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Gets a list of log entries for the specified work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listWorkRequestLogs.");
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsRecordIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsResponseIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Gets a list of work requests.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listWorkRequests.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "operationType": listWorkRequestsRequest.operationType,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestSummary,
        type: "Array<model.WorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsRecordIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsResponseIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Runs a security assessment, refreshes the latest assessment, and saves it for future reference.
   * The assessment runs with a securityAssessmentId of type LATEST. Before you start, first call the ListSecurityAssessments operation with filter \"type = latest\" to get the security assessment id for the target's latest assessment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RefreshSecurityAssessmentRequest
   * @return RefreshSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshSecurityAssessment.ts.html |here} to see how to use RefreshSecurityAssessment API.
   */
  public async refreshSecurityAssessment(
    refreshSecurityAssessmentRequest: requests.RefreshSecurityAssessmentRequest
  ): Promise<responses.RefreshSecurityAssessmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#refreshSecurityAssessment.");
    const pathParams = {
      "{securityAssessmentId}": refreshSecurityAssessmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": refreshSecurityAssessmentRequest.opcRetryToken,
      "opc-request-id": refreshSecurityAssessmentRequest.opcRequestId,
      "if-match": refreshSecurityAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      refreshSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/refresh",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        refreshSecurityAssessmentRequest.runSecurityAssessmentDetails,
        "RunSecurityAssessmentDetails",
        model.RunSecurityAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RefreshSecurityAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Refreshes the latest assessment and saves it for future reference. This operation runs with a userAssessmentId of type LATEST.
   * Before you start, first call the ListUserAssessments operation with filter \"type = latest\" to get the user assessment ID for
   * the target's latest assessment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RefreshUserAssessmentRequest
   * @return RefreshUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshUserAssessment.ts.html |here} to see how to use RefreshUserAssessment API.
   */
  public async refreshUserAssessment(
    refreshUserAssessmentRequest: requests.RefreshUserAssessmentRequest
  ): Promise<responses.RefreshUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#refreshUserAssessment.");
    const pathParams = {
      "{userAssessmentId}": refreshUserAssessmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": refreshUserAssessmentRequest.opcRetryToken,
      "opc-request-id": refreshUserAssessmentRequest.opcRequestId,
      "if-match": refreshUserAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      refreshUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/refresh",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        refreshUserAssessmentRequest.runUserAssessmentDetails,
        "RunUserAssessmentDetails",
        model.RunUserAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RefreshUserAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Sets the saved security assessment as the baseline in the compartment where the the specified assessment resides. The security assessment needs to be of type 'SAVED'.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SetSecurityAssessmentBaselineRequest
   * @return SetSecurityAssessmentBaselineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/SetSecurityAssessmentBaseline.ts.html |here} to see how to use SetSecurityAssessmentBaseline API.
   */
  public async setSecurityAssessmentBaseline(
    setSecurityAssessmentBaselineRequest: requests.SetSecurityAssessmentBaselineRequest
  ): Promise<responses.SetSecurityAssessmentBaselineResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#setSecurityAssessmentBaseline.");
    const pathParams = {
      "{securityAssessmentId}": setSecurityAssessmentBaselineRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": setSecurityAssessmentBaselineRequest.ifMatch,
      "opc-retry-token": setSecurityAssessmentBaselineRequest.opcRetryToken,
      "opc-request-id": setSecurityAssessmentBaselineRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      setSecurityAssessmentBaselineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/setBaseline",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        setSecurityAssessmentBaselineRequest.baseLineDetails,
        "SecurityAssessmentBaseLineDetails",
        model.SecurityAssessmentBaseLineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SetSecurityAssessmentBaselineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Sets the saved user assessment as the baseline in the compartment where the specified assessment resides. The user assessment needs to be of type 'SAVED'.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SetUserAssessmentBaselineRequest
   * @return SetUserAssessmentBaselineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/SetUserAssessmentBaseline.ts.html |here} to see how to use SetUserAssessmentBaseline API.
   */
  public async setUserAssessmentBaseline(
    setUserAssessmentBaselineRequest: requests.SetUserAssessmentBaselineRequest
  ): Promise<responses.SetUserAssessmentBaselineResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#setUserAssessmentBaseline.");
    const pathParams = {
      "{userAssessmentId}": setUserAssessmentBaselineRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": setUserAssessmentBaselineRequest.ifMatch,
      "opc-retry-token": setUserAssessmentBaselineRequest.opcRetryToken,
      "opc-request-id": setUserAssessmentBaselineRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      setUserAssessmentBaselineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/setBaseline",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        setUserAssessmentBaselineRequest.baseLineDetails,
        "UserAssessmentBaseLineDetails",
        model.UserAssessmentBaseLineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SetUserAssessmentBaselineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the baseline setting for the saved security assessment. The saved security assessment is no longer considered a baseline.
   * Sets the if-match parameter to the value of the etag from a previous GET or POST response for that resource.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UnsetSecurityAssessmentBaselineRequest
   * @return UnsetSecurityAssessmentBaselineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UnsetSecurityAssessmentBaseline.ts.html |here} to see how to use UnsetSecurityAssessmentBaseline API.
   */
  public async unsetSecurityAssessmentBaseline(
    unsetSecurityAssessmentBaselineRequest: requests.UnsetSecurityAssessmentBaselineRequest
  ): Promise<responses.UnsetSecurityAssessmentBaselineResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#unsetSecurityAssessmentBaseline.");
    const pathParams = {
      "{securityAssessmentId}": unsetSecurityAssessmentBaselineRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": unsetSecurityAssessmentBaselineRequest.ifMatch,
      "opc-retry-token": unsetSecurityAssessmentBaselineRequest.opcRetryToken,
      "opc-request-id": unsetSecurityAssessmentBaselineRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      unsetSecurityAssessmentBaselineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}/actions/unsetBaseline",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UnsetSecurityAssessmentBaselineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the baseline setting for the saved user assessment. The saved user assessment is no longer considered a baseline.
   * Sets the if-match parameter to the value of the etag from a previous GET or POST response for that resource.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UnsetUserAssessmentBaselineRequest
   * @return UnsetUserAssessmentBaselineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UnsetUserAssessmentBaseline.ts.html |here} to see how to use UnsetUserAssessmentBaseline API.
   */
  public async unsetUserAssessmentBaseline(
    unsetUserAssessmentBaselineRequest: requests.UnsetUserAssessmentBaselineRequest
  ): Promise<responses.UnsetUserAssessmentBaselineResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#unsetUserAssessmentBaseline.");
    const pathParams = {
      "{userAssessmentId}": unsetUserAssessmentBaselineRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": unsetUserAssessmentBaselineRequest.ifMatch,
      "opc-retry-token": unsetUserAssessmentBaselineRequest.opcRetryToken,
      "opc-request-id": unsetUserAssessmentBaselineRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      unsetUserAssessmentBaselineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}/actions/unsetBaseline",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UnsetUserAssessmentBaselineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified Data Safe private endpoint.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDataSafePrivateEndpointRequest
   * @return UpdateDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateDataSafePrivateEndpoint.ts.html |here} to see how to use UpdateDataSafePrivateEndpoint API.
   */
  public async updateDataSafePrivateEndpoint(
    updateDataSafePrivateEndpointRequest: requests.UpdateDataSafePrivateEndpointRequest
  ): Promise<responses.UpdateDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateDataSafePrivateEndpoint.");
    const pathParams = {
      "{dataSafePrivateEndpointId}": updateDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDataSafePrivateEndpointRequest.ifMatch,
      "opc-request-id": updateDataSafePrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDataSafePrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDataSafePrivateEndpointRequest.updateDataSafePrivateEndpointDetails,
        "UpdateDataSafePrivateEndpointDetails",
        model.UpdateDataSafePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDataSafePrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified on-premises connector.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateOnPremConnectorRequest
   * @return UpdateOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateOnPremConnector.ts.html |here} to see how to use UpdateOnPremConnector API.
   */
  public async updateOnPremConnector(
    updateOnPremConnectorRequest: requests.UpdateOnPremConnectorRequest
  ): Promise<responses.UpdateOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateOnPremConnector.");
    const pathParams = {
      "{onPremConnectorId}": updateOnPremConnectorRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOnPremConnectorRequest.ifMatch,
      "opc-request-id": updateOnPremConnectorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOnPremConnectorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOnPremConnectorRequest.updateOnPremConnectorDetails,
        "UpdateOnPremConnectorDetails",
        model.UpdateOnPremConnectorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOnPremConnectorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the wallet for the specified on-premises connector to a new version.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateOnPremConnectorWalletRequest
   * @return UpdateOnPremConnectorWalletResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateOnPremConnectorWallet.ts.html |here} to see how to use UpdateOnPremConnectorWallet API.
   */
  public async updateOnPremConnectorWallet(
    updateOnPremConnectorWalletRequest: requests.UpdateOnPremConnectorWalletRequest
  ): Promise<responses.UpdateOnPremConnectorWalletResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateOnPremConnectorWallet.");
    const pathParams = {
      "{onPremConnectorId}": updateOnPremConnectorWalletRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateOnPremConnectorWalletRequest.opcRetryToken,
      "if-match": updateOnPremConnectorWalletRequest.ifMatch,
      "opc-request-id": updateOnPremConnectorWalletRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOnPremConnectorWalletRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}/wallet",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOnPremConnectorWalletRequest.updateOnPremConnectorWalletDetails,
        "UpdateOnPremConnectorWalletDetails",
        model.UpdateOnPremConnectorWalletDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOnPremConnectorWalletResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified security assessment. This operation allows to update the security assessment displayName, description, or schedule.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateSecurityAssessmentRequest
   * @return UpdateSecurityAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSecurityAssessment.ts.html |here} to see how to use UpdateSecurityAssessment API.
   */
  public async updateSecurityAssessment(
    updateSecurityAssessmentRequest: requests.UpdateSecurityAssessmentRequest
  ): Promise<responses.UpdateSecurityAssessmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateSecurityAssessment.");
    const pathParams = {
      "{securityAssessmentId}": updateSecurityAssessmentRequest.securityAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateSecurityAssessmentRequest.opcRequestId,
      "if-match": updateSecurityAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSecurityAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityAssessments/{securityAssessmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSecurityAssessmentRequest.updateSecurityAssessmentDetails,
        "UpdateSecurityAssessmentDetails",
        model.UpdateSecurityAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSecurityAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified Data Safe target database.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateTargetDatabaseRequest
   * @return UpdateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateTargetDatabase.ts.html |here} to see how to use UpdateTargetDatabase API.
   */
  public async updateTargetDatabase(
    updateTargetDatabaseRequest: requests.UpdateTargetDatabaseRequest
  ): Promise<responses.UpdateTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateTargetDatabase.");
    const pathParams = {
      "{targetDatabaseId}": updateTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateTargetDatabaseRequest.opcRequestId,
      "if-match": updateTargetDatabaseRequest.ifMatch,
      "opc-retry-token": updateTargetDatabaseRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTargetDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTargetDatabaseRequest.updateTargetDatabaseDetails,
        "UpdateTargetDatabaseDetails",
        model.UpdateTargetDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified user assessment. This operation allows to update the user assessment displayName, description, or schedule.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateUserAssessmentRequest
   * @return UpdateUserAssessmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateUserAssessment.ts.html |here} to see how to use UpdateUserAssessment API.
   */
  public async updateUserAssessment(
    updateUserAssessmentRequest: requests.UpdateUserAssessmentRequest
  ): Promise<responses.UpdateUserAssessmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateUserAssessment.");
    const pathParams = {
      "{userAssessmentId}": updateUserAssessmentRequest.userAssessmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateUserAssessmentRequest.opcRequestId,
      "if-match": updateUserAssessmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateUserAssessmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/userAssessments/{userAssessmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateUserAssessmentRequest.updateUserAssessmentDetails,
        "UpdateUserAssessmentDetails",
        model.UpdateUserAssessmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateUserAssessmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { DataSafeWaiter } from "./datasafe-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DataSafeApiKeys {}

export class DataSafeClient {
  protected static serviceEndpointTemplate = "https://datasafe.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DataSafeWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    if (!this._circuitBreaker && common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!)) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20181201";
    if (this.logger) this.logger.info(`DataSafeClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DataSafeClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DataSafeClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new DataSafeWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DataSafeWaiter {
    this._waiters = new DataSafeWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DataSafeWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Reactivates a previously deactivated Data Safe target database.
   *
   * @param ActivateTargetDatabaseRequest
   * @return ActivateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ActivateTargetDatabase.ts.html |here} to see how to use ActivateTargetDatabase API.
   */
  public async activateTargetDatabase(
    activateTargetDatabaseRequest: requests.ActivateTargetDatabaseRequest
  ): Promise<responses.ActivateTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#activateTargetDatabase.");
    const pathParams = {
      "{targetDatabaseId}": activateTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": activateTargetDatabaseRequest.opcRetryToken,
      "if-match": activateTargetDatabaseRequest.ifMatch,
      "opc-request-id": activateTargetDatabaseRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      activateTargetDatabaseRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/actions/activate",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        activateTargetDatabaseRequest.activateTargetDatabaseDetails,
        "ActivateTargetDatabaseDetails",
        model.ActivateTargetDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ActivateTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Data Safe private endpoint and its dependent resources to the specified compartment.
   * @param ChangeDataSafePrivateEndpointCompartmentRequest
   * @return ChangeDataSafePrivateEndpointCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeDataSafePrivateEndpointCompartment.ts.html |here} to see how to use ChangeDataSafePrivateEndpointCompartment API.
   */
  public async changeDataSafePrivateEndpointCompartment(
    changeDataSafePrivateEndpointCompartmentRequest: requests.ChangeDataSafePrivateEndpointCompartmentRequest
  ): Promise<responses.ChangeDataSafePrivateEndpointCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataSafeClient#changeDataSafePrivateEndpointCompartment."
      );
    const pathParams = {
      "{dataSafePrivateEndpointId}":
        changeDataSafePrivateEndpointCompartmentRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDataSafePrivateEndpointCompartmentRequest.opcRequestId,
      "if-match": changeDataSafePrivateEndpointCompartmentRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeDataSafePrivateEndpointCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDataSafePrivateEndpointCompartmentRequest.changeDataSafePrivateEndpointCompartmentDetails,
        "ChangeDataSafePrivateEndpointCompartmentDetails",
        model.ChangeDataSafePrivateEndpointCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDataSafePrivateEndpointCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified on-premises connector into a different compartment.
   * @param ChangeOnPremConnectorCompartmentRequest
   * @return ChangeOnPremConnectorCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeOnPremConnectorCompartment.ts.html |here} to see how to use ChangeOnPremConnectorCompartment API.
   */
  public async changeOnPremConnectorCompartment(
    changeOnPremConnectorCompartmentRequest: requests.ChangeOnPremConnectorCompartmentRequest
  ): Promise<responses.ChangeOnPremConnectorCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeOnPremConnectorCompartment.");
    const pathParams = {
      "{onPremConnectorId}": changeOnPremConnectorCompartmentRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeOnPremConnectorCompartmentRequest.opcRequestId,
      "if-match": changeOnPremConnectorCompartmentRequest.ifMatch,
      "opc-retry-token": changeOnPremConnectorCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeOnPremConnectorCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeOnPremConnectorCompartmentRequest.changeOnPremConnectorCompartmentDetails,
        "ChangeOnPremConnectorCompartmentDetails",
        model.ChangeOnPremConnectorCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeOnPremConnectorCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Data Safe target database to the specified compartment.
   * @param ChangeTargetDatabaseCompartmentRequest
   * @return ChangeTargetDatabaseCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeTargetDatabaseCompartment.ts.html |here} to see how to use ChangeTargetDatabaseCompartment API.
   */
  public async changeTargetDatabaseCompartment(
    changeTargetDatabaseCompartmentRequest: requests.ChangeTargetDatabaseCompartmentRequest
  ): Promise<responses.ChangeTargetDatabaseCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#changeTargetDatabaseCompartment.");
    const pathParams = {
      "{targetDatabaseId}": changeTargetDatabaseCompartmentRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeTargetDatabaseCompartmentRequest.ifMatch,
      "opc-request-id": changeTargetDatabaseCompartmentRequest.opcRequestId,
      "opc-retry-token": changeTargetDatabaseCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeTargetDatabaseCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeTargetDatabaseCompartmentRequest.changeTargetDatabaseCompartmentDetails,
        "ChangeTargetDatabaseCompartmentDetails",
        model.ChangeTargetDatabaseCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeTargetDatabaseCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Data Safe private endpoint.
   *
   * @param CreateDataSafePrivateEndpointRequest
   * @return CreateDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateDataSafePrivateEndpoint.ts.html |here} to see how to use CreateDataSafePrivateEndpoint API.
   */
  public async createDataSafePrivateEndpoint(
    createDataSafePrivateEndpointRequest: requests.CreateDataSafePrivateEndpointRequest
  ): Promise<responses.CreateDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#createDataSafePrivateEndpoint.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDataSafePrivateEndpointRequest.opcRetryToken,
      "opc-request-id": createDataSafePrivateEndpointRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createDataSafePrivateEndpointRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDataSafePrivateEndpointRequest.createDataSafePrivateEndpointDetails,
        "CreateDataSafePrivateEndpointDetails",
        model.CreateDataSafePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDataSafePrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "dataSafePrivateEndpoint",
        bodyModel: model.DataSafePrivateEndpoint,
        type: "model.DataSafePrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new on-premises connector.
   *
   * @param CreateOnPremConnectorRequest
   * @return CreateOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateOnPremConnector.ts.html |here} to see how to use CreateOnPremConnector API.
   */
  public async createOnPremConnector(
    createOnPremConnectorRequest: requests.CreateOnPremConnectorRequest
  ): Promise<responses.CreateOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createOnPremConnector.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createOnPremConnectorRequest.opcRetryToken,
      "opc-request-id": createOnPremConnectorRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createOnPremConnectorRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOnPremConnectorRequest.createOnPremConnectorDetails,
        "CreateOnPremConnectorDetails",
        model.CreateOnPremConnectorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOnPremConnectorResponse>{},
        body: await response.json(),
        bodyKey: "onPremConnector",
        bodyModel: model.OnPremConnector,
        type: "model.OnPremConnector",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Registers the specified database with Data Safe and creates a Data Safe target database in the Data Safe Console.
   *
   * @param CreateTargetDatabaseRequest
   * @return CreateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateTargetDatabase.ts.html |here} to see how to use CreateTargetDatabase API.
   */
  public async createTargetDatabase(
    createTargetDatabaseRequest: requests.CreateTargetDatabaseRequest
  ): Promise<responses.CreateTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#createTargetDatabase.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTargetDatabaseRequest.opcRetryToken,
      "opc-request-id": createTargetDatabaseRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createTargetDatabaseRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTargetDatabaseRequest.createTargetDatabaseDetails,
        "CreateTargetDatabaseDetails",
        model.CreateTargetDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTargetDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "targetDatabase",
        bodyModel: model.TargetDatabase,
        type: "model.TargetDatabase",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deactivates a target database in Data Safe.
   *
   * @param DeactivateTargetDatabaseRequest
   * @return DeactivateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeactivateTargetDatabase.ts.html |here} to see how to use DeactivateTargetDatabase API.
   */
  public async deactivateTargetDatabase(
    deactivateTargetDatabaseRequest: requests.DeactivateTargetDatabaseRequest
  ): Promise<responses.DeactivateTargetDatabaseResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deactivateTargetDatabase.");
    const pathParams = {
      "{targetDatabaseId}": deactivateTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": deactivateTargetDatabaseRequest.opcRetryToken,
      "if-match": deactivateTargetDatabaseRequest.ifMatch,
      "opc-request-id": deactivateTargetDatabaseRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deactivateTargetDatabaseRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}/actions/deactivate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeactivateTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified Data Safe private endpoint.
   * @param DeleteDataSafePrivateEndpointRequest
   * @return DeleteDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteDataSafePrivateEndpoint.ts.html |here} to see how to use DeleteDataSafePrivateEndpoint API.
   */
  public async deleteDataSafePrivateEndpoint(
    deleteDataSafePrivateEndpointRequest: requests.DeleteDataSafePrivateEndpointRequest
  ): Promise<responses.DeleteDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#deleteDataSafePrivateEndpoint.");
    const pathParams = {
      "{dataSafePrivateEndpointId}": deleteDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDataSafePrivateEndpointRequest.ifMatch,
      "opc-request-id": deleteDataSafePrivateEndpointRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteDataSafePrivateEndpointRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDataSafePrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified on-premises connector.
   * @param DeleteOnPremConnectorRequest
   * @return DeleteOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteOnPremConnector.ts.html |here} to see how to use DeleteOnPremConnector API.
   */
  public async deleteOnPremConnector(
    deleteOnPremConnectorRequest: requests.DeleteOnPremConnectorRequest
  ): Promise<responses.DeleteOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteOnPremConnector.");
    const pathParams = {
      "{onPremConnectorId}": deleteOnPremConnectorRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOnPremConnectorRequest.ifMatch,
      "opc-request-id": deleteOnPremConnectorRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteOnPremConnectorRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOnPremConnectorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deregisters the specified database from Data Safe and removes the target database from the Data Safe Console.
   * @param DeleteTargetDatabaseRequest
   * @return DeleteTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteTargetDatabase.ts.html |here} to see how to use DeleteTargetDatabase API.
   */
  public async deleteTargetDatabase(
    deleteTargetDatabaseRequest: requests.DeleteTargetDatabaseRequest
  ): Promise<responses.DeleteTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#deleteTargetDatabase.");
    const pathParams = {
      "{targetDatabaseId}": deleteTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTargetDatabaseRequest.ifMatch,
      "opc-request-id": deleteTargetDatabaseRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteTargetDatabaseRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads the privilege script to grant/revoke required roles from the Data Safe account on the target database.
   *
   * @param DownloadPrivilegeScriptRequest
   * @return DownloadPrivilegeScriptResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadPrivilegeScript.ts.html |here} to see how to use DownloadPrivilegeScript API.
   */
  public async downloadPrivilegeScript(
    downloadPrivilegeScriptRequest: requests.DownloadPrivilegeScriptRequest
  ): Promise<responses.DownloadPrivilegeScriptResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#downloadPrivilegeScript.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": downloadPrivilegeScriptRequest.opcRetryToken,
      "opc-request-id": downloadPrivilegeScriptRequest.opcRequestId,
      "if-match": downloadPrivilegeScriptRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      downloadPrivilegeScriptRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/downloadPrivilegeScript",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DownloadPrivilegeScriptResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enables Data Safe in the tenancy and region.
   *
   * @param EnableDataSafeConfigurationRequest
   * @return EnableDataSafeConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/EnableDataSafeConfiguration.ts.html |here} to see how to use EnableDataSafeConfiguration API.
   */
  public async enableDataSafeConfiguration(
    enableDataSafeConfigurationRequest: requests.EnableDataSafeConfigurationRequest
  ): Promise<responses.EnableDataSafeConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#enableDataSafeConfiguration.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": enableDataSafeConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": enableDataSafeConfigurationRequest.ifMatch,
      "opc-request-id": enableDataSafeConfigurationRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      enableDataSafeConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        enableDataSafeConfigurationRequest.enableDataSafeConfigurationDetails,
        "EnableDataSafeConfigurationDetails",
        model.EnableDataSafeConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.EnableDataSafeConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates and downloads the configuration of the specified on-premises connector.
   *
   * @param GenerateOnPremConnectorConfigurationRequest
   * @return GenerateOnPremConnectorConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateOnPremConnectorConfiguration.ts.html |here} to see how to use GenerateOnPremConnectorConfiguration API.
   */
  public async generateOnPremConnectorConfiguration(
    generateOnPremConnectorConfigurationRequest: requests.GenerateOnPremConnectorConfigurationRequest
  ): Promise<responses.GenerateOnPremConnectorConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#generateOnPremConnectorConfiguration.");
    const pathParams = {
      "{onPremConnectorId}": generateOnPremConnectorConfigurationRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": generateOnPremConnectorConfigurationRequest.opcRetryToken,
      "opc-request-id": generateOnPremConnectorConfigurationRequest.opcRequestId,
      "if-match": generateOnPremConnectorConfigurationRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      generateOnPremConnectorConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}/actions/generateConfiguration",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        generateOnPremConnectorConfigurationRequest.generateOnPremConnectorConfigurationDetails,
        "GenerateOnPremConnectorConfigurationDetails",
        model.GenerateOnPremConnectorConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GenerateOnPremConnectorConfigurationResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the Data Safe configuration.
   * @param GetDataSafeConfigurationRequest
   * @return GetDataSafeConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDataSafeConfiguration.ts.html |here} to see how to use GetDataSafeConfiguration API.
   */
  public async getDataSafeConfiguration(
    getDataSafeConfigurationRequest: requests.GetDataSafeConfigurationRequest
  ): Promise<responses.GetDataSafeConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getDataSafeConfiguration.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": getDataSafeConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataSafeConfigurationRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDataSafeConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configuration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataSafeConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "dataSafeConfiguration",
        bodyModel: model.DataSafeConfiguration,
        type: "model.DataSafeConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified Data Safe private endpoint.
   * @param GetDataSafePrivateEndpointRequest
   * @return GetDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDataSafePrivateEndpoint.ts.html |here} to see how to use GetDataSafePrivateEndpoint API.
   */
  public async getDataSafePrivateEndpoint(
    getDataSafePrivateEndpointRequest: requests.GetDataSafePrivateEndpointRequest
  ): Promise<responses.GetDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#getDataSafePrivateEndpoint.");
    const pathParams = {
      "{dataSafePrivateEndpointId}": getDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataSafePrivateEndpointRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDataSafePrivateEndpointRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataSafePrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "dataSafePrivateEndpoint",
        bodyModel: model.DataSafePrivateEndpoint,
        type: "model.DataSafePrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified on-premises connector.
   * @param GetOnPremConnectorRequest
   * @return GetOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetOnPremConnector.ts.html |here} to see how to use GetOnPremConnector API.
   */
  public async getOnPremConnector(
    getOnPremConnectorRequest: requests.GetOnPremConnectorRequest
  ): Promise<responses.GetOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getOnPremConnector.");
    const pathParams = {
      "{onPremConnectorId}": getOnPremConnectorRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOnPremConnectorRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getOnPremConnectorRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOnPremConnectorResponse>{},
        body: await response.json(),
        bodyKey: "onPremConnector",
        bodyModel: model.OnPremConnector,
        type: "model.OnPremConnector",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the details of the specified Data Safe target database.
   *
   * @param GetTargetDatabaseRequest
   * @return GetTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetTargetDatabase.ts.html |here} to see how to use GetTargetDatabase API.
   */
  public async getTargetDatabase(
    getTargetDatabaseRequest: requests.GetTargetDatabaseRequest
  ): Promise<responses.GetTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getTargetDatabase.");
    const pathParams = {
      "{targetDatabaseId}": getTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTargetDatabaseRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTargetDatabaseRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTargetDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "targetDatabase",
        bodyModel: model.TargetDatabase,
        type: "model.TargetDatabase",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the specified work request.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#getWorkRequest.");
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getWorkRequestRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of Data Safe private endpoints.
   *
   * @param ListDataSafePrivateEndpointsRequest
   * @return ListDataSafePrivateEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDataSafePrivateEndpoints.ts.html |here} to see how to use ListDataSafePrivateEndpoints API.
   */
  public async listDataSafePrivateEndpoints(
    listDataSafePrivateEndpointsRequest: requests.ListDataSafePrivateEndpointsRequest
  ): Promise<responses.ListDataSafePrivateEndpointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#listDataSafePrivateEndpoints.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDataSafePrivateEndpointsRequest.compartmentId,
      "displayName": listDataSafePrivateEndpointsRequest.displayName,
      "vcnId": listDataSafePrivateEndpointsRequest.vcnId,
      "lifecycleState": listDataSafePrivateEndpointsRequest.lifecycleState,
      "limit": listDataSafePrivateEndpointsRequest.limit,
      "page": listDataSafePrivateEndpointsRequest.page,
      "sortOrder": listDataSafePrivateEndpointsRequest.sortOrder,
      "sortBy": listDataSafePrivateEndpointsRequest.sortBy,
      "compartmentIdInSubtree": listDataSafePrivateEndpointsRequest.compartmentIdInSubtree,
      "accessLevel": listDataSafePrivateEndpointsRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDataSafePrivateEndpointsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDataSafePrivateEndpointsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDataSafePrivateEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.DataSafePrivateEndpointSummary,
        type: "Array<model.DataSafePrivateEndpointSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.DataSafePrivateEndpointSummary objects
   * contained in responses from the listDataSafePrivateEndpoints operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDataSafePrivateEndpoints(
    request: requests.ListDataSafePrivateEndpointsRequest
  ): AsyncIterableIterator<model.DataSafePrivateEndpointSummary> {
    return paginateRecords(request, req => this.listDataSafePrivateEndpoints(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDataSafePrivateEndpoints operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDataSafePrivateEndpointsResponses(
    request: requests.ListDataSafePrivateEndpointsRequest
  ): AsyncIterableIterator<responses.ListDataSafePrivateEndpointsResponse> {
    return paginateResponses(request, req => this.listDataSafePrivateEndpoints(req));
  }

  /**
   * Gets a list of on-premises connectors.
   *
   * @param ListOnPremConnectorsRequest
   * @return ListOnPremConnectorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListOnPremConnectors.ts.html |here} to see how to use ListOnPremConnectors API.
   */
  public async listOnPremConnectors(
    listOnPremConnectorsRequest: requests.ListOnPremConnectorsRequest
  ): Promise<responses.ListOnPremConnectorsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listOnPremConnectors.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOnPremConnectorsRequest.compartmentId,
      "onPremConnectorId": listOnPremConnectorsRequest.onPremConnectorId,
      "displayName": listOnPremConnectorsRequest.displayName,
      "onPremConnectorLifecycleState": listOnPremConnectorsRequest.onPremConnectorLifecycleState,
      "limit": listOnPremConnectorsRequest.limit,
      "page": listOnPremConnectorsRequest.page,
      "sortOrder": listOnPremConnectorsRequest.sortOrder,
      "sortBy": listOnPremConnectorsRequest.sortBy,
      "compartmentIdInSubtree": listOnPremConnectorsRequest.compartmentIdInSubtree,
      "accessLevel": listOnPremConnectorsRequest.accessLevel
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOnPremConnectorsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listOnPremConnectorsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOnPremConnectorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.OnPremConnectorSummary,
        type: "Array<model.OnPremConnectorSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.OnPremConnectorSummary objects
   * contained in responses from the listOnPremConnectors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllOnPremConnectors(
    request: requests.ListOnPremConnectorsRequest
  ): AsyncIterableIterator<model.OnPremConnectorSummary> {
    return paginateRecords(request, req => this.listOnPremConnectors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listOnPremConnectors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllOnPremConnectorsResponses(
    request: requests.ListOnPremConnectorsRequest
  ): AsyncIterableIterator<responses.ListOnPremConnectorsResponse> {
    return paginateResponses(request, req => this.listOnPremConnectors(req));
  }

  /**
   * Returns the list of registered target databases in Data Safe.
   *
   * @param ListTargetDatabasesRequest
   * @return ListTargetDatabasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListTargetDatabases.ts.html |here} to see how to use ListTargetDatabases API.
   */
  public async listTargetDatabases(
    listTargetDatabasesRequest: requests.ListTargetDatabasesRequest
  ): Promise<responses.ListTargetDatabasesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listTargetDatabases.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listTargetDatabasesRequest.compartmentId,
      "targetDatabaseId": listTargetDatabasesRequest.targetDatabaseId,
      "displayName": listTargetDatabasesRequest.displayName,
      "lifecycleState": listTargetDatabasesRequest.lifecycleState,
      "databaseType": listTargetDatabasesRequest.databaseType,
      "infrastructureType": listTargetDatabasesRequest.infrastructureType,
      "limit": listTargetDatabasesRequest.limit,
      "page": listTargetDatabasesRequest.page,
      "compartmentIdInSubtree": listTargetDatabasesRequest.compartmentIdInSubtree,
      "accessLevel": listTargetDatabasesRequest.accessLevel,
      "sortOrder": listTargetDatabasesRequest.sortOrder,
      "sortBy": listTargetDatabasesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTargetDatabasesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listTargetDatabasesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTargetDatabasesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.TargetDatabaseSummary,
        type: "Array<model.TargetDatabaseSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.TargetDatabaseSummary objects
   * contained in responses from the listTargetDatabases operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTargetDatabases(
    request: requests.ListTargetDatabasesRequest
  ): AsyncIterableIterator<model.TargetDatabaseSummary> {
    return paginateRecords(request, req => this.listTargetDatabases(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listTargetDatabases operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTargetDatabasesResponses(
    request: requests.ListTargetDatabasesRequest
  ): AsyncIterableIterator<responses.ListTargetDatabasesResponse> {
    return paginateResponses(request, req => this.listTargetDatabases(req));
  }

  /**
   * Gets a list of errors for the specified work request.
   *
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listWorkRequestErrors.");
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestErrorsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Gets a list of log entries for the specified work request.
   *
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listWorkRequestLogs.");
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestLogsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Gets a list of work requests.
   *
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#listWorkRequests.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "operationType": listWorkRequestsRequest.operationType,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestSummary,
        type: "Array<model.WorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Updates one or more attributes of the specified Data Safe private endpoint.
   * @param UpdateDataSafePrivateEndpointRequest
   * @return UpdateDataSafePrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateDataSafePrivateEndpoint.ts.html |here} to see how to use UpdateDataSafePrivateEndpoint API.
   */
  public async updateDataSafePrivateEndpoint(
    updateDataSafePrivateEndpointRequest: requests.UpdateDataSafePrivateEndpointRequest
  ): Promise<responses.UpdateDataSafePrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateDataSafePrivateEndpoint.");
    const pathParams = {
      "{dataSafePrivateEndpointId}": updateDataSafePrivateEndpointRequest.dataSafePrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDataSafePrivateEndpointRequest.ifMatch,
      "opc-request-id": updateDataSafePrivateEndpointRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateDataSafePrivateEndpointRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dataSafePrivateEndpoints/{dataSafePrivateEndpointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDataSafePrivateEndpointRequest.updateDataSafePrivateEndpointDetails,
        "UpdateDataSafePrivateEndpointDetails",
        model.UpdateDataSafePrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDataSafePrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified on-premises connector.
   * @param UpdateOnPremConnectorRequest
   * @return UpdateOnPremConnectorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateOnPremConnector.ts.html |here} to see how to use UpdateOnPremConnector API.
   */
  public async updateOnPremConnector(
    updateOnPremConnectorRequest: requests.UpdateOnPremConnectorRequest
  ): Promise<responses.UpdateOnPremConnectorResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateOnPremConnector.");
    const pathParams = {
      "{onPremConnectorId}": updateOnPremConnectorRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOnPremConnectorRequest.ifMatch,
      "opc-request-id": updateOnPremConnectorRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateOnPremConnectorRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOnPremConnectorRequest.updateOnPremConnectorDetails,
        "UpdateOnPremConnectorDetails",
        model.UpdateOnPremConnectorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOnPremConnectorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the wallet for the specified on-premises connector to a new version.
   *
   * @param UpdateOnPremConnectorWalletRequest
   * @return UpdateOnPremConnectorWalletResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateOnPremConnectorWallet.ts.html |here} to see how to use UpdateOnPremConnectorWallet API.
   */
  public async updateOnPremConnectorWallet(
    updateOnPremConnectorWalletRequest: requests.UpdateOnPremConnectorWalletRequest
  ): Promise<responses.UpdateOnPremConnectorWalletResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataSafeClient#updateOnPremConnectorWallet.");
    const pathParams = {
      "{onPremConnectorId}": updateOnPremConnectorWalletRequest.onPremConnectorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateOnPremConnectorWalletRequest.opcRetryToken,
      "if-match": updateOnPremConnectorWalletRequest.ifMatch,
      "opc-request-id": updateOnPremConnectorWalletRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateOnPremConnectorWalletRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/onPremConnectors/{onPremConnectorId}/wallet",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOnPremConnectorWalletRequest.updateOnPremConnectorWalletDetails,
        "UpdateOnPremConnectorWalletDetails",
        model.UpdateOnPremConnectorWalletDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOnPremConnectorWalletResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified Data Safe target database.
   * @param UpdateTargetDatabaseRequest
   * @return UpdateTargetDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateTargetDatabase.ts.html |here} to see how to use UpdateTargetDatabase API.
   */
  public async updateTargetDatabase(
    updateTargetDatabaseRequest: requests.UpdateTargetDatabaseRequest
  ): Promise<responses.UpdateTargetDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DataSafeClient#updateTargetDatabase.");
    const pathParams = {
      "{targetDatabaseId}": updateTargetDatabaseRequest.targetDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateTargetDatabaseRequest.opcRequestId,
      "if-match": updateTargetDatabaseRequest.ifMatch,
      "opc-retry-token": updateTargetDatabaseRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateTargetDatabaseRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/targetDatabases/{targetDatabaseId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTargetDatabaseRequest.updateTargetDatabaseDetails,
        "UpdateTargetDatabaseDetails",
        model.UpdateTargetDatabaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTargetDatabaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

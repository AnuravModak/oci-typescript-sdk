/**
 * Database Management API
 * Use the Database Management API to perform tasks such as obtaining performance and resource usage metrics
for a fleet of Managed Databases or a specific Managed Database, creating Managed Database Groups, and
running a SQL job on a Managed Database or Managed Database Group.

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The list of aggregated metrics for Managed MySQL Databases in the fleet.
 */
export interface MySqlDatabaseUsageMetrics {
  /**
   * The OCID of the compartment where the Managed MySQL Database resides.
   */
  "compartmentId": string;
  /**
   * The display name of the Managed MySQL Database.
   */
  "databaseName": string;
  /**
   * Indicates MySQL Database type, ONPREMISE or MySQL Database System.
   */
  "databaseType": string;
  /**
   * The type of MySQL Database System.
   */
  "mdsDeploymentType": string;
  /**
   * The lifecycle state of the MySQL Database System.
   */
  "mdslifecycleState": string;
  /**
   * The version of the MySQL Database.
   */
  "databaseVersion": string;
  /**
   * The OCID of the Managed MySQL Database.
   */
  "dbId": string;
  /**
   * The status of the MySQL Database. Indicates whether the status of the database
   * is UP, DOWN, or UNKNOWN at the current time.
   *
   */
  "databaseStatus": model.MySqlDatabaseStatus;
  /**
   * A list of the database health metrics like CPU, Storage, and Memory.
   */
  "metrics": Array<model.MySqlFleetMetricDefinition>;
}

export namespace MySqlDatabaseUsageMetrics {
  export function getJsonObj(obj: MySqlDatabaseUsageMetrics): object {
    const jsonObj = {
      ...obj,
      ...{
        "metrics": obj.metrics
          ? obj.metrics.map(item => {
              return model.MySqlFleetMetricDefinition.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: MySqlDatabaseUsageMetrics): object {
    const jsonObj = {
      ...obj,
      ...{
        "metrics": obj.metrics
          ? obj.metrics.map(item => {
              return model.MySqlFleetMetricDefinition.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}

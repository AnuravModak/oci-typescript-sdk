/**
 * Database Management API
 * Use the Database Management API to perform tasks such as obtaining performance and resource usage metrics
for a fleet of Managed Databases or a specific Managed Database, creating Managed Database Groups, and
running a SQL job on a Managed Database or Managed Database Group.

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DbManagementWaiter } from "./dbmanagement-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DbManagementApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DbManagementClient {
  protected static serviceEndpointTemplate = "https://dbmgmt.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DbManagementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20201101";
    if (this.logger) this.logger.info(`DbManagementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DbManagementClient.serviceEndpointTemplate,
      region,
      DbManagementClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DbManagementClient.serviceEndpointTemplate,
      regionId,
      DbManagementClient.endpointServiceName
    );
  }

  /**
   * Creates a new DbManagementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DbManagementWaiter {
    this._waiters = new DbManagementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DbManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Adds data files or temp files to the tablespace.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddDataFilesRequest
   * @return AddDataFilesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/AddDataFiles.ts.html |here} to see how to use AddDataFiles API.
   */
  public async addDataFiles(
    addDataFilesRequest: requests.AddDataFilesRequest
  ): Promise<responses.AddDataFilesResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#addDataFiles.");
    const pathParams = {
      "{managedDatabaseId}": addDataFilesRequest.managedDatabaseId,
      "{tablespaceName}": addDataFilesRequest.tablespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addDataFilesRequest.opcRequestId,
      "opc-retry-token": addDataFilesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addDataFilesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}/actions/addDataFiles",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addDataFilesRequest.addDataFilesDetails,
        "AddDataFilesDetails",
        model.AddDataFilesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AddDataFilesResponse>{},
        body: await response.json(),
        bodyKey: "tablespaceAdminStatus",
        bodyModel: model.TablespaceAdminStatus,
        type: "model.TablespaceAdminStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a Managed Database to a specific Managed Database Group.
   * After the database is added, it will be included in the
   * management activities performed on the Managed Database Group.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddManagedDatabaseToManagedDatabaseGroupRequest
   * @return AddManagedDatabaseToManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/AddManagedDatabaseToManagedDatabaseGroup.ts.html |here} to see how to use AddManagedDatabaseToManagedDatabaseGroup API.
   */
  public async addManagedDatabaseToManagedDatabaseGroup(
    addManagedDatabaseToManagedDatabaseGroupRequest: requests.AddManagedDatabaseToManagedDatabaseGroupRequest
  ): Promise<responses.AddManagedDatabaseToManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DbManagementClient#addManagedDatabaseToManagedDatabaseGroup."
      );
    const pathParams = {
      "{managedDatabaseGroupId}":
        addManagedDatabaseToManagedDatabaseGroupRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addManagedDatabaseToManagedDatabaseGroupRequest.opcRequestId,
      "opc-retry-token": addManagedDatabaseToManagedDatabaseGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addManagedDatabaseToManagedDatabaseGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/addManagedDatabase",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addManagedDatabaseToManagedDatabaseGroupRequest.addManagedDatabaseToManagedDatabaseGroupDetails,
        "AddManagedDatabaseToManagedDatabaseGroupDetails",
        model.AddManagedDatabaseToManagedDatabaseGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AddManagedDatabaseToManagedDatabaseGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Changes database parameter values. There are two kinds of database
* parameters:
* <p>
- Dynamic parameters: They can be changed for the current Oracle
* Database instance. The changes take effect immediately.
* - Static parameters: They cannot be changed for the current instance.
* You must change these parameters and then restart the database before
* changes take effect.
* <p>
**Note:** If the instance is started using a text initialization
* parameter file, the parameter changes are applicable only for the
* current instance. You must update them manually to be passed to
* a future instance.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeDatabaseParametersRequest
     * @return ChangeDatabaseParametersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ChangeDatabaseParameters.ts.html |here} to see how to use ChangeDatabaseParameters API.
     */
  public async changeDatabaseParameters(
    changeDatabaseParametersRequest: requests.ChangeDatabaseParametersRequest
  ): Promise<responses.ChangeDatabaseParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#changeDatabaseParameters.");
    const pathParams = {
      "{managedDatabaseId}": changeDatabaseParametersRequest.managedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDatabaseParametersRequest.opcRequestId,
      "opc-retry-token": changeDatabaseParametersRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDatabaseParametersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/actions/changeDatabaseParameters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDatabaseParametersRequest.changeDatabaseParametersDetails,
        "ChangeDatabaseParametersDetails",
        model.ChangeDatabaseParametersDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDatabaseParametersResponse>{},
        body: await response.json(),
        bodyKey: "updateDatabaseParametersResult",
        bodyModel: model.UpdateDatabaseParametersResult,
        type: "model.UpdateDatabaseParametersResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the Database Management private endpoint and its dependent resources to the specified compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeDbManagementPrivateEndpointCompartmentRequest
   * @return ChangeDbManagementPrivateEndpointCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ChangeDbManagementPrivateEndpointCompartment.ts.html |here} to see how to use ChangeDbManagementPrivateEndpointCompartment API.
   */
  public async changeDbManagementPrivateEndpointCompartment(
    changeDbManagementPrivateEndpointCompartmentRequest: requests.ChangeDbManagementPrivateEndpointCompartmentRequest
  ): Promise<responses.ChangeDbManagementPrivateEndpointCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DbManagementClient#changeDbManagementPrivateEndpointCompartment."
      );
    const pathParams = {
      "{dbManagementPrivateEndpointId}":
        changeDbManagementPrivateEndpointCompartmentRequest.dbManagementPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDbManagementPrivateEndpointCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDbManagementPrivateEndpointCompartmentRequest.opcRetryToken,
      "if-match": changeDbManagementPrivateEndpointCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeDbManagementPrivateEndpointCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/dbManagementPrivateEndpoints/{dbManagementPrivateEndpointId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDbManagementPrivateEndpointCompartmentRequest.changeDbManagementPrivateEndpointCompartmentDetails,
        "ChangeDbManagementPrivateEndpointCompartmentDetails",
        model.ChangeDbManagementPrivateEndpointCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDbManagementPrivateEndpointCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a job.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeJobCompartmentRequest
   * @return ChangeJobCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ChangeJobCompartment.ts.html |here} to see how to use ChangeJobCompartment API.
   */
  public async changeJobCompartment(
    changeJobCompartmentRequest: requests.ChangeJobCompartmentRequest
  ): Promise<responses.ChangeJobCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#changeJobCompartment.");
    const pathParams = {
      "{jobId}": changeJobCompartmentRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeJobCompartmentRequest.opcRequestId,
      "opc-retry-token": changeJobCompartmentRequest.opcRetryToken,
      "if-match": changeJobCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeJobCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeJobCompartmentRequest.changeJobCompartmentDetails,
        "ChangeJobCompartmentDetails",
        model.ChangeJobCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeJobCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Managed Database Group to a different compartment.
   * The destination compartment must not have a Managed Database Group
   * with the same name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeManagedDatabaseGroupCompartmentRequest
   * @return ChangeManagedDatabaseGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ChangeManagedDatabaseGroupCompartment.ts.html |here} to see how to use ChangeManagedDatabaseGroupCompartment API.
   */
  public async changeManagedDatabaseGroupCompartment(
    changeManagedDatabaseGroupCompartmentRequest: requests.ChangeManagedDatabaseGroupCompartmentRequest
  ): Promise<responses.ChangeManagedDatabaseGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DbManagementClient#changeManagedDatabaseGroupCompartment."
      );
    const pathParams = {
      "{managedDatabaseGroupId}":
        changeManagedDatabaseGroupCompartmentRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeManagedDatabaseGroupCompartmentRequest.opcRequestId,
      "opc-retry-token": changeManagedDatabaseGroupCompartmentRequest.opcRetryToken,
      "if-match": changeManagedDatabaseGroupCompartmentRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeManagedDatabaseGroupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeManagedDatabaseGroupCompartmentRequest.changeManagedDatabaseGroupCompartmentDetails,
        "ChangeManagedDatabaseGroupCompartmentDetails",
        model.ChangeManagedDatabaseGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeManagedDatabaseGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Database Management private endpoint.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDbManagementPrivateEndpointRequest
   * @return CreateDbManagementPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/CreateDbManagementPrivateEndpoint.ts.html |here} to see how to use CreateDbManagementPrivateEndpoint API.
   */
  public async createDbManagementPrivateEndpoint(
    createDbManagementPrivateEndpointRequest: requests.CreateDbManagementPrivateEndpointRequest
  ): Promise<responses.CreateDbManagementPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#createDbManagementPrivateEndpoint.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDbManagementPrivateEndpointRequest.opcRetryToken,
      "opc-request-id": createDbManagementPrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDbManagementPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dbManagementPrivateEndpoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDbManagementPrivateEndpointRequest.createDbManagementPrivateEndpointDetails,
        "CreateDbManagementPrivateEndpointDetails",
        model.CreateDbManagementPrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDbManagementPrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "dbManagementPrivateEndpoint",
        bodyModel: model.DbManagementPrivateEndpoint,
        type: "model.DbManagementPrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a job to be executed on a Managed Database or Managed Database Group. Only one
   * of the parameters, managedDatabaseId or managedDatabaseGroupId should be provided as
   * input in CreateJobDetails resource in request body.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateJobRequest
   * @return CreateJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/CreateJob.ts.html |here} to see how to use CreateJob API.
   */
  public async createJob(
    createJobRequest: requests.CreateJobRequest
  ): Promise<responses.CreateJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#createJob.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createJobRequest.opcRequestId,
      "opc-retry-token": createJobRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createJobRequest.createJobDetails,
        "CreateJobDetails",
        model.CreateJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Managed Database Group. The group does not contain any
   * Managed Databases when it is created, and they must be added later.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateManagedDatabaseGroupRequest
   * @return CreateManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/CreateManagedDatabaseGroup.ts.html |here} to see how to use CreateManagedDatabaseGroup API.
   */
  public async createManagedDatabaseGroup(
    createManagedDatabaseGroupRequest: requests.CreateManagedDatabaseGroupRequest
  ): Promise<responses.CreateManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#createManagedDatabaseGroup.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createManagedDatabaseGroupRequest.opcRequestId,
      "opc-retry-token": createManagedDatabaseGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createManagedDatabaseGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createManagedDatabaseGroupRequest.createManagedDatabaseGroupDetails,
        "CreateManagedDatabaseGroupDetails",
        model.CreateManagedDatabaseGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateManagedDatabaseGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabaseGroup",
        bodyModel: model.ManagedDatabaseGroup,
        type: "model.ManagedDatabaseGroup",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a tablespace within the Managed Database specified by managedDatabaseId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateTablespaceRequest
   * @return CreateTablespaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/CreateTablespace.ts.html |here} to see how to use CreateTablespace API.
   */
  public async createTablespace(
    createTablespaceRequest: requests.CreateTablespaceRequest
  ): Promise<responses.CreateTablespaceResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#createTablespace.");
    const pathParams = {
      "{managedDatabaseId}": createTablespaceRequest.managedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createTablespaceRequest.opcRequestId,
      "opc-retry-token": createTablespaceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTablespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/tablespaces",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTablespaceRequest.createTablespaceDetails,
        "CreateTablespaceDetails",
        model.CreateTablespaceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTablespaceResponse>{},
        body: await response.json(),
        bodyKey: "tablespace",
        bodyModel: model.Tablespace,
        type: "model.Tablespace",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a specific Database Management private endpoint.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDbManagementPrivateEndpointRequest
   * @return DeleteDbManagementPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/DeleteDbManagementPrivateEndpoint.ts.html |here} to see how to use DeleteDbManagementPrivateEndpoint API.
   */
  public async deleteDbManagementPrivateEndpoint(
    deleteDbManagementPrivateEndpointRequest: requests.DeleteDbManagementPrivateEndpointRequest
  ): Promise<responses.DeleteDbManagementPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#deleteDbManagementPrivateEndpoint.");
    const pathParams = {
      "{dbManagementPrivateEndpointId}":
        deleteDbManagementPrivateEndpointRequest.dbManagementPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteDbManagementPrivateEndpointRequest.opcRequestId,
      "if-match": deleteDbManagementPrivateEndpointRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDbManagementPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dbManagementPrivateEndpoints/{dbManagementPrivateEndpointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDbManagementPrivateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the job specified by jobId.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteJobRequest
   * @return DeleteJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/DeleteJob.ts.html |here} to see how to use DeleteJob API.
   */
  public async deleteJob(
    deleteJobRequest: requests.DeleteJobRequest
  ): Promise<responses.DeleteJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#deleteJob.");
    const pathParams = {
      "{jobId}": deleteJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteJobRequest.ifMatch,
      "opc-request-id": deleteJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the Managed Database Group specified by managedDatabaseGroupId.
   * If the group contains Managed Databases, then it cannot be deleted.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteManagedDatabaseGroupRequest
   * @return DeleteManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/DeleteManagedDatabaseGroup.ts.html |here} to see how to use DeleteManagedDatabaseGroup API.
   */
  public async deleteManagedDatabaseGroup(
    deleteManagedDatabaseGroupRequest: requests.DeleteManagedDatabaseGroupRequest
  ): Promise<responses.DeleteManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#deleteManagedDatabaseGroup.");
    const pathParams = {
      "{managedDatabaseGroupId}": deleteManagedDatabaseGroupRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteManagedDatabaseGroupRequest.ifMatch,
      "opc-request-id": deleteManagedDatabaseGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteManagedDatabaseGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteManagedDatabaseGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Drops the tablespace specified by tablespaceName within the Managed Database specified by managedDatabaseId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DropTablespaceRequest
   * @return DropTablespaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/DropTablespace.ts.html |here} to see how to use DropTablespace API.
   */
  public async dropTablespace(
    dropTablespaceRequest: requests.DropTablespaceRequest
  ): Promise<responses.DropTablespaceResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#dropTablespace.");
    const pathParams = {
      "{managedDatabaseId}": dropTablespaceRequest.managedDatabaseId,
      "{tablespaceName}": dropTablespaceRequest.tablespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": dropTablespaceRequest.opcRequestId,
      "opc-retry-token": dropTablespaceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      dropTablespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}/actions/dropTablespace",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        dropTablespaceRequest.dropTablespaceDetails,
        "DropTablespaceDetails",
        model.DropTablespaceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DropTablespaceResponse>{},
        body: await response.json(),
        bodyKey: "tablespaceAdminStatus",
        bodyModel: model.TablespaceAdminStatus,
        type: "model.TablespaceAdminStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the AWR report for the specific database.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAwrDbReportRequest
   * @return GetAwrDbReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetAwrDbReport.ts.html |here} to see how to use GetAwrDbReport API.
   */
  public async getAwrDbReport(
    getAwrDbReportRequest: requests.GetAwrDbReportRequest
  ): Promise<responses.GetAwrDbReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getAwrDbReport.");
    const pathParams = {
      "{managedDatabaseId}": getAwrDbReportRequest.managedDatabaseId,
      "{awrDbId}": getAwrDbReportRequest.awrDbId
    };

    const queryParams = {
      "instNums": getAwrDbReportRequest.instNums,
      "beginSnIdGreaterThanOrEqualTo": getAwrDbReportRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": getAwrDbReportRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": getAwrDbReportRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": getAwrDbReportRequest.timeLessThanOrEqualTo,
      "reportType": getAwrDbReportRequest.reportType,
      "containerId": getAwrDbReportRequest.containerId,
      "reportFormat": getAwrDbReportRequest.reportFormat
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAwrDbReportRequest.opcRequestId,
      "opc-retry-token": getAwrDbReportRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAwrDbReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbReport",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAwrDbReportResponse>{},
        body: await response.json(),
        bodyKey: "awrDbReport",
        bodyModel: model.AwrDbReport,
        type: "model.AwrDbReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the SQL health check report for one SQL of the specific database.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAwrDbSqlReportRequest
   * @return GetAwrDbSqlReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetAwrDbSqlReport.ts.html |here} to see how to use GetAwrDbSqlReport API.
   */
  public async getAwrDbSqlReport(
    getAwrDbSqlReportRequest: requests.GetAwrDbSqlReportRequest
  ): Promise<responses.GetAwrDbSqlReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getAwrDbSqlReport.");
    const pathParams = {
      "{managedDatabaseId}": getAwrDbSqlReportRequest.managedDatabaseId,
      "{awrDbId}": getAwrDbSqlReportRequest.awrDbId
    };

    const queryParams = {
      "instNum": getAwrDbSqlReportRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo": getAwrDbSqlReportRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": getAwrDbSqlReportRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": getAwrDbSqlReportRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": getAwrDbSqlReportRequest.timeLessThanOrEqualTo,
      "sqlId": getAwrDbSqlReportRequest.sqlId,
      "reportFormat": getAwrDbSqlReportRequest.reportFormat,
      "containerId": getAwrDbSqlReportRequest.containerId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAwrDbSqlReportRequest.opcRequestId,
      "opc-retry-token": getAwrDbSqlReportRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAwrDbSqlReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbSqlReport",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAwrDbSqlReportResponse>{},
        body: await response.json(),
        bodyKey: "awrDbSqlReport",
        bodyModel: model.AwrDbSqlReport,
        type: "model.AwrDbSqlReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the metrics related to cluster cache for the Oracle
   * Real Application Clusters (Oracle RAC) database specified
   * by managedDatabaseId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetClusterCacheMetricRequest
   * @return GetClusterCacheMetricResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetClusterCacheMetric.ts.html |here} to see how to use GetClusterCacheMetric API.
   */
  public async getClusterCacheMetric(
    getClusterCacheMetricRequest: requests.GetClusterCacheMetricRequest
  ): Promise<responses.GetClusterCacheMetricResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#getClusterCacheMetric.");
    const pathParams = {
      "{managedDatabaseId}": getClusterCacheMetricRequest.managedDatabaseId
    };

    const queryParams = {
      "startTime": getClusterCacheMetricRequest.startTime,
      "endTime": getClusterCacheMetricRequest.endTime
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getClusterCacheMetricRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getClusterCacheMetricRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/clusterCacheMetrics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetClusterCacheMetricResponse>{},
        body: await response.json(),
        bodyKey: "clusterCacheMetric",
        bodyModel: model.ClusterCacheMetric,
        type: "model.ClusterCacheMetric",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the health metrics for a fleet of databases in a compartment or in a Managed Database Group.
   * Either the CompartmentId or the ManagedDatabaseGroupId query parameters must be provided to retrieve the health metrics.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDatabaseFleetHealthMetricsRequest
   * @return GetDatabaseFleetHealthMetricsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetDatabaseFleetHealthMetrics.ts.html |here} to see how to use GetDatabaseFleetHealthMetrics API.
   */
  public async getDatabaseFleetHealthMetrics(
    getDatabaseFleetHealthMetricsRequest: requests.GetDatabaseFleetHealthMetricsRequest
  ): Promise<responses.GetDatabaseFleetHealthMetricsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#getDatabaseFleetHealthMetrics.");
    const pathParams = {};

    const queryParams = {
      "managedDatabaseGroupId": getDatabaseFleetHealthMetricsRequest.managedDatabaseGroupId,
      "compartmentId": getDatabaseFleetHealthMetricsRequest.compartmentId,
      "compareBaselineTime": getDatabaseFleetHealthMetricsRequest.compareBaselineTime,
      "compareTargetTime": getDatabaseFleetHealthMetricsRequest.compareTargetTime,
      "compareType": getDatabaseFleetHealthMetricsRequest.compareType,
      "filterByMetricNames": getDatabaseFleetHealthMetricsRequest.filterByMetricNames,
      "filterByDatabaseType": getDatabaseFleetHealthMetricsRequest.filterByDatabaseType,
      "filterByDatabaseSubType": getDatabaseFleetHealthMetricsRequest.filterByDatabaseSubType,
      "filterByDatabaseDeploymentType":
        getDatabaseFleetHealthMetricsRequest.filterByDatabaseDeploymentType,
      "filterByDatabaseVersion": getDatabaseFleetHealthMetricsRequest.filterByDatabaseVersion
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDatabaseFleetHealthMetricsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDatabaseFleetHealthMetricsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleetMetrics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDatabaseFleetHealthMetricsResponse>{},
        body: await response.json(),
        bodyKey: "databaseFleetHealthMetrics",
        bodyModel: model.DatabaseFleetHealthMetrics,
        type: "model.DatabaseFleetHealthMetrics",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a summary of the activity and resource usage metrics like DB Time, CPU, User I/O, Wait, Storage, and Memory for a Managed Database.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDatabaseHomeMetricsRequest
   * @return GetDatabaseHomeMetricsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetDatabaseHomeMetrics.ts.html |here} to see how to use GetDatabaseHomeMetrics API.
   */
  public async getDatabaseHomeMetrics(
    getDatabaseHomeMetricsRequest: requests.GetDatabaseHomeMetricsRequest
  ): Promise<responses.GetDatabaseHomeMetricsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#getDatabaseHomeMetrics.");
    const pathParams = {};

    const queryParams = {
      "managedDatabaseId": getDatabaseHomeMetricsRequest.managedDatabaseId,
      "startTime": getDatabaseHomeMetricsRequest.startTime,
      "endTime": getDatabaseHomeMetricsRequest.endTime
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDatabaseHomeMetricsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDatabaseHomeMetricsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseHomeMetrics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDatabaseHomeMetricsResponse>{},
        body: await response.json(),
        bodyKey: "databaseHomeMetrics",
        bodyModel: model.DatabaseHomeMetrics,
        type: "model.DatabaseHomeMetrics",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of a specific Database Management private endpoint.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDbManagementPrivateEndpointRequest
   * @return GetDbManagementPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetDbManagementPrivateEndpoint.ts.html |here} to see how to use GetDbManagementPrivateEndpoint API.
   */
  public async getDbManagementPrivateEndpoint(
    getDbManagementPrivateEndpointRequest: requests.GetDbManagementPrivateEndpointRequest
  ): Promise<responses.GetDbManagementPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#getDbManagementPrivateEndpoint.");
    const pathParams = {
      "{dbManagementPrivateEndpointId}":
        getDbManagementPrivateEndpointRequest.dbManagementPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDbManagementPrivateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDbManagementPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dbManagementPrivateEndpoints/{dbManagementPrivateEndpointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDbManagementPrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "dbManagementPrivateEndpoint",
        bodyModel: model.DbManagementPrivateEndpoint,
        type: "model.DbManagementPrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for the job specified by jobId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetJobRequest
   * @return GetJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetJob.ts.html |here} to see how to use GetJob API.
   */
  public async getJob(getJobRequest: requests.GetJobRequest): Promise<responses.GetJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getJob.");
    const pathParams = {
      "{jobId}": getJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for the job execution specified by jobExecutionId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetJobExecutionRequest
   * @return GetJobExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetJobExecution.ts.html |here} to see how to use GetJobExecution API.
   */
  public async getJobExecution(
    getJobExecutionRequest: requests.GetJobExecutionRequest
  ): Promise<responses.GetJobExecutionResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getJobExecution.");
    const pathParams = {
      "{jobExecutionId}": getJobExecutionRequest.jobExecutionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobExecutionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJobExecutionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobExecutions/{jobExecutionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobExecutionResponse>{},
        body: await response.json(),
        bodyKey: "jobExecution",
        bodyModel: model.JobExecution,
        type: "model.JobExecution",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for the job run specified by jobRunId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetJobRunRequest
   * @return GetJobRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetJobRun.ts.html |here} to see how to use GetJobRun API.
   */
  public async getJobRun(
    getJobRunRequest: requests.GetJobRunRequest
  ): Promise<responses.GetJobRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getJobRun.");
    const pathParams = {
      "{jobRunId}": getJobRunRequest.jobRunId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobRunRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJobRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobRuns/{jobRunId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobRunResponse>{},
        body: await response.json(),
        bodyKey: "jobRun",
        bodyModel: model.JobRun,
        type: "model.JobRun",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for the Managed Database specified by managedDatabaseId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetManagedDatabaseRequest
   * @return GetManagedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetManagedDatabase.ts.html |here} to see how to use GetManagedDatabase API.
   */
  public async getManagedDatabase(
    getManagedDatabaseRequest: requests.GetManagedDatabaseRequest
  ): Promise<responses.GetManagedDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getManagedDatabase.");
    const pathParams = {
      "{managedDatabaseId}": getManagedDatabaseRequest.managedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagedDatabaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getManagedDatabaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabase",
        bodyModel: model.ManagedDatabase,
        type: "model.ManagedDatabase",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for the Managed Database Group specified by managedDatabaseGroupId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetManagedDatabaseGroupRequest
   * @return GetManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetManagedDatabaseGroup.ts.html |here} to see how to use GetManagedDatabaseGroup API.
   */
  public async getManagedDatabaseGroup(
    getManagedDatabaseGroupRequest: requests.GetManagedDatabaseGroupRequest
  ): Promise<responses.GetManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#getManagedDatabaseGroup.");
    const pathParams = {
      "{managedDatabaseGroupId}": getManagedDatabaseGroupRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagedDatabaseGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getManagedDatabaseGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedDatabaseGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabaseGroup",
        bodyModel: model.ManagedDatabaseGroup,
        type: "model.ManagedDatabaseGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a summary of the resource usage metrics such as CPU, User I/O, and Storage for each
   * PDB within a specific CDB. If comparmentId is specified, then the metrics for
   * each PDB (within the CDB) in the specified compartment are retrieved.
   * If compartmentId is not specified, then the metrics for all the PDBs within the CDB are retrieved.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPdbMetricsRequest
   * @return GetPdbMetricsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetPdbMetrics.ts.html |here} to see how to use GetPdbMetrics API.
   */
  public async getPdbMetrics(
    getPdbMetricsRequest: requests.GetPdbMetricsRequest
  ): Promise<responses.GetPdbMetricsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getPdbMetrics.");
    const pathParams = {
      "{managedDatabaseId}": getPdbMetricsRequest.managedDatabaseId
    };

    const queryParams = {
      "startTime": getPdbMetricsRequest.startTime,
      "endTime": getPdbMetricsRequest.endTime,
      "compartmentId": getPdbMetricsRequest.compartmentId,
      "compareType": getPdbMetricsRequest.compareType,
      "filterByMetricNames": getPdbMetricsRequest.filterByMetricNames
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPdbMetricsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPdbMetricsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/pdbMetrics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPdbMetricsResponse>{},
        body: await response.json(),
        bodyKey: "pdbMetrics",
        bodyModel: model.PdbMetrics,
        type: "model.PdbMetrics",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the tablespace specified by tablespaceName within the Managed Database specified by managedDatabaseId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTablespaceRequest
   * @return GetTablespaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetTablespace.ts.html |here} to see how to use GetTablespace API.
   */
  public async getTablespace(
    getTablespaceRequest: requests.GetTablespaceRequest
  ): Promise<responses.GetTablespaceResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getTablespace.");
    const pathParams = {
      "{managedDatabaseId}": getTablespaceRequest.managedDatabaseId,
      "{tablespaceName}": getTablespaceRequest.tablespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTablespaceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTablespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTablespaceResponse>{},
        body: await response.json(),
        bodyKey: "tablespace",
        bodyModel: model.Tablespace,
        type: "model.Tablespace",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the user specified by managedDatabaseId and userName.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUserRequest
   * @return GetUserResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetUser.ts.html |here} to see how to use GetUser API.
   */
  public async getUser(
    getUserRequest: requests.GetUserRequest
  ): Promise<responses.GetUserResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getUser.");
    const pathParams = {
      "{managedDatabaseId}": getUserRequest.managedDatabaseId,
      "{userName}": getUserRequest.userName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUserRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUserRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/users/{userName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUserResponse>{},
        body: await response.json(),
        bodyKey: "user",
        bodyModel: model.User,
        type: "model.User",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request with the given Work Request ID
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getWorkRequest.");
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of ASM properties for the specified managedDatabaseId.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAsmPropertiesRequest
   * @return ListAsmPropertiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListAsmProperties.ts.html |here} to see how to use ListAsmProperties API.
   */
  public async listAsmProperties(
    listAsmPropertiesRequest: requests.ListAsmPropertiesRequest
  ): Promise<responses.ListAsmPropertiesResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listAsmProperties.");
    const pathParams = {
      "{managedDatabaseId}": listAsmPropertiesRequest.managedDatabaseId
    };

    const queryParams = {
      "name": listAsmPropertiesRequest.name,
      "sortBy": listAsmPropertiesRequest.sortBy,
      "sortOrder": listAsmPropertiesRequest.sortOrder,
      "page": listAsmPropertiesRequest.page,
      "limit": listAsmPropertiesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAsmPropertiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAsmPropertiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/asmProperties",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAsmPropertiesResponse>{},
        body: await response.json(),
        bodyKey: "asmPropertyCollection",
        bodyModel: model.AsmPropertyCollection,
        type: "model.AsmPropertyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of databases using a specific Database Management private endpoint.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAssociatedDatabasesRequest
   * @return ListAssociatedDatabasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListAssociatedDatabases.ts.html |here} to see how to use ListAssociatedDatabases API.
   */
  public async listAssociatedDatabases(
    listAssociatedDatabasesRequest: requests.ListAssociatedDatabasesRequest
  ): Promise<responses.ListAssociatedDatabasesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listAssociatedDatabases.");
    const pathParams = {
      "{dbManagementPrivateEndpointId}":
        listAssociatedDatabasesRequest.dbManagementPrivateEndpointId
    };

    const queryParams = {
      "compartmentId": listAssociatedDatabasesRequest.compartmentId,
      "limit": listAssociatedDatabasesRequest.limit,
      "page": listAssociatedDatabasesRequest.page,
      "sortOrder": listAssociatedDatabasesRequest.sortOrder,
      "sortBy": listAssociatedDatabasesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAssociatedDatabasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAssociatedDatabasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dbManagementPrivateEndpoints/{dbManagementPrivateEndpointId}/associatedDatabases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAssociatedDatabasesResponse>{},
        body: await response.json(),
        bodyKey: "associatedDatabaseCollection",
        bodyModel: model.AssociatedDatabaseCollection,
        type: "model.AssociatedDatabaseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists AWR snapshots for the specified database in the AWR.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAwrDbSnapshotsRequest
   * @return ListAwrDbSnapshotsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListAwrDbSnapshots.ts.html |here} to see how to use ListAwrDbSnapshots API.
   */
  public async listAwrDbSnapshots(
    listAwrDbSnapshotsRequest: requests.ListAwrDbSnapshotsRequest
  ): Promise<responses.ListAwrDbSnapshotsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listAwrDbSnapshots.");
    const pathParams = {
      "{managedDatabaseId}": listAwrDbSnapshotsRequest.managedDatabaseId,
      "{awrDbId}": listAwrDbSnapshotsRequest.awrDbId
    };

    const queryParams = {
      "instNum": listAwrDbSnapshotsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo": listAwrDbSnapshotsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": listAwrDbSnapshotsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": listAwrDbSnapshotsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": listAwrDbSnapshotsRequest.timeLessThanOrEqualTo,
      "containerId": listAwrDbSnapshotsRequest.containerId,
      "page": listAwrDbSnapshotsRequest.page,
      "limit": listAwrDbSnapshotsRequest.limit,
      "sortBy": listAwrDbSnapshotsRequest.sortBy,
      "sortOrder": listAwrDbSnapshotsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAwrDbSnapshotsRequest.opcRequestId,
      "opc-retry-token": listAwrDbSnapshotsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAwrDbSnapshotsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbSnapshots",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAwrDbSnapshotsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbSnapshotCollection",
        bodyModel: model.AwrDbSnapshotCollection,
        type: "model.AwrDbSnapshotCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of databases and their snapshot summary details available in the AWR of the specified Managed Database.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAwrDbsRequest
   * @return ListAwrDbsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListAwrDbs.ts.html |here} to see how to use ListAwrDbs API.
   */
  public async listAwrDbs(
    listAwrDbsRequest: requests.ListAwrDbsRequest
  ): Promise<responses.ListAwrDbsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listAwrDbs.");
    const pathParams = {
      "{managedDatabaseId}": listAwrDbsRequest.managedDatabaseId
    };

    const queryParams = {
      "name": listAwrDbsRequest.name,
      "timeGreaterThanOrEqualTo": listAwrDbsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": listAwrDbsRequest.timeLessThanOrEqualTo,
      "page": listAwrDbsRequest.page,
      "limit": listAwrDbsRequest.limit,
      "sortBy": listAwrDbsRequest.sortBy,
      "sortOrder": listAwrDbsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAwrDbsRequest.opcRequestId,
      "opc-retry-token": listAwrDbsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAwrDbsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAwrDbsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbCollection",
        bodyModel: model.AwrDbCollection,
        type: "model.AwrDbCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of consumer group privileges granted to a specific user.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListConsumerGroupPrivilegesRequest
   * @return ListConsumerGroupPrivilegesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListConsumerGroupPrivileges.ts.html |here} to see how to use ListConsumerGroupPrivileges API.
   */
  public async listConsumerGroupPrivileges(
    listConsumerGroupPrivilegesRequest: requests.ListConsumerGroupPrivilegesRequest
  ): Promise<responses.ListConsumerGroupPrivilegesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listConsumerGroupPrivileges.");
    const pathParams = {
      "{managedDatabaseId}": listConsumerGroupPrivilegesRequest.managedDatabaseId,
      "{userName}": listConsumerGroupPrivilegesRequest.userName
    };

    const queryParams = {
      "name": listConsumerGroupPrivilegesRequest.name,
      "sortBy": listConsumerGroupPrivilegesRequest.sortBy,
      "sortOrder": listConsumerGroupPrivilegesRequest.sortOrder,
      "limit": listConsumerGroupPrivilegesRequest.limit,
      "page": listConsumerGroupPrivilegesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listConsumerGroupPrivilegesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConsumerGroupPrivilegesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/users/{userName}/consumerGroupPrivileges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConsumerGroupPrivilegesResponse>{},
        body: await response.json(),
        bodyKey: "consumerGroupPrivilegeCollection",
        bodyModel: model.ConsumerGroupPrivilegeCollection,
        type: "model.ConsumerGroupPrivilegeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of containers for a specific user. This is only applicable if ALL_CONTAINERS !='Y'.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDataAccessContainersRequest
   * @return ListDataAccessContainersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListDataAccessContainers.ts.html |here} to see how to use ListDataAccessContainers API.
   */
  public async listDataAccessContainers(
    listDataAccessContainersRequest: requests.ListDataAccessContainersRequest
  ): Promise<responses.ListDataAccessContainersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listDataAccessContainers.");
    const pathParams = {
      "{managedDatabaseId}": listDataAccessContainersRequest.managedDatabaseId,
      "{userName}": listDataAccessContainersRequest.userName
    };

    const queryParams = {
      "name": listDataAccessContainersRequest.name,
      "sortBy": listDataAccessContainersRequest.sortBy,
      "sortOrder": listDataAccessContainersRequest.sortOrder,
      "limit": listDataAccessContainersRequest.limit,
      "page": listDataAccessContainersRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDataAccessContainersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDataAccessContainersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/users/{userName}/dataAccessContainers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDataAccessContainersResponse>{},
        body: await response.json(),
        bodyKey: "dataAccessContainerCollection",
        bodyModel: model.DataAccessContainerCollection,
        type: "model.DataAccessContainerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of database parameters for the specified Managed Database. The parameters are listed in alphabetical order, along with their current values.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDatabaseParametersRequest
   * @return ListDatabaseParametersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListDatabaseParameters.ts.html |here} to see how to use ListDatabaseParameters API.
   */
  public async listDatabaseParameters(
    listDatabaseParametersRequest: requests.ListDatabaseParametersRequest
  ): Promise<responses.ListDatabaseParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listDatabaseParameters.");
    const pathParams = {
      "{managedDatabaseId}": listDatabaseParametersRequest.managedDatabaseId
    };

    const queryParams = {
      "source": listDatabaseParametersRequest.source,
      "name": listDatabaseParametersRequest.name,
      "isAllowedValuesIncluded": listDatabaseParametersRequest.isAllowedValuesIncluded,
      "sortBy": listDatabaseParametersRequest.sortBy,
      "sortOrder": listDatabaseParametersRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDatabaseParametersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDatabaseParametersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/databaseParameters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDatabaseParametersResponse>{},
        body: await response.json(),
        bodyKey: "databaseParametersCollection",
        bodyModel: model.DatabaseParametersCollection,
        type: "model.DatabaseParametersCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of Database Management private endpoints.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDbManagementPrivateEndpointsRequest
   * @return ListDbManagementPrivateEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListDbManagementPrivateEndpoints.ts.html |here} to see how to use ListDbManagementPrivateEndpoints API.
   */
  public async listDbManagementPrivateEndpoints(
    listDbManagementPrivateEndpointsRequest: requests.ListDbManagementPrivateEndpointsRequest
  ): Promise<responses.ListDbManagementPrivateEndpointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listDbManagementPrivateEndpoints.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDbManagementPrivateEndpointsRequest.compartmentId,
      "name": listDbManagementPrivateEndpointsRequest.name,
      "vcnId": listDbManagementPrivateEndpointsRequest.vcnId,
      "isCluster": listDbManagementPrivateEndpointsRequest.isCluster,
      "lifecycleState": listDbManagementPrivateEndpointsRequest.lifecycleState,
      "limit": listDbManagementPrivateEndpointsRequest.limit,
      "page": listDbManagementPrivateEndpointsRequest.page,
      "sortOrder": listDbManagementPrivateEndpointsRequest.sortOrder,
      "sortBy": listDbManagementPrivateEndpointsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDbManagementPrivateEndpointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDbManagementPrivateEndpointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dbManagementPrivateEndpoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDbManagementPrivateEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "dbManagementPrivateEndpointCollection",
        bodyModel: model.DbManagementPrivateEndpointCollection,
        type: "model.DbManagementPrivateEndpointCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the job execution for a specific ID or the list of job executions for a job, job run, Managed Database or Managed Database Group
   * in a specific compartment. Only one of the parameters, ID, jobId, jobRunId, managedDatabaseId or managedDatabaseGroupId should be provided.
   * If none of these parameters is provided, all the job executions in the compartment are listed. Job executions can also be filtered
   * based on the name and status parameters.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListJobExecutionsRequest
   * @return ListJobExecutionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListJobExecutions.ts.html |here} to see how to use ListJobExecutions API.
   */
  public async listJobExecutions(
    listJobExecutionsRequest: requests.ListJobExecutionsRequest
  ): Promise<responses.ListJobExecutionsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listJobExecutions.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJobExecutionsRequest.compartmentId,
      "id": listJobExecutionsRequest.id,
      "jobId": listJobExecutionsRequest.jobId,
      "managedDatabaseId": listJobExecutionsRequest.managedDatabaseId,
      "managedDatabaseGroupId": listJobExecutionsRequest.managedDatabaseGroupId,
      "status": listJobExecutionsRequest.status,
      "name": listJobExecutionsRequest.name,
      "limit": listJobExecutionsRequest.limit,
      "page": listJobExecutionsRequest.page,
      "sortBy": listJobExecutionsRequest.sortBy,
      "sortOrder": listJobExecutionsRequest.sortOrder,
      "jobRunId": listJobExecutionsRequest.jobRunId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobExecutionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJobExecutionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobExecutions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobExecutionsResponse>{},
        body: await response.json(),
        bodyKey: "jobExecutionCollection",
        bodyModel: model.JobExecutionCollection,
        type: "model.JobExecutionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the job run for a specific ID or the list of job runs for a job, Managed Database or Managed Database Group
   * in a specific compartment. Only one of the parameters, ID, jobId, managedDatabaseId, or managedDatabaseGroupId
   * should be provided. If none of these parameters is provided, all the job runs in the compartment are listed.
   * Job runs can also be filtered based on name and runStatus parameters.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListJobRunsRequest
   * @return ListJobRunsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListJobRuns.ts.html |here} to see how to use ListJobRuns API.
   */
  public async listJobRuns(
    listJobRunsRequest: requests.ListJobRunsRequest
  ): Promise<responses.ListJobRunsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listJobRuns.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJobRunsRequest.compartmentId,
      "id": listJobRunsRequest.id,
      "jobId": listJobRunsRequest.jobId,
      "managedDatabaseId": listJobRunsRequest.managedDatabaseId,
      "managedDatabaseGroupId": listJobRunsRequest.managedDatabaseGroupId,
      "runStatus": listJobRunsRequest.runStatus,
      "name": listJobRunsRequest.name,
      "limit": listJobRunsRequest.limit,
      "page": listJobRunsRequest.page,
      "sortBy": listJobRunsRequest.sortBy,
      "sortOrder": listJobRunsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobRunsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJobRunsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobRuns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobRunsResponse>{},
        body: await response.json(),
        bodyKey: "jobRunCollection",
        bodyModel: model.JobRunCollection,
        type: "model.JobRunCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the job for a specific ID or the list of jobs for a Managed Database or Managed Database Group
   * in a specific compartment. Only one of the parameters, ID, managedDatabaseId or managedDatabaseGroupId,
   * should be provided. If none of these parameters is provided, all the jobs in the compartment are listed.
   * Jobs can also be filtered based on the name and lifecycleState parameters.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListJobsRequest
   * @return ListJobsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListJobs.ts.html |here} to see how to use ListJobs API.
   */
  public async listJobs(
    listJobsRequest: requests.ListJobsRequest
  ): Promise<responses.ListJobsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listJobs.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJobsRequest.compartmentId,
      "id": listJobsRequest.id,
      "managedDatabaseGroupId": listJobsRequest.managedDatabaseGroupId,
      "managedDatabaseId": listJobsRequest.managedDatabaseId,
      "name": listJobsRequest.name,
      "lifecycleState": listJobsRequest.lifecycleState,
      "limit": listJobsRequest.limit,
      "page": listJobsRequest.page,
      "sortBy": listJobsRequest.sortBy,
      "sortOrder": listJobsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJobsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobsResponse>{},
        body: await response.json(),
        bodyKey: "jobCollection",
        bodyModel: model.JobCollection,
        type: "model.JobCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Managed Database Group for a specific ID or the list of Managed Database Groups in
   * a specific compartment. Managed Database Groups can also be filtered based on the name parameter.
   * Only one of the parameters, ID or name should be provided. If none of these parameters is provided,
   * all the Managed Database Groups in the compartment are listed.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListManagedDatabaseGroupsRequest
   * @return ListManagedDatabaseGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListManagedDatabaseGroups.ts.html |here} to see how to use ListManagedDatabaseGroups API.
   */
  public async listManagedDatabaseGroups(
    listManagedDatabaseGroupsRequest: requests.ListManagedDatabaseGroupsRequest
  ): Promise<responses.ListManagedDatabaseGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listManagedDatabaseGroups.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagedDatabaseGroupsRequest.compartmentId,
      "id": listManagedDatabaseGroupsRequest.id,
      "name": listManagedDatabaseGroupsRequest.name,
      "lifecycleState": listManagedDatabaseGroupsRequest.lifecycleState,
      "page": listManagedDatabaseGroupsRequest.page,
      "limit": listManagedDatabaseGroupsRequest.limit,
      "sortBy": listManagedDatabaseGroupsRequest.sortBy,
      "sortOrder": listManagedDatabaseGroupsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedDatabaseGroupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedDatabaseGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedDatabaseGroupsResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabaseGroupCollection",
        bodyModel: model.ManagedDatabaseGroupCollection,
        type: "model.ManagedDatabaseGroupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Managed Database for a specific ID or the list of Managed Databases in a specific compartment.
   * Managed Databases can be filtered based on the name parameter. Only one of the parameters, ID or name
   * should be provided. If neither of these parameters is provided, all the Managed Databases in the compartment
   * are listed. Managed Databases can also be filtered based on the deployment type and management option.
   * If the deployment type is not specified or if it is `ONPREMISE`, then the management option is not
   * considered and Managed Databases with `ADVANCED` management option are listed.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListManagedDatabasesRequest
   * @return ListManagedDatabasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListManagedDatabases.ts.html |here} to see how to use ListManagedDatabases API.
   */
  public async listManagedDatabases(
    listManagedDatabasesRequest: requests.ListManagedDatabasesRequest
  ): Promise<responses.ListManagedDatabasesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listManagedDatabases.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagedDatabasesRequest.compartmentId,
      "id": listManagedDatabasesRequest.id,
      "name": listManagedDatabasesRequest.name,
      "managementOption": listManagedDatabasesRequest.managementOption,
      "deploymentType": listManagedDatabasesRequest.deploymentType,
      "page": listManagedDatabasesRequest.page,
      "limit": listManagedDatabasesRequest.limit,
      "sortBy": listManagedDatabasesRequest.sortBy,
      "sortOrder": listManagedDatabasesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedDatabasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listManagedDatabasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedDatabasesResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabaseCollection",
        bodyModel: model.ManagedDatabaseCollection,
        type: "model.ManagedDatabaseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of object privileges granted to a specific user.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListObjectPrivilegesRequest
   * @return ListObjectPrivilegesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListObjectPrivileges.ts.html |here} to see how to use ListObjectPrivileges API.
   */
  public async listObjectPrivileges(
    listObjectPrivilegesRequest: requests.ListObjectPrivilegesRequest
  ): Promise<responses.ListObjectPrivilegesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listObjectPrivileges.");
    const pathParams = {
      "{managedDatabaseId}": listObjectPrivilegesRequest.managedDatabaseId,
      "{userName}": listObjectPrivilegesRequest.userName
    };

    const queryParams = {
      "name": listObjectPrivilegesRequest.name,
      "sortBy": listObjectPrivilegesRequest.sortBy,
      "sortOrder": listObjectPrivilegesRequest.sortOrder,
      "limit": listObjectPrivilegesRequest.limit,
      "page": listObjectPrivilegesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listObjectPrivilegesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listObjectPrivilegesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/users/{userName}/objectPrivileges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListObjectPrivilegesResponse>{},
        body: await response.json(),
        bodyKey: "objectPrivilegeCollection",
        bodyModel: model.ObjectPrivilegeCollection,
        type: "model.ObjectPrivilegeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of users on whose behalf the current user acts as proxy.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListProxiedForUsersRequest
   * @return ListProxiedForUsersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListProxiedForUsers.ts.html |here} to see how to use ListProxiedForUsers API.
   */
  public async listProxiedForUsers(
    listProxiedForUsersRequest: requests.ListProxiedForUsersRequest
  ): Promise<responses.ListProxiedForUsersResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listProxiedForUsers.");
    const pathParams = {
      "{managedDatabaseId}": listProxiedForUsersRequest.managedDatabaseId,
      "{userName}": listProxiedForUsersRequest.userName
    };

    const queryParams = {
      "name": listProxiedForUsersRequest.name,
      "sortBy": listProxiedForUsersRequest.sortBy,
      "sortOrder": listProxiedForUsersRequest.sortOrder,
      "limit": listProxiedForUsersRequest.limit,
      "page": listProxiedForUsersRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProxiedForUsersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProxiedForUsersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/users/{userName}/proxiedForUsers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProxiedForUsersResponse>{},
        body: await response.json(),
        bodyKey: "proxiedForUserCollection",
        bodyModel: model.ProxiedForUserCollection,
        type: "model.ProxiedForUserCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of proxy users for the current user.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListProxyUsersRequest
   * @return ListProxyUsersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListProxyUsers.ts.html |here} to see how to use ListProxyUsers API.
   */
  public async listProxyUsers(
    listProxyUsersRequest: requests.ListProxyUsersRequest
  ): Promise<responses.ListProxyUsersResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listProxyUsers.");
    const pathParams = {
      "{managedDatabaseId}": listProxyUsersRequest.managedDatabaseId,
      "{userName}": listProxyUsersRequest.userName
    };

    const queryParams = {
      "name": listProxyUsersRequest.name,
      "sortBy": listProxyUsersRequest.sortBy,
      "sortOrder": listProxyUsersRequest.sortOrder,
      "limit": listProxyUsersRequest.limit,
      "page": listProxyUsersRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProxyUsersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProxyUsersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/users/{userName}/proxyUsers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProxyUsersResponse>{},
        body: await response.json(),
        bodyKey: "proxyUserCollection",
        bodyModel: model.ProxyUserCollection,
        type: "model.ProxyUserCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of roles granted to a specific user.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListRolesRequest
   * @return ListRolesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListRoles.ts.html |here} to see how to use ListRoles API.
   */
  public async listRoles(
    listRolesRequest: requests.ListRolesRequest
  ): Promise<responses.ListRolesResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listRoles.");
    const pathParams = {
      "{managedDatabaseId}": listRolesRequest.managedDatabaseId,
      "{userName}": listRolesRequest.userName
    };

    const queryParams = {
      "name": listRolesRequest.name,
      "sortBy": listRolesRequest.sortBy,
      "sortOrder": listRolesRequest.sortOrder,
      "limit": listRolesRequest.limit,
      "page": listRolesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRolesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRolesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/users/{userName}/roles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRolesResponse>{},
        body: await response.json(),
        bodyKey: "roleCollection",
        bodyModel: model.RoleCollection,
        type: "model.RoleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of system privileges granted to a specific user.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSystemPrivilegesRequest
   * @return ListSystemPrivilegesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListSystemPrivileges.ts.html |here} to see how to use ListSystemPrivileges API.
   */
  public async listSystemPrivileges(
    listSystemPrivilegesRequest: requests.ListSystemPrivilegesRequest
  ): Promise<responses.ListSystemPrivilegesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listSystemPrivileges.");
    const pathParams = {
      "{managedDatabaseId}": listSystemPrivilegesRequest.managedDatabaseId,
      "{userName}": listSystemPrivilegesRequest.userName
    };

    const queryParams = {
      "name": listSystemPrivilegesRequest.name,
      "sortBy": listSystemPrivilegesRequest.sortBy,
      "sortOrder": listSystemPrivilegesRequest.sortOrder,
      "limit": listSystemPrivilegesRequest.limit,
      "page": listSystemPrivilegesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSystemPrivilegesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSystemPrivilegesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/users/{userName}/systemPrivileges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSystemPrivilegesResponse>{},
        body: await response.json(),
        bodyKey: "systemPrivilegeCollection",
        bodyModel: model.SystemPrivilegeCollection,
        type: "model.SystemPrivilegeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of tablespaces for the specified managedDatabaseId.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListTablespacesRequest
   * @return ListTablespacesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListTablespaces.ts.html |here} to see how to use ListTablespaces API.
   */
  public async listTablespaces(
    listTablespacesRequest: requests.ListTablespacesRequest
  ): Promise<responses.ListTablespacesResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listTablespaces.");
    const pathParams = {
      "{managedDatabaseId}": listTablespacesRequest.managedDatabaseId
    };

    const queryParams = {
      "name": listTablespacesRequest.name,
      "sortBy": listTablespacesRequest.sortBy,
      "sortOrder": listTablespacesRequest.sortOrder,
      "page": listTablespacesRequest.page,
      "limit": listTablespacesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTablespacesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTablespacesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/tablespaces",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTablespacesResponse>{},
        body: await response.json(),
        bodyKey: "tablespaceCollection",
        bodyModel: model.TablespaceCollection,
        type: "model.TablespaceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of users for the specified managedDatabaseId.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListUsersRequest
   * @return ListUsersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListUsers.ts.html |here} to see how to use ListUsers API.
   */
  public async listUsers(
    listUsersRequest: requests.ListUsersRequest
  ): Promise<responses.ListUsersResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listUsers.");
    const pathParams = {
      "{managedDatabaseId}": listUsersRequest.managedDatabaseId
    };

    const queryParams = {
      "name": listUsersRequest.name,
      "sortBy": listUsersRequest.sortBy,
      "sortOrder": listUsersRequest.sortOrder,
      "limit": listUsersRequest.limit,
      "page": listUsersRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUsersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUsersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/users",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUsersResponse>{},
        body: await response.json(),
        bodyKey: "userCollection",
        bodyModel: model.UserCollection,
        type: "model.UserCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a paginated list of errors for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listWorkRequestErrors.");
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a paginated list of logs for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listWorkRequestLogs.");
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * The list of work requests in a specific compartment was retrieved successfully.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listWorkRequests.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "resourceId": listWorkRequestsRequest.resourceId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: model.WorkRequestCollection,
        type: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a data file or temp file from the tablespace.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveDataFileRequest
   * @return RemoveDataFileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/RemoveDataFile.ts.html |here} to see how to use RemoveDataFile API.
   */
  public async removeDataFile(
    removeDataFileRequest: requests.RemoveDataFileRequest
  ): Promise<responses.RemoveDataFileResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#removeDataFile.");
    const pathParams = {
      "{managedDatabaseId}": removeDataFileRequest.managedDatabaseId,
      "{tablespaceName}": removeDataFileRequest.tablespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeDataFileRequest.opcRequestId,
      "opc-retry-token": removeDataFileRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeDataFileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}/actions/removeDataFile",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeDataFileRequest.removeDataFileDetails,
        "RemoveDataFileDetails",
        model.RemoveDataFileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveDataFileResponse>{},
        body: await response.json(),
        bodyKey: "tablespaceAdminStatus",
        bodyModel: model.TablespaceAdminStatus,
        type: "model.TablespaceAdminStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a Managed Database from a Managed Database Group. Any management
   * activities that are currently running on this database will continue to
   * run to completion. However, any activities scheduled to run in the future
   * will not be performed on this database.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveManagedDatabaseFromManagedDatabaseGroupRequest
   * @return RemoveManagedDatabaseFromManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/RemoveManagedDatabaseFromManagedDatabaseGroup.ts.html |here} to see how to use RemoveManagedDatabaseFromManagedDatabaseGroup API.
   */
  public async removeManagedDatabaseFromManagedDatabaseGroup(
    removeManagedDatabaseFromManagedDatabaseGroupRequest: requests.RemoveManagedDatabaseFromManagedDatabaseGroupRequest
  ): Promise<responses.RemoveManagedDatabaseFromManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DbManagementClient#removeManagedDatabaseFromManagedDatabaseGroup."
      );
    const pathParams = {
      "{managedDatabaseGroupId}":
        removeManagedDatabaseFromManagedDatabaseGroupRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeManagedDatabaseFromManagedDatabaseGroupRequest.opcRequestId,
      "opc-retry-token": removeManagedDatabaseFromManagedDatabaseGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeManagedDatabaseFromManagedDatabaseGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/removeManagedDatabase",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeManagedDatabaseFromManagedDatabaseGroupRequest.removeManagedDatabaseFromManagedDatabaseGroupDetails,
        "RemoveManagedDatabaseFromManagedDatabaseGroupDetails",
        model.RemoveManagedDatabaseFromManagedDatabaseGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveManagedDatabaseFromManagedDatabaseGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Resets database parameter values to their default or startup values.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ResetDatabaseParametersRequest
   * @return ResetDatabaseParametersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ResetDatabaseParameters.ts.html |here} to see how to use ResetDatabaseParameters API.
   */
  public async resetDatabaseParameters(
    resetDatabaseParametersRequest: requests.ResetDatabaseParametersRequest
  ): Promise<responses.ResetDatabaseParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#resetDatabaseParameters.");
    const pathParams = {
      "{managedDatabaseId}": resetDatabaseParametersRequest.managedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": resetDatabaseParametersRequest.opcRequestId,
      "opc-retry-token": resetDatabaseParametersRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      resetDatabaseParametersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/actions/resetDatabaseParameters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        resetDatabaseParametersRequest.resetDatabaseParametersDetails,
        "ResetDatabaseParametersDetails",
        model.ResetDatabaseParametersDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ResetDatabaseParametersResponse>{},
        body: await response.json(),
        bodyKey: "updateDatabaseParametersResult",
        bodyModel: model.UpdateDatabaseParametersResult,
        type: "model.UpdateDatabaseParametersResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Resizes a data file or temp file within the tablespace.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ResizeDataFileRequest
   * @return ResizeDataFileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ResizeDataFile.ts.html |here} to see how to use ResizeDataFile API.
   */
  public async resizeDataFile(
    resizeDataFileRequest: requests.ResizeDataFileRequest
  ): Promise<responses.ResizeDataFileResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#resizeDataFile.");
    const pathParams = {
      "{managedDatabaseId}": resizeDataFileRequest.managedDatabaseId,
      "{tablespaceName}": resizeDataFileRequest.tablespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": resizeDataFileRequest.opcRequestId,
      "opc-retry-token": resizeDataFileRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      resizeDataFileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}/actions/resizeDataFile",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        resizeDataFileRequest.resizeDataFileDetails,
        "ResizeDataFileDetails",
        model.ResizeDataFileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ResizeDataFileResponse>{},
        body: await response.json(),
        bodyKey: "tablespaceAdminStatus",
        bodyModel: model.TablespaceAdminStatus,
        type: "model.TablespaceAdminStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR CPU resource limits and metrics for the specified database in AWR.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SummarizeAwrDbCpuUsagesRequest
   * @return SummarizeAwrDbCpuUsagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbCpuUsages.ts.html |here} to see how to use SummarizeAwrDbCpuUsages API.
   */
  public async summarizeAwrDbCpuUsages(
    summarizeAwrDbCpuUsagesRequest: requests.SummarizeAwrDbCpuUsagesRequest
  ): Promise<responses.SummarizeAwrDbCpuUsagesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbCpuUsages.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbCpuUsagesRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbCpuUsagesRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbCpuUsagesRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.timeLessThanOrEqualTo,
      "sessionType": summarizeAwrDbCpuUsagesRequest.sessionType,
      "containerId": summarizeAwrDbCpuUsagesRequest.containerId,
      "page": summarizeAwrDbCpuUsagesRequest.page,
      "limit": summarizeAwrDbCpuUsagesRequest.limit,
      "sortBy": summarizeAwrDbCpuUsagesRequest.sortBy,
      "sortOrder": summarizeAwrDbCpuUsagesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbCpuUsagesRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbCpuUsagesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeAwrDbCpuUsagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbCpuUsages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbCpuUsagesResponse>{},
        body: await response.json(),
        bodyKey: "awrDbCpuUsageCollection",
        bodyModel: model.AwrDbCpuUsageCollection,
        type: "model.AwrDbCpuUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the metric samples for the specified database in the AWR. The metric samples are summarized based on the Time dimension for each metric.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SummarizeAwrDbMetricsRequest
   * @return SummarizeAwrDbMetricsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbMetrics.ts.html |here} to see how to use SummarizeAwrDbMetrics API.
   */
  public async summarizeAwrDbMetrics(
    summarizeAwrDbMetricsRequest: requests.SummarizeAwrDbMetricsRequest
  ): Promise<responses.SummarizeAwrDbMetricsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbMetrics.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbMetricsRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbMetricsRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbMetricsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbMetricsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbMetricsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbMetricsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbMetricsRequest.timeLessThanOrEqualTo,
      "name": summarizeAwrDbMetricsRequest.name,
      "containerId": summarizeAwrDbMetricsRequest.containerId,
      "page": summarizeAwrDbMetricsRequest.page,
      "limit": summarizeAwrDbMetricsRequest.limit,
      "sortBy": summarizeAwrDbMetricsRequest.sortBy,
      "sortOrder": summarizeAwrDbMetricsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbMetricsRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbMetricsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeAwrDbMetricsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbMetrics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbMetricsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbMetricCollection",
        bodyModel: model.AwrDbMetricCollection,
        type: "model.AwrDbMetricCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the database parameter change history for one database parameter of the specified database in AWR. One change history record contains
   * the previous value, the changed value, and the corresponding time range. If the database parameter value was changed multiple times within the time range, then multiple change history records are created for the same parameter.
   * Note that this API only returns information on change history details for one database parameter.
   * To get a list of all the database parameters whose values were changed during a specified time range, use the following API endpoint:
   * /managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameters
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SummarizeAwrDbParameterChangesRequest
   * @return SummarizeAwrDbParameterChangesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbParameterChanges.ts.html |here} to see how to use SummarizeAwrDbParameterChanges API.
   */
  public async summarizeAwrDbParameterChanges(
    summarizeAwrDbParameterChangesRequest: requests.SummarizeAwrDbParameterChangesRequest
  ): Promise<responses.SummarizeAwrDbParameterChangesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbParameterChanges.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbParameterChangesRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbParameterChangesRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbParameterChangesRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo":
        summarizeAwrDbParameterChangesRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbParameterChangesRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbParameterChangesRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbParameterChangesRequest.timeLessThanOrEqualTo,
      "containerId": summarizeAwrDbParameterChangesRequest.containerId,
      "name": summarizeAwrDbParameterChangesRequest.name,
      "page": summarizeAwrDbParameterChangesRequest.page,
      "limit": summarizeAwrDbParameterChangesRequest.limit,
      "sortBy": summarizeAwrDbParameterChangesRequest.sortBy,
      "sortOrder": summarizeAwrDbParameterChangesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbParameterChangesRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbParameterChangesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeAwrDbParameterChangesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameterChanges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbParameterChangesResponse>{},
        body: await response.json(),
        bodyKey: "awrDbParameterChangeCollection",
        bodyModel: model.AwrDbParameterChangeCollection,
        type: "model.AwrDbParameterChangeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Summarizes the database parameter history for the specified database in AWR. This includes the list of database
* parameters, with information on whether the parameter values were modified within the query time range. Note that
* each database parameter is only listed once. Depending on the optional query parameters, the returned summary gets all the database parameters, which include:
* <p>
- Each parameter whose value was changed during the time range:  (valueChanged =\"Y\")
* - Each parameter whose value was unchanged during the time range:  (valueChanged =\"N\")
* - Each parameter whose value was changed at the system level during the time range: (valueChanged =\"Y\"  and valueModified = \"SYSTEM_MOD\")
* - Each parameter whose value was unchanged during the time range, however, the value is not the default value: (valueChanged =\"N\" and  valueDefault = \"FALSE\")
* <p>
Note that this API does not return information on the number of times each database parameter has been changed within the time range. To get the database parameter value change history for a specific parameter, use the following API endpoint:
* /managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameterChanges
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeAwrDbParametersRequest
     * @return SummarizeAwrDbParametersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbParameters.ts.html |here} to see how to use SummarizeAwrDbParameters API.
     */
  public async summarizeAwrDbParameters(
    summarizeAwrDbParametersRequest: requests.SummarizeAwrDbParametersRequest
  ): Promise<responses.SummarizeAwrDbParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbParameters.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbParametersRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbParametersRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbParametersRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo":
        summarizeAwrDbParametersRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbParametersRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbParametersRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbParametersRequest.timeLessThanOrEqualTo,
      "containerId": summarizeAwrDbParametersRequest.containerId,
      "name": summarizeAwrDbParametersRequest.name,
      "nameContains": summarizeAwrDbParametersRequest.nameContains,
      "valueChanged": summarizeAwrDbParametersRequest.valueChanged,
      "valueDefault": summarizeAwrDbParametersRequest.valueDefault,
      "valueModified": summarizeAwrDbParametersRequest.valueModified,
      "page": summarizeAwrDbParametersRequest.page,
      "limit": summarizeAwrDbParametersRequest.limit,
      "sortBy": summarizeAwrDbParametersRequest.sortBy,
      "sortOrder": summarizeAwrDbParametersRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbParametersRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbParametersRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeAwrDbParametersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbParametersResponse>{},
        body: await response.json(),
        bodyKey: "awrDbParameterCollection",
        bodyModel: model.AwrDbParameterCollection,
        type: "model.AwrDbParameterCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR snapshot ranges that contain continuous snapshots, for the specified Managed Database.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SummarizeAwrDbSnapshotRangesRequest
   * @return SummarizeAwrDbSnapshotRangesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbSnapshotRanges.ts.html |here} to see how to use SummarizeAwrDbSnapshotRanges API.
   */
  public async summarizeAwrDbSnapshotRanges(
    summarizeAwrDbSnapshotRangesRequest: requests.SummarizeAwrDbSnapshotRangesRequest
  ): Promise<responses.SummarizeAwrDbSnapshotRangesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbSnapshotRanges.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbSnapshotRangesRequest.managedDatabaseId
    };

    const queryParams = {
      "name": summarizeAwrDbSnapshotRangesRequest.name,
      "timeGreaterThanOrEqualTo": summarizeAwrDbSnapshotRangesRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbSnapshotRangesRequest.timeLessThanOrEqualTo,
      "page": summarizeAwrDbSnapshotRangesRequest.page,
      "limit": summarizeAwrDbSnapshotRangesRequest.limit,
      "sortBy": summarizeAwrDbSnapshotRangesRequest.sortBy,
      "sortOrder": summarizeAwrDbSnapshotRangesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbSnapshotRangesRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbSnapshotRangesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeAwrDbSnapshotRangesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbSnapshotRanges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbSnapshotRangesResponse>{},
        body: await response.json(),
        bodyKey: "awrDbSnapshotRangeCollection",
        bodyModel: model.AwrDbSnapshotRangeCollection,
        type: "model.AwrDbSnapshotRangeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR SYSSTAT sample data for the specified database in AWR. The statistical data is summarized based on the Time dimension for each statistic.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SummarizeAwrDbSysstatsRequest
   * @return SummarizeAwrDbSysstatsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbSysstats.ts.html |here} to see how to use SummarizeAwrDbSysstats API.
   */
  public async summarizeAwrDbSysstats(
    summarizeAwrDbSysstatsRequest: requests.SummarizeAwrDbSysstatsRequest
  ): Promise<responses.SummarizeAwrDbSysstatsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbSysstats.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbSysstatsRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbSysstatsRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbSysstatsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbSysstatsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbSysstatsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbSysstatsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbSysstatsRequest.timeLessThanOrEqualTo,
      "name": summarizeAwrDbSysstatsRequest.name,
      "containerId": summarizeAwrDbSysstatsRequest.containerId,
      "page": summarizeAwrDbSysstatsRequest.page,
      "limit": summarizeAwrDbSysstatsRequest.limit,
      "sortBy": summarizeAwrDbSysstatsRequest.sortBy,
      "sortOrder": summarizeAwrDbSysstatsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbSysstatsRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbSysstatsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeAwrDbSysstatsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbSysstats",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbSysstatsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbSysstatCollection",
        bodyModel: model.AwrDbSysstatCollection,
        type: "model.AwrDbSysstatCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR top wait events.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SummarizeAwrDbTopWaitEventsRequest
   * @return SummarizeAwrDbTopWaitEventsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbTopWaitEvents.ts.html |here} to see how to use SummarizeAwrDbTopWaitEvents API.
   */
  public async summarizeAwrDbTopWaitEvents(
    summarizeAwrDbTopWaitEventsRequest: requests.SummarizeAwrDbTopWaitEventsRequest
  ): Promise<responses.SummarizeAwrDbTopWaitEventsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbTopWaitEvents.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbTopWaitEventsRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbTopWaitEventsRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbTopWaitEventsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo":
        summarizeAwrDbTopWaitEventsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbTopWaitEventsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbTopWaitEventsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbTopWaitEventsRequest.timeLessThanOrEqualTo,
      "sessionType": summarizeAwrDbTopWaitEventsRequest.sessionType,
      "containerId": summarizeAwrDbTopWaitEventsRequest.containerId,
      "topN": summarizeAwrDbTopWaitEventsRequest.topN,
      "sortBy": summarizeAwrDbTopWaitEventsRequest.sortBy,
      "sortOrder": summarizeAwrDbTopWaitEventsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbTopWaitEventsRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbTopWaitEventsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeAwrDbTopWaitEventsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbTopWaitEvents",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbTopWaitEventsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbTopWaitEventCollection",
        bodyModel: model.AwrDbTopWaitEventCollection,
        type: "model.AwrDbTopWaitEventCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes AWR wait event data into value buckets and frequency, for the specified database in the AWR.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SummarizeAwrDbWaitEventBucketsRequest
   * @return SummarizeAwrDbWaitEventBucketsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbWaitEventBuckets.ts.html |here} to see how to use SummarizeAwrDbWaitEventBuckets API.
   */
  public async summarizeAwrDbWaitEventBuckets(
    summarizeAwrDbWaitEventBucketsRequest: requests.SummarizeAwrDbWaitEventBucketsRequest
  ): Promise<responses.SummarizeAwrDbWaitEventBucketsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbWaitEventBuckets.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbWaitEventBucketsRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbWaitEventBucketsRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbWaitEventBucketsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo":
        summarizeAwrDbWaitEventBucketsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbWaitEventBucketsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbWaitEventBucketsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbWaitEventBucketsRequest.timeLessThanOrEqualTo,
      "name": summarizeAwrDbWaitEventBucketsRequest.name,
      "numBucket": summarizeAwrDbWaitEventBucketsRequest.numBucket,
      "minValue": summarizeAwrDbWaitEventBucketsRequest.minValue,
      "maxValue": summarizeAwrDbWaitEventBucketsRequest.maxValue,
      "containerId": summarizeAwrDbWaitEventBucketsRequest.containerId,
      "page": summarizeAwrDbWaitEventBucketsRequest.page,
      "limit": summarizeAwrDbWaitEventBucketsRequest.limit,
      "sortBy": summarizeAwrDbWaitEventBucketsRequest.sortBy,
      "sortOrder": summarizeAwrDbWaitEventBucketsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbWaitEventBucketsRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbWaitEventBucketsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeAwrDbWaitEventBucketsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbWaitEventBuckets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbWaitEventBucketsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbWaitEventBucketCollection",
        bodyModel: model.AwrDbWaitEventBucketCollection,
        type: "model.AwrDbWaitEventBucketCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR wait event sample data for the specified database in the AWR. The event data is summarized based on the Time dimension for each event.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SummarizeAwrDbWaitEventsRequest
   * @return SummarizeAwrDbWaitEventsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbWaitEvents.ts.html |here} to see how to use SummarizeAwrDbWaitEvents API.
   */
  public async summarizeAwrDbWaitEvents(
    summarizeAwrDbWaitEventsRequest: requests.SummarizeAwrDbWaitEventsRequest
  ): Promise<responses.SummarizeAwrDbWaitEventsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbWaitEvents.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbWaitEventsRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbWaitEventsRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbWaitEventsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo":
        summarizeAwrDbWaitEventsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbWaitEventsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbWaitEventsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbWaitEventsRequest.timeLessThanOrEqualTo,
      "name": summarizeAwrDbWaitEventsRequest.name,
      "sessionType": summarizeAwrDbWaitEventsRequest.sessionType,
      "containerId": summarizeAwrDbWaitEventsRequest.containerId,
      "page": summarizeAwrDbWaitEventsRequest.page,
      "limit": summarizeAwrDbWaitEventsRequest.limit,
      "sortBy": summarizeAwrDbWaitEventsRequest.sortBy,
      "sortOrder": summarizeAwrDbWaitEventsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbWaitEventsRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbWaitEventsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeAwrDbWaitEventsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbWaitEvents",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbWaitEventsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbWaitEventCollection",
        bodyModel: model.AwrDbWaitEventCollection,
        type: "model.AwrDbWaitEventCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the number of job executions grouped by status for a job, Managed Database, or Database Group in a specific compartment. Only one of the parameters, jobId, managedDatabaseId, or managedDatabaseGroupId should be provided.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SummarizeJobExecutionsStatusesRequest
   * @return SummarizeJobExecutionsStatusesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeJobExecutionsStatuses.ts.html |here} to see how to use SummarizeJobExecutionsStatuses API.
   */
  public async summarizeJobExecutionsStatuses(
    summarizeJobExecutionsStatusesRequest: requests.SummarizeJobExecutionsStatusesRequest
  ): Promise<responses.SummarizeJobExecutionsStatusesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeJobExecutionsStatuses.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeJobExecutionsStatusesRequest.compartmentId,
      "id": summarizeJobExecutionsStatusesRequest.id,
      "managedDatabaseGroupId": summarizeJobExecutionsStatusesRequest.managedDatabaseGroupId,
      "managedDatabaseId": summarizeJobExecutionsStatusesRequest.managedDatabaseId,
      "startTime": summarizeJobExecutionsStatusesRequest.startTime,
      "endTime": summarizeJobExecutionsStatusesRequest.endTime,
      "name": summarizeJobExecutionsStatusesRequest.name,
      "sortBy": summarizeJobExecutionsStatusesRequest.sortBy,
      "sortOrder": summarizeJobExecutionsStatusesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeJobExecutionsStatusesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeJobExecutionsStatusesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobExecutionsStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeJobExecutionsStatusesResponse>{},
        body: await response.json(),
        bodyKey: "jobExecutionsStatusSummaryCollection",
        bodyModel: model.JobExecutionsStatusSummaryCollection,
        type: "model.JobExecutionsStatusSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of a specific Database Management private endpoint.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDbManagementPrivateEndpointRequest
   * @return UpdateDbManagementPrivateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/UpdateDbManagementPrivateEndpoint.ts.html |here} to see how to use UpdateDbManagementPrivateEndpoint API.
   */
  public async updateDbManagementPrivateEndpoint(
    updateDbManagementPrivateEndpointRequest: requests.UpdateDbManagementPrivateEndpointRequest
  ): Promise<responses.UpdateDbManagementPrivateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#updateDbManagementPrivateEndpoint.");
    const pathParams = {
      "{dbManagementPrivateEndpointId}":
        updateDbManagementPrivateEndpointRequest.dbManagementPrivateEndpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateDbManagementPrivateEndpointRequest.opcRequestId,
      "if-match": updateDbManagementPrivateEndpointRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDbManagementPrivateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dbManagementPrivateEndpoints/{dbManagementPrivateEndpointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDbManagementPrivateEndpointRequest.updateDbManagementPrivateEndpointDetails,
        "UpdateDbManagementPrivateEndpointDetails",
        model.UpdateDbManagementPrivateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDbManagementPrivateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "dbManagementPrivateEndpoint",
        bodyModel: model.DbManagementPrivateEndpoint,
        type: "model.DbManagementPrivateEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the details for the recurring scheduled job specified by jobId. Note that non-recurring (one time) jobs cannot be updated.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateJobRequest
   * @return UpdateJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/UpdateJob.ts.html |here} to see how to use UpdateJob API.
   */
  public async updateJob(
    updateJobRequest: requests.UpdateJobRequest
  ): Promise<responses.UpdateJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#updateJob.");
    const pathParams = {
      "{jobId}": updateJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateJobRequest.opcRequestId,
      "if-match": updateJobRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateJobRequest.updateJobDetails,
        "UpdateJobDetails",
        model.UpdateJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Managed Database Group specified by managedDatabaseGroupId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateManagedDatabaseGroupRequest
   * @return UpdateManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/UpdateManagedDatabaseGroup.ts.html |here} to see how to use UpdateManagedDatabaseGroup API.
   */
  public async updateManagedDatabaseGroup(
    updateManagedDatabaseGroupRequest: requests.UpdateManagedDatabaseGroupRequest
  ): Promise<responses.UpdateManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#updateManagedDatabaseGroup.");
    const pathParams = {
      "{managedDatabaseGroupId}": updateManagedDatabaseGroupRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateManagedDatabaseGroupRequest.ifMatch,
      "opc-request-id": updateManagedDatabaseGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateManagedDatabaseGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateManagedDatabaseGroupRequest.updateManagedDatabaseGroupDetails,
        "UpdateManagedDatabaseGroupDetails",
        model.UpdateManagedDatabaseGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateManagedDatabaseGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabaseGroup",
        bodyModel: model.ManagedDatabaseGroup,
        type: "model.ManagedDatabaseGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the attributes of the tablespace specified by tablespaceName within the Managed Database specified by managedDatabaseId.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateTablespaceRequest
   * @return UpdateTablespaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/UpdateTablespace.ts.html |here} to see how to use UpdateTablespace API.
   */
  public async updateTablespace(
    updateTablespaceRequest: requests.UpdateTablespaceRequest
  ): Promise<responses.UpdateTablespaceResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#updateTablespace.");
    const pathParams = {
      "{managedDatabaseId}": updateTablespaceRequest.managedDatabaseId,
      "{tablespaceName}": updateTablespaceRequest.tablespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateTablespaceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTablespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/tablespaces/{tablespaceName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTablespaceRequest.updateTablespaceDetails,
        "UpdateTablespaceDetails",
        model.UpdateTablespaceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTablespaceResponse>{},
        body: await response.json(),
        bodyKey: "tablespace",
        bodyModel: model.Tablespace,
        type: "model.Tablespace",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum SqlTuningApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class SqlTuningClient {
  protected static serviceEndpointTemplate = "https://dbmgmt.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20201101";
    if (this.logger) this.logger.info(`SqlTuningClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      SqlTuningClient.serviceEndpointTemplate,
      region,
      SqlTuningClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      SqlTuningClient.serviceEndpointTemplate,
      regionId,
      SqlTuningClient.endpointServiceName
    );
  }

  /**
   * Clones and runs a SQL tuning task in the database.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CloneSqlTuningTaskRequest
   * @return CloneSqlTuningTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/CloneSqlTuningTask.ts.html |here} to see how to use CloneSqlTuningTask API.
   */
  public async cloneSqlTuningTask(
    cloneSqlTuningTaskRequest: requests.CloneSqlTuningTaskRequest
  ): Promise<responses.CloneSqlTuningTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation SqlTuningClient#cloneSqlTuningTask.");
    const pathParams = {
      "{managedDatabaseId}": cloneSqlTuningTaskRequest.managedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": cloneSqlTuningTaskRequest.opcRequestId,
      "opc-retry-token": cloneSqlTuningTaskRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cloneSqlTuningTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/actions/cloneSqlTuningTask",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        cloneSqlTuningTaskRequest.cloneSqlTuningTaskDetails,
        "CloneSqlTuningTaskDetails",
        model.CloneSqlTuningTaskDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CloneSqlTuningTaskResponse>{},
        body: await response.json(),
        bodyKey: "sqlTuningTaskReturn",
        bodyModel: model.SqlTuningTaskReturn,
        type: "model.SqlTuningTaskReturn",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Drops a SQL tuning task and its related results from the database.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DropSqlTuningTaskRequest
   * @return DropSqlTuningTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/DropSqlTuningTask.ts.html |here} to see how to use DropSqlTuningTask API.
   */
  public async dropSqlTuningTask(
    dropSqlTuningTaskRequest: requests.DropSqlTuningTaskRequest
  ): Promise<responses.DropSqlTuningTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation SqlTuningClient#dropSqlTuningTask.");
    const pathParams = {
      "{managedDatabaseId}": dropSqlTuningTaskRequest.managedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": dropSqlTuningTaskRequest.opcRequestId,
      "opc-retry-token": dropSqlTuningTaskRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      dropSqlTuningTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/actions/dropSqlTuningTask",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        dropSqlTuningTaskRequest.dropSqlTuningTaskDetails,
        "DropSqlTuningTaskDetails",
        model.DropSqlTuningTaskDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DropSqlTuningTaskResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a comparison of the existing SQL execution plan and a new plan.
   * A SQL tuning task may suggest a new execution plan for a SQL,
   * and this API retrieves the comparison report of the statistics of the two plans.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetExecutionPlanStatsComparisionRequest
   * @return GetExecutionPlanStatsComparisionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetExecutionPlanStatsComparision.ts.html |here} to see how to use GetExecutionPlanStatsComparision API.
   */
  public async getExecutionPlanStatsComparision(
    getExecutionPlanStatsComparisionRequest: requests.GetExecutionPlanStatsComparisionRequest
  ): Promise<responses.GetExecutionPlanStatsComparisionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SqlTuningClient#getExecutionPlanStatsComparision.");
    const pathParams = {
      "{managedDatabaseId}": getExecutionPlanStatsComparisionRequest.managedDatabaseId,
      "{sqlTuningAdvisorTaskId}": getExecutionPlanStatsComparisionRequest.sqlTuningAdvisorTaskId
    };

    const queryParams = {
      "sqlObjectId": getExecutionPlanStatsComparisionRequest.sqlObjectId,
      "executionId": getExecutionPlanStatsComparisionRequest.executionId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getExecutionPlanStatsComparisionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getExecutionPlanStatsComparisionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks/{sqlTuningAdvisorTaskId}/executionPlanStatsComparision",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetExecutionPlanStatsComparisionResponse>{},
        body: await response.json(),
        bodyKey: "executionPlanStatsComparision",
        bodyModel: model.ExecutionPlanStatsComparision,
        type: "model.ExecutionPlanStatsComparision",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a SQL execution plan for the SQL being tuned.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSqlExecutionPlanRequest
   * @return GetSqlExecutionPlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetSqlExecutionPlan.ts.html |here} to see how to use GetSqlExecutionPlan API.
   */
  public async getSqlExecutionPlan(
    getSqlExecutionPlanRequest: requests.GetSqlExecutionPlanRequest
  ): Promise<responses.GetSqlExecutionPlanResponse> {
    if (this.logger) this.logger.debug("Calling operation SqlTuningClient#getSqlExecutionPlan.");
    const pathParams = {
      "{managedDatabaseId}": getSqlExecutionPlanRequest.managedDatabaseId,
      "{sqlTuningAdvisorTaskId}": getSqlExecutionPlanRequest.sqlTuningAdvisorTaskId
    };

    const queryParams = {
      "sqlObjectId": getSqlExecutionPlanRequest.sqlObjectId,
      "attribute": getSqlExecutionPlanRequest.attribute
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSqlExecutionPlanRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSqlExecutionPlanRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks/{sqlTuningAdvisorTaskId}/sqlExecutionPlan",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSqlExecutionPlanResponse>{},
        body: await response.json(),
        bodyKey: "sqlTuningAdvisorTaskSqlExecutionPlan",
        bodyModel: model.SqlTuningAdvisorTaskSqlExecutionPlan,
        type: "model.SqlTuningAdvisorTaskSqlExecutionPlan",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the summary report for the specified SQL Tuning Advisor task.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSqlTuningAdvisorTaskSummaryReportRequest
   * @return GetSqlTuningAdvisorTaskSummaryReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetSqlTuningAdvisorTaskSummaryReport.ts.html |here} to see how to use GetSqlTuningAdvisorTaskSummaryReport API.
   */
  public async getSqlTuningAdvisorTaskSummaryReport(
    getSqlTuningAdvisorTaskSummaryReportRequest: requests.GetSqlTuningAdvisorTaskSummaryReportRequest
  ): Promise<responses.GetSqlTuningAdvisorTaskSummaryReportResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SqlTuningClient#getSqlTuningAdvisorTaskSummaryReport.");
    const pathParams = {
      "{managedDatabaseId}": getSqlTuningAdvisorTaskSummaryReportRequest.managedDatabaseId,
      "{sqlTuningAdvisorTaskId}": getSqlTuningAdvisorTaskSummaryReportRequest.sqlTuningAdvisorTaskId
    };

    const queryParams = {
      "searchPeriod": getSqlTuningAdvisorTaskSummaryReportRequest.searchPeriod,
      "timeGreaterThanOrEqualTo":
        getSqlTuningAdvisorTaskSummaryReportRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": getSqlTuningAdvisorTaskSummaryReportRequest.timeLessThanOrEqualTo,
      "beginExecIdGreaterThanOrEqualTo":
        getSqlTuningAdvisorTaskSummaryReportRequest.beginExecIdGreaterThanOrEqualTo,
      "endExecIdLessThanOrEqualTo":
        getSqlTuningAdvisorTaskSummaryReportRequest.endExecIdLessThanOrEqualTo
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSqlTuningAdvisorTaskSummaryReportRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSqlTuningAdvisorTaskSummaryReportRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks/{sqlTuningAdvisorTaskId}/summaryReport",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSqlTuningAdvisorTaskSummaryReportResponse>{},
        body: await response.json(),
        bodyKey: "sqlTuningAdvisorTaskSummaryReport",
        bodyModel: model.SqlTuningAdvisorTaskSummaryReport,
        type: "model.SqlTuningAdvisorTaskSummaryReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets an array of the details of the findings that match specific filters.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSqlTuningAdvisorTaskFindingsRequest
   * @return ListSqlTuningAdvisorTaskFindingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListSqlTuningAdvisorTaskFindings.ts.html |here} to see how to use ListSqlTuningAdvisorTaskFindings API.
   */
  public async listSqlTuningAdvisorTaskFindings(
    listSqlTuningAdvisorTaskFindingsRequest: requests.ListSqlTuningAdvisorTaskFindingsRequest
  ): Promise<responses.ListSqlTuningAdvisorTaskFindingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SqlTuningClient#listSqlTuningAdvisorTaskFindings.");
    const pathParams = {
      "{managedDatabaseId}": listSqlTuningAdvisorTaskFindingsRequest.managedDatabaseId,
      "{sqlTuningAdvisorTaskId}": listSqlTuningAdvisorTaskFindingsRequest.sqlTuningAdvisorTaskId
    };

    const queryParams = {
      "beginExecId": listSqlTuningAdvisorTaskFindingsRequest.beginExecId,
      "endExecId": listSqlTuningAdvisorTaskFindingsRequest.endExecId,
      "searchPeriod": listSqlTuningAdvisorTaskFindingsRequest.searchPeriod,
      "findingFilter": listSqlTuningAdvisorTaskFindingsRequest.findingFilter,
      "statsHashFilter": listSqlTuningAdvisorTaskFindingsRequest.statsHashFilter,
      "indexHashFilter": listSqlTuningAdvisorTaskFindingsRequest.indexHashFilter,
      "sortBy": listSqlTuningAdvisorTaskFindingsRequest.sortBy,
      "sortOrder": listSqlTuningAdvisorTaskFindingsRequest.sortOrder,
      "page": listSqlTuningAdvisorTaskFindingsRequest.page,
      "limit": listSqlTuningAdvisorTaskFindingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlTuningAdvisorTaskFindingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlTuningAdvisorTaskFindingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks/{sqlTuningAdvisorTaskId}/findings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlTuningAdvisorTaskFindingsResponse>{},
        body: await response.json(),
        bodyKey: "sqlTuningAdvisorTaskFindingCollection",
        bodyModel: model.SqlTuningAdvisorTaskFindingCollection,
        type: "model.SqlTuningAdvisorTaskFindingCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the findings and possible actions for a given object in a SQL tuning task.
   * The task ID and object ID are used to retrieve the findings and recommendations.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSqlTuningAdvisorTaskRecommendationsRequest
   * @return ListSqlTuningAdvisorTaskRecommendationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListSqlTuningAdvisorTaskRecommendations.ts.html |here} to see how to use ListSqlTuningAdvisorTaskRecommendations API.
   */
  public async listSqlTuningAdvisorTaskRecommendations(
    listSqlTuningAdvisorTaskRecommendationsRequest: requests.ListSqlTuningAdvisorTaskRecommendationsRequest
  ): Promise<responses.ListSqlTuningAdvisorTaskRecommendationsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation SqlTuningClient#listSqlTuningAdvisorTaskRecommendations."
      );
    const pathParams = {
      "{managedDatabaseId}": listSqlTuningAdvisorTaskRecommendationsRequest.managedDatabaseId,
      "{sqlTuningAdvisorTaskId}":
        listSqlTuningAdvisorTaskRecommendationsRequest.sqlTuningAdvisorTaskId
    };

    const queryParams = {
      "sqlObjectId": listSqlTuningAdvisorTaskRecommendationsRequest.sqlObjectId,
      "executionId": listSqlTuningAdvisorTaskRecommendationsRequest.executionId,
      "sortBy": listSqlTuningAdvisorTaskRecommendationsRequest.sortBy,
      "sortOrder": listSqlTuningAdvisorTaskRecommendationsRequest.sortOrder,
      "page": listSqlTuningAdvisorTaskRecommendationsRequest.page,
      "limit": listSqlTuningAdvisorTaskRecommendationsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlTuningAdvisorTaskRecommendationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlTuningAdvisorTaskRecommendationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks/{sqlTuningAdvisorTaskId}/recommendations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlTuningAdvisorTaskRecommendationsResponse>{},
        body: await response.json(),
        bodyKey: "sqlTuningAdvisorTaskRecommendationCollection",
        bodyModel: model.SqlTuningAdvisorTaskRecommendationCollection,
        type: "model.SqlTuningAdvisorTaskRecommendationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the SQL Tuning Advisor tasks for the specified Managed Database.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSqlTuningAdvisorTasksRequest
   * @return ListSqlTuningAdvisorTasksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListSqlTuningAdvisorTasks.ts.html |here} to see how to use ListSqlTuningAdvisorTasks API.
   */
  public async listSqlTuningAdvisorTasks(
    listSqlTuningAdvisorTasksRequest: requests.ListSqlTuningAdvisorTasksRequest
  ): Promise<responses.ListSqlTuningAdvisorTasksResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SqlTuningClient#listSqlTuningAdvisorTasks.");
    const pathParams = {
      "{managedDatabaseId}": listSqlTuningAdvisorTasksRequest.managedDatabaseId
    };

    const queryParams = {
      "name": listSqlTuningAdvisorTasksRequest.name,
      "status": listSqlTuningAdvisorTasksRequest.status,
      "timeGreaterThanOrEqualTo": listSqlTuningAdvisorTasksRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": listSqlTuningAdvisorTasksRequest.timeLessThanOrEqualTo,
      "page": listSqlTuningAdvisorTasksRequest.page,
      "limit": listSqlTuningAdvisorTasksRequest.limit,
      "sortBy": listSqlTuningAdvisorTasksRequest.sortBy,
      "sortOrder": listSqlTuningAdvisorTasksRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlTuningAdvisorTasksRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSqlTuningAdvisorTasksRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/sqlTuningAdvisorTasks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlTuningAdvisorTasksResponse>{},
        body: await response.json(),
        bodyKey: "sqlTuningAdvisorTaskCollection",
        bodyModel: model.SqlTuningAdvisorTaskCollection,
        type: "model.SqlTuningAdvisorTaskCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Starts a SQL tuning task for a given set of SQL statements from the active session history top SQL statements.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StartSqlTuningTaskRequest
   * @return StartSqlTuningTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/StartSqlTuningTask.ts.html |here} to see how to use StartSqlTuningTask API.
   */
  public async startSqlTuningTask(
    startSqlTuningTaskRequest: requests.StartSqlTuningTaskRequest
  ): Promise<responses.StartSqlTuningTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation SqlTuningClient#startSqlTuningTask.");
    const pathParams = {
      "{managedDatabaseId}": startSqlTuningTaskRequest.managedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": startSqlTuningTaskRequest.opcRequestId,
      "opc-retry-token": startSqlTuningTaskRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startSqlTuningTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/actions/startSqlTuningTask",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        startSqlTuningTaskRequest.startSqlTuningTaskDetails,
        "StartSqlTuningTaskDetails",
        model.StartSqlTuningTaskDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.StartSqlTuningTaskResponse>{},
        body: await response.json(),
        bodyKey: "sqlTuningTaskReturn",
        bodyModel: model.SqlTuningTaskReturn,
        type: "model.SqlTuningTaskReturn",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

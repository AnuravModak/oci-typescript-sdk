/**
 * Database Management API
 * Use the Database Management API to perform tasks such as obtaining performance and resource usage metrics
for a fleet of Managed Databases or a specific Managed Database, creating Managed Database Groups, and
running a SQL job on a Managed Database or Managed Database Group.

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { DbManagementWaiter } from "./dbmanagement-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DbManagementApiKeys {}

export class DbManagementClient {
  protected static serviceEndpointTemplate = "https://dbmgmt.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DbManagementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20201101";
    if (this.logger) this.logger.info(`DbManagementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DbManagementClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DbManagementClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new DbManagementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DbManagementWaiter {
    this._waiters = new DbManagementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DbManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Adds a Managed Database to a specific Managed Database Group.
   * After the database is added, it will be included in the
   * management activities performed on the Managed Database Group.
   *
   * @param AddManagedDatabaseToManagedDatabaseGroupRequest
   * @return AddManagedDatabaseToManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/AddManagedDatabaseToManagedDatabaseGroup.ts.html |here} to see how to use AddManagedDatabaseToManagedDatabaseGroup API.
   */
  public async addManagedDatabaseToManagedDatabaseGroup(
    addManagedDatabaseToManagedDatabaseGroupRequest: requests.AddManagedDatabaseToManagedDatabaseGroupRequest
  ): Promise<responses.AddManagedDatabaseToManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DbManagementClient#addManagedDatabaseToManagedDatabaseGroup."
      );
    const pathParams = {
      "{managedDatabaseGroupId}":
        addManagedDatabaseToManagedDatabaseGroupRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addManagedDatabaseToManagedDatabaseGroupRequest.opcRequestId,
      "opc-retry-token": addManagedDatabaseToManagedDatabaseGroupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/addManagedDatabase",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addManagedDatabaseToManagedDatabaseGroupRequest.addManagedDatabaseToManagedDatabaseGroupDetails,
        "AddManagedDatabaseToManagedDatabaseGroupDetails",
        models.AddManagedDatabaseToManagedDatabaseGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      addManagedDatabaseToManagedDatabaseGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AddManagedDatabaseToManagedDatabaseGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Changes database parameter values. There are two kinds of database
* parameters:
* <p>
- Dynamic parameters: They can be changed for the current Oracle
* Database instance. The changes take effect immediately.
* - Static parameters: They cannot be changed for the current instance.
* You must change these parameters and then restart the database before
* changes take effect.
* <p>
**Note:** If the instance is started using a text initialization
* parameter file, the parameter changes are applicable only for the
* current instance. You must update them manually to be passed to
* a future instance.
* 
     * @param ChangeDatabaseParametersRequest
     * @return ChangeDatabaseParametersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ChangeDatabaseParameters.ts.html |here} to see how to use ChangeDatabaseParameters API.
     */
  public async changeDatabaseParameters(
    changeDatabaseParametersRequest: requests.ChangeDatabaseParametersRequest
  ): Promise<responses.ChangeDatabaseParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#changeDatabaseParameters.");
    const pathParams = {
      "{managedDatabaseId}": changeDatabaseParametersRequest.managedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDatabaseParametersRequest.opcRequestId,
      "opc-retry-token": changeDatabaseParametersRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/actions/changeDatabaseParameters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDatabaseParametersRequest.changeDatabaseParametersDetails,
        "ChangeDatabaseParametersDetails",
        models.ChangeDatabaseParametersDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeDatabaseParametersRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDatabaseParametersResponse>{},
        body: await response.json(),
        bodyKey: "updateDatabaseParametersResult",
        bodyModel: "model.UpdateDatabaseParametersResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a job.
   *
   * @param ChangeJobCompartmentRequest
   * @return ChangeJobCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ChangeJobCompartment.ts.html |here} to see how to use ChangeJobCompartment API.
   */
  public async changeJobCompartment(
    changeJobCompartmentRequest: requests.ChangeJobCompartmentRequest
  ): Promise<responses.ChangeJobCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#changeJobCompartment.");
    const pathParams = {
      "{jobId}": changeJobCompartmentRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeJobCompartmentRequest.opcRequestId,
      "opc-retry-token": changeJobCompartmentRequest.opcRetryToken,
      "if-match": changeJobCompartmentRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeJobCompartmentRequest.changeJobCompartmentDetails,
        "ChangeJobCompartmentDetails",
        models.ChangeJobCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeJobCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeJobCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Managed Database Group to a different compartment.
   * The destination compartment must not have a Managed Database Group
   * with the same name.
   *
   * @param ChangeManagedDatabaseGroupCompartmentRequest
   * @return ChangeManagedDatabaseGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ChangeManagedDatabaseGroupCompartment.ts.html |here} to see how to use ChangeManagedDatabaseGroupCompartment API.
   */
  public async changeManagedDatabaseGroupCompartment(
    changeManagedDatabaseGroupCompartmentRequest: requests.ChangeManagedDatabaseGroupCompartmentRequest
  ): Promise<responses.ChangeManagedDatabaseGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DbManagementClient#changeManagedDatabaseGroupCompartment."
      );
    const pathParams = {
      "{managedDatabaseGroupId}":
        changeManagedDatabaseGroupCompartmentRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeManagedDatabaseGroupCompartmentRequest.opcRequestId,
      "opc-retry-token": changeManagedDatabaseGroupCompartmentRequest.opcRetryToken,
      "if-match": changeManagedDatabaseGroupCompartmentRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeManagedDatabaseGroupCompartmentRequest.changeManagedDatabaseGroupCompartmentDetails,
        "ChangeManagedDatabaseGroupCompartmentDetails",
        models.ChangeManagedDatabaseGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeManagedDatabaseGroupCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeManagedDatabaseGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a job to be executed on a Managed Database or Managed Database Group. Only one
   * of the parameters, managedDatabaseId or managedDatabaseGroupId should be provided as
   * input in CreateJobDetails resource in request body.
   *
   * @param CreateJobRequest
   * @return CreateJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/CreateJob.ts.html |here} to see how to use CreateJob API.
   */
  public async createJob(
    createJobRequest: requests.CreateJobRequest
  ): Promise<responses.CreateJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#createJob.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createJobRequest.opcRequestId,
      "opc-retry-token": createJobRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createJobRequest.createJobDetails,
        "CreateJobDetails",
        models.CreateJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Managed Database Group. The group does not contain any
   * Managed Databases when it is created, and they must be added later.
   *
   * @param CreateManagedDatabaseGroupRequest
   * @return CreateManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/CreateManagedDatabaseGroup.ts.html |here} to see how to use CreateManagedDatabaseGroup API.
   */
  public async createManagedDatabaseGroup(
    createManagedDatabaseGroupRequest: requests.CreateManagedDatabaseGroupRequest
  ): Promise<responses.CreateManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#createManagedDatabaseGroup.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createManagedDatabaseGroupRequest.opcRequestId,
      "opc-retry-token": createManagedDatabaseGroupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createManagedDatabaseGroupRequest.createManagedDatabaseGroupDetails,
        "CreateManagedDatabaseGroupDetails",
        models.CreateManagedDatabaseGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createManagedDatabaseGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateManagedDatabaseGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabaseGroup",
        bodyModel: "model.ManagedDatabaseGroup",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the job specified by jobId.
   * @param DeleteJobRequest
   * @return DeleteJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/DeleteJob.ts.html |here} to see how to use DeleteJob API.
   */
  public async deleteJob(
    deleteJobRequest: requests.DeleteJobRequest
  ): Promise<responses.DeleteJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#deleteJob.");
    const pathParams = {
      "{jobId}": deleteJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteJobRequest.ifMatch,
      "opc-request-id": deleteJobRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the Managed Database Group specified by managedDatabaseGroupId.
   * If the group contains Managed Databases, then it cannot be deleted.
   *
   * @param DeleteManagedDatabaseGroupRequest
   * @return DeleteManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/DeleteManagedDatabaseGroup.ts.html |here} to see how to use DeleteManagedDatabaseGroup API.
   */
  public async deleteManagedDatabaseGroup(
    deleteManagedDatabaseGroupRequest: requests.DeleteManagedDatabaseGroupRequest
  ): Promise<responses.DeleteManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#deleteManagedDatabaseGroup.");
    const pathParams = {
      "{managedDatabaseGroupId}": deleteManagedDatabaseGroupRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteManagedDatabaseGroupRequest.ifMatch,
      "opc-request-id": deleteManagedDatabaseGroupRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteManagedDatabaseGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteManagedDatabaseGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the AWR report for the specified Managed Database.
   *
   * @param GetAwrDbReportRequest
   * @return GetAwrDbReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetAwrDbReport.ts.html |here} to see how to use GetAwrDbReport API.
   */
  public async getAwrDbReport(
    getAwrDbReportRequest: requests.GetAwrDbReportRequest
  ): Promise<responses.GetAwrDbReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getAwrDbReport.");
    const pathParams = {
      "{managedDatabaseId}": getAwrDbReportRequest.managedDatabaseId,
      "{awrDbId}": getAwrDbReportRequest.awrDbId
    };

    const queryParams = {
      "instNums": getAwrDbReportRequest.instNums,
      "beginSnIdGreaterThanOrEqualTo": getAwrDbReportRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": getAwrDbReportRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": getAwrDbReportRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": getAwrDbReportRequest.timeLessThanOrEqualTo,
      "reportType": getAwrDbReportRequest.reportType,
      "containerId": getAwrDbReportRequest.containerId,
      "reportFormat": getAwrDbReportRequest.reportFormat
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAwrDbReportRequest.opcRequestId,
      "opc-retry-token": getAwrDbReportRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbReport",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getAwrDbReportRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAwrDbReportResponse>{},
        body: await response.json(),
        bodyKey: "awrDbReport",
        bodyModel: "model.AwrDbReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a AWR SQL report for one SQL.
   *
   * @param GetAwrDbSqlReportRequest
   * @return GetAwrDbSqlReportResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetAwrDbSqlReport.ts.html |here} to see how to use GetAwrDbSqlReport API.
   */
  public async getAwrDbSqlReport(
    getAwrDbSqlReportRequest: requests.GetAwrDbSqlReportRequest
  ): Promise<responses.GetAwrDbSqlReportResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getAwrDbSqlReport.");
    const pathParams = {
      "{managedDatabaseId}": getAwrDbSqlReportRequest.managedDatabaseId,
      "{awrDbId}": getAwrDbSqlReportRequest.awrDbId
    };

    const queryParams = {
      "instNum": getAwrDbSqlReportRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo": getAwrDbSqlReportRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": getAwrDbSqlReportRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": getAwrDbSqlReportRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": getAwrDbSqlReportRequest.timeLessThanOrEqualTo,
      "sqlId": getAwrDbSqlReportRequest.sqlId,
      "reportFormat": getAwrDbSqlReportRequest.reportFormat,
      "containerId": getAwrDbSqlReportRequest.containerId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAwrDbSqlReportRequest.opcRequestId,
      "opc-retry-token": getAwrDbSqlReportRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbSqlReport",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getAwrDbSqlReportRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAwrDbSqlReportResponse>{},
        body: await response.json(),
        bodyKey: "awrDbSqlReport",
        bodyModel: "model.AwrDbSqlReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the metrics related to cluster cache for the Oracle
   * Real Application Clusters (Oracle RAC) database specified
   * by managedDatabaseId.
   *
   * @param GetClusterCacheMetricRequest
   * @return GetClusterCacheMetricResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetClusterCacheMetric.ts.html |here} to see how to use GetClusterCacheMetric API.
   */
  public async getClusterCacheMetric(
    getClusterCacheMetricRequest: requests.GetClusterCacheMetricRequest
  ): Promise<responses.GetClusterCacheMetricResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#getClusterCacheMetric.");
    const pathParams = {
      "{managedDatabaseId}": getClusterCacheMetricRequest.managedDatabaseId
    };

    const queryParams = {
      "startTime": getClusterCacheMetricRequest.startTime,
      "endTime": getClusterCacheMetricRequest.endTime
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getClusterCacheMetricRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/clusterCacheMetrics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getClusterCacheMetricRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetClusterCacheMetricResponse>{},
        body: await response.json(),
        bodyKey: "clusterCacheMetric",
        bodyModel: "model.ClusterCacheMetric",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the health metrics for a fleet of databases in a compartment or in a Managed Database Group.
   * Either the CompartmentId or the ManagedDatabaseGroupId query parameters must be provided to retrieve the health metrics.
   *
   * @param GetDatabaseFleetHealthMetricsRequest
   * @return GetDatabaseFleetHealthMetricsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetDatabaseFleetHealthMetrics.ts.html |here} to see how to use GetDatabaseFleetHealthMetrics API.
   */
  public async getDatabaseFleetHealthMetrics(
    getDatabaseFleetHealthMetricsRequest: requests.GetDatabaseFleetHealthMetricsRequest
  ): Promise<responses.GetDatabaseFleetHealthMetricsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#getDatabaseFleetHealthMetrics.");
    const pathParams = {};

    const queryParams = {
      "managedDatabaseGroupId": getDatabaseFleetHealthMetricsRequest.managedDatabaseGroupId,
      "compartmentId": getDatabaseFleetHealthMetricsRequest.compartmentId,
      "compareBaselineTime": getDatabaseFleetHealthMetricsRequest.compareBaselineTime,
      "compareTargetTime": getDatabaseFleetHealthMetricsRequest.compareTargetTime,
      "compareType": getDatabaseFleetHealthMetricsRequest.compareType,
      "filterByMetricNames": getDatabaseFleetHealthMetricsRequest.filterByMetricNames,
      "filterByDatabaseType": getDatabaseFleetHealthMetricsRequest.filterByDatabaseType,
      "filterByDatabaseSubType": getDatabaseFleetHealthMetricsRequest.filterByDatabaseSubType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDatabaseFleetHealthMetricsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fleetMetrics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDatabaseFleetHealthMetricsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDatabaseFleetHealthMetricsResponse>{},
        body: await response.json(),
        bodyKey: "databaseFleetHealthMetrics",
        bodyModel: "model.DatabaseFleetHealthMetrics",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a summary of the activity and resource usage metrics like DB Time, CPU, User I/O, Wait, Storage, and Memory for a Managed Database.
   * @param GetDatabaseHomeMetricsRequest
   * @return GetDatabaseHomeMetricsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetDatabaseHomeMetrics.ts.html |here} to see how to use GetDatabaseHomeMetrics API.
   */
  public async getDatabaseHomeMetrics(
    getDatabaseHomeMetricsRequest: requests.GetDatabaseHomeMetricsRequest
  ): Promise<responses.GetDatabaseHomeMetricsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#getDatabaseHomeMetrics.");
    const pathParams = {};

    const queryParams = {
      "managedDatabaseId": getDatabaseHomeMetricsRequest.managedDatabaseId,
      "startTime": getDatabaseHomeMetricsRequest.startTime,
      "endTime": getDatabaseHomeMetricsRequest.endTime
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDatabaseHomeMetricsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseHomeMetrics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDatabaseHomeMetricsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDatabaseHomeMetricsResponse>{},
        body: await response.json(),
        bodyKey: "databaseHomeMetrics",
        bodyModel: "model.DatabaseHomeMetrics",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for the job specified by jobId.
   *
   * @param GetJobRequest
   * @return GetJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetJob.ts.html |here} to see how to use GetJob API.
   */
  public async getJob(getJobRequest: requests.GetJobRequest): Promise<responses.GetJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getJob.");
    const pathParams = {
      "{jobId}": getJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for the job execution specified by jobExecutionId.
   *
   * @param GetJobExecutionRequest
   * @return GetJobExecutionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetJobExecution.ts.html |here} to see how to use GetJobExecution API.
   */
  public async getJobExecution(
    getJobExecutionRequest: requests.GetJobExecutionRequest
  ): Promise<responses.GetJobExecutionResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getJobExecution.");
    const pathParams = {
      "{jobExecutionId}": getJobExecutionRequest.jobExecutionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobExecutionRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobExecutions/{jobExecutionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getJobExecutionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobExecutionResponse>{},
        body: await response.json(),
        bodyKey: "jobExecution",
        bodyModel: "model.JobExecution",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for the job run specified by jobRunId.
   *
   * @param GetJobRunRequest
   * @return GetJobRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetJobRun.ts.html |here} to see how to use GetJobRun API.
   */
  public async getJobRun(
    getJobRunRequest: requests.GetJobRunRequest
  ): Promise<responses.GetJobRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getJobRun.");
    const pathParams = {
      "{jobRunId}": getJobRunRequest.jobRunId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobRunRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobRuns/{jobRunId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getJobRunRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobRunResponse>{},
        body: await response.json(),
        bodyKey: "jobRun",
        bodyModel: "model.JobRun",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for the Managed Database specified by managedDatabaseId.
   *
   * @param GetManagedDatabaseRequest
   * @return GetManagedDatabaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetManagedDatabase.ts.html |here} to see how to use GetManagedDatabase API.
   */
  public async getManagedDatabase(
    getManagedDatabaseRequest: requests.GetManagedDatabaseRequest
  ): Promise<responses.GetManagedDatabaseResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#getManagedDatabase.");
    const pathParams = {
      "{managedDatabaseId}": getManagedDatabaseRequest.managedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagedDatabaseRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getManagedDatabaseRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedDatabaseResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabase",
        bodyModel: "model.ManagedDatabase",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details for the Managed Database Group specified by managedDatabaseGroupId.
   *
   * @param GetManagedDatabaseGroupRequest
   * @return GetManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetManagedDatabaseGroup.ts.html |here} to see how to use GetManagedDatabaseGroup API.
   */
  public async getManagedDatabaseGroup(
    getManagedDatabaseGroupRequest: requests.GetManagedDatabaseGroupRequest
  ): Promise<responses.GetManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#getManagedDatabaseGroup.");
    const pathParams = {
      "{managedDatabaseGroupId}": getManagedDatabaseGroupRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getManagedDatabaseGroupRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getManagedDatabaseGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetManagedDatabaseGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabaseGroup",
        bodyModel: "model.ManagedDatabaseGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists AWR snapshots for the specified database in the AWR.
   *
   * @param ListAwrDbSnapshotsRequest
   * @return ListAwrDbSnapshotsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListAwrDbSnapshots.ts.html |here} to see how to use ListAwrDbSnapshots API.
   */
  public async listAwrDbSnapshots(
    listAwrDbSnapshotsRequest: requests.ListAwrDbSnapshotsRequest
  ): Promise<responses.ListAwrDbSnapshotsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listAwrDbSnapshots.");
    const pathParams = {
      "{managedDatabaseId}": listAwrDbSnapshotsRequest.managedDatabaseId,
      "{awrDbId}": listAwrDbSnapshotsRequest.awrDbId
    };

    const queryParams = {
      "instNum": listAwrDbSnapshotsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo": listAwrDbSnapshotsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": listAwrDbSnapshotsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": listAwrDbSnapshotsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": listAwrDbSnapshotsRequest.timeLessThanOrEqualTo,
      "containerId": listAwrDbSnapshotsRequest.containerId,
      "page": listAwrDbSnapshotsRequest.page,
      "limit": listAwrDbSnapshotsRequest.limit,
      "sortBy": listAwrDbSnapshotsRequest.sortBy,
      "sortOrder": listAwrDbSnapshotsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAwrDbSnapshotsRequest.opcRequestId,
      "opc-retry-token": listAwrDbSnapshotsRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbSnapshots",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listAwrDbSnapshotsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAwrDbSnapshotsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbSnapshotCollection",
        bodyModel: "model.AwrDbSnapshotCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of databases and their snapshot summary details available in the AWR of the specified Managed Database.
   *
   * @param ListAwrDbsRequest
   * @return ListAwrDbsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListAwrDbs.ts.html |here} to see how to use ListAwrDbs API.
   */
  public async listAwrDbs(
    listAwrDbsRequest: requests.ListAwrDbsRequest
  ): Promise<responses.ListAwrDbsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listAwrDbs.");
    const pathParams = {
      "{managedDatabaseId}": listAwrDbsRequest.managedDatabaseId
    };

    const queryParams = {
      "name": listAwrDbsRequest.name,
      "timeGreaterThanOrEqualTo": listAwrDbsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": listAwrDbsRequest.timeLessThanOrEqualTo,
      "page": listAwrDbsRequest.page,
      "limit": listAwrDbsRequest.limit,
      "sortBy": listAwrDbsRequest.sortBy,
      "sortOrder": listAwrDbsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAwrDbsRequest.opcRequestId,
      "opc-retry-token": listAwrDbsRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listAwrDbsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAwrDbsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbCollection",
        bodyModel: "model.AwrDbCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of database parameters for the specified Managed Database. The parameters are listed in alphabetical order, along with their current values.
   *
   * @param ListDatabaseParametersRequest
   * @return ListDatabaseParametersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListDatabaseParameters.ts.html |here} to see how to use ListDatabaseParameters API.
   */
  public async listDatabaseParameters(
    listDatabaseParametersRequest: requests.ListDatabaseParametersRequest
  ): Promise<responses.ListDatabaseParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listDatabaseParameters.");
    const pathParams = {
      "{managedDatabaseId}": listDatabaseParametersRequest.managedDatabaseId
    };

    const queryParams = {
      "source": listDatabaseParametersRequest.source,
      "name": listDatabaseParametersRequest.name,
      "isAllowedValuesIncluded": listDatabaseParametersRequest.isAllowedValuesIncluded,
      "sortBy": listDatabaseParametersRequest.sortBy,
      "sortOrder": listDatabaseParametersRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDatabaseParametersRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/databaseParameters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDatabaseParametersRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDatabaseParametersResponse>{},
        body: await response.json(),
        bodyKey: "databaseParametersCollection",
        bodyModel: "model.DatabaseParametersCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the job execution for a specific ID or the list of job executions for a job, Managed Database or Managed Database Group
   * in a specific compartment. Only one of the parameters, ID, jobId, managedDatabaseId or managedDatabaseGroupId should be provided.
   * If none of these parameters is provided, all the job executions in the compartment are listed. Job executions can also be filtered
   * based on the name and status parameters.
   *
   * @param ListJobExecutionsRequest
   * @return ListJobExecutionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListJobExecutions.ts.html |here} to see how to use ListJobExecutions API.
   */
  public async listJobExecutions(
    listJobExecutionsRequest: requests.ListJobExecutionsRequest
  ): Promise<responses.ListJobExecutionsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listJobExecutions.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJobExecutionsRequest.compartmentId,
      "id": listJobExecutionsRequest.id,
      "jobId": listJobExecutionsRequest.jobId,
      "managedDatabaseId": listJobExecutionsRequest.managedDatabaseId,
      "managedDatabaseGroupId": listJobExecutionsRequest.managedDatabaseGroupId,
      "status": listJobExecutionsRequest.status,
      "name": listJobExecutionsRequest.name,
      "limit": listJobExecutionsRequest.limit,
      "page": listJobExecutionsRequest.page,
      "sortBy": listJobExecutionsRequest.sortBy,
      "sortOrder": listJobExecutionsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobExecutionsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobExecutions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listJobExecutionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobExecutionsResponse>{},
        body: await response.json(),
        bodyKey: "jobExecutionCollection",
        bodyModel: "model.JobExecutionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the job run for a specific ID or the list of job runs for a job, Managed Database or Managed Database Group
   * in a specific compartment. Only one of the parameters, ID, jobId, managedDatabaseId, or managedDatabaseGroupId
   * should be provided. If none of these parameters is provided, all the job runs in the compartment are listed.
   * Job runs can also be filtered based on name and runStatus parameters.
   *
   * @param ListJobRunsRequest
   * @return ListJobRunsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListJobRuns.ts.html |here} to see how to use ListJobRuns API.
   */
  public async listJobRuns(
    listJobRunsRequest: requests.ListJobRunsRequest
  ): Promise<responses.ListJobRunsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listJobRuns.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJobRunsRequest.compartmentId,
      "id": listJobRunsRequest.id,
      "jobId": listJobRunsRequest.jobId,
      "managedDatabaseId": listJobRunsRequest.managedDatabaseId,
      "managedDatabaseGroupId": listJobRunsRequest.managedDatabaseGroupId,
      "runStatus": listJobRunsRequest.runStatus,
      "name": listJobRunsRequest.name,
      "limit": listJobRunsRequest.limit,
      "page": listJobRunsRequest.page,
      "sortBy": listJobRunsRequest.sortBy,
      "sortOrder": listJobRunsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobRunsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobRuns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listJobRunsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobRunsResponse>{},
        body: await response.json(),
        bodyKey: "jobRunCollection",
        bodyModel: "model.JobRunCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the job for a specific ID or the list of jobs for a Managed Database or Managed Database Group
   * in a specific compartment. Only one of the parameters, ID, managedDatabaseId or managedDatabaseGroupId,
   * should be provided. If none of these parameters is provided, all the jobs in the compartment are listed.
   * Jobs can also be filtered based on the name and lifecycleState parameters.
   *
   * @param ListJobsRequest
   * @return ListJobsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListJobs.ts.html |here} to see how to use ListJobs API.
   */
  public async listJobs(
    listJobsRequest: requests.ListJobsRequest
  ): Promise<responses.ListJobsResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listJobs.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJobsRequest.compartmentId,
      "id": listJobsRequest.id,
      "managedDatabaseGroupId": listJobsRequest.managedDatabaseGroupId,
      "managedDatabaseId": listJobsRequest.managedDatabaseId,
      "name": listJobsRequest.name,
      "lifecycleState": listJobsRequest.lifecycleState,
      "limit": listJobsRequest.limit,
      "page": listJobsRequest.page,
      "sortBy": listJobsRequest.sortBy,
      "sortOrder": listJobsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listJobsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobsResponse>{},
        body: await response.json(),
        bodyKey: "jobCollection",
        bodyModel: "model.JobCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Managed Database Group for a specific ID or the list of Managed Database Groups in
   * a specific compartment. Managed Database Groups can also be filtered based on the name parameter.
   * Only one of the parameters, ID or name should be provided. If none of these parameters is provided,
   * all the Managed Database Groups in the compartment are listed.
   *
   * @param ListManagedDatabaseGroupsRequest
   * @return ListManagedDatabaseGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListManagedDatabaseGroups.ts.html |here} to see how to use ListManagedDatabaseGroups API.
   */
  public async listManagedDatabaseGroups(
    listManagedDatabaseGroupsRequest: requests.ListManagedDatabaseGroupsRequest
  ): Promise<responses.ListManagedDatabaseGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listManagedDatabaseGroups.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagedDatabaseGroupsRequest.compartmentId,
      "id": listManagedDatabaseGroupsRequest.id,
      "name": listManagedDatabaseGroupsRequest.name,
      "lifecycleState": listManagedDatabaseGroupsRequest.lifecycleState,
      "page": listManagedDatabaseGroupsRequest.page,
      "limit": listManagedDatabaseGroupsRequest.limit,
      "sortBy": listManagedDatabaseGroupsRequest.sortBy,
      "sortOrder": listManagedDatabaseGroupsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedDatabaseGroupsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listManagedDatabaseGroupsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedDatabaseGroupsResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabaseGroupCollection",
        bodyModel: "model.ManagedDatabaseGroupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Managed Database for a specific ID or the list of Managed Databases in a specific compartment.
   * Managed Databases can also be filtered based on the name parameter. Only one of the parameters, ID or name
   * should be provided. If none of these parameters is provided, all the Managed Databases in the compartment are listed.
   *
   * @param ListManagedDatabasesRequest
   * @return ListManagedDatabasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListManagedDatabases.ts.html |here} to see how to use ListManagedDatabases API.
   */
  public async listManagedDatabases(
    listManagedDatabasesRequest: requests.ListManagedDatabasesRequest
  ): Promise<responses.ListManagedDatabasesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#listManagedDatabases.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listManagedDatabasesRequest.compartmentId,
      "id": listManagedDatabasesRequest.id,
      "name": listManagedDatabasesRequest.name,
      "page": listManagedDatabasesRequest.page,
      "limit": listManagedDatabasesRequest.limit,
      "sortBy": listManagedDatabasesRequest.sortBy,
      "sortOrder": listManagedDatabasesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listManagedDatabasesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listManagedDatabasesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListManagedDatabasesResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabaseCollection",
        bodyModel: "model.ManagedDatabaseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the list of tablespaces for the specified managedDatabaseId.
   * @param ListTablespacesRequest
   * @return ListTablespacesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ListTablespaces.ts.html |here} to see how to use ListTablespaces API.
   */
  public async listTablespaces(
    listTablespacesRequest: requests.ListTablespacesRequest
  ): Promise<responses.ListTablespacesResponse> {
    if (this.logger) this.logger.debug("Calling operation DbManagementClient#listTablespaces.");
    const pathParams = {
      "{managedDatabaseId}": listTablespacesRequest.managedDatabaseId
    };

    const queryParams = {
      "name": listTablespacesRequest.name,
      "sortBy": listTablespacesRequest.sortBy,
      "sortOrder": listTablespacesRequest.sortOrder,
      "page": listTablespacesRequest.page,
      "limit": listTablespacesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTablespacesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/tablespaces",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listTablespacesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTablespacesResponse>{},
        body: await response.json(),
        bodyKey: "tablespaceCollection",
        bodyModel: "model.TablespaceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a Managed Database from a Managed Database Group. Any management
   * activities that are currently running on this database will continue to
   * run to completion. However, any activities scheduled to run in the future
   * will not be performed on this database.
   *
   * @param RemoveManagedDatabaseFromManagedDatabaseGroupRequest
   * @return RemoveManagedDatabaseFromManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/RemoveManagedDatabaseFromManagedDatabaseGroup.ts.html |here} to see how to use RemoveManagedDatabaseFromManagedDatabaseGroup API.
   */
  public async removeManagedDatabaseFromManagedDatabaseGroup(
    removeManagedDatabaseFromManagedDatabaseGroupRequest: requests.RemoveManagedDatabaseFromManagedDatabaseGroupRequest
  ): Promise<responses.RemoveManagedDatabaseFromManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DbManagementClient#removeManagedDatabaseFromManagedDatabaseGroup."
      );
    const pathParams = {
      "{managedDatabaseGroupId}":
        removeManagedDatabaseFromManagedDatabaseGroupRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeManagedDatabaseFromManagedDatabaseGroupRequest.opcRequestId,
      "opc-retry-token": removeManagedDatabaseFromManagedDatabaseGroupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/removeManagedDatabase",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeManagedDatabaseFromManagedDatabaseGroupRequest.removeManagedDatabaseFromManagedDatabaseGroupDetails,
        "RemoveManagedDatabaseFromManagedDatabaseGroupDetails",
        models.RemoveManagedDatabaseFromManagedDatabaseGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      removeManagedDatabaseFromManagedDatabaseGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveManagedDatabaseFromManagedDatabaseGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Resets database parameter values to their default or startup values.
   *
   * @param ResetDatabaseParametersRequest
   * @return ResetDatabaseParametersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/ResetDatabaseParameters.ts.html |here} to see how to use ResetDatabaseParameters API.
   */
  public async resetDatabaseParameters(
    resetDatabaseParametersRequest: requests.ResetDatabaseParametersRequest
  ): Promise<responses.ResetDatabaseParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#resetDatabaseParameters.");
    const pathParams = {
      "{managedDatabaseId}": resetDatabaseParametersRequest.managedDatabaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": resetDatabaseParametersRequest.opcRequestId,
      "opc-retry-token": resetDatabaseParametersRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/actions/resetDatabaseParameters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        resetDatabaseParametersRequest.resetDatabaseParametersDetails,
        "ResetDatabaseParametersDetails",
        models.ResetDatabaseParametersDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      resetDatabaseParametersRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ResetDatabaseParametersResponse>{},
        body: await response.json(),
        bodyKey: "updateDatabaseParametersResult",
        bodyModel: "model.UpdateDatabaseParametersResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR CPU resource limits and metrics for the specified database in AWR.
   *
   * @param SummarizeAwrDbCpuUsagesRequest
   * @return SummarizeAwrDbCpuUsagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbCpuUsages.ts.html |here} to see how to use SummarizeAwrDbCpuUsages API.
   */
  public async summarizeAwrDbCpuUsages(
    summarizeAwrDbCpuUsagesRequest: requests.SummarizeAwrDbCpuUsagesRequest
  ): Promise<responses.SummarizeAwrDbCpuUsagesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbCpuUsages.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbCpuUsagesRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbCpuUsagesRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbCpuUsagesRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbCpuUsagesRequest.timeLessThanOrEqualTo,
      "sessionType": summarizeAwrDbCpuUsagesRequest.sessionType,
      "containerId": summarizeAwrDbCpuUsagesRequest.containerId,
      "page": summarizeAwrDbCpuUsagesRequest.page,
      "limit": summarizeAwrDbCpuUsagesRequest.limit,
      "sortBy": summarizeAwrDbCpuUsagesRequest.sortBy,
      "sortOrder": summarizeAwrDbCpuUsagesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbCpuUsagesRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbCpuUsagesRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbCpuUsages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeAwrDbCpuUsagesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbCpuUsagesResponse>{},
        body: await response.json(),
        bodyKey: "awrDbCpuUsageCollection",
        bodyModel: "model.AwrDbCpuUsageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the metric samples for the specified database in the AWR. The metric samples are summarized based on the Time dimension for each metric.
   *
   * @param SummarizeAwrDbMetricsRequest
   * @return SummarizeAwrDbMetricsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbMetrics.ts.html |here} to see how to use SummarizeAwrDbMetrics API.
   */
  public async summarizeAwrDbMetrics(
    summarizeAwrDbMetricsRequest: requests.SummarizeAwrDbMetricsRequest
  ): Promise<responses.SummarizeAwrDbMetricsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbMetrics.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbMetricsRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbMetricsRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbMetricsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbMetricsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbMetricsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbMetricsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbMetricsRequest.timeLessThanOrEqualTo,
      "name": summarizeAwrDbMetricsRequest.name,
      "containerId": summarizeAwrDbMetricsRequest.containerId,
      "page": summarizeAwrDbMetricsRequest.page,
      "limit": summarizeAwrDbMetricsRequest.limit,
      "sortBy": summarizeAwrDbMetricsRequest.sortBy,
      "sortOrder": summarizeAwrDbMetricsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbMetricsRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbMetricsRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbMetrics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeAwrDbMetricsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbMetricsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbMetricCollection",
        bodyModel: "model.AwrDbMetricCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR database parameter change history for one database parameter of the specified Managed Database. One change history record contains
   * the previous value, the changed value, and the corresponding time range. If the database parameter value was changed multiple times within the time range, then multiple change history records are created for the same parameter.
   * Note that this API only returns information on change history details for one database parameter.
   * To get a list of all the database parameters whose values were changed during a specified time range, use the following API endpoint:
   * /managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameters
   *
   * @param SummarizeAwrDbParameterChangesRequest
   * @return SummarizeAwrDbParameterChangesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbParameterChanges.ts.html |here} to see how to use SummarizeAwrDbParameterChanges API.
   */
  public async summarizeAwrDbParameterChanges(
    summarizeAwrDbParameterChangesRequest: requests.SummarizeAwrDbParameterChangesRequest
  ): Promise<responses.SummarizeAwrDbParameterChangesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbParameterChanges.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbParameterChangesRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbParameterChangesRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbParameterChangesRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo":
        summarizeAwrDbParameterChangesRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbParameterChangesRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbParameterChangesRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbParameterChangesRequest.timeLessThanOrEqualTo,
      "containerId": summarizeAwrDbParameterChangesRequest.containerId,
      "name": summarizeAwrDbParameterChangesRequest.name,
      "page": summarizeAwrDbParameterChangesRequest.page,
      "limit": summarizeAwrDbParameterChangesRequest.limit,
      "sortBy": summarizeAwrDbParameterChangesRequest.sortBy,
      "sortOrder": summarizeAwrDbParameterChangesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbParameterChangesRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbParameterChangesRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameterChanges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeAwrDbParameterChangesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbParameterChangesResponse>{},
        body: await response.json(),
        bodyKey: "awrDbParameterChangeCollection",
        bodyModel: "model.AwrDbParameterChangeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR database parameter history for the specified Managed Database. This includes the list of database
   * parameters, with information on whether the parameter values were modified within the query time range. Note that
   * each database parameter is only listed once. The returned summary gets all the database parameters, which include:
   *  -Each parameter whose value was changed during the time range: AwrDbParameterValueOptionalQueryParam (valueChanged =\"Y\")
   *  -Each parameter whose value was unchanged during the time range: AwrDbParameterValueOptionalQueryParam (valueChanged =\"N\")
   *  -Each parameter whose value was changed at the system level during the time range: (valueChanged =\"Y\"  and valueModified = \"SYSTEM_MOD\").
   *  -Each parameter whose value was unchanged during the time range, however, the value is not the default value: (valueChanged =\"N\" and  valueDefault = \"FALSE\")
   * Note that this API does not return information on the number of times each database parameter has been changed within the time range. To get the database parameter value change history for a specific parameter, use the following API endpoint:
   * /managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameterChanges
   *
   * @param SummarizeAwrDbParametersRequest
   * @return SummarizeAwrDbParametersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbParameters.ts.html |here} to see how to use SummarizeAwrDbParameters API.
   */
  public async summarizeAwrDbParameters(
    summarizeAwrDbParametersRequest: requests.SummarizeAwrDbParametersRequest
  ): Promise<responses.SummarizeAwrDbParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbParameters.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbParametersRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbParametersRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbParametersRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo":
        summarizeAwrDbParametersRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbParametersRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbParametersRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbParametersRequest.timeLessThanOrEqualTo,
      "containerId": summarizeAwrDbParametersRequest.containerId,
      "name": summarizeAwrDbParametersRequest.name,
      "nameContains": summarizeAwrDbParametersRequest.nameContains,
      "valueChanged": summarizeAwrDbParametersRequest.valueChanged,
      "valueDefault": summarizeAwrDbParametersRequest.valueDefault,
      "valueModified": summarizeAwrDbParametersRequest.valueModified,
      "page": summarizeAwrDbParametersRequest.page,
      "limit": summarizeAwrDbParametersRequest.limit,
      "sortBy": summarizeAwrDbParametersRequest.sortBy,
      "sortOrder": summarizeAwrDbParametersRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbParametersRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbParametersRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbParameters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeAwrDbParametersRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbParametersResponse>{},
        body: await response.json(),
        bodyKey: "awrDbParameterCollection",
        bodyModel: "model.AwrDbParameterCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR snapshot ranges that contain continuous snapshots, for the specified Managed Database.
   *
   * @param SummarizeAwrDbSnapshotRangesRequest
   * @return SummarizeAwrDbSnapshotRangesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbSnapshotRanges.ts.html |here} to see how to use SummarizeAwrDbSnapshotRanges API.
   */
  public async summarizeAwrDbSnapshotRanges(
    summarizeAwrDbSnapshotRangesRequest: requests.SummarizeAwrDbSnapshotRangesRequest
  ): Promise<responses.SummarizeAwrDbSnapshotRangesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbSnapshotRanges.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbSnapshotRangesRequest.managedDatabaseId
    };

    const queryParams = {
      "name": summarizeAwrDbSnapshotRangesRequest.name,
      "timeGreaterThanOrEqualTo": summarizeAwrDbSnapshotRangesRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbSnapshotRangesRequest.timeLessThanOrEqualTo,
      "page": summarizeAwrDbSnapshotRangesRequest.page,
      "limit": summarizeAwrDbSnapshotRangesRequest.limit,
      "sortBy": summarizeAwrDbSnapshotRangesRequest.sortBy,
      "sortOrder": summarizeAwrDbSnapshotRangesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbSnapshotRangesRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbSnapshotRangesRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbSnapshotRanges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeAwrDbSnapshotRangesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbSnapshotRangesResponse>{},
        body: await response.json(),
        bodyKey: "awrDbSnapshotRangeCollection",
        bodyModel: "model.AwrDbSnapshotRangeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR SYSSTAT sample data for the specified database in AWR. The statistical data is summarized based on the Time dimension for each statistic.
   *
   * @param SummarizeAwrDbSysstatsRequest
   * @return SummarizeAwrDbSysstatsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbSysstats.ts.html |here} to see how to use SummarizeAwrDbSysstats API.
   */
  public async summarizeAwrDbSysstats(
    summarizeAwrDbSysstatsRequest: requests.SummarizeAwrDbSysstatsRequest
  ): Promise<responses.SummarizeAwrDbSysstatsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbSysstats.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbSysstatsRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbSysstatsRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbSysstatsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo": summarizeAwrDbSysstatsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbSysstatsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbSysstatsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbSysstatsRequest.timeLessThanOrEqualTo,
      "name": summarizeAwrDbSysstatsRequest.name,
      "containerId": summarizeAwrDbSysstatsRequest.containerId,
      "page": summarizeAwrDbSysstatsRequest.page,
      "limit": summarizeAwrDbSysstatsRequest.limit,
      "sortBy": summarizeAwrDbSysstatsRequest.sortBy,
      "sortOrder": summarizeAwrDbSysstatsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbSysstatsRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbSysstatsRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbSysstats",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeAwrDbSysstatsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbSysstatsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbSysstatCollection",
        bodyModel: "model.AwrDbSysstatCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR top wait events.
   *
   * @param SummarizeAwrDbTopWaitEventsRequest
   * @return SummarizeAwrDbTopWaitEventsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbTopWaitEvents.ts.html |here} to see how to use SummarizeAwrDbTopWaitEvents API.
   */
  public async summarizeAwrDbTopWaitEvents(
    summarizeAwrDbTopWaitEventsRequest: requests.SummarizeAwrDbTopWaitEventsRequest
  ): Promise<responses.SummarizeAwrDbTopWaitEventsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbTopWaitEvents.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbTopWaitEventsRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbTopWaitEventsRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbTopWaitEventsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo":
        summarizeAwrDbTopWaitEventsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbTopWaitEventsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbTopWaitEventsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbTopWaitEventsRequest.timeLessThanOrEqualTo,
      "sessionType": summarizeAwrDbTopWaitEventsRequest.sessionType,
      "containerId": summarizeAwrDbTopWaitEventsRequest.containerId,
      "topN": summarizeAwrDbTopWaitEventsRequest.topN,
      "sortBy": summarizeAwrDbTopWaitEventsRequest.sortBy,
      "sortOrder": summarizeAwrDbTopWaitEventsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbTopWaitEventsRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbTopWaitEventsRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbTopWaitEvents",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeAwrDbTopWaitEventsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbTopWaitEventsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbTopWaitEventCollection",
        bodyModel: "model.AwrDbTopWaitEventCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes AWR wait event data into value buckets and frequency, for the specified database in the AWR.
   *
   * @param SummarizeAwrDbWaitEventBucketsRequest
   * @return SummarizeAwrDbWaitEventBucketsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbWaitEventBuckets.ts.html |here} to see how to use SummarizeAwrDbWaitEventBuckets API.
   */
  public async summarizeAwrDbWaitEventBuckets(
    summarizeAwrDbWaitEventBucketsRequest: requests.SummarizeAwrDbWaitEventBucketsRequest
  ): Promise<responses.SummarizeAwrDbWaitEventBucketsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbWaitEventBuckets.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbWaitEventBucketsRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbWaitEventBucketsRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbWaitEventBucketsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo":
        summarizeAwrDbWaitEventBucketsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbWaitEventBucketsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbWaitEventBucketsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbWaitEventBucketsRequest.timeLessThanOrEqualTo,
      "name": summarizeAwrDbWaitEventBucketsRequest.name,
      "numBucket": summarizeAwrDbWaitEventBucketsRequest.numBucket,
      "minValue": summarizeAwrDbWaitEventBucketsRequest.minValue,
      "maxValue": summarizeAwrDbWaitEventBucketsRequest.maxValue,
      "containerId": summarizeAwrDbWaitEventBucketsRequest.containerId,
      "page": summarizeAwrDbWaitEventBucketsRequest.page,
      "limit": summarizeAwrDbWaitEventBucketsRequest.limit,
      "sortBy": summarizeAwrDbWaitEventBucketsRequest.sortBy,
      "sortOrder": summarizeAwrDbWaitEventBucketsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbWaitEventBucketsRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbWaitEventBucketsRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbWaitEventBuckets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeAwrDbWaitEventBucketsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbWaitEventBucketsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbWaitEventBucketCollection",
        bodyModel: "model.AwrDbWaitEventBucketCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Summarizes the AWR wait event sample data for the specified database in the AWR. The event data is summarized based on the Time dimension for each event.
   *
   * @param SummarizeAwrDbWaitEventsRequest
   * @return SummarizeAwrDbWaitEventsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/SummarizeAwrDbWaitEvents.ts.html |here} to see how to use SummarizeAwrDbWaitEvents API.
   */
  public async summarizeAwrDbWaitEvents(
    summarizeAwrDbWaitEventsRequest: requests.SummarizeAwrDbWaitEventsRequest
  ): Promise<responses.SummarizeAwrDbWaitEventsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#summarizeAwrDbWaitEvents.");
    const pathParams = {
      "{managedDatabaseId}": summarizeAwrDbWaitEventsRequest.managedDatabaseId,
      "{awrDbId}": summarizeAwrDbWaitEventsRequest.awrDbId
    };

    const queryParams = {
      "instNum": summarizeAwrDbWaitEventsRequest.instNum,
      "beginSnIdGreaterThanOrEqualTo":
        summarizeAwrDbWaitEventsRequest.beginSnIdGreaterThanOrEqualTo,
      "endSnIdLessThanOrEqualTo": summarizeAwrDbWaitEventsRequest.endSnIdLessThanOrEqualTo,
      "timeGreaterThanOrEqualTo": summarizeAwrDbWaitEventsRequest.timeGreaterThanOrEqualTo,
      "timeLessThanOrEqualTo": summarizeAwrDbWaitEventsRequest.timeLessThanOrEqualTo,
      "name": summarizeAwrDbWaitEventsRequest.name,
      "sessionType": summarizeAwrDbWaitEventsRequest.sessionType,
      "containerId": summarizeAwrDbWaitEventsRequest.containerId,
      "page": summarizeAwrDbWaitEventsRequest.page,
      "limit": summarizeAwrDbWaitEventsRequest.limit,
      "sortBy": summarizeAwrDbWaitEventsRequest.sortBy,
      "sortOrder": summarizeAwrDbWaitEventsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeAwrDbWaitEventsRequest.opcRequestId,
      "opc-retry-token": summarizeAwrDbWaitEventsRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabases/{managedDatabaseId}/awrDbs/{awrDbId}/awrDbWaitEvents",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeAwrDbWaitEventsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeAwrDbWaitEventsResponse>{},
        body: await response.json(),
        bodyKey: "awrDbWaitEventCollection",
        bodyModel: "model.AwrDbWaitEventCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Managed Database Group specified by managedDatabaseGroupId.
   *
   * @param UpdateManagedDatabaseGroupRequest
   * @return UpdateManagedDatabaseGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/UpdateManagedDatabaseGroup.ts.html |here} to see how to use UpdateManagedDatabaseGroup API.
   */
  public async updateManagedDatabaseGroup(
    updateManagedDatabaseGroupRequest: requests.UpdateManagedDatabaseGroupRequest
  ): Promise<responses.UpdateManagedDatabaseGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DbManagementClient#updateManagedDatabaseGroup.");
    const pathParams = {
      "{managedDatabaseGroupId}": updateManagedDatabaseGroupRequest.managedDatabaseGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateManagedDatabaseGroupRequest.ifMatch,
      "opc-request-id": updateManagedDatabaseGroupRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateManagedDatabaseGroupRequest.updateManagedDatabaseGroupDetails,
        "UpdateManagedDatabaseGroupDetails",
        models.UpdateManagedDatabaseGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateManagedDatabaseGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateManagedDatabaseGroupResponse>{},
        body: await response.json(),
        bodyKey: "managedDatabaseGroup",
        bodyModel: "model.ManagedDatabaseGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

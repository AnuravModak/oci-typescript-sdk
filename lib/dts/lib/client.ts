/**
 * Data Transfer Service API
 * Data Transfer Service API Specification
 * OpenAPI spec version: 1.0.015
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { ApplianceExportJobWaiter } from "./applianceexportjob-waiter";
import { TransferApplianceWaiter } from "./transferappliance-waiter";
import { TransferApplianceEntitlementWaiter } from "./transferapplianceentitlement-waiter";
import { TransferDeviceWaiter } from "./transferdevice-waiter";
import { TransferJobWaiter } from "./transferjob-waiter";
import { TransferPackageWaiter } from "./transferpackage-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ApplianceExportJobApiKeys {}

export class ApplianceExportJobClient {
  protected static serviceEndpointTemplate =
    "https://datatransfer.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ApplianceExportJobWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20171001";
    if (this.logger) this.logger.info(`ApplianceExportJobClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ApplianceExportJobClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ApplianceExportJobClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new ApplianceExportJobWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ApplianceExportJobWaiter {
    this._waiters = new ApplianceExportJobWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ApplianceExportJobWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Sets the client configuration for the client
   */
  public set clientConfiguration(clientConfiguration: common.ClientConfiguration) {
    this._clientConfiguration = clientConfiguration;
  }

  /**
   * Moves a ApplianceExportJob into a different compartment.
   * @param ChangeApplianceExportJobCompartmentRequest
   * @return ChangeApplianceExportJobCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeApplianceExportJobCompartment(
    changeApplianceExportJobCompartmentRequest: requests.ChangeApplianceExportJobCompartmentRequest
  ): Promise<responses.ChangeApplianceExportJobCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplianceExportJobClient#changeApplianceExportJobCompartment."
      );
    const pathParams = {
      "{applianceExportJobId}": changeApplianceExportJobCompartmentRequest.applianceExportJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeApplianceExportJobCompartmentRequest.ifMatch,
      "opc-request-id": changeApplianceExportJobCompartmentRequest.opcRequestId,
      "opc-retry-token": changeApplianceExportJobCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applianceExportJobs/{applianceExportJobId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeApplianceExportJobCompartmentRequest.changeApplianceExportJobCompartmentDetails,
        "ChangeApplianceExportJobCompartmentDetails",
        models.ChangeApplianceExportJobCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeApplianceExportJobCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeApplianceExportJobCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Appliance Export Job that corresponds with customer's logical dataset
   * @param CreateApplianceExportJobRequest
   * @return CreateApplianceExportJobResponse
   * @throws OciError when an error occurs
   */
  public async createApplianceExportJob(
    createApplianceExportJobRequest: requests.CreateApplianceExportJobRequest
  ): Promise<responses.CreateApplianceExportJobResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApplianceExportJobClient#createApplianceExportJob.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createApplianceExportJobRequest.opcRetryToken,
      "opc-request-id": createApplianceExportJobRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applianceExportJobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createApplianceExportJobRequest.createApplianceExportJobDetails,
        "CreateApplianceExportJobDetails",
        models.CreateApplianceExportJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createApplianceExportJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateApplianceExportJobResponse>{},
        body: await response.json(),
        bodyKey: "applianceExportJob",
        bodyModel: "model.ApplianceExportJob",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * deletes a Appliance Export Job
   * @param DeleteApplianceExportJobRequest
   * @return DeleteApplianceExportJobResponse
   * @throws OciError when an error occurs
   */
  public async deleteApplianceExportJob(
    deleteApplianceExportJobRequest: requests.DeleteApplianceExportJobRequest
  ): Promise<responses.DeleteApplianceExportJobResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApplianceExportJobClient#deleteApplianceExportJob.");
    const pathParams = {
      "{applianceExportJobId}": deleteApplianceExportJobRequest.applianceExportJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteApplianceExportJobRequest.ifMatch,
      "opc-request-id": deleteApplianceExportJobRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applianceExportJobs/{applianceExportJobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteApplianceExportJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteApplianceExportJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Describes a Appliance Export Job in detail
   * @param GetApplianceExportJobRequest
   * @return GetApplianceExportJobResponse
   * @throws OciError when an error occurs
   */
  public async getApplianceExportJob(
    getApplianceExportJobRequest: requests.GetApplianceExportJobRequest
  ): Promise<responses.GetApplianceExportJobResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApplianceExportJobClient#getApplianceExportJob.");
    const pathParams = {
      "{applianceExportJobId}": getApplianceExportJobRequest.applianceExportJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getApplianceExportJobRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applianceExportJobs/{applianceExportJobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getApplianceExportJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetApplianceExportJobResponse>{},
        body: await response.json(),
        bodyKey: "applianceExportJob",
        bodyModel: "model.ApplianceExportJob",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists Appliance Export Jobs in a given compartment
   * @param ListApplianceExportJobsRequest
   * @return ListApplianceExportJobsResponse
   * @throws OciError when an error occurs
   */
  public async listApplianceExportJobs(
    listApplianceExportJobsRequest: requests.ListApplianceExportJobsRequest
  ): Promise<responses.ListApplianceExportJobsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApplianceExportJobClient#listApplianceExportJobs.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listApplianceExportJobsRequest.compartmentId,
      "lifecycleState": listApplianceExportJobsRequest.lifecycleState,
      "displayName": listApplianceExportJobsRequest.displayName,
      "limit": listApplianceExportJobsRequest.limit,
      "page": listApplianceExportJobsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listApplianceExportJobsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applianceExportJobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listApplianceExportJobsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListApplianceExportJobsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ApplianceExportJobSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ApplianceExportJobSummary objects
   * contained in responses from the listApplianceExportJobs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllApplianceExportJobs(
    request: requests.ListApplianceExportJobsRequest
  ): AsyncIterableIterator<models.ApplianceExportJobSummary> {
    return paginateRecords(request, req => this.listApplianceExportJobs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listApplianceExportJobs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllApplianceExportJobsResponses(
    request: requests.ListApplianceExportJobsRequest
  ): AsyncIterableIterator<responses.ListApplianceExportJobsResponse> {
    return paginateResponses(request, req => this.listApplianceExportJobs(req));
  }

  /**
   * Updates a Appliance Export Job that corresponds with customer's logical dataset.
   * @param UpdateApplianceExportJobRequest
   * @return UpdateApplianceExportJobResponse
   * @throws OciError when an error occurs
   */
  public async updateApplianceExportJob(
    updateApplianceExportJobRequest: requests.UpdateApplianceExportJobRequest
  ): Promise<responses.UpdateApplianceExportJobResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApplianceExportJobClient#updateApplianceExportJob.");
    const pathParams = {
      "{applianceExportJobId}": updateApplianceExportJobRequest.applianceExportJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateApplianceExportJobRequest.ifMatch,
      "opc-request-id": updateApplianceExportJobRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/applianceExportJobs/{applianceExportJobId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateApplianceExportJobRequest.updateApplianceExportJobDetails,
        "UpdateApplianceExportJobDetails",
        models.UpdateApplianceExportJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateApplianceExportJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateApplianceExportJobResponse>{},
        body: await response.json(),
        bodyKey: "applianceExportJob",
        bodyModel: "model.ApplianceExportJob",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum ShippingVendorsApiKeys {}

export class ShippingVendorsClient {
  protected static serviceEndpointTemplate =
    "https://datatransfer.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20171001";
    if (this.logger) this.logger.info(`ShippingVendorsClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ShippingVendorsClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ShippingVendorsClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Sets the client configuration for the client
   */
  public set clientConfiguration(clientConfiguration: common.ClientConfiguration) {
    this._clientConfiguration = clientConfiguration;
  }

  /**
   * Lists available shipping vendors for Transfer Package delivery
   * @param ListShippingVendorsRequest
   * @return ListShippingVendorsResponse
   * @throws OciError when an error occurs
   */
  public async listShippingVendors(
    listShippingVendorsRequest: requests.ListShippingVendorsRequest
  ): Promise<responses.ListShippingVendorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ShippingVendorsClient#listShippingVendors.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shippingVendors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listShippingVendorsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListShippingVendorsResponse>{},
        body: await response.json(),
        bodyKey: "shippingVendors",
        bodyModel: "model.ShippingVendors",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum TransferApplianceApiKeys {}

export class TransferApplianceClient {
  protected static serviceEndpointTemplate =
    "https://datatransfer.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": TransferApplianceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20171001";
    if (this.logger) this.logger.info(`TransferApplianceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      TransferApplianceClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      TransferApplianceClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new TransferApplianceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): TransferApplianceWaiter {
    this._waiters = new TransferApplianceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): TransferApplianceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Sets the client configuration for the client
   */
  public set clientConfiguration(clientConfiguration: common.ClientConfiguration) {
    this._clientConfiguration = clientConfiguration;
  }

  /**
   * Create a new Transfer Appliance
   * @param CreateTransferApplianceRequest
   * @return CreateTransferApplianceResponse
   * @throws OciError when an error occurs
   */
  public async createTransferAppliance(
    createTransferApplianceRequest: requests.CreateTransferApplianceRequest
  ): Promise<responses.CreateTransferApplianceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferApplianceClient#createTransferAppliance.");
    const pathParams = {
      "{id}": createTransferApplianceRequest.id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTransferApplianceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferAppliances",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTransferApplianceRequest.createTransferApplianceDetails,
        "CreateTransferApplianceDetails",
        models.CreateTransferApplianceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createTransferApplianceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTransferApplianceResponse>{},
        body: await response.json(),
        bodyKey: "transferAppliance",
        bodyModel: "model.TransferAppliance",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates an X.509 certificate from a public key
   * @param CreateTransferApplianceAdminCredentialsRequest
   * @return CreateTransferApplianceAdminCredentialsResponse
   * @throws OciError when an error occurs
   */
  public async createTransferApplianceAdminCredentials(
    createTransferApplianceAdminCredentialsRequest: requests.CreateTransferApplianceAdminCredentialsRequest
  ): Promise<responses.CreateTransferApplianceAdminCredentialsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation TransferApplianceClient#createTransferApplianceAdminCredentials."
      );
    const pathParams = {
      "{id}": createTransferApplianceAdminCredentialsRequest.id,
      "{transferApplianceLabel}":
        createTransferApplianceAdminCredentialsRequest.transferApplianceLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}/admin_credentials",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTransferApplianceAdminCredentialsRequest.adminPublicKey,
        "TransferAppliancePublicKey",
        models.TransferAppliancePublicKey.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createTransferApplianceAdminCredentialsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTransferApplianceAdminCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "transferApplianceCertificate",
        bodyModel: "model.TransferApplianceCertificate",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * deletes a transfer Appliance
   * @param DeleteTransferApplianceRequest
   * @return DeleteTransferApplianceResponse
   * @throws OciError when an error occurs
   */
  public async deleteTransferAppliance(
    deleteTransferApplianceRequest: requests.DeleteTransferApplianceRequest
  ): Promise<responses.DeleteTransferApplianceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferApplianceClient#deleteTransferAppliance.");
    const pathParams = {
      "{id}": deleteTransferApplianceRequest.id,
      "{transferApplianceLabel}": deleteTransferApplianceRequest.transferApplianceLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteTransferApplianceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTransferApplianceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Describes a transfer appliance in detail
   * @param GetTransferApplianceRequest
   * @return GetTransferApplianceResponse
   * @throws OciError when an error occurs
   */
  public async getTransferAppliance(
    getTransferApplianceRequest: requests.GetTransferApplianceRequest
  ): Promise<responses.GetTransferApplianceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferApplianceClient#getTransferAppliance.");
    const pathParams = {
      "{id}": getTransferApplianceRequest.id,
      "{transferApplianceLabel}": getTransferApplianceRequest.transferApplianceLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTransferApplianceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTransferApplianceResponse>{},
        body: await response.json(),
        bodyKey: "transferAppliance",
        bodyModel: "model.TransferAppliance",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the x.509 certificate for the Transfer Appliance's dedicated Certificate Authority (CA)
   * @param GetTransferApplianceCertificateAuthorityCertificateRequest
   * @return GetTransferApplianceCertificateAuthorityCertificateResponse
   * @throws OciError when an error occurs
   */
  public async getTransferApplianceCertificateAuthorityCertificate(
    getTransferApplianceCertificateAuthorityCertificateRequest: requests.GetTransferApplianceCertificateAuthorityCertificateRequest
  ): Promise<responses.GetTransferApplianceCertificateAuthorityCertificateResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation TransferApplianceClient#getTransferApplianceCertificateAuthorityCertificate."
      );
    const pathParams = {
      "{id}": getTransferApplianceCertificateAuthorityCertificateRequest.id,
      "{transferApplianceLabel}":
        getTransferApplianceCertificateAuthorityCertificateRequest.transferApplianceLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}/certificate_authority_certificate",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTransferApplianceCertificateAuthorityCertificateRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTransferApplianceCertificateAuthorityCertificateResponse>{},
        body: await response.json(),
        bodyKey: "transferApplianceCertificate",
        bodyModel: "model.TransferApplianceCertificate",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Describes a transfer appliance encryptionPassphrase in detail
   * @param GetTransferApplianceEncryptionPassphraseRequest
   * @return GetTransferApplianceEncryptionPassphraseResponse
   * @throws OciError when an error occurs
   */
  public async getTransferApplianceEncryptionPassphrase(
    getTransferApplianceEncryptionPassphraseRequest: requests.GetTransferApplianceEncryptionPassphraseRequest
  ): Promise<responses.GetTransferApplianceEncryptionPassphraseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation TransferApplianceClient#getTransferApplianceEncryptionPassphrase."
      );
    const pathParams = {
      "{id}": getTransferApplianceEncryptionPassphraseRequest.id,
      "{transferApplianceLabel}":
        getTransferApplianceEncryptionPassphraseRequest.transferApplianceLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}/encryptionPassphrase",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTransferApplianceEncryptionPassphraseRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTransferApplianceEncryptionPassphraseResponse>{},
        body: await response.json(),
        bodyKey: "transferApplianceEncryptionPassphrase",
        bodyModel: "model.TransferApplianceEncryptionPassphrase",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists Transfer Appliances associated with a transferJob
   * @param ListTransferAppliancesRequest
   * @return ListTransferAppliancesResponse
   * @throws OciError when an error occurs
   */
  public async listTransferAppliances(
    listTransferAppliancesRequest: requests.ListTransferAppliancesRequest
  ): Promise<responses.ListTransferAppliancesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferApplianceClient#listTransferAppliances.");
    const pathParams = {
      "{id}": listTransferAppliancesRequest.id
    };

    const queryParams = {
      "lifecycleState": listTransferAppliancesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferAppliances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listTransferAppliancesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTransferAppliancesResponse>{},
        body: await response.json(),
        bodyKey: "multipleTransferAppliances",
        bodyModel: "model.MultipleTransferAppliances",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a Transfer Appliance
   * @param UpdateTransferApplianceRequest
   * @return UpdateTransferApplianceResponse
   * @throws OciError when an error occurs
   */
  public async updateTransferAppliance(
    updateTransferApplianceRequest: requests.UpdateTransferApplianceRequest
  ): Promise<responses.UpdateTransferApplianceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferApplianceClient#updateTransferAppliance.");
    const pathParams = {
      "{id}": updateTransferApplianceRequest.id,
      "{transferApplianceLabel}": updateTransferApplianceRequest.transferApplianceLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTransferApplianceRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTransferApplianceRequest.updateTransferApplianceDetails,
        "UpdateTransferApplianceDetails",
        models.UpdateTransferApplianceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateTransferApplianceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTransferApplianceResponse>{},
        body: await response.json(),
        bodyKey: "transferAppliance",
        bodyModel: "model.TransferAppliance",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum TransferApplianceEntitlementApiKeys {}

export class TransferApplianceEntitlementClient {
  protected static serviceEndpointTemplate =
    "https://datatransfer.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": TransferApplianceEntitlementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20171001";
    if (this.logger)
      this.logger.info(`TransferApplianceEntitlementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      TransferApplianceEntitlementClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      TransferApplianceEntitlementClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new TransferApplianceEntitlementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): TransferApplianceEntitlementWaiter {
    this._waiters = new TransferApplianceEntitlementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): TransferApplianceEntitlementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Sets the client configuration for the client
   */
  public set clientConfiguration(clientConfiguration: common.ClientConfiguration) {
    this._clientConfiguration = clientConfiguration;
  }

  /**
   * Create the Entitlement to use a Transfer Appliance. It requires some offline process of review and signatures before request is granted.
   * @param CreateTransferApplianceEntitlementRequest
   * @return CreateTransferApplianceEntitlementResponse
   * @throws OciError when an error occurs
   */
  public async createTransferApplianceEntitlement(
    createTransferApplianceEntitlementRequest: requests.CreateTransferApplianceEntitlementRequest
  ): Promise<responses.CreateTransferApplianceEntitlementResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation TransferApplianceEntitlementClient#createTransferApplianceEntitlement."
      );
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTransferApplianceEntitlementRequest.opcRetryToken,
      "opc-request-id": createTransferApplianceEntitlementRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferApplianceEntitlement",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTransferApplianceEntitlementRequest.createTransferApplianceEntitlementDetails,
        "CreateTransferApplianceEntitlementDetails",
        models.CreateTransferApplianceEntitlementDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createTransferApplianceEntitlementRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTransferApplianceEntitlementResponse>{},
        body: await response.json(),
        bodyKey: "transferApplianceEntitlement",
        bodyModel: "model.TransferApplianceEntitlement",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Describes the Transfer Appliance Entitlement in detail
   * @param GetTransferApplianceEntitlementRequest
   * @return GetTransferApplianceEntitlementResponse
   * @throws OciError when an error occurs
   */
  public async getTransferApplianceEntitlement(
    getTransferApplianceEntitlementRequest: requests.GetTransferApplianceEntitlementRequest
  ): Promise<responses.GetTransferApplianceEntitlementResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation TransferApplianceEntitlementClient#getTransferApplianceEntitlement."
      );
    const pathParams = {
      "{id}": getTransferApplianceEntitlementRequest.id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": getTransferApplianceEntitlementRequest.opcRetryToken,
      "opc-request-id": getTransferApplianceEntitlementRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferApplianceEntitlement/{id}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTransferApplianceEntitlementRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTransferApplianceEntitlementResponse>{},
        body: await response.json(),
        bodyKey: "transferApplianceEntitlement",
        bodyModel: "model.TransferApplianceEntitlement",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists Transfer Transfer Appliance Entitlement
   * @param ListTransferApplianceEntitlementRequest
   * @return ListTransferApplianceEntitlementResponse
   * @throws OciError when an error occurs
   */
  public async listTransferApplianceEntitlement(
    listTransferApplianceEntitlementRequest: requests.ListTransferApplianceEntitlementRequest
  ): Promise<responses.ListTransferApplianceEntitlementResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation TransferApplianceEntitlementClient#listTransferApplianceEntitlement."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": listTransferApplianceEntitlementRequest.compartmentId,
      "id": listTransferApplianceEntitlementRequest.id,
      "displayName": listTransferApplianceEntitlementRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTransferApplianceEntitlementRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferApplianceEntitlement",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listTransferApplianceEntitlementRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTransferApplianceEntitlementResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "TransferApplianceEntitlementSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum TransferDeviceApiKeys {}

export class TransferDeviceClient {
  protected static serviceEndpointTemplate =
    "https://datatransfer.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": TransferDeviceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20171001";
    if (this.logger) this.logger.info(`TransferDeviceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      TransferDeviceClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      TransferDeviceClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new TransferDeviceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): TransferDeviceWaiter {
    this._waiters = new TransferDeviceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): TransferDeviceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Sets the client configuration for the client
   */
  public set clientConfiguration(clientConfiguration: common.ClientConfiguration) {
    this._clientConfiguration = clientConfiguration;
  }

  /**
   * Create a new Transfer Device
   * @param CreateTransferDeviceRequest
   * @return CreateTransferDeviceResponse
   * @throws OciError when an error occurs
   */
  public async createTransferDevice(
    createTransferDeviceRequest: requests.CreateTransferDeviceRequest
  ): Promise<responses.CreateTransferDeviceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferDeviceClient#createTransferDevice.");
    const pathParams = {
      "{id}": createTransferDeviceRequest.id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTransferDeviceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferDevices",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTransferDeviceRequest.createTransferDeviceDetails,
        "CreateTransferDeviceDetails",
        models.CreateTransferDeviceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createTransferDeviceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTransferDeviceResponse>{},
        body: await response.json(),
        bodyKey: "newTransferDevice",
        bodyModel: "model.NewTransferDevice",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * deletes a transfer Device
   * @param DeleteTransferDeviceRequest
   * @return DeleteTransferDeviceResponse
   * @throws OciError when an error occurs
   */
  public async deleteTransferDevice(
    deleteTransferDeviceRequest: requests.DeleteTransferDeviceRequest
  ): Promise<responses.DeleteTransferDeviceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferDeviceClient#deleteTransferDevice.");
    const pathParams = {
      "{id}": deleteTransferDeviceRequest.id,
      "{transferDeviceLabel}": deleteTransferDeviceRequest.transferDeviceLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferDevices/{transferDeviceLabel}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteTransferDeviceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTransferDeviceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Describes a transfer package in detail
   * @param GetTransferDeviceRequest
   * @return GetTransferDeviceResponse
   * @throws OciError when an error occurs
   */
  public async getTransferDevice(
    getTransferDeviceRequest: requests.GetTransferDeviceRequest
  ): Promise<responses.GetTransferDeviceResponse> {
    if (this.logger) this.logger.debug("Calling operation TransferDeviceClient#getTransferDevice.");
    const pathParams = {
      "{id}": getTransferDeviceRequest.id,
      "{transferDeviceLabel}": getTransferDeviceRequest.transferDeviceLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferDevices/{transferDeviceLabel}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTransferDeviceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTransferDeviceResponse>{},
        body: await response.json(),
        bodyKey: "transferDevice",
        bodyModel: "model.TransferDevice",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists Transfer Devices associated with a transferJob
   * @param ListTransferDevicesRequest
   * @return ListTransferDevicesResponse
   * @throws OciError when an error occurs
   */
  public async listTransferDevices(
    listTransferDevicesRequest: requests.ListTransferDevicesRequest
  ): Promise<responses.ListTransferDevicesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferDeviceClient#listTransferDevices.");
    const pathParams = {
      "{id}": listTransferDevicesRequest.id
    };

    const queryParams = {
      "lifecycleState": listTransferDevicesRequest.lifecycleState,
      "displayName": listTransferDevicesRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferDevices",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listTransferDevicesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTransferDevicesResponse>{},
        body: await response.json(),
        bodyKey: "multipleTransferDevices",
        bodyModel: "model.MultipleTransferDevices",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a Transfer Device
   * @param UpdateTransferDeviceRequest
   * @return UpdateTransferDeviceResponse
   * @throws OciError when an error occurs
   */
  public async updateTransferDevice(
    updateTransferDeviceRequest: requests.UpdateTransferDeviceRequest
  ): Promise<responses.UpdateTransferDeviceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferDeviceClient#updateTransferDevice.");
    const pathParams = {
      "{id}": updateTransferDeviceRequest.id,
      "{transferDeviceLabel}": updateTransferDeviceRequest.transferDeviceLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTransferDeviceRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferDevices/{transferDeviceLabel}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTransferDeviceRequest.updateTransferDeviceDetails,
        "UpdateTransferDeviceDetails",
        models.UpdateTransferDeviceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateTransferDeviceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTransferDeviceResponse>{},
        body: await response.json(),
        bodyKey: "transferDevice",
        bodyModel: "model.TransferDevice",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum TransferJobApiKeys {}

export class TransferJobClient {
  protected static serviceEndpointTemplate =
    "https://datatransfer.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": TransferJobWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20171001";
    if (this.logger) this.logger.info(`TransferJobClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      TransferJobClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      TransferJobClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new TransferJobWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): TransferJobWaiter {
    this._waiters = new TransferJobWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): TransferJobWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Sets the client configuration for the client
   */
  public set clientConfiguration(clientConfiguration: common.ClientConfiguration) {
    this._clientConfiguration = clientConfiguration;
  }

  /**
   * Moves a TransferJob into a different compartment.
   * @param ChangeTransferJobCompartmentRequest
   * @return ChangeTransferJobCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeTransferJobCompartment(
    changeTransferJobCompartmentRequest: requests.ChangeTransferJobCompartmentRequest
  ): Promise<responses.ChangeTransferJobCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferJobClient#changeTransferJobCompartment.");
    const pathParams = {
      "{transferJobId}": changeTransferJobCompartmentRequest.transferJobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeTransferJobCompartmentRequest.ifMatch,
      "opc-request-id": changeTransferJobCompartmentRequest.opcRequestId,
      "opc-retry-token": changeTransferJobCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{transferJobId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeTransferJobCompartmentRequest.changeTransferJobCompartmentDetails,
        "ChangeTransferJobCompartmentDetails",
        models.ChangeTransferJobCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeTransferJobCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeTransferJobCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new Transfer Job that corresponds with customer's logical dataset e.g. a DB or a filesystem.
   * @param CreateTransferJobRequest
   * @return CreateTransferJobResponse
   * @throws OciError when an error occurs
   */
  public async createTransferJob(
    createTransferJobRequest: requests.CreateTransferJobRequest
  ): Promise<responses.CreateTransferJobResponse> {
    if (this.logger) this.logger.debug("Calling operation TransferJobClient#createTransferJob.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTransferJobRequest.opcRetryToken,
      "opc-request-id": createTransferJobRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTransferJobRequest.createTransferJobDetails,
        "CreateTransferJobDetails",
        models.CreateTransferJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createTransferJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTransferJobResponse>{},
        body: await response.json(),
        bodyKey: "transferJob",
        bodyModel: "model.TransferJob",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * deletes a transfer job
   * @param DeleteTransferJobRequest
   * @return DeleteTransferJobResponse
   * @throws OciError when an error occurs
   */
  public async deleteTransferJob(
    deleteTransferJobRequest: requests.DeleteTransferJobRequest
  ): Promise<responses.DeleteTransferJobResponse> {
    if (this.logger) this.logger.debug("Calling operation TransferJobClient#deleteTransferJob.");
    const pathParams = {
      "{id}": deleteTransferJobRequest.id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteTransferJobRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteTransferJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTransferJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Describes a transfer job in detail
   * @param GetTransferJobRequest
   * @return GetTransferJobResponse
   * @throws OciError when an error occurs
   */
  public async getTransferJob(
    getTransferJobRequest: requests.GetTransferJobRequest
  ): Promise<responses.GetTransferJobResponse> {
    if (this.logger) this.logger.debug("Calling operation TransferJobClient#getTransferJob.");
    const pathParams = {
      "{id}": getTransferJobRequest.id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTransferJobRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTransferJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTransferJobResponse>{},
        body: await response.json(),
        bodyKey: "transferJob",
        bodyModel: "model.TransferJob",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists Transfer Jobs in a given compartment
   * @param ListTransferJobsRequest
   * @return ListTransferJobsResponse
   * @throws OciError when an error occurs
   */
  public async listTransferJobs(
    listTransferJobsRequest: requests.ListTransferJobsRequest
  ): Promise<responses.ListTransferJobsResponse> {
    if (this.logger) this.logger.debug("Calling operation TransferJobClient#listTransferJobs.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listTransferJobsRequest.compartmentId,
      "lifecycleState": listTransferJobsRequest.lifecycleState,
      "displayName": listTransferJobsRequest.displayName,
      "limit": listTransferJobsRequest.limit,
      "page": listTransferJobsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTransferJobsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listTransferJobsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTransferJobsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "TransferJobSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.TransferJobSummary objects
   * contained in responses from the listTransferJobs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTransferJobs(
    request: requests.ListTransferJobsRequest
  ): AsyncIterableIterator<models.TransferJobSummary> {
    return paginateRecords(request, req => this.listTransferJobs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listTransferJobs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTransferJobsResponses(
    request: requests.ListTransferJobsRequest
  ): AsyncIterableIterator<responses.ListTransferJobsResponse> {
    return paginateResponses(request, req => this.listTransferJobs(req));
  }

  /**
   * Updates a Transfer Job that corresponds with customer's logical dataset e.g. a DB or a filesystem.
   * @param UpdateTransferJobRequest
   * @return UpdateTransferJobResponse
   * @throws OciError when an error occurs
   */
  public async updateTransferJob(
    updateTransferJobRequest: requests.UpdateTransferJobRequest
  ): Promise<responses.UpdateTransferJobResponse> {
    if (this.logger) this.logger.debug("Calling operation TransferJobClient#updateTransferJob.");
    const pathParams = {
      "{id}": updateTransferJobRequest.id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTransferJobRequest.ifMatch,
      "opc-request-id": updateTransferJobRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTransferJobRequest.updateTransferJobDetails,
        "UpdateTransferJobDetails",
        models.UpdateTransferJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateTransferJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTransferJobResponse>{},
        body: await response.json(),
        bodyKey: "transferJob",
        bodyModel: "model.TransferJob",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum TransferPackageApiKeys {}

export class TransferPackageClient {
  protected static serviceEndpointTemplate =
    "https://datatransfer.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": TransferPackageWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20171001";
    if (this.logger) this.logger.info(`TransferPackageClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      TransferPackageClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      TransferPackageClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new TransferPackageWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): TransferPackageWaiter {
    this._waiters = new TransferPackageWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): TransferPackageWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Sets the client configuration for the client
   */
  public set clientConfiguration(clientConfiguration: common.ClientConfiguration) {
    this._clientConfiguration = clientConfiguration;
  }

  /**
   * Attaches Devices to a Transfer Package
   * @param AttachDevicesToTransferPackageRequest
   * @return AttachDevicesToTransferPackageResponse
   * @throws OciError when an error occurs
   */
  public async attachDevicesToTransferPackage(
    attachDevicesToTransferPackageRequest: requests.AttachDevicesToTransferPackageRequest
  ): Promise<responses.AttachDevicesToTransferPackageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferPackageClient#attachDevicesToTransferPackage.");
    const pathParams = {
      "{id}": attachDevicesToTransferPackageRequest.id,
      "{transferPackageLabel}": attachDevicesToTransferPackageRequest.transferPackageLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferPackages/{transferPackageLabel}/actions/attachDevices",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachDevicesToTransferPackageRequest.attachDevicesDetails,
        "AttachDevicesDetails",
        models.AttachDevicesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      attachDevicesToTransferPackageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachDevicesToTransferPackageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new Transfer Package
   * @param CreateTransferPackageRequest
   * @return CreateTransferPackageResponse
   * @throws OciError when an error occurs
   */
  public async createTransferPackage(
    createTransferPackageRequest: requests.CreateTransferPackageRequest
  ): Promise<responses.CreateTransferPackageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferPackageClient#createTransferPackage.");
    const pathParams = {
      "{id}": createTransferPackageRequest.id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTransferPackageRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferPackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTransferPackageRequest.createTransferPackageDetails,
        "CreateTransferPackageDetails",
        models.CreateTransferPackageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createTransferPackageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTransferPackageResponse>{},
        body: await response.json(),
        bodyKey: "transferPackage",
        bodyModel: "model.TransferPackage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * deletes a transfer Package
   * @param DeleteTransferPackageRequest
   * @return DeleteTransferPackageResponse
   * @throws OciError when an error occurs
   */
  public async deleteTransferPackage(
    deleteTransferPackageRequest: requests.DeleteTransferPackageRequest
  ): Promise<responses.DeleteTransferPackageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferPackageClient#deleteTransferPackage.");
    const pathParams = {
      "{id}": deleteTransferPackageRequest.id,
      "{transferPackageLabel}": deleteTransferPackageRequest.transferPackageLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferPackages/{transferPackageLabel}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteTransferPackageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTransferPackageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detaches Devices from a Transfer Package
   * @param DetachDevicesFromTransferPackageRequest
   * @return DetachDevicesFromTransferPackageResponse
   * @throws OciError when an error occurs
   */
  public async detachDevicesFromTransferPackage(
    detachDevicesFromTransferPackageRequest: requests.DetachDevicesFromTransferPackageRequest
  ): Promise<responses.DetachDevicesFromTransferPackageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation TransferPackageClient#detachDevicesFromTransferPackage."
      );
    const pathParams = {
      "{id}": detachDevicesFromTransferPackageRequest.id,
      "{transferPackageLabel}": detachDevicesFromTransferPackageRequest.transferPackageLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferPackages/{transferPackageLabel}/actions/detachDevices",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachDevicesFromTransferPackageRequest.detachDevicesDetails,
        "DetachDevicesDetails",
        models.DetachDevicesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      detachDevicesFromTransferPackageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachDevicesFromTransferPackageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Describes a transfer package in detail
   * @param GetTransferPackageRequest
   * @return GetTransferPackageResponse
   * @throws OciError when an error occurs
   */
  public async getTransferPackage(
    getTransferPackageRequest: requests.GetTransferPackageRequest
  ): Promise<responses.GetTransferPackageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferPackageClient#getTransferPackage.");
    const pathParams = {
      "{id}": getTransferPackageRequest.id,
      "{transferPackageLabel}": getTransferPackageRequest.transferPackageLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferPackages/{transferPackageLabel}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTransferPackageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTransferPackageResponse>{},
        body: await response.json(),
        bodyKey: "transferPackage",
        bodyModel: "model.TransferPackage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists Transfer Packages associated with a transferJob
   * @param ListTransferPackagesRequest
   * @return ListTransferPackagesResponse
   * @throws OciError when an error occurs
   */
  public async listTransferPackages(
    listTransferPackagesRequest: requests.ListTransferPackagesRequest
  ): Promise<responses.ListTransferPackagesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferPackageClient#listTransferPackages.");
    const pathParams = {
      "{id}": listTransferPackagesRequest.id
    };

    const queryParams = {
      "lifecycleState": listTransferPackagesRequest.lifecycleState,
      "displayName": listTransferPackagesRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferPackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listTransferPackagesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTransferPackagesResponse>{},
        body: await response.json(),
        bodyKey: "multipleTransferPackages",
        bodyModel: "model.MultipleTransferPackages",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a Transfer Package
   * @param UpdateTransferPackageRequest
   * @return UpdateTransferPackageResponse
   * @throws OciError when an error occurs
   */
  public async updateTransferPackage(
    updateTransferPackageRequest: requests.UpdateTransferPackageRequest
  ): Promise<responses.UpdateTransferPackageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation TransferPackageClient#updateTransferPackage.");
    const pathParams = {
      "{id}": updateTransferPackageRequest.id,
      "{transferPackageLabel}": updateTransferPackageRequest.transferPackageLabel
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTransferPackageRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/transferJobs/{id}/transferPackages/{transferPackageLabel}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTransferPackageRequest.updateTransferPackageDetails,
        "UpdateTransferPackageDetails",
        models.UpdateTransferPackageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateTransferPackageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTransferPackageResponse>{},
        body: await response.json(),
        bodyKey: "transferPackage",
        bodyModel: "model.TransferPackage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

/**
 * Operations Insights API
 * Use the Operations Insights API to perform data extraction operations to obtain database 
resource utilization, performance statistics, and reference information. For more information,
see [About Oracle Cloud Infrastructure Operations Insights](https://docs.cloud.oracle.com/en-us/iaas/operations-insights/doc/operations-insights.html).

 * OpenAPI spec version: 20200630
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum OperationsInsightsApiKeys {}

export class OperationsInsightsClient {
  protected static serviceEndpointTemplate =
    "https://operationsinsights.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200630";
    if (this.logger) this.logger.info(`OperationsInsightsClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OperationsInsightsClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OperationsInsightsClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * The sqlbucket endpoint takes in a JSON payload, persists it in Operations Insights ingest pipeline.
   * @param IngestSqlBucketRequest
   * @return IngestSqlBucketResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestSqlBucket.ts.html |here} to see how to use IngestSqlBucket API.
   */
  public async ingestSqlBucket(
    ingestSqlBucketRequest: requests.IngestSqlBucketRequest
  ): Promise<responses.IngestSqlBucketResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OperationsInsightsClient#ingestSqlBucket.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": ingestSqlBucketRequest.compartmentId,
      "databaseId": ingestSqlBucketRequest.databaseId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": ingestSqlBucketRequest.opcRequestId,
      "if-match": ingestSqlBucketRequest.ifMatch,
      "opc-retry-token": ingestSqlBucketRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/actions/ingestSqlBucket",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        ingestSqlBucketRequest.ingestSqlBucketDetails,
        "IngestSqlBucketDetails",
        models.IngestSqlBucketDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      ingestSqlBucketRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.IngestSqlBucketResponse>{},
        body: await response.json(),
        bodyKey: "ingestSqlBucketResponseDetails",
        bodyModel: "model.IngestSqlBucketResponseDetails",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * The SqlPlanLines endpoint takes in a JSON payload, persists it in Operation Insights ingest pipeline.
   * @param IngestSqlPlanLinesRequest
   * @return IngestSqlPlanLinesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestSqlPlanLines.ts.html |here} to see how to use IngestSqlPlanLines API.
   */
  public async ingestSqlPlanLines(
    ingestSqlPlanLinesRequest: requests.IngestSqlPlanLinesRequest
  ): Promise<responses.IngestSqlPlanLinesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OperationsInsightsClient#ingestSqlPlanLines.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": ingestSqlPlanLinesRequest.compartmentId,
      "databaseId": ingestSqlPlanLinesRequest.databaseId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": ingestSqlPlanLinesRequest.opcRequestId,
      "if-match": ingestSqlPlanLinesRequest.ifMatch,
      "opc-retry-token": ingestSqlPlanLinesRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/actions/ingestSqlPlanLines",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        ingestSqlPlanLinesRequest.ingestSqlPlanLinesDetails,
        "IngestSqlPlanLinesDetails",
        models.IngestSqlPlanLinesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      ingestSqlPlanLinesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.IngestSqlPlanLinesResponse>{},
        body: await response.json(),
        bodyKey: "ingestSqlPlanLinesResponseDetails",
        bodyModel: "model.IngestSqlPlanLinesResponseDetails",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * The SqlText endpoint takes in a JSON payload, persists it in Operation Insights ingest pipeline.
   * Disclaimer: SQL text being uploaded explicitly via APIs is not masked. Any sensitive literals contained in the sqlFullText column should be masked prior to ingestion.
   *
   * @param IngestSqlTextRequest
   * @return IngestSqlTextResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestSqlText.ts.html |here} to see how to use IngestSqlText API.
   */
  public async ingestSqlText(
    ingestSqlTextRequest: requests.IngestSqlTextRequest
  ): Promise<responses.IngestSqlTextResponse> {
    if (this.logger) this.logger.debug("Calling operation OperationsInsightsClient#ingestSqlText.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": ingestSqlTextRequest.compartmentId,
      "databaseId": ingestSqlTextRequest.databaseId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": ingestSqlTextRequest.opcRequestId,
      "if-match": ingestSqlTextRequest.ifMatch,
      "opc-retry-token": ingestSqlTextRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/actions/ingestSqlText",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        ingestSqlTextRequest.ingestSqlTextDetails,
        "IngestSqlTextDetails",
        models.IngestSqlTextDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      ingestSqlTextRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.IngestSqlTextResponse>{},
        body: await response.json(),
        bodyKey: "ingestSqlTextResponseDetails",
        bodyModel: "model.IngestSqlTextResponseDetails",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists database insight resources
   * @param ListDatabaseInsightsRequest
   * @return ListDatabaseInsightsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListDatabaseInsights.ts.html |here} to see how to use ListDatabaseInsights API.
   */
  public async listDatabaseInsights(
    listDatabaseInsightsRequest: requests.ListDatabaseInsightsRequest
  ): Promise<responses.ListDatabaseInsightsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OperationsInsightsClient#listDatabaseInsights.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDatabaseInsightsRequest.compartmentId,
      "databaseType": listDatabaseInsightsRequest.databaseType,
      "databaseId": listDatabaseInsightsRequest.databaseId,
      "fields": listDatabaseInsightsRequest.fields,
      "limit": listDatabaseInsightsRequest.limit,
      "page": listDatabaseInsightsRequest.page,
      "sortOrder": listDatabaseInsightsRequest.sortOrder,
      "sortBy": listDatabaseInsightsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDatabaseInsightsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDatabaseInsightsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDatabaseInsightsResponse>{},
        body: await response.json(),
        bodyKey: "databaseInsightsCollection",
        bodyModel: "model.DatabaseInsightsCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Query SQL Warehouse to list the plan xml for a given SQL execution plan. This returns a SqlPlanCollection object, but is currently limited to a single plan.
   * @param ListSqlPlansRequest
   * @return ListSqlPlansResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListSqlPlans.ts.html |here} to see how to use ListSqlPlans API.
   */
  public async listSqlPlans(
    listSqlPlansRequest: requests.ListSqlPlansRequest
  ): Promise<responses.ListSqlPlansResponse> {
    if (this.logger) this.logger.debug("Calling operation OperationsInsightsClient#listSqlPlans.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSqlPlansRequest.compartmentId,
      "databaseId": listSqlPlansRequest.databaseId,
      "sqlIdentifier": listSqlPlansRequest.sqlIdentifier,
      "planHash": listSqlPlansRequest.planHash,
      "page": listSqlPlansRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlPlansRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/sqlPlans",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listSqlPlansRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlPlansResponse>{},
        body: await response.json(),
        bodyKey: "sqlPlanCollection",
        bodyModel: "model.SqlPlanCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search SQL by SQL Identifier across databases and get the SQL Text and the details of the databases executing the SQL for a given time period.
   * @param ListSqlSearchesRequest
   * @return ListSqlSearchesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListSqlSearches.ts.html |here} to see how to use ListSqlSearches API.
   */
  public async listSqlSearches(
    listSqlSearchesRequest: requests.ListSqlSearchesRequest
  ): Promise<responses.ListSqlSearchesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OperationsInsightsClient#listSqlSearches.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSqlSearchesRequest.compartmentId,
      "sqlIdentifier": listSqlSearchesRequest.sqlIdentifier,
      "analysisTimeInterval": listSqlSearchesRequest.analysisTimeInterval,
      "timeIntervalStart": listSqlSearchesRequest.timeIntervalStart,
      "timeIntervalEnd": listSqlSearchesRequest.timeIntervalEnd,
      "page": listSqlSearchesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlSearchesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/sqlSearches",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listSqlSearchesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlSearchesResponse>{},
        body: await response.json(),
        bodyKey: "sqlSearchCollection",
        bodyModel: "model.SqlSearchCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Query SQL Warehouse to get the full SQL Text for a SQL.
   * @param ListSqlTextsRequest
   * @return ListSqlTextsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListSqlTexts.ts.html |here} to see how to use ListSqlTexts API.
   */
  public async listSqlTexts(
    listSqlTextsRequest: requests.ListSqlTextsRequest
  ): Promise<responses.ListSqlTextsResponse> {
    if (this.logger) this.logger.debug("Calling operation OperationsInsightsClient#listSqlTexts.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSqlTextsRequest.compartmentId,
      "databaseId": listSqlTextsRequest.databaseId,
      "sqlIdentifier": listSqlTextsRequest.sqlIdentifier,
      "page": listSqlTextsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSqlTextsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/sqlTexts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listSqlTextsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSqlTextsResponse>{},
        body: await response.json(),
        bodyKey: "sqlTextCollection",
        bodyModel: "model.SqlTextCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns response with time series data (endTimestamp, capacity, baseCapacity) for the time period specified.
   * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
   *
   * @param SummarizeDatabaseInsightResourceCapacityTrendRequest
   * @return SummarizeDatabaseInsightResourceCapacityTrendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceCapacityTrend.ts.html |here} to see how to use SummarizeDatabaseInsightResourceCapacityTrend API.
   */
  public async summarizeDatabaseInsightResourceCapacityTrend(
    summarizeDatabaseInsightResourceCapacityTrendRequest: requests.SummarizeDatabaseInsightResourceCapacityTrendRequest
  ): Promise<responses.SummarizeDatabaseInsightResourceCapacityTrendResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceCapacityTrend."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeDatabaseInsightResourceCapacityTrendRequest.compartmentId,
      "resourceMetric": summarizeDatabaseInsightResourceCapacityTrendRequest.resourceMetric,
      "analysisTimeInterval":
        summarizeDatabaseInsightResourceCapacityTrendRequest.analysisTimeInterval,
      "timeIntervalStart": summarizeDatabaseInsightResourceCapacityTrendRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeDatabaseInsightResourceCapacityTrendRequest.timeIntervalEnd,
      "databaseType": summarizeDatabaseInsightResourceCapacityTrendRequest.databaseType,
      "databaseId": summarizeDatabaseInsightResourceCapacityTrendRequest.databaseId,
      "utilizationLevel": summarizeDatabaseInsightResourceCapacityTrendRequest.utilizationLevel,
      "page": summarizeDatabaseInsightResourceCapacityTrendRequest.page,
      "sortOrder": summarizeDatabaseInsightResourceCapacityTrendRequest.sortOrder,
      "sortBy": summarizeDatabaseInsightResourceCapacityTrendRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeDatabaseInsightResourceCapacityTrendRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/resourceCapacityTrend",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeDatabaseInsightResourceCapacityTrendRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeDatabaseInsightResourceCapacityTrendResponse>{},
        body: await response.json(),
        bodyKey: "summarizeDatabaseInsightResourceCapacityTrendAggregationCollection",
        bodyModel: "model.SummarizeDatabaseInsightResourceCapacityTrendAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Forecast predictions for CPU and Storage resources since a time in the past.
   *
   * @param SummarizeDatabaseInsightResourceForecastTrendRequest
   * @return SummarizeDatabaseInsightResourceForecastTrendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceForecastTrend.ts.html |here} to see how to use SummarizeDatabaseInsightResourceForecastTrend API.
   */
  public async summarizeDatabaseInsightResourceForecastTrend(
    summarizeDatabaseInsightResourceForecastTrendRequest: requests.SummarizeDatabaseInsightResourceForecastTrendRequest
  ): Promise<responses.SummarizeDatabaseInsightResourceForecastTrendResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceForecastTrend."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeDatabaseInsightResourceForecastTrendRequest.compartmentId,
      "resourceMetric": summarizeDatabaseInsightResourceForecastTrendRequest.resourceMetric,
      "analysisTimeInterval":
        summarizeDatabaseInsightResourceForecastTrendRequest.analysisTimeInterval,
      "timeIntervalStart": summarizeDatabaseInsightResourceForecastTrendRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeDatabaseInsightResourceForecastTrendRequest.timeIntervalEnd,
      "databaseType": summarizeDatabaseInsightResourceForecastTrendRequest.databaseType,
      "databaseId": summarizeDatabaseInsightResourceForecastTrendRequest.databaseId,
      "statistic": summarizeDatabaseInsightResourceForecastTrendRequest.statistic,
      "forecastDays": summarizeDatabaseInsightResourceForecastTrendRequest.forecastDays,
      "forecastModel": summarizeDatabaseInsightResourceForecastTrendRequest.forecastModel,
      "utilizationLevel": summarizeDatabaseInsightResourceForecastTrendRequest.utilizationLevel,
      "confidence": summarizeDatabaseInsightResourceForecastTrendRequest.confidence,
      "page": summarizeDatabaseInsightResourceForecastTrendRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeDatabaseInsightResourceForecastTrendRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/resourceForecastTrend",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeDatabaseInsightResourceForecastTrendRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeDatabaseInsightResourceForecastTrendResponse>{},
        body: await response.json(),
        bodyKey: "summarizeDatabaseInsightResourceForecastTrendAggregation",
        bodyModel: "model.SummarizeDatabaseInsightResourceForecastTrendAggregation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Resource statistics (usage,capacity, usage change percent, utilization percent, base capacity, isAutoScalingEnabled) for each database filtered by utilization level
   * @param SummarizeDatabaseInsightResourceStatisticsRequest
   * @return SummarizeDatabaseInsightResourceStatisticsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceStatistics.ts.html |here} to see how to use SummarizeDatabaseInsightResourceStatistics API.
   */
  public async summarizeDatabaseInsightResourceStatistics(
    summarizeDatabaseInsightResourceStatisticsRequest: requests.SummarizeDatabaseInsightResourceStatisticsRequest
  ): Promise<responses.SummarizeDatabaseInsightResourceStatisticsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceStatistics."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeDatabaseInsightResourceStatisticsRequest.compartmentId,
      "resourceMetric": summarizeDatabaseInsightResourceStatisticsRequest.resourceMetric,
      "analysisTimeInterval":
        summarizeDatabaseInsightResourceStatisticsRequest.analysisTimeInterval,
      "timeIntervalStart": summarizeDatabaseInsightResourceStatisticsRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeDatabaseInsightResourceStatisticsRequest.timeIntervalEnd,
      "databaseType": summarizeDatabaseInsightResourceStatisticsRequest.databaseType,
      "databaseId": summarizeDatabaseInsightResourceStatisticsRequest.databaseId,
      "percentile": summarizeDatabaseInsightResourceStatisticsRequest.percentile,
      "insightBy": summarizeDatabaseInsightResourceStatisticsRequest.insightBy,
      "forecastDays": summarizeDatabaseInsightResourceStatisticsRequest.forecastDays,
      "limit": summarizeDatabaseInsightResourceStatisticsRequest.limit,
      "page": summarizeDatabaseInsightResourceStatisticsRequest.page,
      "sortOrder": summarizeDatabaseInsightResourceStatisticsRequest.sortOrder,
      "sortBy": summarizeDatabaseInsightResourceStatisticsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeDatabaseInsightResourceStatisticsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/resourceStatistics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeDatabaseInsightResourceStatisticsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeDatabaseInsightResourceStatisticsResponse>{},
        body: await response.json(),
        bodyKey: "summarizeDatabaseInsightResourceStatisticsAggregationCollection",
        bodyModel: "model.SummarizeDatabaseInsightResourceStatisticsAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * A cumulative distribution function is used to rank the usage data points per database within the specified time period.
   * For each database, the minimum data point with a ranking > the percentile value is included in the summation.
   * Linear regression functions are used to calculate the usage change percentage.
   *
   * @param SummarizeDatabaseInsightResourceUsageRequest
   * @return SummarizeDatabaseInsightResourceUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceUsage.ts.html |here} to see how to use SummarizeDatabaseInsightResourceUsage API.
   */
  public async summarizeDatabaseInsightResourceUsage(
    summarizeDatabaseInsightResourceUsageRequest: requests.SummarizeDatabaseInsightResourceUsageRequest
  ): Promise<responses.SummarizeDatabaseInsightResourceUsageResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceUsage."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeDatabaseInsightResourceUsageRequest.compartmentId,
      "resourceMetric": summarizeDatabaseInsightResourceUsageRequest.resourceMetric,
      "analysisTimeInterval": summarizeDatabaseInsightResourceUsageRequest.analysisTimeInterval,
      "timeIntervalStart": summarizeDatabaseInsightResourceUsageRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeDatabaseInsightResourceUsageRequest.timeIntervalEnd,
      "databaseType": summarizeDatabaseInsightResourceUsageRequest.databaseType,
      "databaseId": summarizeDatabaseInsightResourceUsageRequest.databaseId,
      "page": summarizeDatabaseInsightResourceUsageRequest.page,
      "percentile": summarizeDatabaseInsightResourceUsageRequest.percentile
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeDatabaseInsightResourceUsageRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/resourceUsageSummary",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeDatabaseInsightResourceUsageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeDatabaseInsightResourceUsageResponse>{},
        body: await response.json(),
        bodyKey: "summarizeDatabaseInsightResourceUsageAggregation",
        bodyModel: "model.SummarizeDatabaseInsightResourceUsageAggregation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns response with time series data (endTimestamp, usage, capacity) for the time period specified.
   * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
   *
   * @param SummarizeDatabaseInsightResourceUsageTrendRequest
   * @return SummarizeDatabaseInsightResourceUsageTrendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceUsageTrend.ts.html |here} to see how to use SummarizeDatabaseInsightResourceUsageTrend API.
   */
  public async summarizeDatabaseInsightResourceUsageTrend(
    summarizeDatabaseInsightResourceUsageTrendRequest: requests.SummarizeDatabaseInsightResourceUsageTrendRequest
  ): Promise<responses.SummarizeDatabaseInsightResourceUsageTrendResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceUsageTrend."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeDatabaseInsightResourceUsageTrendRequest.compartmentId,
      "resourceMetric": summarizeDatabaseInsightResourceUsageTrendRequest.resourceMetric,
      "analysisTimeInterval":
        summarizeDatabaseInsightResourceUsageTrendRequest.analysisTimeInterval,
      "timeIntervalStart": summarizeDatabaseInsightResourceUsageTrendRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeDatabaseInsightResourceUsageTrendRequest.timeIntervalEnd,
      "databaseType": summarizeDatabaseInsightResourceUsageTrendRequest.databaseType,
      "databaseId": summarizeDatabaseInsightResourceUsageTrendRequest.databaseId,
      "page": summarizeDatabaseInsightResourceUsageTrendRequest.page,
      "sortOrder": summarizeDatabaseInsightResourceUsageTrendRequest.sortOrder,
      "sortBy": summarizeDatabaseInsightResourceUsageTrendRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeDatabaseInsightResourceUsageTrendRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/resourceUsageTrend",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeDatabaseInsightResourceUsageTrendRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeDatabaseInsightResourceUsageTrendResponse>{},
        body: await response.json(),
        bodyKey: "summarizeDatabaseInsightResourceUsageTrendAggregationCollection",
        bodyModel: "model.SummarizeDatabaseInsightResourceUsageTrendAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets resources with current utilization (high and low) and projected utilization (high and low) for a resource type over specified time period.
   * @param SummarizeDatabaseInsightResourceUtilizationInsightRequest
   * @return SummarizeDatabaseInsightResourceUtilizationInsightResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceUtilizationInsight.ts.html |here} to see how to use SummarizeDatabaseInsightResourceUtilizationInsight API.
   */
  public async summarizeDatabaseInsightResourceUtilizationInsight(
    summarizeDatabaseInsightResourceUtilizationInsightRequest: requests.SummarizeDatabaseInsightResourceUtilizationInsightRequest
  ): Promise<responses.SummarizeDatabaseInsightResourceUtilizationInsightResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceUtilizationInsight."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeDatabaseInsightResourceUtilizationInsightRequest.compartmentId,
      "resourceMetric": summarizeDatabaseInsightResourceUtilizationInsightRequest.resourceMetric,
      "analysisTimeInterval":
        summarizeDatabaseInsightResourceUtilizationInsightRequest.analysisTimeInterval,
      "timeIntervalStart":
        summarizeDatabaseInsightResourceUtilizationInsightRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeDatabaseInsightResourceUtilizationInsightRequest.timeIntervalEnd,
      "databaseType": summarizeDatabaseInsightResourceUtilizationInsightRequest.databaseType,
      "databaseId": summarizeDatabaseInsightResourceUtilizationInsightRequest.databaseId,
      "forecastDays": summarizeDatabaseInsightResourceUtilizationInsightRequest.forecastDays,
      "page": summarizeDatabaseInsightResourceUtilizationInsightRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeDatabaseInsightResourceUtilizationInsightRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/resourceUtilizationInsight",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeDatabaseInsightResourceUtilizationInsightRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeDatabaseInsightResourceUtilizationInsightResponse>{},
        body: await response.json(),
        bodyKey: "summarizeDatabaseInsightResourceUtilizationInsightAggregation",
        bodyModel: "model.SummarizeDatabaseInsightResourceUtilizationInsightAggregation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Query SQL Warehouse to get the performance insights for SQLs taking greater than X% database time for a given time period across the given databases or database types.
   * @param SummarizeSqlInsightsRequest
   * @return SummarizeSqlInsightsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlInsights.ts.html |here} to see how to use SummarizeSqlInsights API.
   */
  public async summarizeSqlInsights(
    summarizeSqlInsightsRequest: requests.SummarizeSqlInsightsRequest
  ): Promise<responses.SummarizeSqlInsightsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlInsights.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeSqlInsightsRequest.compartmentId,
      "databaseType": summarizeSqlInsightsRequest.databaseType,
      "databaseId": summarizeSqlInsightsRequest.databaseId,
      "databaseTimePctGreaterThan": summarizeSqlInsightsRequest.databaseTimePctGreaterThan,
      "analysisTimeInterval": summarizeSqlInsightsRequest.analysisTimeInterval,
      "timeIntervalStart": summarizeSqlInsightsRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeSqlInsightsRequest.timeIntervalEnd,
      "page": summarizeSqlInsightsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeSqlInsightsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/sqlInsights",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeSqlInsightsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeSqlInsightsResponse>{},
        body: await response.json(),
        bodyKey: "sqlInsightAggregationCollection",
        bodyModel: "model.SqlInsightAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Query SQL Warehouse to get the performance insights on the execution plans for a given SQL for a given time period.
   * @param SummarizeSqlPlanInsightsRequest
   * @return SummarizeSqlPlanInsightsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlPlanInsights.ts.html |here} to see how to use SummarizeSqlPlanInsights API.
   */
  public async summarizeSqlPlanInsights(
    summarizeSqlPlanInsightsRequest: requests.SummarizeSqlPlanInsightsRequest
  ): Promise<responses.SummarizeSqlPlanInsightsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlPlanInsights.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeSqlPlanInsightsRequest.compartmentId,
      "databaseId": summarizeSqlPlanInsightsRequest.databaseId,
      "sqlIdentifier": summarizeSqlPlanInsightsRequest.sqlIdentifier,
      "analysisTimeInterval": summarizeSqlPlanInsightsRequest.analysisTimeInterval,
      "timeIntervalStart": summarizeSqlPlanInsightsRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeSqlPlanInsightsRequest.timeIntervalEnd,
      "page": summarizeSqlPlanInsightsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeSqlPlanInsightsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/sqlPlanInsights",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeSqlPlanInsightsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeSqlPlanInsightsResponse>{},
        body: await response.json(),
        bodyKey: "sqlPlanInsightAggregationCollection",
        bodyModel: "model.SqlPlanInsightAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Query SQL Warehouse to summarize the response time distribution of query executions for a given SQL for a given time period.
   * @param SummarizeSqlResponseTimeDistributionsRequest
   * @return SummarizeSqlResponseTimeDistributionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlResponseTimeDistributions.ts.html |here} to see how to use SummarizeSqlResponseTimeDistributions API.
   */
  public async summarizeSqlResponseTimeDistributions(
    summarizeSqlResponseTimeDistributionsRequest: requests.SummarizeSqlResponseTimeDistributionsRequest
  ): Promise<responses.SummarizeSqlResponseTimeDistributionsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OperationsInsightsClient#summarizeSqlResponseTimeDistributions."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeSqlResponseTimeDistributionsRequest.compartmentId,
      "databaseId": summarizeSqlResponseTimeDistributionsRequest.databaseId,
      "sqlIdentifier": summarizeSqlResponseTimeDistributionsRequest.sqlIdentifier,
      "analysisTimeInterval": summarizeSqlResponseTimeDistributionsRequest.analysisTimeInterval,
      "timeIntervalStart": summarizeSqlResponseTimeDistributionsRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeSqlResponseTimeDistributionsRequest.timeIntervalEnd,
      "page": summarizeSqlResponseTimeDistributionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeSqlResponseTimeDistributionsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/sqlResponseTimeDistributions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeSqlResponseTimeDistributionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeSqlResponseTimeDistributionsResponse>{},
        body: await response.json(),
        bodyKey: "sqlResponseTimeDistributionAggregationCollection",
        bodyModel: "model.SqlResponseTimeDistributionAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Query SQL Warehouse to get the performance statistics for SQLs taking greater than X% database time for a given time period across the given databases or database types.
   * @param SummarizeSqlStatisticsRequest
   * @return SummarizeSqlStatisticsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlStatistics.ts.html |here} to see how to use SummarizeSqlStatistics API.
   */
  public async summarizeSqlStatistics(
    summarizeSqlStatisticsRequest: requests.SummarizeSqlStatisticsRequest
  ): Promise<responses.SummarizeSqlStatisticsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlStatistics.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeSqlStatisticsRequest.compartmentId,
      "databaseType": summarizeSqlStatisticsRequest.databaseType,
      "databaseId": summarizeSqlStatisticsRequest.databaseId,
      "databaseTimePctGreaterThan": summarizeSqlStatisticsRequest.databaseTimePctGreaterThan,
      "sqlIdentifier": summarizeSqlStatisticsRequest.sqlIdentifier,
      "analysisTimeInterval": summarizeSqlStatisticsRequest.analysisTimeInterval,
      "timeIntervalStart": summarizeSqlStatisticsRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeSqlStatisticsRequest.timeIntervalEnd,
      "limit": summarizeSqlStatisticsRequest.limit,
      "page": summarizeSqlStatisticsRequest.page,
      "sortOrder": summarizeSqlStatisticsRequest.sortOrder,
      "sortBy": summarizeSqlStatisticsRequest.sortBy,
      "category": summarizeSqlStatisticsRequest.category
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeSqlStatisticsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/sqlStatistics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeSqlStatisticsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeSqlStatisticsResponse>{},
        body: await response.json(),
        bodyKey: "sqlStatisticAggregationCollection",
        bodyModel: "model.SqlStatisticAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Query SQL Warehouse to get the performance statistics time series for a given SQL across given databases for a given time period.
   * @param SummarizeSqlStatisticsTimeSeriesRequest
   * @return SummarizeSqlStatisticsTimeSeriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlStatisticsTimeSeries.ts.html |here} to see how to use SummarizeSqlStatisticsTimeSeries API.
   */
  public async summarizeSqlStatisticsTimeSeries(
    summarizeSqlStatisticsTimeSeriesRequest: requests.SummarizeSqlStatisticsTimeSeriesRequest
  ): Promise<responses.SummarizeSqlStatisticsTimeSeriesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OperationsInsightsClient#summarizeSqlStatisticsTimeSeries."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeSqlStatisticsTimeSeriesRequest.compartmentId,
      "databaseId": summarizeSqlStatisticsTimeSeriesRequest.databaseId,
      "sqlIdentifier": summarizeSqlStatisticsTimeSeriesRequest.sqlIdentifier,
      "analysisTimeInterval": summarizeSqlStatisticsTimeSeriesRequest.analysisTimeInterval,
      "timeIntervalStart": summarizeSqlStatisticsTimeSeriesRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeSqlStatisticsTimeSeriesRequest.timeIntervalEnd,
      "page": summarizeSqlStatisticsTimeSeriesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeSqlStatisticsTimeSeriesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/sqlStatisticsTimeSeries",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeSqlStatisticsTimeSeriesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeSqlStatisticsTimeSeriesResponse>{},
        body: await response.json(),
        bodyKey: "sqlStatisticsTimeSeriesAggregationCollection",
        bodyModel: "model.SqlStatisticsTimeSeriesAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Query SQL Warehouse to get the performance statistics time series for a given SQL by execution plans for a given time period.
   * @param SummarizeSqlStatisticsTimeSeriesByPlanRequest
   * @return SummarizeSqlStatisticsTimeSeriesByPlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlStatisticsTimeSeriesByPlan.ts.html |here} to see how to use SummarizeSqlStatisticsTimeSeriesByPlan API.
   */
  public async summarizeSqlStatisticsTimeSeriesByPlan(
    summarizeSqlStatisticsTimeSeriesByPlanRequest: requests.SummarizeSqlStatisticsTimeSeriesByPlanRequest
  ): Promise<responses.SummarizeSqlStatisticsTimeSeriesByPlanResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation OperationsInsightsClient#summarizeSqlStatisticsTimeSeriesByPlan."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeSqlStatisticsTimeSeriesByPlanRequest.compartmentId,
      "databaseId": summarizeSqlStatisticsTimeSeriesByPlanRequest.databaseId,
      "sqlIdentifier": summarizeSqlStatisticsTimeSeriesByPlanRequest.sqlIdentifier,
      "analysisTimeInterval": summarizeSqlStatisticsTimeSeriesByPlanRequest.analysisTimeInterval,
      "timeIntervalStart": summarizeSqlStatisticsTimeSeriesByPlanRequest.timeIntervalStart,
      "timeIntervalEnd": summarizeSqlStatisticsTimeSeriesByPlanRequest.timeIntervalEnd,
      "page": summarizeSqlStatisticsTimeSeriesByPlanRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeSqlStatisticsTimeSeriesByPlanRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/databaseInsights/sqlStatisticsTimeSeriesByPlan",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      summarizeSqlStatisticsTimeSeriesByPlanRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeSqlStatisticsTimeSeriesByPlanResponse>{},
        body: await response.json(),
        bodyKey: "sqlStatisticsTimeSeriesByPlanAggregationCollection",
        bodyModel: "model.SqlStatisticsTimeSeriesByPlanAggregationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

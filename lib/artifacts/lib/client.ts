/**
 * Container Images API
 * API covering the [Registry](/iaas/Content/Registry/Concepts/registryoverview.htm) services.
Use this API to manage resources such as container images and repositories.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { ArtifactsWaiter } from "./artifacts-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ArtifactsApiKeys {}

export class ArtifactsClient {
  protected static serviceEndpointTemplate = "https://artifacts.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ArtifactsWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20160918";
    if (this.logger) this.logger.info(`ArtifactsClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ArtifactsClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ArtifactsClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new ArtifactsWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ArtifactsWaiter {
    this._waiters = new ArtifactsWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ArtifactsWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Moves a container repository into a different compartment within the same tenancy. For information about moving
   * resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeContainerRepositoryCompartmentRequest
   * @return ChangeContainerRepositoryCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/ChangeContainerRepositoryCompartment.ts.html |here} to see how to use ChangeContainerRepositoryCompartment API.
   */
  public async changeContainerRepositoryCompartment(
    changeContainerRepositoryCompartmentRequest: requests.ChangeContainerRepositoryCompartmentRequest
  ): Promise<responses.ChangeContainerRepositoryCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#changeContainerRepositoryCompartment.");
    const pathParams = {
      "{repositoryId}": changeContainerRepositoryCompartmentRequest.repositoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeContainerRepositoryCompartmentRequest.ifMatch,
      "opc-request-id": changeContainerRepositoryCompartmentRequest.opcRequestId,
      "opc-retry-token": changeContainerRepositoryCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/repositories/{repositoryId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeContainerRepositoryCompartmentRequest.changeContainerRepositoryCompartmentDetails,
        "ChangeContainerRepositoryCompartmentDetails",
        models.ChangeContainerRepositoryCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeContainerRepositoryCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeContainerRepositoryCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a repository into a different compartment within the same tenancy. For information about moving
   * resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeRepositoryCompartmentRequest
   * @return ChangeRepositoryCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/ChangeRepositoryCompartment.ts.html |here} to see how to use ChangeRepositoryCompartment API.
   */
  public async changeRepositoryCompartment(
    changeRepositoryCompartmentRequest: requests.ChangeRepositoryCompartmentRequest
  ): Promise<responses.ChangeRepositoryCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#changeRepositoryCompartment.");
    const pathParams = {
      "{repositoryId}": changeRepositoryCompartmentRequest.repositoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeRepositoryCompartmentRequest.ifMatch,
      "opc-request-id": changeRepositoryCompartmentRequest.opcRequestId,
      "opc-retry-token": changeRepositoryCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeRepositoryCompartmentRequest.changeRepositoryCompartmentDetails,
        "ChangeRepositoryCompartmentDetails",
        models.ChangeRepositoryCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeRepositoryCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeRepositoryCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Upload a signature to an image.
   * @param CreateContainerImageSignatureRequest
   * @return CreateContainerImageSignatureResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/CreateContainerImageSignature.ts.html |here} to see how to use CreateContainerImageSignature API.
   */
  public async createContainerImageSignature(
    createContainerImageSignatureRequest: requests.CreateContainerImageSignatureRequest
  ): Promise<responses.CreateContainerImageSignatureResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#createContainerImageSignature.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createContainerImageSignatureRequest.opcRequestId,
      "opc-retry-token": createContainerImageSignatureRequest.opcRetryToken,
      "if-match": createContainerImageSignatureRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/imageSignatures",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createContainerImageSignatureRequest.createContainerImageSignatureDetails,
        "CreateContainerImageSignatureDetails",
        models.CreateContainerImageSignatureDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createContainerImageSignatureRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateContainerImageSignatureResponse>{},
        body: await response.json(),
        bodyKey: "containerImageSignature",
        bodyModel: "model.ContainerImageSignature",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new empty container repository. Avoid entering confidential information.
   * @param CreateContainerRepositoryRequest
   * @return CreateContainerRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/CreateContainerRepository.ts.html |here} to see how to use CreateContainerRepository API.
   */
  public async createContainerRepository(
    createContainerRepositoryRequest: requests.CreateContainerRepositoryRequest
  ): Promise<responses.CreateContainerRepositoryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#createContainerRepository.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createContainerRepositoryRequest.opcRequestId,
      "opc-retry-token": createContainerRepositoryRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/repositories",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createContainerRepositoryRequest.createContainerRepositoryDetails,
        "CreateContainerRepositoryDetails",
        models.CreateContainerRepositoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createContainerRepositoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateContainerRepositoryResponse>{},
        body: await response.json(),
        bodyKey: "containerRepository",
        bodyModel: "model.ContainerRepository",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new repository for storing artifacts.
   * @param CreateRepositoryRequest
   * @return CreateRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/CreateRepository.ts.html |here} to see how to use CreateRepository API.
   */
  public async createRepository(
    createRepositoryRequest: requests.CreateRepositoryRequest
  ): Promise<responses.CreateRepositoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#createRepository.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createRepositoryRequest.opcRequestId,
      "opc-retry-token": createRepositoryRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRepositoryRequest.createRepositoryDetails,
        "CreateRepositoryDetails",
        models.CreateRepositoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createRepositoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRepositoryResponse>{},
        body: await response.json(),
        bodyKey: "repository",
        bodyModel: "model.Repository",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a container image.
   * @param DeleteContainerImageRequest
   * @return DeleteContainerImageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/DeleteContainerImage.ts.html |here} to see how to use DeleteContainerImage API.
   */
  public async deleteContainerImage(
    deleteContainerImageRequest: requests.DeleteContainerImageRequest
  ): Promise<responses.DeleteContainerImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#deleteContainerImage.");
    const pathParams = {
      "{imageId}": deleteContainerImageRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteContainerImageRequest.ifMatch,
      "opc-request-id": deleteContainerImageRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/images/{imageId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteContainerImageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteContainerImageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a container image signature.
   * @param DeleteContainerImageSignatureRequest
   * @return DeleteContainerImageSignatureResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/DeleteContainerImageSignature.ts.html |here} to see how to use DeleteContainerImageSignature API.
   */
  public async deleteContainerImageSignature(
    deleteContainerImageSignatureRequest: requests.DeleteContainerImageSignatureRequest
  ): Promise<responses.DeleteContainerImageSignatureResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#deleteContainerImageSignature.");
    const pathParams = {
      "{imageSignatureId}": deleteContainerImageSignatureRequest.imageSignatureId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteContainerImageSignatureRequest.opcRequestId,
      "if-match": deleteContainerImageSignatureRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/imageSignatures/{imageSignatureId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteContainerImageSignatureRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteContainerImageSignatureResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete container repository.
   * @param DeleteContainerRepositoryRequest
   * @return DeleteContainerRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/DeleteContainerRepository.ts.html |here} to see how to use DeleteContainerRepository API.
   */
  public async deleteContainerRepository(
    deleteContainerRepositoryRequest: requests.DeleteContainerRepositoryRequest
  ): Promise<responses.DeleteContainerRepositoryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#deleteContainerRepository.");
    const pathParams = {
      "{repositoryId}": deleteContainerRepositoryRequest.repositoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteContainerRepositoryRequest.ifMatch,
      "opc-request-id": deleteContainerRepositoryRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/repositories/{repositoryId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteContainerRepositoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteContainerRepositoryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an artifact with a specified [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   * @param DeleteGenericArtifactRequest
   * @return DeleteGenericArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/DeleteGenericArtifact.ts.html |here} to see how to use DeleteGenericArtifact API.
   */
  public async deleteGenericArtifact(
    deleteGenericArtifactRequest: requests.DeleteGenericArtifactRequest
  ): Promise<responses.DeleteGenericArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#deleteGenericArtifact.");
    const pathParams = {
      "{artifactId}": deleteGenericArtifactRequest.artifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteGenericArtifactRequest.ifMatch,
      "opc-request-id": deleteGenericArtifactRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generic/artifacts/{artifactId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteGenericArtifactRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteGenericArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an artifact with a specified `artifactPath` and `version`.
   * @param DeleteGenericArtifactByPathRequest
   * @return DeleteGenericArtifactByPathResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/DeleteGenericArtifactByPath.ts.html |here} to see how to use DeleteGenericArtifactByPath API.
   */
  public async deleteGenericArtifactByPath(
    deleteGenericArtifactByPathRequest: requests.DeleteGenericArtifactByPathRequest
  ): Promise<responses.DeleteGenericArtifactByPathResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#deleteGenericArtifactByPath.");
    const pathParams = {
      "{repositoryId}": deleteGenericArtifactByPathRequest.repositoryId,
      "{artifactPath}": deleteGenericArtifactByPathRequest.artifactPath,
      "{version}": deleteGenericArtifactByPathRequest.version
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteGenericArtifactByPathRequest.ifMatch,
      "opc-request-id": deleteGenericArtifactByPathRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generic/repositories/{repositoryId}/artifactPaths/{artifactPath}/versions/{version}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteGenericArtifactByPathRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteGenericArtifactByPathResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified repository. This operation fails unless all associated artifacts are in a DELETED state. You must delete all associated artifacts before deleting a repository.
   * @param DeleteRepositoryRequest
   * @return DeleteRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/DeleteRepository.ts.html |here} to see how to use DeleteRepository API.
   */
  public async deleteRepository(
    deleteRepositoryRequest: requests.DeleteRepositoryRequest
  ): Promise<responses.DeleteRepositoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#deleteRepository.");
    const pathParams = {
      "{repositoryId}": deleteRepositoryRequest.repositoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRepositoryRequest.ifMatch,
      "opc-request-id": deleteRepositoryRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteRepositoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRepositoryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get container configuration.
   * @param GetContainerConfigurationRequest
   * @return GetContainerConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/GetContainerConfiguration.ts.html |here} to see how to use GetContainerConfiguration API.
   */
  public async getContainerConfiguration(
    getContainerConfigurationRequest: requests.GetContainerConfigurationRequest
  ): Promise<responses.GetContainerConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#getContainerConfiguration.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": getContainerConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getContainerConfigurationRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/configuration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getContainerConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetContainerConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "containerConfiguration",
        bodyModel: "model.ContainerConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get container image metadata.
   * @param GetContainerImageRequest
   * @return GetContainerImageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/GetContainerImage.ts.html |here} to see how to use GetContainerImage API.
   */
  public async getContainerImage(
    getContainerImageRequest: requests.GetContainerImageRequest
  ): Promise<responses.GetContainerImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#getContainerImage.");
    const pathParams = {
      "{imageId}": getContainerImageRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getContainerImageRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/images/{imageId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getContainerImageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetContainerImageResponse>{},
        body: await response.json(),
        bodyKey: "containerImage",
        bodyModel: "model.ContainerImage",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get container image signature metadata.
   * @param GetContainerImageSignatureRequest
   * @return GetContainerImageSignatureResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/GetContainerImageSignature.ts.html |here} to see how to use GetContainerImageSignature API.
   */
  public async getContainerImageSignature(
    getContainerImageSignatureRequest: requests.GetContainerImageSignatureRequest
  ): Promise<responses.GetContainerImageSignatureResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#getContainerImageSignature.");
    const pathParams = {
      "{imageSignatureId}": getContainerImageSignatureRequest.imageSignatureId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getContainerImageSignatureRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/imageSignatures/{imageSignatureId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getContainerImageSignatureRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetContainerImageSignatureResponse>{},
        body: await response.json(),
        bodyKey: "containerImageSignature",
        bodyModel: "model.ContainerImageSignature",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get container repository.
   * @param GetContainerRepositoryRequest
   * @return GetContainerRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/GetContainerRepository.ts.html |here} to see how to use GetContainerRepository API.
   */
  public async getContainerRepository(
    getContainerRepositoryRequest: requests.GetContainerRepositoryRequest
  ): Promise<responses.GetContainerRepositoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#getContainerRepository.");
    const pathParams = {
      "{repositoryId}": getContainerRepositoryRequest.repositoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getContainerRepositoryRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/repositories/{repositoryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getContainerRepositoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetContainerRepositoryResponse>{},
        body: await response.json(),
        bodyKey: "containerRepository",
        bodyModel: "model.ContainerRepository",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about an artifact with a specified [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   * @param GetGenericArtifactRequest
   * @return GetGenericArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/GetGenericArtifact.ts.html |here} to see how to use GetGenericArtifact API.
   */
  public async getGenericArtifact(
    getGenericArtifactRequest: requests.GetGenericArtifactRequest
  ): Promise<responses.GetGenericArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#getGenericArtifact.");
    const pathParams = {
      "{artifactId}": getGenericArtifactRequest.artifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getGenericArtifactRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generic/artifacts/{artifactId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getGenericArtifactRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetGenericArtifactResponse>{},
        body: await response.json(),
        bodyKey: "genericArtifact",
        bodyModel: "model.GenericArtifact",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about an artifact with a specified `artifactPath` and `version`.
   * @param GetGenericArtifactByPathRequest
   * @return GetGenericArtifactByPathResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/GetGenericArtifactByPath.ts.html |here} to see how to use GetGenericArtifactByPath API.
   */
  public async getGenericArtifactByPath(
    getGenericArtifactByPathRequest: requests.GetGenericArtifactByPathRequest
  ): Promise<responses.GetGenericArtifactByPathResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#getGenericArtifactByPath.");
    const pathParams = {
      "{repositoryId}": getGenericArtifactByPathRequest.repositoryId,
      "{artifactPath}": getGenericArtifactByPathRequest.artifactPath,
      "{version}": getGenericArtifactByPathRequest.version
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getGenericArtifactByPathRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generic/repositories/{repositoryId}/artifactPaths/{artifactPath}/versions/{version}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getGenericArtifactByPathRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetGenericArtifactByPathResponse>{},
        body: await response.json(),
        bodyKey: "genericArtifact",
        bodyModel: "model.GenericArtifact",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified repository's information.
   * @param GetRepositoryRequest
   * @return GetRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/GetRepository.ts.html |here} to see how to use GetRepository API.
   */
  public async getRepository(
    getRepositoryRequest: requests.GetRepositoryRequest
  ): Promise<responses.GetRepositoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#getRepository.");
    const pathParams = {
      "{repositoryId}": getRepositoryRequest.repositoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRepositoryRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRepositoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRepositoryResponse>{},
        body: await response.json(),
        bodyKey: "repository",
        bodyModel: "model.Repository",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List container image signatures in an image.
   * @param ListContainerImageSignaturesRequest
   * @return ListContainerImageSignaturesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/ListContainerImageSignatures.ts.html |here} to see how to use ListContainerImageSignatures API.
   */
  public async listContainerImageSignatures(
    listContainerImageSignaturesRequest: requests.ListContainerImageSignaturesRequest
  ): Promise<responses.ListContainerImageSignaturesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#listContainerImageSignatures.");
    const pathParams = {};

    const queryParams = {
      "compartmentIdInSubtree": listContainerImageSignaturesRequest.compartmentIdInSubtree,
      "compartmentId": listContainerImageSignaturesRequest.compartmentId,
      "imageId": listContainerImageSignaturesRequest.imageId,
      "repositoryId": listContainerImageSignaturesRequest.repositoryId,
      "repositoryName": listContainerImageSignaturesRequest.repositoryName,
      "imageDigest": listContainerImageSignaturesRequest.imageDigest,
      "displayName": listContainerImageSignaturesRequest.displayName,
      "kmsKeyId": listContainerImageSignaturesRequest.kmsKeyId,
      "kmsKeyVersionId": listContainerImageSignaturesRequest.kmsKeyVersionId,
      "signingAlgorithm": listContainerImageSignaturesRequest.signingAlgorithm,
      "limit": listContainerImageSignaturesRequest.limit,
      "page": listContainerImageSignaturesRequest.page,
      "sortBy": listContainerImageSignaturesRequest.sortBy,
      "sortOrder": listContainerImageSignaturesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listContainerImageSignaturesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/imageSignatures",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listContainerImageSignaturesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListContainerImageSignaturesResponse>{},
        body: await response.json(),
        bodyKey: "containerImageSignatureCollection",
        bodyModel: "model.ContainerImageSignatureCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List container images in a compartment.
   * @param ListContainerImagesRequest
   * @return ListContainerImagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/ListContainerImages.ts.html |here} to see how to use ListContainerImages API.
   */
  public async listContainerImages(
    listContainerImagesRequest: requests.ListContainerImagesRequest
  ): Promise<responses.ListContainerImagesResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#listContainerImages.");
    const pathParams = {};

    const queryParams = {
      "compartmentIdInSubtree": listContainerImagesRequest.compartmentIdInSubtree,
      "compartmentId": listContainerImagesRequest.compartmentId,
      "displayName": listContainerImagesRequest.displayName,
      "imageId": listContainerImagesRequest.imageId,
      "isVersioned": listContainerImagesRequest.isVersioned,
      "repositoryId": listContainerImagesRequest.repositoryId,
      "repositoryName": listContainerImagesRequest.repositoryName,
      "version": listContainerImagesRequest.version,
      "lifecycleState": listContainerImagesRequest.lifecycleState,
      "limit": listContainerImagesRequest.limit,
      "page": listContainerImagesRequest.page,
      "sortBy": listContainerImagesRequest.sortBy,
      "sortOrder": listContainerImagesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listContainerImagesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/images",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listContainerImagesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListContainerImagesResponse>{},
        body: await response.json(),
        bodyKey: "containerImageCollection",
        bodyModel: "model.ContainerImageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List container repositories in a compartment.
   * @param ListContainerRepositoriesRequest
   * @return ListContainerRepositoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/ListContainerRepositories.ts.html |here} to see how to use ListContainerRepositories API.
   */
  public async listContainerRepositories(
    listContainerRepositoriesRequest: requests.ListContainerRepositoriesRequest
  ): Promise<responses.ListContainerRepositoriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#listContainerRepositories.");
    const pathParams = {};

    const queryParams = {
      "compartmentIdInSubtree": listContainerRepositoriesRequest.compartmentIdInSubtree,
      "compartmentId": listContainerRepositoriesRequest.compartmentId,
      "repositoryId": listContainerRepositoriesRequest.repositoryId,
      "displayName": listContainerRepositoriesRequest.displayName,
      "isPublic": listContainerRepositoriesRequest.isPublic,
      "lifecycleState": listContainerRepositoriesRequest.lifecycleState,
      "limit": listContainerRepositoriesRequest.limit,
      "page": listContainerRepositoriesRequest.page,
      "sortBy": listContainerRepositoriesRequest.sortBy,
      "sortOrder": listContainerRepositoriesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listContainerRepositoriesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/repositories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listContainerRepositoriesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListContainerRepositoriesResponse>{},
        body: await response.json(),
        bodyKey: "containerRepositoryCollection",
        bodyModel: "model.ContainerRepositoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists artifacts in the specified repository.
   * @param ListGenericArtifactsRequest
   * @return ListGenericArtifactsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/ListGenericArtifacts.ts.html |here} to see how to use ListGenericArtifacts API.
   */
  public async listGenericArtifacts(
    listGenericArtifactsRequest: requests.ListGenericArtifactsRequest
  ): Promise<responses.ListGenericArtifactsResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#listGenericArtifacts.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listGenericArtifactsRequest.compartmentId,
      "repositoryId": listGenericArtifactsRequest.repositoryId,
      "id": listGenericArtifactsRequest.id,
      "displayName": listGenericArtifactsRequest.displayName,
      "artifactPath": listGenericArtifactsRequest.artifactPath,
      "version": listGenericArtifactsRequest.version,
      "sha256": listGenericArtifactsRequest.sha256,
      "lifecycleState": listGenericArtifactsRequest.lifecycleState,
      "limit": listGenericArtifactsRequest.limit,
      "page": listGenericArtifactsRequest.page,
      "sortBy": listGenericArtifactsRequest.sortBy,
      "sortOrder": listGenericArtifactsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listGenericArtifactsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generic/artifacts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listGenericArtifactsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListGenericArtifactsResponse>{},
        body: await response.json(),
        bodyKey: "genericArtifactCollection",
        bodyModel: "model.GenericArtifactCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists repositories in the specified compartment.
   * @param ListRepositoriesRequest
   * @return ListRepositoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/ListRepositories.ts.html |here} to see how to use ListRepositories API.
   */
  public async listRepositories(
    listRepositoriesRequest: requests.ListRepositoriesRequest
  ): Promise<responses.ListRepositoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#listRepositories.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRepositoriesRequest.compartmentId,
      "id": listRepositoriesRequest.id,
      "displayName": listRepositoriesRequest.displayName,
      "isImmutable": listRepositoriesRequest.isImmutable,
      "lifecycleState": listRepositoriesRequest.lifecycleState,
      "limit": listRepositoriesRequest.limit,
      "page": listRepositoriesRequest.page,
      "sortBy": listRepositoriesRequest.sortBy,
      "sortOrder": listRepositoriesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRepositoriesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listRepositoriesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRepositoriesResponse>{},
        body: await response.json(),
        bodyKey: "repositoryCollection",
        bodyModel: "model.RepositoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove version from container image.
   * @param RemoveContainerVersionRequest
   * @return RemoveContainerVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/RemoveContainerVersion.ts.html |here} to see how to use RemoveContainerVersion API.
   */
  public async removeContainerVersion(
    removeContainerVersionRequest: requests.RemoveContainerVersionRequest
  ): Promise<responses.RemoveContainerVersionResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#removeContainerVersion.");
    const pathParams = {
      "{imageId}": removeContainerVersionRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": removeContainerVersionRequest.ifMatch,
      "opc-request-id": removeContainerVersionRequest.opcRequestId,
      "opc-retry-token": removeContainerVersionRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/images/{imageId}/actions/removeVersion",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeContainerVersionRequest.removeContainerVersionDetails,
        "RemoveContainerVersionDetails",
        models.RemoveContainerVersionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      removeContainerVersionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveContainerVersionResponse>{},
        body: await response.json(),
        bodyKey: "containerImage",
        bodyModel: "model.ContainerImage",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Restore a container image.
   * @param RestoreContainerImageRequest
   * @return RestoreContainerImageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/RestoreContainerImage.ts.html |here} to see how to use RestoreContainerImage API.
   */
  public async restoreContainerImage(
    restoreContainerImageRequest: requests.RestoreContainerImageRequest
  ): Promise<responses.RestoreContainerImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#restoreContainerImage.");
    const pathParams = {
      "{imageId}": restoreContainerImageRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": restoreContainerImageRequest.ifMatch,
      "opc-request-id": restoreContainerImageRequest.opcRequestId,
      "opc-retry-token": restoreContainerImageRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/images/{imageId}/actions/restore",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        restoreContainerImageRequest.restoreContainerImageDetails,
        "RestoreContainerImageDetails",
        models.RestoreContainerImageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      restoreContainerImageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RestoreContainerImageResponse>{},
        body: await response.json(),
        bodyKey: "containerImage",
        bodyModel: "model.ContainerImage",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update container configuration.
   * @param UpdateContainerConfigurationRequest
   * @return UpdateContainerConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/UpdateContainerConfiguration.ts.html |here} to see how to use UpdateContainerConfiguration API.
   */
  public async updateContainerConfiguration(
    updateContainerConfigurationRequest: requests.UpdateContainerConfigurationRequest
  ): Promise<responses.UpdateContainerConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#updateContainerConfiguration.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": updateContainerConfigurationRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateContainerConfigurationRequest.ifMatch,
      "opc-request-id": updateContainerConfigurationRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/configuration",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateContainerConfigurationRequest.updateContainerConfigurationDetails,
        "UpdateContainerConfigurationDetails",
        models.UpdateContainerConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateContainerConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateContainerConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "containerConfiguration",
        bodyModel: "model.ContainerConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Modify the properties of a container repository. Avoid entering confidential information.
   * @param UpdateContainerRepositoryRequest
   * @return UpdateContainerRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/UpdateContainerRepository.ts.html |here} to see how to use UpdateContainerRepository API.
   */
  public async updateContainerRepository(
    updateContainerRepositoryRequest: requests.UpdateContainerRepositoryRequest
  ): Promise<responses.UpdateContainerRepositoryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#updateContainerRepository.");
    const pathParams = {
      "{repositoryId}": updateContainerRepositoryRequest.repositoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateContainerRepositoryRequest.ifMatch,
      "opc-request-id": updateContainerRepositoryRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/container/repositories/{repositoryId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateContainerRepositoryRequest.updateContainerRepositoryDetails,
        "UpdateContainerRepositoryDetails",
        models.UpdateContainerRepositoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateContainerRepositoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateContainerRepositoryResponse>{},
        body: await response.json(),
        bodyKey: "containerRepository",
        bodyModel: "model.ContainerRepository",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the artifact with the specified [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). You can only update the tags of an artifact.
   * @param UpdateGenericArtifactRequest
   * @return UpdateGenericArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/UpdateGenericArtifact.ts.html |here} to see how to use UpdateGenericArtifact API.
   */
  public async updateGenericArtifact(
    updateGenericArtifactRequest: requests.UpdateGenericArtifactRequest
  ): Promise<responses.UpdateGenericArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#updateGenericArtifact.");
    const pathParams = {
      "{artifactId}": updateGenericArtifactRequest.artifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateGenericArtifactRequest.ifMatch,
      "opc-request-id": updateGenericArtifactRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generic/artifacts/{artifactId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateGenericArtifactRequest.updateGenericArtifactDetails,
        "UpdateGenericArtifactDetails",
        models.UpdateGenericArtifactDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateGenericArtifactRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateGenericArtifactResponse>{},
        body: await response.json(),
        bodyKey: "genericArtifact",
        bodyModel: "model.GenericArtifact",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates an artifact with a specified `artifactPath` and `version`. You can only update the tags of an artifact.
   * @param UpdateGenericArtifactByPathRequest
   * @return UpdateGenericArtifactByPathResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/UpdateGenericArtifactByPath.ts.html |here} to see how to use UpdateGenericArtifactByPath API.
   */
  public async updateGenericArtifactByPath(
    updateGenericArtifactByPathRequest: requests.UpdateGenericArtifactByPathRequest
  ): Promise<responses.UpdateGenericArtifactByPathResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ArtifactsClient#updateGenericArtifactByPath.");
    const pathParams = {
      "{repositoryId}": updateGenericArtifactByPathRequest.repositoryId,
      "{artifactPath}": updateGenericArtifactByPathRequest.artifactPath,
      "{version}": updateGenericArtifactByPathRequest.version
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateGenericArtifactByPathRequest.ifMatch,
      "opc-request-id": updateGenericArtifactByPathRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/generic/repositories/{repositoryId}/artifactPaths/{artifactPath}/versions/{version}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateGenericArtifactByPathRequest.updateGenericArtifactByPathDetails,
        "UpdateGenericArtifactByPathDetails",
        models.UpdateGenericArtifactByPathDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateGenericArtifactByPathRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateGenericArtifactByPathResponse>{},
        body: await response.json(),
        bodyKey: "genericArtifact",
        bodyModel: "model.GenericArtifact",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the properties of a repository. You can update the `displayName` and  `description` properties.
   * @param UpdateRepositoryRequest
   * @return UpdateRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/artifacts/UpdateRepository.ts.html |here} to see how to use UpdateRepository API.
   */
  public async updateRepository(
    updateRepositoryRequest: requests.UpdateRepositoryRequest
  ): Promise<responses.UpdateRepositoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ArtifactsClient#updateRepository.");
    const pathParams = {
      "{repositoryId}": updateRepositoryRequest.repositoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRepositoryRequest.ifMatch,
      "opc-request-id": updateRepositoryRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRepositoryRequest.updateRepositoryDetails,
        "UpdateRepositoryDetails",
        models.UpdateRepositoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateRepositoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRepositoryResponse>{},
        body: await response.json(),
        bodyKey: "repository",
        bodyModel: "model.Repository",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

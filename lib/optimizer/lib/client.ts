/**
 * Cloud Advisor API
 * APIs for managing Cloud Advisor. Cloud Advisor provides recommendations that help you maximize cost savings and improve the security posture of your tenancy.
 * OpenAPI spec version: 20200606
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { OptimizerWaiter } from "./optimizer-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum OptimizerApiKeys {}

export class OptimizerClient {
  protected static serviceEndpointTemplate = "https://optimizer.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OptimizerWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200606";
    if (this.logger) this.logger.info(`OptimizerClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OptimizerClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OptimizerClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new OptimizerWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OptimizerWaiter {
    this._waiters = new OptimizerWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OptimizerWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Applies the specified recommendations to the resources.
   *
   * @param BulkApplyRecommendationsRequest
   * @return BulkApplyRecommendationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/BulkApplyRecommendations.ts.html |here} to see how to use BulkApplyRecommendations API.
   */
  public async bulkApplyRecommendations(
    bulkApplyRecommendationsRequest: requests.BulkApplyRecommendationsRequest
  ): Promise<responses.BulkApplyRecommendationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation OptimizerClient#bulkApplyRecommendations.");
    const pathParams = {
      "{recommendationId}": bulkApplyRecommendationsRequest.recommendationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": bulkApplyRecommendationsRequest.opcRequestId,
      "opc-retry-token": bulkApplyRecommendationsRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recommendations/{recommendationId}/actions/bulkApplyRecommendations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkApplyRecommendationsRequest.bulkApplyRecommendationsDetails,
        "BulkApplyRecommendationsDetails",
        models.BulkApplyRecommendationsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      bulkApplyRecommendationsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkApplyRecommendationsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new profile.
   *
   * @param CreateProfileRequest
   * @return CreateProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/CreateProfile.ts.html |here} to see how to use CreateProfile API.
   */
  public async createProfile(
    createProfileRequest: requests.CreateProfileRequest
  ): Promise<responses.CreateProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#createProfile.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createProfileRequest.opcRequestId,
      "opc-retry-token": createProfileRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProfileRequest.createProfileDetails,
        "CreateProfileDetails",
        models.CreateProfileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createProfileRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProfileResponse>{},
        body: await response.json(),
        bodyKey: "profile",
        bodyModel: "model.Profile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified profile. Uses the profile's OCID to determine which profile to delete.
   *
   * @param DeleteProfileRequest
   * @return DeleteProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/DeleteProfile.ts.html |here} to see how to use DeleteProfile API.
   */
  public async deleteProfile(
    deleteProfileRequest: requests.DeleteProfileRequest
  ): Promise<responses.DeleteProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#deleteProfile.");
    const pathParams = {
      "{profileId}": deleteProfileRequest.profileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProfileRequest.ifMatch,
      "opc-request-id": deleteProfileRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles/{profileId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteProfileRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProfileResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the category that corresponds to the specified OCID.
   *
   * @param GetCategoryRequest
   * @return GetCategoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetCategory.ts.html |here} to see how to use GetCategory API.
   */
  public async getCategory(
    getCategoryRequest: requests.GetCategoryRequest
  ): Promise<responses.GetCategoryResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getCategory.");
    const pathParams = {
      "{categoryId}": getCategoryRequest.categoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCategoryRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/categories/{categoryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getCategoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCategoryResponse>{},
        body: await response.json(),
        bodyKey: "category",
        bodyModel: "model.Category",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Cloud Advisor enrollment status.
   *
   * @param GetEnrollmentStatusRequest
   * @return GetEnrollmentStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetEnrollmentStatus.ts.html |here} to see how to use GetEnrollmentStatus API.
   */
  public async getEnrollmentStatus(
    getEnrollmentStatusRequest: requests.GetEnrollmentStatusRequest
  ): Promise<responses.GetEnrollmentStatusResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getEnrollmentStatus.");
    const pathParams = {
      "{enrollmentStatusId}": getEnrollmentStatusRequest.enrollmentStatusId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getEnrollmentStatusRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/enrollmentStatus/{enrollmentStatusId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getEnrollmentStatusRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEnrollmentStatusResponse>{},
        body: await response.json(),
        bodyKey: "enrollmentStatus",
        bodyModel: "model.EnrollmentStatus",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified profile's information. Uses the profile's OCID to determine which profile to retrieve.
   *
   * @param GetProfileRequest
   * @return GetProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetProfile.ts.html |here} to see how to use GetProfile API.
   */
  public async getProfile(
    getProfileRequest: requests.GetProfileRequest
  ): Promise<responses.GetProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getProfile.");
    const pathParams = {
      "{profileId}": getProfileRequest.profileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProfileRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles/{profileId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getProfileRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProfileResponse>{},
        body: await response.json(),
        bodyKey: "profile",
        bodyModel: "model.Profile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the recommendation for the specified OCID.
   *
   * @param GetRecommendationRequest
   * @return GetRecommendationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetRecommendation.ts.html |here} to see how to use GetRecommendation API.
   */
  public async getRecommendation(
    getRecommendationRequest: requests.GetRecommendationRequest
  ): Promise<responses.GetRecommendationResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getRecommendation.");
    const pathParams = {
      "{recommendationId}": getRecommendationRequest.recommendationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRecommendationRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recommendations/{recommendationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRecommendationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRecommendationResponse>{},
        body: await response.json(),
        bodyKey: "recommendation",
        bodyModel: "model.Recommendation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the resource action that corresponds to the specified OCID.
   *
   * @param GetResourceActionRequest
   * @return GetResourceActionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetResourceAction.ts.html |here} to see how to use GetResourceAction API.
   */
  public async getResourceAction(
    getResourceActionRequest: requests.GetResourceActionRequest
  ): Promise<responses.GetResourceActionResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getResourceAction.");
    const pathParams = {
      "{resourceActionId}": getResourceActionRequest.resourceActionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getResourceActionRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceActions/{resourceActionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getResourceActionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetResourceActionResponse>{},
        body: await response.json(),
        bodyKey: "resourceAction",
        bodyModel: "model.ResourceAction",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request associated with the specified ID.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#getWorkRequest.");
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getWorkRequestRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the supported Cloud Advisor categories.
   *
   * @param ListCategoriesRequest
   * @return ListCategoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListCategories.ts.html |here} to see how to use ListCategories API.
   */
  public async listCategories(
    listCategoriesRequest: requests.ListCategoriesRequest
  ): Promise<responses.ListCategoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listCategories.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCategoriesRequest.compartmentId,
      "compartmentIdInSubtree": listCategoriesRequest.compartmentIdInSubtree,
      "name": listCategoriesRequest.name,
      "limit": listCategoriesRequest.limit,
      "page": listCategoriesRequest.page,
      "sortOrder": listCategoriesRequest.sortOrder,
      "sortBy": listCategoriesRequest.sortBy,
      "lifecycleState": listCategoriesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCategoriesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/categories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listCategoriesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCategoriesResponse>{},
        body: await response.json(),
        bodyKey: "categoryCollection",
        bodyModel: "model.CategoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Cloud Advisor enrollment statuses.
   *
   * @param ListEnrollmentStatusesRequest
   * @return ListEnrollmentStatusesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListEnrollmentStatuses.ts.html |here} to see how to use ListEnrollmentStatuses API.
   */
  public async listEnrollmentStatuses(
    listEnrollmentStatusesRequest: requests.ListEnrollmentStatusesRequest
  ): Promise<responses.ListEnrollmentStatusesResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listEnrollmentStatuses.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listEnrollmentStatusesRequest.compartmentId,
      "limit": listEnrollmentStatusesRequest.limit,
      "page": listEnrollmentStatusesRequest.page,
      "sortOrder": listEnrollmentStatusesRequest.sortOrder,
      "sortBy": listEnrollmentStatusesRequest.sortBy,
      "lifecycleState": listEnrollmentStatusesRequest.lifecycleState,
      "status": listEnrollmentStatusesRequest.status
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listEnrollmentStatusesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/enrollmentStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listEnrollmentStatusesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEnrollmentStatusesResponse>{},
        body: await response.json(),
        bodyKey: "enrollmentStatusCollection",
        bodyModel: "model.EnrollmentStatusCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists changes to the recommendations based on user activity.
   * For example, lists when recommendations have been implemented, dismissed, postponed, or reactivated.
   *
   * @param ListHistoriesRequest
   * @return ListHistoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListHistories.ts.html |here} to see how to use ListHistories API.
   */
  public async listHistories(
    listHistoriesRequest: requests.ListHistoriesRequest
  ): Promise<responses.ListHistoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listHistories.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listHistoriesRequest.compartmentId,
      "compartmentIdInSubtree": listHistoriesRequest.compartmentIdInSubtree,
      "name": listHistoriesRequest.name,
      "recommendationName": listHistoriesRequest.recommendationName,
      "recommendationId": listHistoriesRequest.recommendationId,
      "resourceType": listHistoriesRequest.resourceType,
      "limit": listHistoriesRequest.limit,
      "page": listHistoriesRequest.page,
      "sortOrder": listHistoriesRequest.sortOrder,
      "sortBy": listHistoriesRequest.sortBy,
      "lifecycleState": listHistoriesRequest.lifecycleState,
      "status": listHistoriesRequest.status
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listHistoriesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/histories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listHistoriesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListHistoriesResponse>{},
        body: await response.json(),
        bodyKey: "historyCollection",
        bodyModel: "model.HistoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the existing profiles.
   *
   * @param ListProfilesRequest
   * @return ListProfilesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListProfiles.ts.html |here} to see how to use ListProfiles API.
   */
  public async listProfiles(
    listProfilesRequest: requests.ListProfilesRequest
  ): Promise<responses.ListProfilesResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listProfiles.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listProfilesRequest.compartmentId,
      "name": listProfilesRequest.name,
      "limit": listProfilesRequest.limit,
      "page": listProfilesRequest.page,
      "sortOrder": listProfilesRequest.sortOrder,
      "sortBy": listProfilesRequest.sortBy,
      "lifecycleState": listProfilesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProfilesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listProfilesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProfilesResponse>{},
        body: await response.json(),
        bodyKey: "profileCollection",
        bodyModel: "model.ProfileCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Cloud Advisor recommendations that are currently supported in the specified category.
   *
   * @param ListRecommendationsRequest
   * @return ListRecommendationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListRecommendations.ts.html |here} to see how to use ListRecommendations API.
   */
  public async listRecommendations(
    listRecommendationsRequest: requests.ListRecommendationsRequest
  ): Promise<responses.ListRecommendationsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listRecommendations.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRecommendationsRequest.compartmentId,
      "compartmentIdInSubtree": listRecommendationsRequest.compartmentIdInSubtree,
      "categoryId": listRecommendationsRequest.categoryId,
      "name": listRecommendationsRequest.name,
      "limit": listRecommendationsRequest.limit,
      "page": listRecommendationsRequest.page,
      "sortOrder": listRecommendationsRequest.sortOrder,
      "sortBy": listRecommendationsRequest.sortBy,
      "lifecycleState": listRecommendationsRequest.lifecycleState,
      "status": listRecommendationsRequest.status
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRecommendationsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recommendations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listRecommendationsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRecommendationsResponse>{},
        body: await response.json(),
        bodyKey: "recommendationCollection",
        bodyModel: "model.RecommendationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the Cloud Advisor resource actions that are supported by the specified recommendation.
   *
   * @param ListResourceActionsRequest
   * @return ListResourceActionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListResourceActions.ts.html |here} to see how to use ListResourceActions API.
   */
  public async listResourceActions(
    listResourceActionsRequest: requests.ListResourceActionsRequest
  ): Promise<responses.ListResourceActionsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listResourceActions.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listResourceActionsRequest.compartmentId,
      "compartmentIdInSubtree": listResourceActionsRequest.compartmentIdInSubtree,
      "recommendationId": listResourceActionsRequest.recommendationId,
      "name": listResourceActionsRequest.name,
      "resourceType": listResourceActionsRequest.resourceType,
      "limit": listResourceActionsRequest.limit,
      "page": listResourceActionsRequest.page,
      "sortOrder": listResourceActionsRequest.sortOrder,
      "sortBy": listResourceActionsRequest.sortBy,
      "lifecycleState": listResourceActionsRequest.lifecycleState,
      "status": listResourceActionsRequest.status
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResourceActionsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceActions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listResourceActionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResourceActionsResponse>{},
        body: await response.json(),
        bodyKey: "resourceActionCollection",
        bodyModel: "model.ResourceActionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists errors associated with the specified work request.
   *
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listWorkRequestErrors.");
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestErrorsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the logs associated with the specified work request.
   *
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listWorkRequestLogs.");
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestLogsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in the tenancy. The tenancy is the root compartment.
   *
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#listWorkRequests.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the enrollment status of the tenancy.
   *
   * @param UpdateEnrollmentStatusRequest
   * @return UpdateEnrollmentStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/UpdateEnrollmentStatus.ts.html |here} to see how to use UpdateEnrollmentStatus API.
   */
  public async updateEnrollmentStatus(
    updateEnrollmentStatusRequest: requests.UpdateEnrollmentStatusRequest
  ): Promise<responses.UpdateEnrollmentStatusResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#updateEnrollmentStatus.");
    const pathParams = {
      "{enrollmentStatusId}": updateEnrollmentStatusRequest.enrollmentStatusId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateEnrollmentStatusRequest.opcRequestId,
      "if-match": updateEnrollmentStatusRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/enrollmentStatus/{enrollmentStatusId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateEnrollmentStatusRequest.updateEnrollmentStatusDetails,
        "UpdateEnrollmentStatusDetails",
        models.UpdateEnrollmentStatusDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateEnrollmentStatusRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateEnrollmentStatusResponse>{},
        body: await response.json(),
        bodyKey: "enrollmentStatus",
        bodyModel: "model.EnrollmentStatus",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified profile. Uses the profile's OCID to determine which profile to update.
   *
   * @param UpdateProfileRequest
   * @return UpdateProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/UpdateProfile.ts.html |here} to see how to use UpdateProfile API.
   */
  public async updateProfile(
    updateProfileRequest: requests.UpdateProfileRequest
  ): Promise<responses.UpdateProfileResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#updateProfile.");
    const pathParams = {
      "{profileId}": updateProfileRequest.profileId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateProfileRequest.ifMatch,
      "opc-request-id": updateProfileRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/profiles/{profileId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProfileRequest.updateProfileDetails,
        "UpdateProfileDetails",
        models.UpdateProfileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateProfileRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProfileResponse>{},
        body: await response.json(),
        bodyKey: "profile",
        bodyModel: "model.Profile",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the recommendation that corresponds to the specified OCID.
   * Use this operation to implement the following actions:
   * <p>
   * Postpone recommendation
   *   * Dismiss recommendation
   *   * Reactivate recommendation
   *
   * @param UpdateRecommendationRequest
   * @return UpdateRecommendationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/UpdateRecommendation.ts.html |here} to see how to use UpdateRecommendation API.
   */
  public async updateRecommendation(
    updateRecommendationRequest: requests.UpdateRecommendationRequest
  ): Promise<responses.UpdateRecommendationResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#updateRecommendation.");
    const pathParams = {
      "{recommendationId}": updateRecommendationRequest.recommendationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateRecommendationRequest.opcRequestId,
      "if-match": updateRecommendationRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/recommendations/{recommendationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRecommendationRequest.updateRecommendationDetails,
        "UpdateRecommendationDetails",
        models.UpdateRecommendationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateRecommendationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRecommendationResponse>{},
        body: await response.json(),
        bodyKey: "recommendation",
        bodyModel: "model.Recommendation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the resource action that corresponds to the specified OCID.
   * Use this operation to implement the following actions:
   * <p>
   * Postpone resource action
   *   * Ignore resource action
   *   * Reactivate resource action
   *
   * @param UpdateResourceActionRequest
   * @return UpdateResourceActionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/optimizer/UpdateResourceAction.ts.html |here} to see how to use UpdateResourceAction API.
   */
  public async updateResourceAction(
    updateResourceActionRequest: requests.UpdateResourceActionRequest
  ): Promise<responses.UpdateResourceActionResponse> {
    if (this.logger) this.logger.debug("Calling operation OptimizerClient#updateResourceAction.");
    const pathParams = {
      "{resourceActionId}": updateResourceActionRequest.resourceActionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateResourceActionRequest.opcRequestId,
      "if-match": updateResourceActionRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceActions/{resourceActionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateResourceActionRequest.updateResourceActionDetails,
        "UpdateResourceActionDetails",
        models.UpdateResourceActionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateResourceActionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateResourceActionResponse>{},
        body: await response.json(),
        bodyKey: "resourceAction",
        bodyModel: "model.ResourceAction",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

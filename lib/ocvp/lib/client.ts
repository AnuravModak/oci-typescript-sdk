/**
 * Oracle Cloud VMware Solution API
 * Use this API to manage the Oracle Cloud VMware Solution.

 * OpenAPI spec version: 20200501
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { EsxiHostWaiter } from "./esxihost-waiter";
import { SddcWaiter } from "./sddc-waiter";
import { WorkRequestWaiter } from "./workrequest-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum EsxiHostApiKeys {}

export class EsxiHostClient {
  protected static serviceEndpointTemplate = "https://ocvps.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": EsxiHostWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200501";
    if (this.logger) this.logger.info(`EsxiHostClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      EsxiHostClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      EsxiHostClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new EsxiHostWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): EsxiHostWaiter {
    this._waiters = new EsxiHostWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): EsxiHostWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Sets the client configuration for the client
   */
  public set clientConfiguration(clientConfiguration: common.ClientConfiguration) {
    this._clientConfiguration = clientConfiguration;
  }

  /**
     * Adds another ESXi host to an existing SDDC. The attributes of the specified
* `Sddc` determine the VMware software and other configuration settings used
* by the ESXi host.
* <p>
Use the {@link WorkRequest} operations to track the
* creation of the ESXi host.
* 
     * @param CreateEsxiHostRequest
     * @return CreateEsxiHostResponse
     * @throws OciError when an error occurs
     */
  public async createEsxiHost(
    createEsxiHostRequest: requests.CreateEsxiHostRequest
  ): Promise<responses.CreateEsxiHostResponse> {
    if (this.logger) this.logger.debug("Calling operation EsxiHostClient#createEsxiHost.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": createEsxiHostRequest.opcRetryToken,
      "opc-request-id": createEsxiHostRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/esxiHosts",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createEsxiHostRequest.createEsxiHostDetails,
        "CreateEsxiHostDetails",
        models.CreateEsxiHostDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createEsxiHostRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateEsxiHostResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified ESXi host. Before deleting the host, back up or
* migrate any VMware workloads running on it.
* <p>
When you delete an ESXi host, Oracle does not remove the node
* configuration within the VMware environment itself. That is
* your responsibility.
* <p>
**Note:** If you delete EXSi hosts from the SDDC to total less than 3,
* you are still billed for the 3 minimum recommended EXSi hosts. Also,
* you cannot add more VMware workloads to the SDDC until it again has at
* least 3 ESXi hosts.
* <p>
Use the {@link WorkRequest} operations to track the
* deletion of the ESXi host.
* 
     * @param DeleteEsxiHostRequest
     * @return DeleteEsxiHostResponse
     * @throws OciError when an error occurs
     */
  public async deleteEsxiHost(
    deleteEsxiHostRequest: requests.DeleteEsxiHostRequest
  ): Promise<responses.DeleteEsxiHostResponse> {
    if (this.logger) this.logger.debug("Calling operation EsxiHostClient#deleteEsxiHost.");
    const pathParams = {
      "{esxiHostId}": deleteEsxiHostRequest.esxiHostId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": deleteEsxiHostRequest.ifMatch,
      "opc-request-id": deleteEsxiHostRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/esxiHosts/{esxiHostId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteEsxiHostRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteEsxiHostResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified ESXi host's information.
   * @param GetEsxiHostRequest
   * @return GetEsxiHostResponse
   * @throws OciError when an error occurs
   */
  public async getEsxiHost(
    getEsxiHostRequest: requests.GetEsxiHostRequest
  ): Promise<responses.GetEsxiHostResponse> {
    if (this.logger) this.logger.debug("Calling operation EsxiHostClient#getEsxiHost.");
    const pathParams = {
      "{esxiHostId}": getEsxiHostRequest.esxiHostId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getEsxiHostRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/esxiHosts/{esxiHostId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getEsxiHostRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEsxiHostResponse>{},
        body: await response.json(),
        bodyKey: "esxiHost",
        bodyModel: "model.EsxiHost",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Lists the ESXi hosts in the specified SDDC. The list can be filtered
* by Compute instance OCID or ESXi display name.
* <p>
Remember that in terms of implementation, an ESXi host is a Compute instance that
* is configured with the chosen bundle of VMware software. Each `EsxiHost`
* object has its own OCID (`id`), and a separate attribute for the OCID of
* the Compute instance (`computeInstanceId`). When filtering the list of
* ESXi hosts, you can specify the OCID of the Compute instance, not the
* ESXi host OCID.
* 
     * @param ListEsxiHostsRequest
     * @return ListEsxiHostsResponse
     * @throws OciError when an error occurs
     */
  public async listEsxiHosts(
    listEsxiHostsRequest: requests.ListEsxiHostsRequest
  ): Promise<responses.ListEsxiHostsResponse> {
    if (this.logger) this.logger.debug("Calling operation EsxiHostClient#listEsxiHosts.");
    const pathParams = {};

    const queryParams = {
      "sddcId": listEsxiHostsRequest.sddcId,
      "computeInstanceId": listEsxiHostsRequest.computeInstanceId,
      "displayName": listEsxiHostsRequest.displayName,
      "limit": listEsxiHostsRequest.limit,
      "page": listEsxiHostsRequest.page,
      "sortOrder": listEsxiHostsRequest.sortOrder,
      "sortBy": listEsxiHostsRequest.sortBy,
      "lifecycleState": listEsxiHostsRequest.lifecycleState
    };

    let headerParams = {
      "opc-request-id": listEsxiHostsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/esxiHosts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listEsxiHostsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEsxiHostsResponse>{},
        body: await response.json(),
        bodyKey: "esxiHostCollection",
        bodyModel: "model.EsxiHostCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified ESXi host.
   * @param UpdateEsxiHostRequest
   * @return UpdateEsxiHostResponse
   * @throws OciError when an error occurs
   */
  public async updateEsxiHost(
    updateEsxiHostRequest: requests.UpdateEsxiHostRequest
  ): Promise<responses.UpdateEsxiHostResponse> {
    if (this.logger) this.logger.debug("Calling operation EsxiHostClient#updateEsxiHost.");
    const pathParams = {
      "{esxiHostId}": updateEsxiHostRequest.esxiHostId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": updateEsxiHostRequest.ifMatch,
      "opc-request-id": updateEsxiHostRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/esxiHosts/{esxiHostId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateEsxiHostRequest.updateEsxiHostDetails,
        "UpdateEsxiHostDetails",
        models.UpdateEsxiHostDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateEsxiHostRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateEsxiHostResponse>{},
        body: await response.json(),
        bodyKey: "esxiHost",
        bodyModel: "model.EsxiHost",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum SddcApiKeys {}

export class SddcClient {
  protected static serviceEndpointTemplate = "https://ocvps.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": SddcWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200501";
    if (this.logger) this.logger.info(`SddcClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      SddcClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      SddcClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new SddcWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): SddcWaiter {
    this._waiters = new SddcWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): SddcWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Sets the client configuration for the client
   */
  public set clientConfiguration(clientConfiguration: common.ClientConfiguration) {
    this._clientConfiguration = clientConfiguration;
  }

  /**
   * Moves an SDDC into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeSddcCompartmentRequest
   * @return ChangeSddcCompartmentResponse
   * @throws OciError when an error occurs
   */
  public async changeSddcCompartment(
    changeSddcCompartmentRequest: requests.ChangeSddcCompartmentRequest
  ): Promise<responses.ChangeSddcCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation SddcClient#changeSddcCompartment.");
    const pathParams = {
      "{sddcId}": changeSddcCompartmentRequest.sddcId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": changeSddcCompartmentRequest.ifMatch,
      "opc-request-id": changeSddcCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSddcCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sddcs/{sddcId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSddcCompartmentRequest.changeSddcCompartmentDetails,
        "ChangeSddcCompartmentDetails",
        models.ChangeSddcCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeSddcCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSddcCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a software-defined data center (SDDC).
* <p>
Use the {@link WorkRequest} operations to track the
* creation of the SDDC.
* 
     * @param CreateSddcRequest
     * @return CreateSddcResponse
     * @throws OciError when an error occurs
     */
  public async createSddc(
    createSddcRequest: requests.CreateSddcRequest
  ): Promise<responses.CreateSddcResponse> {
    if (this.logger) this.logger.debug("Calling operation SddcClient#createSddc.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "opc-retry-token": createSddcRequest.opcRetryToken,
      "opc-request-id": createSddcRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sddcs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSddcRequest.createSddcDetails,
        "CreateSddcDetails",
        models.CreateSddcDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createSddcRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSddcResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified SDDC, along with the other resources that were
* created with the SDDC. For example: the Compute instances, DNS records,
* and so on.
* <p>
Use the {@link WorkRequest} operations to track the
* deletion of the SDDC.
* 
     * @param DeleteSddcRequest
     * @return DeleteSddcResponse
     * @throws OciError when an error occurs
     */
  public async deleteSddc(
    deleteSddcRequest: requests.DeleteSddcRequest
  ): Promise<responses.DeleteSddcResponse> {
    if (this.logger) this.logger.debug("Calling operation SddcClient#deleteSddc.");
    const pathParams = {
      "{sddcId}": deleteSddcRequest.sddcId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": deleteSddcRequest.ifMatch,
      "opc-request-id": deleteSddcRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sddcs/{sddcId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteSddcRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSddcResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified SDDC's information.
   * @param GetSddcRequest
   * @return GetSddcResponse
   * @throws OciError when an error occurs
   */
  public async getSddc(
    getSddcRequest: requests.GetSddcRequest
  ): Promise<responses.GetSddcResponse> {
    if (this.logger) this.logger.debug("Calling operation SddcClient#getSddc.");
    const pathParams = {
      "{sddcId}": getSddcRequest.sddcId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getSddcRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sddcs/{sddcId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getSddcRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSddcResponse>{},
        body: await response.json(),
        bodyKey: "sddc",
        bodyModel: "model.Sddc",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the SDDCs in the specified compartment. The list can be
   * filtered by display name or availability domain.
   *
   * @param ListSddcsRequest
   * @return ListSddcsResponse
   * @throws OciError when an error occurs
   */
  public async listSddcs(
    listSddcsRequest: requests.ListSddcsRequest
  ): Promise<responses.ListSddcsResponse> {
    if (this.logger) this.logger.debug("Calling operation SddcClient#listSddcs.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSddcsRequest.compartmentId,
      "computeAvailabilityDomain": listSddcsRequest.computeAvailabilityDomain,
      "displayName": listSddcsRequest.displayName,
      "limit": listSddcsRequest.limit,
      "page": listSddcsRequest.page,
      "sortOrder": listSddcsRequest.sortOrder,
      "sortBy": listSddcsRequest.sortBy,
      "lifecycleState": listSddcsRequest.lifecycleState
    };

    let headerParams = {
      "opc-request-id": listSddcsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sddcs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listSddcsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSddcsResponse>{},
        body: await response.json(),
        bodyKey: "sddcCollection",
        bodyModel: "model.SddcCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the versions of bundled VMware software supported by the Oracle Cloud
   * VMware Solution.
   *
   * @param ListSupportedVmwareSoftwareVersionsRequest
   * @return ListSupportedVmwareSoftwareVersionsResponse
   * @throws OciError when an error occurs
   */
  public async listSupportedVmwareSoftwareVersions(
    listSupportedVmwareSoftwareVersionsRequest: requests.ListSupportedVmwareSoftwareVersionsRequest
  ): Promise<responses.ListSupportedVmwareSoftwareVersionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation SddcClient#listSupportedVmwareSoftwareVersions.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSupportedVmwareSoftwareVersionsRequest.compartmentId,
      "limit": listSupportedVmwareSoftwareVersionsRequest.limit,
      "page": listSupportedVmwareSoftwareVersionsRequest.page
    };

    let headerParams = {
      "opc-request-id": listSupportedVmwareSoftwareVersionsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/supportedVmwareSoftwareVersions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listSupportedVmwareSoftwareVersionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSupportedVmwareSoftwareVersionsResponse>{},
        body: await response.json(),
        bodyKey: "supportedVmwareSoftwareVersionCollection",
        bodyModel: "model.SupportedVmwareSoftwareVersionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified SDDC.
   * <p>
   **Important:** Updating an SDDC affects only certain attributes in the `Sddc`
   * object and does not affect the VMware environment currently running in
   * the SDDC. For more information, see
   * {@link #updateSddcDetails(UpdateSddcDetailsRequest) updateSddcDetails}.
   *
   * @param UpdateSddcRequest
   * @return UpdateSddcResponse
   * @throws OciError when an error occurs
   */
  public async updateSddc(
    updateSddcRequest: requests.UpdateSddcRequest
  ): Promise<responses.UpdateSddcResponse> {
    if (this.logger) this.logger.debug("Calling operation SddcClient#updateSddc.");
    const pathParams = {
      "{sddcId}": updateSddcRequest.sddcId
    };

    const queryParams = {};

    let headerParams = {
      "if-match": updateSddcRequest.ifMatch,
      "opc-request-id": updateSddcRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/sddcs/{sddcId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSddcRequest.updateSddcDetails,
        "UpdateSddcDetails",
        models.UpdateSddcDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateSddcRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSddcResponse>{},
        body: await response.json(),
        bodyKey: "sddc",
        bodyModel: "model.Sddc",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum WorkRequestApiKeys {}

export class WorkRequestClient {
  protected static serviceEndpointTemplate = "https://ocvps.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": WorkRequestWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    this._httpClient = params.httpClient || new common.FetchHttpClient(requestSigner);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200501";
    if (this.logger) this.logger.info(`WorkRequestClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      WorkRequestClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      WorkRequestClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new WorkRequestWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): WorkRequestWaiter {
    this._waiters = new WorkRequestWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): WorkRequestWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Sets the client configuration for the client
   */
  public set clientConfiguration(clientConfiguration: common.ClientConfiguration) {
    this._clientConfiguration = clientConfiguration;
  }

  /**
   * Gets the specified work request's information.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#getWorkRequest.");
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getWorkRequestRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the errors for the specified work request.
   *
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation WorkRequestClient#listWorkRequestErrors.");
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestErrorsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the logs for the specified work request.
   *
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#listWorkRequestLogs.");
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestLogsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in the specified compartment.
   *
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation WorkRequestClient#listWorkRequests.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

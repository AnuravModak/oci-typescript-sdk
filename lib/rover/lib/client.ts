/**
 * RoverCloudService API
 * A description of the RoverCloudService API.
 * OpenAPI spec version: 20201210
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { RoverClusterWaiter } from "./rovercluster-waiter";
import { RoverEntitlementWaiter } from "./roverentitlement-waiter";
import { RoverNodeWaiter } from "./rovernode-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum RoverClusterApiKeys {}

export class RoverClusterClient {
  protected static serviceEndpointTemplate = "https://rover.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": RoverClusterWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20201210";
    if (this.logger) this.logger.info(`RoverClusterClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      RoverClusterClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      RoverClusterClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new RoverClusterWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): RoverClusterWaiter {
    this._waiters = new RoverClusterWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): RoverClusterWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Moves a cluster into a different compartment.
   * @param ChangeRoverClusterCompartmentRequest
   * @return ChangeRoverClusterCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ChangeRoverClusterCompartment.ts.html |here} to see how to use ChangeRoverClusterCompartment API.
   */
  public async changeRoverClusterCompartment(
    changeRoverClusterCompartmentRequest: requests.ChangeRoverClusterCompartmentRequest
  ): Promise<responses.ChangeRoverClusterCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation RoverClusterClient#changeRoverClusterCompartment.");
    const pathParams = {
      "{roverClusterId}": changeRoverClusterCompartmentRequest.roverClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeRoverClusterCompartmentRequest.ifMatch,
      "opc-request-id": changeRoverClusterCompartmentRequest.opcRequestId,
      "opc-retry-token": changeRoverClusterCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeRoverClusterCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverClusters/{roverClusterId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeRoverClusterCompartmentRequest.changeRoverClusterCompartmentDetails,
        "ChangeRoverClusterCompartmentDetails",
        model.ChangeRoverClusterCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeRoverClusterCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new RoverCluster.
   *
   * @param CreateRoverClusterRequest
   * @return CreateRoverClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/CreateRoverCluster.ts.html |here} to see how to use CreateRoverCluster API.
   */
  public async createRoverCluster(
    createRoverClusterRequest: requests.CreateRoverClusterRequest
  ): Promise<responses.CreateRoverClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverClusterClient#createRoverCluster.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createRoverClusterRequest.opcRetryToken,
      "opc-request-id": createRoverClusterRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createRoverClusterRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverClusters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRoverClusterRequest.createRoverClusterDetails,
        "CreateRoverClusterDetails",
        model.CreateRoverClusterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRoverClusterResponse>{},
        body: await response.json(),
        bodyKey: "roverCluster",
        bodyModel: model.RoverCluster,
        type: "model.RoverCluster",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a RoverCluster resource by identifier
   * @param DeleteRoverClusterRequest
   * @return DeleteRoverClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/DeleteRoverCluster.ts.html |here} to see how to use DeleteRoverCluster API.
   */
  public async deleteRoverCluster(
    deleteRoverClusterRequest: requests.DeleteRoverClusterRequest
  ): Promise<responses.DeleteRoverClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverClusterClient#deleteRoverCluster.");
    const pathParams = {
      "{roverClusterId}": deleteRoverClusterRequest.roverClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRoverClusterRequest.ifMatch,
      "opc-request-id": deleteRoverClusterRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteRoverClusterRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverClusters/{roverClusterId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRoverClusterResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a RoverCluster by identifier
   * @param GetRoverClusterRequest
   * @return GetRoverClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverCluster.ts.html |here} to see how to use GetRoverCluster API.
   */
  public async getRoverCluster(
    getRoverClusterRequest: requests.GetRoverClusterRequest
  ): Promise<responses.GetRoverClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverClusterClient#getRoverCluster.");
    const pathParams = {
      "{roverClusterId}": getRoverClusterRequest.roverClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRoverClusterRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRoverClusterRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverClusters/{roverClusterId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRoverClusterResponse>{},
        body: await response.json(),
        bodyKey: "roverCluster",
        bodyModel: model.RoverCluster,
        type: "model.RoverCluster",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the certificate for a rover cluster
   * @param GetRoverClusterCertificateRequest
   * @return GetRoverClusterCertificateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverClusterCertificate.ts.html |here} to see how to use GetRoverClusterCertificate API.
   */
  public async getRoverClusterCertificate(
    getRoverClusterCertificateRequest: requests.GetRoverClusterCertificateRequest
  ): Promise<responses.GetRoverClusterCertificateResponse> {
    if (this.logger)
      this.logger.debug("Calling operation RoverClusterClient#getRoverClusterCertificate.");
    const pathParams = {
      "{roverClusterId}": getRoverClusterCertificateRequest.roverClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRoverClusterCertificateRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRoverClusterCertificateRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverClusters/{roverClusterId}/certificate",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRoverClusterCertificateResponse>{},
        body: await response.json(),
        bodyKey: "roverClusterCertificate",
        bodyModel: model.RoverClusterCertificate,
        type: "model.RoverClusterCertificate",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of RoverClusters.
   *
   * @param ListRoverClustersRequest
   * @return ListRoverClustersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListRoverClusters.ts.html |here} to see how to use ListRoverClusters API.
   */
  public async listRoverClusters(
    listRoverClustersRequest: requests.ListRoverClustersRequest
  ): Promise<responses.ListRoverClustersResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverClusterClient#listRoverClusters.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRoverClustersRequest.compartmentId,
      "displayName": listRoverClustersRequest.displayName,
      "limit": listRoverClustersRequest.limit,
      "page": listRoverClustersRequest.page,
      "lifecycleState": listRoverClustersRequest.lifecycleState,
      "sortOrder": listRoverClustersRequest.sortOrder,
      "sortBy": listRoverClustersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRoverClustersRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listRoverClustersRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverClusters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRoverClustersResponse>{},
        body: await response.json(),
        bodyKey: "roverClusterCollection",
        bodyModel: model.RoverClusterCollection,
        type: "model.RoverClusterCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the RoverCluster
   * @param UpdateRoverClusterRequest
   * @return UpdateRoverClusterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/UpdateRoverCluster.ts.html |here} to see how to use UpdateRoverCluster API.
   */
  public async updateRoverCluster(
    updateRoverClusterRequest: requests.UpdateRoverClusterRequest
  ): Promise<responses.UpdateRoverClusterResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverClusterClient#updateRoverCluster.");
    const pathParams = {
      "{roverClusterId}": updateRoverClusterRequest.roverClusterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRoverClusterRequest.ifMatch,
      "opc-request-id": updateRoverClusterRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateRoverClusterRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverClusters/{roverClusterId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRoverClusterRequest.updateRoverClusterDetails,
        "UpdateRoverClusterDetails",
        model.UpdateRoverClusterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRoverClusterResponse>{},
        body: await response.json(),
        bodyKey: "roverCluster",
        bodyModel: model.RoverCluster,
        type: "model.RoverCluster",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum RoverEntitlementApiKeys {}

export class RoverEntitlementClient {
  protected static serviceEndpointTemplate = "https://rover.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": RoverEntitlementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20201210";
    if (this.logger) this.logger.info(`RoverEntitlementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      RoverEntitlementClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      RoverEntitlementClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new RoverEntitlementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): RoverEntitlementWaiter {
    this._waiters = new RoverEntitlementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): RoverEntitlementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Moves an entitlement into a different compartment.
   * @param ChangeRoverEntitlementCompartmentRequest
   * @return ChangeRoverEntitlementCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ChangeRoverEntitlementCompartment.ts.html |here} to see how to use ChangeRoverEntitlementCompartment API.
   */
  public async changeRoverEntitlementCompartment(
    changeRoverEntitlementCompartmentRequest: requests.ChangeRoverEntitlementCompartmentRequest
  ): Promise<responses.ChangeRoverEntitlementCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation RoverEntitlementClient#changeRoverEntitlementCompartment."
      );
    const pathParams = {
      "{roverEntitlementId}": changeRoverEntitlementCompartmentRequest.roverEntitlementId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeRoverEntitlementCompartmentRequest.ifMatch,
      "opc-request-id": changeRoverEntitlementCompartmentRequest.opcRequestId,
      "opc-retry-token": changeRoverEntitlementCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeRoverEntitlementCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverEntitlements/{roverEntitlementId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeRoverEntitlementCompartmentRequest.changeRoverEntitlementCompartmentDetails,
        "ChangeRoverEntitlementCompartmentDetails",
        model.ChangeRoverEntitlementCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeRoverEntitlementCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create the Entitlement to use a Rover Device. It requires some offline process of review and signatures before request is granted.
   * @param CreateRoverEntitlementRequest
   * @return CreateRoverEntitlementResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/CreateRoverEntitlement.ts.html |here} to see how to use CreateRoverEntitlement API.
   */
  public async createRoverEntitlement(
    createRoverEntitlementRequest: requests.CreateRoverEntitlementRequest
  ): Promise<responses.CreateRoverEntitlementResponse> {
    if (this.logger)
      this.logger.debug("Calling operation RoverEntitlementClient#createRoverEntitlement.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createRoverEntitlementRequest.opcRetryToken,
      "opc-request-id": createRoverEntitlementRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createRoverEntitlementRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverEntitlements",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRoverEntitlementRequest.createRoverEntitlementDetails,
        "CreateRoverEntitlementDetails",
        model.CreateRoverEntitlementDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRoverEntitlementResponse>{},
        body: await response.json(),
        bodyKey: "roverEntitlement",
        bodyModel: model.RoverEntitlement,
        type: "model.RoverEntitlement",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a rover entitlement
   * @param DeleteRoverEntitlementRequest
   * @return DeleteRoverEntitlementResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/DeleteRoverEntitlement.ts.html |here} to see how to use DeleteRoverEntitlement API.
   */
  public async deleteRoverEntitlement(
    deleteRoverEntitlementRequest: requests.DeleteRoverEntitlementRequest
  ): Promise<responses.DeleteRoverEntitlementResponse> {
    if (this.logger)
      this.logger.debug("Calling operation RoverEntitlementClient#deleteRoverEntitlement.");
    const pathParams = {
      "{roverEntitlementId}": deleteRoverEntitlementRequest.roverEntitlementId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": deleteRoverEntitlementRequest.opcRetryToken,
      "opc-request-id": deleteRoverEntitlementRequest.opcRequestId,
      "if-match": deleteRoverEntitlementRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteRoverEntitlementRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverEntitlements/{roverEntitlementId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRoverEntitlementResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Describes the Rover Device Entitlement in detail
   * @param GetRoverEntitlementRequest
   * @return GetRoverEntitlementResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverEntitlement.ts.html |here} to see how to use GetRoverEntitlement API.
   */
  public async getRoverEntitlement(
    getRoverEntitlementRequest: requests.GetRoverEntitlementRequest
  ): Promise<responses.GetRoverEntitlementResponse> {
    if (this.logger)
      this.logger.debug("Calling operation RoverEntitlementClient#getRoverEntitlement.");
    const pathParams = {
      "{roverEntitlementId}": getRoverEntitlementRequest.roverEntitlementId
    };

    const queryParams = {
      "compartmentId": getRoverEntitlementRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": getRoverEntitlementRequest.opcRetryToken,
      "opc-request-id": getRoverEntitlementRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRoverEntitlementRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverEntitlements/{roverEntitlementId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRoverEntitlementResponse>{},
        body: await response.json(),
        bodyKey: "roverEntitlement",
        bodyModel: model.RoverEntitlement,
        type: "model.RoverEntitlement",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of RoverEntitlements.
   * @param ListRoverEntitlementsRequest
   * @return ListRoverEntitlementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListRoverEntitlements.ts.html |here} to see how to use ListRoverEntitlements API.
   */
  public async listRoverEntitlements(
    listRoverEntitlementsRequest: requests.ListRoverEntitlementsRequest
  ): Promise<responses.ListRoverEntitlementsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation RoverEntitlementClient#listRoverEntitlements.");
    const pathParams = {};

    const queryParams = {
      "id": listRoverEntitlementsRequest.id,
      "compartmentId": listRoverEntitlementsRequest.compartmentId,
      "displayName": listRoverEntitlementsRequest.displayName,
      "lifecycleState": listRoverEntitlementsRequest.lifecycleState,
      "limit": listRoverEntitlementsRequest.limit,
      "page": listRoverEntitlementsRequest.page,
      "sortOrder": listRoverEntitlementsRequest.sortOrder,
      "sortBy": listRoverEntitlementsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRoverEntitlementsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listRoverEntitlementsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverEntitlements",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRoverEntitlementsResponse>{},
        body: await response.json(),
        bodyKey: "roverEntitlementCollection",
        bodyModel: model.RoverEntitlementCollection,
        type: "model.RoverEntitlementCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the RoverEntitlement
   * @param UpdateRoverEntitlementRequest
   * @return UpdateRoverEntitlementResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/UpdateRoverEntitlement.ts.html |here} to see how to use UpdateRoverEntitlement API.
   */
  public async updateRoverEntitlement(
    updateRoverEntitlementRequest: requests.UpdateRoverEntitlementRequest
  ): Promise<responses.UpdateRoverEntitlementResponse> {
    if (this.logger)
      this.logger.debug("Calling operation RoverEntitlementClient#updateRoverEntitlement.");
    const pathParams = {
      "{roverEntitlementId}": updateRoverEntitlementRequest.roverEntitlementId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRoverEntitlementRequest.ifMatch,
      "opc-request-id": updateRoverEntitlementRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateRoverEntitlementRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverEntitlements/{roverEntitlementId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRoverEntitlementRequest.updateRoverEntitlementDetails,
        "UpdateRoverEntitlementDetails",
        model.UpdateRoverEntitlementDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRoverEntitlementResponse>{},
        body: await response.json(),
        bodyKey: "roverEntitlement",
        bodyModel: model.RoverEntitlement,
        type: "model.RoverEntitlement",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum RoverNodeApiKeys {}

export class RoverNodeClient {
  protected static serviceEndpointTemplate = "https://rover.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": RoverNodeWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20201210";
    if (this.logger) this.logger.info(`RoverNodeClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      RoverNodeClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      RoverNodeClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new RoverNodeWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): RoverNodeWaiter {
    this._waiters = new RoverNodeWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): RoverNodeWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Moves a rover node into a different compartment.
   * @param ChangeRoverNodeCompartmentRequest
   * @return ChangeRoverNodeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ChangeRoverNodeCompartment.ts.html |here} to see how to use ChangeRoverNodeCompartment API.
   */
  public async changeRoverNodeCompartment(
    changeRoverNodeCompartmentRequest: requests.ChangeRoverNodeCompartmentRequest
  ): Promise<responses.ChangeRoverNodeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation RoverNodeClient#changeRoverNodeCompartment.");
    const pathParams = {
      "{roverNodeId}": changeRoverNodeCompartmentRequest.roverNodeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeRoverNodeCompartmentRequest.ifMatch,
      "opc-request-id": changeRoverNodeCompartmentRequest.opcRequestId,
      "opc-retry-token": changeRoverNodeCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeRoverNodeCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverNodes/{roverNodeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeRoverNodeCompartmentRequest.changeRoverNodeCompartmentDetails,
        "ChangeRoverNodeCompartmentDetails",
        model.ChangeRoverNodeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeRoverNodeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new RoverNode.
   *
   * @param CreateRoverNodeRequest
   * @return CreateRoverNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/CreateRoverNode.ts.html |here} to see how to use CreateRoverNode API.
   */
  public async createRoverNode(
    createRoverNodeRequest: requests.CreateRoverNodeRequest
  ): Promise<responses.CreateRoverNodeResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverNodeClient#createRoverNode.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createRoverNodeRequest.opcRetryToken,
      "opc-request-id": createRoverNodeRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createRoverNodeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverNodes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRoverNodeRequest.createRoverNodeDetails,
        "CreateRoverNodeDetails",
        model.CreateRoverNodeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRoverNodeResponse>{},
        body: await response.json(),
        bodyKey: "roverNode",
        bodyModel: model.RoverNode,
        type: "model.RoverNode",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a RoverNode resource by identifier
   * @param DeleteRoverNodeRequest
   * @return DeleteRoverNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/DeleteRoverNode.ts.html |here} to see how to use DeleteRoverNode API.
   */
  public async deleteRoverNode(
    deleteRoverNodeRequest: requests.DeleteRoverNodeRequest
  ): Promise<responses.DeleteRoverNodeResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverNodeClient#deleteRoverNode.");
    const pathParams = {
      "{roverNodeId}": deleteRoverNodeRequest.roverNodeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRoverNodeRequest.ifMatch,
      "opc-request-id": deleteRoverNodeRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteRoverNodeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverNodes/{roverNodeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRoverNodeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a RoverNode by identifier.
   * @param GetRoverNodeRequest
   * @return GetRoverNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverNode.ts.html |here} to see how to use GetRoverNode API.
   */
  public async getRoverNode(
    getRoverNodeRequest: requests.GetRoverNodeRequest
  ): Promise<responses.GetRoverNodeResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverNodeClient#getRoverNode.");
    const pathParams = {
      "{roverNodeId}": getRoverNodeRequest.roverNodeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRoverNodeRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRoverNodeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverNodes/{roverNodeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRoverNodeResponse>{},
        body: await response.json(),
        bodyKey: "roverNode",
        bodyModel: model.RoverNode,
        type: "model.RoverNode",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the certificate for a rover node
   * @param GetRoverNodeCertificateRequest
   * @return GetRoverNodeCertificateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverNodeCertificate.ts.html |here} to see how to use GetRoverNodeCertificate API.
   */
  public async getRoverNodeCertificate(
    getRoverNodeCertificateRequest: requests.GetRoverNodeCertificateRequest
  ): Promise<responses.GetRoverNodeCertificateResponse> {
    if (this.logger)
      this.logger.debug("Calling operation RoverNodeClient#getRoverNodeCertificate.");
    const pathParams = {
      "{roverNodeId}": getRoverNodeCertificateRequest.roverNodeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRoverNodeCertificateRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRoverNodeCertificateRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverNodes/{roverNodeId}/certificate",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRoverNodeCertificateResponse>{},
        body: await response.json(),
        bodyKey: "roverNodeCertificate",
        bodyModel: model.RoverNodeCertificate,
        type: "model.RoverNodeCertificate",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the data encryption key for a rover node.
   * @param GetRoverNodeEncryptionKeyRequest
   * @return GetRoverNodeEncryptionKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverNodeEncryptionKey.ts.html |here} to see how to use GetRoverNodeEncryptionKey API.
   */
  public async getRoverNodeEncryptionKey(
    getRoverNodeEncryptionKeyRequest: requests.GetRoverNodeEncryptionKeyRequest
  ): Promise<responses.GetRoverNodeEncryptionKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation RoverNodeClient#getRoverNodeEncryptionKey.");
    const pathParams = {
      "{roverNodeId}": getRoverNodeEncryptionKeyRequest.roverNodeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRoverNodeEncryptionKeyRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRoverNodeEncryptionKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverNodes/{roverNodeId}/encryptionKey",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRoverNodeEncryptionKeyResponse>{},
        body: await response.json(),
        bodyKey: "roverNodeEncryptionKey",
        bodyModel: model.RoverNodeEncryptionKey,
        type: "model.RoverNodeEncryptionKey",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the resource principal token for a rover node
   * @param GetRoverNodeGetRptRequest
   * @return GetRoverNodeGetRptResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverNodeGetRpt.ts.html |here} to see how to use GetRoverNodeGetRpt API.
   */
  public async getRoverNodeGetRpt(
    getRoverNodeGetRptRequest: requests.GetRoverNodeGetRptRequest
  ): Promise<responses.GetRoverNodeGetRptResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverNodeClient#getRoverNodeGetRpt.");
    const pathParams = {
      "{roverNodeId}": getRoverNodeGetRptRequest.roverNodeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "jwt": getRoverNodeGetRptRequest.jwt,
      "opc-request-id": getRoverNodeGetRptRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRoverNodeGetRptRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverNodes/{roverNodeId}/getRpt",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRoverNodeGetRptResponse>{},
        body: await response.json(),
        bodyKey: "roverNodeGetRpt",
        bodyModel: model.RoverNodeGetRpt,
        type: "model.RoverNodeGetRpt",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of RoverNodes.
   *
   * @param ListRoverNodesRequest
   * @return ListRoverNodesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListRoverNodes.ts.html |here} to see how to use ListRoverNodes API.
   */
  public async listRoverNodes(
    listRoverNodesRequest: requests.ListRoverNodesRequest
  ): Promise<responses.ListRoverNodesResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverNodeClient#listRoverNodes.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRoverNodesRequest.compartmentId,
      "displayName": listRoverNodesRequest.displayName,
      "limit": listRoverNodesRequest.limit,
      "page": listRoverNodesRequest.page,
      "lifecycleState": listRoverNodesRequest.lifecycleState,
      "sortOrder": listRoverNodesRequest.sortOrder,
      "sortBy": listRoverNodesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRoverNodesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listRoverNodesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverNodes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRoverNodesResponse>{},
        body: await response.json(),
        bodyKey: "roverNodeCollection",
        bodyModel: model.RoverNodeCollection,
        type: "model.RoverNodeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the resource principal public key for a rover node
   * @param RoverNodeActionSetKeyRequest
   * @return RoverNodeActionSetKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RoverNodeActionSetKey.ts.html |here} to see how to use RoverNodeActionSetKey API.
   */
  public async roverNodeActionSetKey(
    roverNodeActionSetKeyRequest: requests.RoverNodeActionSetKeyRequest
  ): Promise<responses.RoverNodeActionSetKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverNodeClient#roverNodeActionSetKey.");
    const pathParams = {
      "{roverNodeId}": roverNodeActionSetKeyRequest.roverNodeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "jwt": roverNodeActionSetKeyRequest.jwt,
      "if-match": roverNodeActionSetKeyRequest.ifMatch,
      "opc-request-id": roverNodeActionSetKeyRequest.opcRequestId,
      "opc-retry-token": roverNodeActionSetKeyRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      roverNodeActionSetKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverNodes/{roverNodeId}/actions/setKey",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        roverNodeActionSetKeyRequest.roverNodeActionSetKeyDetails,
        "RoverNodeActionSetKeyDetails",
        model.RoverNodeActionSetKeyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RoverNodeActionSetKeyResponse>{},
        body: await response.json(),
        bodyKey: "roverNodeSetKey",
        bodyModel: model.RoverNodeSetKey,
        type: "model.RoverNodeSetKey",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the RoverNode
   * @param UpdateRoverNodeRequest
   * @return UpdateRoverNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/UpdateRoverNode.ts.html |here} to see how to use UpdateRoverNode API.
   */
  public async updateRoverNode(
    updateRoverNodeRequest: requests.UpdateRoverNodeRequest
  ): Promise<responses.UpdateRoverNodeResponse> {
    if (this.logger) this.logger.debug("Calling operation RoverNodeClient#updateRoverNode.");
    const pathParams = {
      "{roverNodeId}": updateRoverNodeRequest.roverNodeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRoverNodeRequest.ifMatch,
      "opc-request-id": updateRoverNodeRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateRoverNodeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/roverNodes/{roverNodeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRoverNodeRequest.updateRoverNodeDetails,
        "UpdateRoverNodeDetails",
        model.UpdateRoverNodeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRoverNodeResponse>{},
        body: await response.json(),
        bodyKey: "roverNode",
        bodyModel: model.RoverNode,
        type: "model.RoverNode",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

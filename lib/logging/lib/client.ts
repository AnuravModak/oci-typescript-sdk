/**
 * Logging Management API
 * Use the Logging Management API to create, read, list, update, and delete log groups, log objects, and agent configurations.
 * OpenAPI spec version: 20200531
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { LoggingManagementWaiter } from "./loggingmanagement-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum LoggingManagementApiKeys {}

export class LoggingManagementClient {
  protected static serviceEndpointTemplate = "https://logging.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": LoggingManagementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    if (!this._circuitBreaker && common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!)) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200531";
    if (this.logger) this.logger.info(`LoggingManagementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      LoggingManagementClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      LoggingManagementClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new LoggingManagementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): LoggingManagementWaiter {
    this._waiters = new LoggingManagementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): LoggingManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Moves a log group into a different compartment within the same tenancy.  When provided, the If-Match is checked against the resource ETag values.
   * For information about moving resources between compartments, see [Moving Resources Between Compartments](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeLogGroupCompartmentRequest
   * @return ChangeLogGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ChangeLogGroupCompartment.ts.html |here} to see how to use ChangeLogGroupCompartment API.
   */
  public async changeLogGroupCompartment(
    changeLogGroupCompartmentRequest: requests.ChangeLogGroupCompartmentRequest
  ): Promise<responses.ChangeLogGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#changeLogGroupCompartment.");
    const pathParams = {
      "{logGroupId}": changeLogGroupCompartmentRequest.logGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeLogGroupCompartmentRequest.ifMatch,
      "opc-request-id": changeLogGroupCompartmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeLogGroupCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups/{logGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLogGroupCompartmentRequest.changeLogGroupCompartmentDetails,
        "ChangeLogGroupCompartmentDetails",
        model.ChangeLogGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLogGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a log into a different log group within the same tenancy.  When provided, the If-Match is checked against the ETag values of the resource.
   *
   * @param ChangeLogLogGroupRequest
   * @return ChangeLogLogGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ChangeLogLogGroup.ts.html |here} to see how to use ChangeLogLogGroup API.
   */
  public async changeLogLogGroup(
    changeLogLogGroupRequest: requests.ChangeLogLogGroupRequest
  ): Promise<responses.ChangeLogLogGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#changeLogLogGroup.");
    const pathParams = {
      "{logGroupId}": changeLogLogGroupRequest.logGroupId,
      "{logId}": changeLogLogGroupRequest.logId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeLogLogGroupRequest.ifMatch,
      "opc-request-id": changeLogLogGroupRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeLogLogGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups/{logGroupId}/logs/{logId}/actions/changeLogGroup",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLogLogGroupRequest.changeLogLogGroupDetails,
        "ChangeLogLogGroupDetails",
        model.ChangeLogLogGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLogLogGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a saved search into a different compartment within the same tenancy. For information about moving
   * resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeLogSavedSearchCompartmentRequest
   * @return ChangeLogSavedSearchCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ChangeLogSavedSearchCompartment.ts.html |here} to see how to use ChangeLogSavedSearchCompartment API.
   */
  public async changeLogSavedSearchCompartment(
    changeLogSavedSearchCompartmentRequest: requests.ChangeLogSavedSearchCompartmentRequest
  ): Promise<responses.ChangeLogSavedSearchCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LoggingManagementClient#changeLogSavedSearchCompartment."
      );
    const pathParams = {
      "{logSavedSearchId}": changeLogSavedSearchCompartmentRequest.logSavedSearchId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeLogSavedSearchCompartmentRequest.opcRetryToken,
      "if-match": changeLogSavedSearchCompartmentRequest.ifMatch,
      "opc-request-id": changeLogSavedSearchCompartmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeLogSavedSearchCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logSavedSearches/{logSavedSearchId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLogSavedSearchCompartmentRequest.changeLogSavedSearchCompartmentDetails,
        "ChangeLogSavedSearchCompartmentDetails",
        model.ChangeLogSavedSearchCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLogSavedSearchCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the unified agent configuration into a different compartment within the same tenancy.  When provided, the If-Match is checked against the ETag values of the resource.
   * For information about moving resources between compartments, see [Moving Resources Between Compartments](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeUnifiedAgentConfigurationCompartmentRequest
   * @return ChangeUnifiedAgentConfigurationCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ChangeUnifiedAgentConfigurationCompartment.ts.html |here} to see how to use ChangeUnifiedAgentConfigurationCompartment API.
   */
  public async changeUnifiedAgentConfigurationCompartment(
    changeUnifiedAgentConfigurationCompartmentRequest: requests.ChangeUnifiedAgentConfigurationCompartmentRequest
  ): Promise<responses.ChangeUnifiedAgentConfigurationCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LoggingManagementClient#changeUnifiedAgentConfigurationCompartment."
      );
    const pathParams = {
      "{unifiedAgentConfigurationId}":
        changeUnifiedAgentConfigurationCompartmentRequest.unifiedAgentConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": changeUnifiedAgentConfigurationCompartmentRequest.opcRetryToken,
      "if-match": changeUnifiedAgentConfigurationCompartmentRequest.ifMatch,
      "opc-request-id": changeUnifiedAgentConfigurationCompartmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeUnifiedAgentConfigurationCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/unifiedAgentConfigurations/{unifiedAgentConfigurationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeUnifiedAgentConfigurationCompartmentRequest.changeUnifiedAgentConfigurationCompartmentDetails,
        "ChangeUnifiedAgentConfigurationCompartmentDetails",
        model.ChangeUnifiedAgentConfigurationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeUnifiedAgentConfigurationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a log within the specified log group. This call fails if a log group has already been created
   * with the same displayName or (service, resource, category) triplet.
   *
   * @param CreateLogRequest
   * @return CreateLogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/CreateLog.ts.html |here} to see how to use CreateLog API.
   */
  public async createLog(
    createLogRequest: requests.CreateLogRequest
  ): Promise<responses.CreateLogResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#createLog.");
    const pathParams = {
      "{logGroupId}": createLogRequest.logGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createLogRequest.opcRetryToken,
      "opc-request-id": createLogRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createLogRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups/{logGroupId}/logs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLogRequest.createLogDetails,
        "CreateLogDetails",
        model.CreateLogDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLogResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new log group with a unique display name. This call fails
   * if the log group is already created with the same displayName in the compartment.
   *
   * @param CreateLogGroupRequest
   * @return CreateLogGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/CreateLogGroup.ts.html |here} to see how to use CreateLogGroup API.
   */
  public async createLogGroup(
    createLogGroupRequest: requests.CreateLogGroupRequest
  ): Promise<responses.CreateLogGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#createLogGroup.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createLogGroupRequest.opcRetryToken,
      "opc-request-id": createLogGroupRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createLogGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLogGroupRequest.createLogGroupDetails,
        "CreateLogGroupDetails",
        model.CreateLogGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLogGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new LogSavedSearch.
   *
   * @param CreateLogSavedSearchRequest
   * @return CreateLogSavedSearchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/CreateLogSavedSearch.ts.html |here} to see how to use CreateLogSavedSearch API.
   */
  public async createLogSavedSearch(
    createLogSavedSearchRequest: requests.CreateLogSavedSearchRequest
  ): Promise<responses.CreateLogSavedSearchResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#createLogSavedSearch.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createLogSavedSearchRequest.opcRetryToken,
      "opc-request-id": createLogSavedSearchRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createLogSavedSearchRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logSavedSearches",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLogSavedSearchRequest.createLogSavedSearchDetails,
        "CreateLogSavedSearchDetails",
        model.CreateLogSavedSearchDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLogSavedSearchResponse>{},
        body: await response.json(),
        bodyKey: "logSavedSearch",
        bodyModel: model.LogSavedSearch,
        type: "model.LogSavedSearch",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create unified agent configuration registration.
   * @param CreateUnifiedAgentConfigurationRequest
   * @return CreateUnifiedAgentConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/CreateUnifiedAgentConfiguration.ts.html |here} to see how to use CreateUnifiedAgentConfiguration API.
   */
  public async createUnifiedAgentConfiguration(
    createUnifiedAgentConfigurationRequest: requests.CreateUnifiedAgentConfigurationRequest
  ): Promise<responses.CreateUnifiedAgentConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LoggingManagementClient#createUnifiedAgentConfiguration."
      );
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createUnifiedAgentConfigurationRequest.opcRequestId,
      "opc-retry-token": createUnifiedAgentConfigurationRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createUnifiedAgentConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/unifiedAgentConfigurations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createUnifiedAgentConfigurationRequest.createUnifiedAgentConfigurationDetails,
        "CreateUnifiedAgentConfigurationDetails",
        model.CreateUnifiedAgentConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateUnifiedAgentConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the log object in a log group.
   * @param DeleteLogRequest
   * @return DeleteLogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/DeleteLog.ts.html |here} to see how to use DeleteLog API.
   */
  public async deleteLog(
    deleteLogRequest: requests.DeleteLogRequest
  ): Promise<responses.DeleteLogResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#deleteLog.");
    const pathParams = {
      "{logGroupId}": deleteLogRequest.logGroupId,
      "{logId}": deleteLogRequest.logId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteLogRequest.ifMatch,
      "opc-request-id": deleteLogRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteLogRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups/{logGroupId}/logs/{logId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLogResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified log group.
   * @param DeleteLogGroupRequest
   * @return DeleteLogGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/DeleteLogGroup.ts.html |here} to see how to use DeleteLogGroup API.
   */
  public async deleteLogGroup(
    deleteLogGroupRequest: requests.DeleteLogGroupRequest
  ): Promise<responses.DeleteLogGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#deleteLogGroup.");
    const pathParams = {
      "{logGroupId}": deleteLogGroupRequest.logGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteLogGroupRequest.ifMatch,
      "opc-request-id": deleteLogGroupRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteLogGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups/{logGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLogGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified log saved search.
   * @param DeleteLogSavedSearchRequest
   * @return DeleteLogSavedSearchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/DeleteLogSavedSearch.ts.html |here} to see how to use DeleteLogSavedSearch API.
   */
  public async deleteLogSavedSearch(
    deleteLogSavedSearchRequest: requests.DeleteLogSavedSearchRequest
  ): Promise<responses.DeleteLogSavedSearchResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#deleteLogSavedSearch.");
    const pathParams = {
      "{logSavedSearchId}": deleteLogSavedSearchRequest.logSavedSearchId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteLogSavedSearchRequest.ifMatch,
      "opc-request-id": deleteLogSavedSearchRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteLogSavedSearchRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logSavedSearches/{logSavedSearchId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLogSavedSearchResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete unified agent configuration.
   * @param DeleteUnifiedAgentConfigurationRequest
   * @return DeleteUnifiedAgentConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/DeleteUnifiedAgentConfiguration.ts.html |here} to see how to use DeleteUnifiedAgentConfiguration API.
   */
  public async deleteUnifiedAgentConfiguration(
    deleteUnifiedAgentConfigurationRequest: requests.DeleteUnifiedAgentConfigurationRequest
  ): Promise<responses.DeleteUnifiedAgentConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LoggingManagementClient#deleteUnifiedAgentConfiguration."
      );
    const pathParams = {
      "{unifiedAgentConfigurationId}":
        deleteUnifiedAgentConfigurationRequest.unifiedAgentConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteUnifiedAgentConfigurationRequest.opcRequestId,
      "if-match": deleteUnifiedAgentConfigurationRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteUnifiedAgentConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/unifiedAgentConfigurations/{unifiedAgentConfigurationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUnifiedAgentConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel a work request that has not started yet.
   *
   * @param DeleteWorkRequestRequest
   * @return DeleteWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/DeleteWorkRequest.ts.html |here} to see how to use DeleteWorkRequest API.
   */
  public async deleteWorkRequest(
    deleteWorkRequestRequest: requests.DeleteWorkRequestRequest
  ): Promise<responses.DeleteWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#deleteWorkRequest.");
    const pathParams = {
      "{workRequestId}": deleteWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteWorkRequestRequest.ifMatch,
      "opc-request-id": deleteWorkRequestRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteWorkRequestRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the log object configuration for the log object OCID.
   *
   * @param GetLogRequest
   * @return GetLogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/GetLog.ts.html |here} to see how to use GetLog API.
   */
  public async getLog(getLogRequest: requests.GetLogRequest): Promise<responses.GetLogResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#getLog.");
    const pathParams = {
      "{logGroupId}": getLogRequest.logGroupId,
      "{logId}": getLogRequest.logId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getLogRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups/{logGroupId}/logs/{logId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogResponse>{},
        body: await response.json(),
        bodyKey: "log",
        bodyModel: model.Log,
        type: "model.Log",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the specified log group's information.
   * @param GetLogGroupRequest
   * @return GetLogGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/GetLogGroup.ts.html |here} to see how to use GetLogGroup API.
   */
  public async getLogGroup(
    getLogGroupRequest: requests.GetLogGroupRequest
  ): Promise<responses.GetLogGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#getLogGroup.");
    const pathParams = {
      "{logGroupId}": getLogGroupRequest.logGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogGroupRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getLogGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups/{logGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogGroupResponse>{},
        body: await response.json(),
        bodyKey: "logGroup",
        bodyModel: model.LogGroup,
        type: "model.LogGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a LogIncludedSearch.
   * @param GetLogIncludedSearchRequest
   * @return GetLogIncludedSearchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/GetLogIncludedSearch.ts.html |here} to see how to use GetLogIncludedSearch API.
   */
  public async getLogIncludedSearch(
    getLogIncludedSearchRequest: requests.GetLogIncludedSearchRequest
  ): Promise<responses.GetLogIncludedSearchResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#getLogIncludedSearch.");
    const pathParams = {
      "{logIncludedSearchId}": getLogIncludedSearchRequest.logIncludedSearchId
    };

    const queryParams = {
      "compartmentId": getLogIncludedSearchRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogIncludedSearchRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getLogIncludedSearchRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logIncludedSearch/{logIncludedSearchId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogIncludedSearchResponse>{},
        body: await response.json(),
        bodyKey: "logIncludedSearch",
        bodyModel: model.LogIncludedSearch,
        type: "model.LogIncludedSearch",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a log saved search.
   * @param GetLogSavedSearchRequest
   * @return GetLogSavedSearchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/GetLogSavedSearch.ts.html |here} to see how to use GetLogSavedSearch API.
   */
  public async getLogSavedSearch(
    getLogSavedSearchRequest: requests.GetLogSavedSearchRequest
  ): Promise<responses.GetLogSavedSearchResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#getLogSavedSearch.");
    const pathParams = {
      "{logSavedSearchId}": getLogSavedSearchRequest.logSavedSearchId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogSavedSearchRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getLogSavedSearchRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logSavedSearches/{logSavedSearchId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogSavedSearchResponse>{},
        body: await response.json(),
        bodyKey: "logSavedSearch",
        bodyModel: model.LogSavedSearch,
        type: "model.LogSavedSearch",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the unified agent configuration for an ID.
   * @param GetUnifiedAgentConfigurationRequest
   * @return GetUnifiedAgentConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/GetUnifiedAgentConfiguration.ts.html |here} to see how to use GetUnifiedAgentConfiguration API.
   */
  public async getUnifiedAgentConfiguration(
    getUnifiedAgentConfigurationRequest: requests.GetUnifiedAgentConfigurationRequest
  ): Promise<responses.GetUnifiedAgentConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#getUnifiedAgentConfiguration.");
    const pathParams = {
      "{unifiedAgentConfigurationId}":
        getUnifiedAgentConfigurationRequest.unifiedAgentConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUnifiedAgentConfigurationRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getUnifiedAgentConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/unifiedAgentConfigurations/{unifiedAgentConfigurationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUnifiedAgentConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "unifiedAgentConfiguration",
        bodyModel: model.UnifiedAgentConfiguration,
        type: "model.UnifiedAgentConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the details of the work request with the given ID.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#getWorkRequest.");
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getWorkRequestRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all log groups for the specified compartment or tenancy.
   * @param ListLogGroupsRequest
   * @return ListLogGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ListLogGroups.ts.html |here} to see how to use ListLogGroups API.
   */
  public async listLogGroups(
    listLogGroupsRequest: requests.ListLogGroupsRequest
  ): Promise<responses.ListLogGroupsResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#listLogGroups.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listLogGroupsRequest.compartmentId,
      "isCompartmentIdInSubtree": listLogGroupsRequest.isCompartmentIdInSubtree,
      "displayName": listLogGroupsRequest.displayName,
      "page": listLogGroupsRequest.page,
      "limit": listLogGroupsRequest.limit,
      "sortBy": listLogGroupsRequest.sortBy,
      "sortOrder": listLogGroupsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLogGroupsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listLogGroupsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLogGroupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.LogGroupSummary,
        type: "Array<model.LogGroupSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-previous-page"),
            key: "opcPreviousPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.LogGroupSummary objects
   * contained in responses from the listLogGroups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLogGroups(
    request: requests.ListLogGroupsRequest
  ): AsyncIterableIterator<model.LogGroupSummary> {
    return paginateRecords(request, req => this.listLogGroups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listLogGroups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLogGroupsResponses(
    request: requests.ListLogGroupsRequest
  ): AsyncIterableIterator<responses.ListLogGroupsResponse> {
    return paginateResponses(request, req => this.listLogGroups(req));
  }

  /**
   * Lists Logging Included Searches for this compartment.
   *
   * @param ListLogIncludedSearchesRequest
   * @return ListLogIncludedSearchesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ListLogIncludedSearches.ts.html |here} to see how to use ListLogIncludedSearches API.
   */
  public async listLogIncludedSearches(
    listLogIncludedSearchesRequest: requests.ListLogIncludedSearchesRequest
  ): Promise<responses.ListLogIncludedSearchesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#listLogIncludedSearches.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listLogIncludedSearchesRequest.compartmentId,
      "logIncludedSearchId": listLogIncludedSearchesRequest.logIncludedSearchId,
      "displayName": listLogIncludedSearchesRequest.displayName,
      "page": listLogIncludedSearchesRequest.page,
      "limit": listLogIncludedSearchesRequest.limit,
      "sortBy": listLogIncludedSearchesRequest.sortBy,
      "sortOrder": listLogIncludedSearchesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLogIncludedSearchesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listLogIncludedSearchesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logIncludedSearches",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLogIncludedSearchesResponse>{},
        body: await response.json(),
        bodyKey: "logIncludedSearchSummaryCollection",
        bodyModel: model.LogIncludedSearchSummaryCollection,
        type: "model.LogIncludedSearchSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-previous-page"),
            key: "opcPreviousPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists Logging Saved Searches for this compartment.
   *
   * @param ListLogSavedSearchesRequest
   * @return ListLogSavedSearchesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ListLogSavedSearches.ts.html |here} to see how to use ListLogSavedSearches API.
   */
  public async listLogSavedSearches(
    listLogSavedSearchesRequest: requests.ListLogSavedSearchesRequest
  ): Promise<responses.ListLogSavedSearchesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#listLogSavedSearches.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listLogSavedSearchesRequest.compartmentId,
      "logSavedSearchId": listLogSavedSearchesRequest.logSavedSearchId,
      "name": listLogSavedSearchesRequest.name,
      "page": listLogSavedSearchesRequest.page,
      "limit": listLogSavedSearchesRequest.limit,
      "sortBy": listLogSavedSearchesRequest.sortBy,
      "sortOrder": listLogSavedSearchesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLogSavedSearchesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listLogSavedSearchesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logSavedSearches",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLogSavedSearchesResponse>{},
        body: await response.json(),
        bodyKey: "logSavedSearchSummaryCollection",
        bodyModel: model.LogSavedSearchSummaryCollection,
        type: "model.LogSavedSearchSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-previous-page"),
            key: "opcPreviousPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the specified log group's log objects.
   * @param ListLogsRequest
   * @return ListLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ListLogs.ts.html |here} to see how to use ListLogs API.
   */
  public async listLogs(
    listLogsRequest: requests.ListLogsRequest
  ): Promise<responses.ListLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#listLogs.");
    const pathParams = {
      "{logGroupId}": listLogsRequest.logGroupId
    };

    const queryParams = {
      "logType": listLogsRequest.logType,
      "sourceService": listLogsRequest.sourceService,
      "sourceResource": listLogsRequest.sourceResource,
      "displayName": listLogsRequest.displayName,
      "lifecycleState": listLogsRequest.lifecycleState,
      "page": listLogsRequest.page,
      "limit": listLogsRequest.limit,
      "sortBy": listLogsRequest.sortBy,
      "sortOrder": listLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLogsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listLogsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups/{logGroupId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.LogSummary,
        type: "Array<model.LogSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-previous-page"),
            key: "opcPreviousPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.LogSummary objects
   * contained in responses from the listLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLogs(request: requests.ListLogsRequest): AsyncIterableIterator<model.LogSummary> {
    return paginateRecords(request, req => this.listLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLogsResponses(
    request: requests.ListLogsRequest
  ): AsyncIterableIterator<responses.ListLogsResponse> {
    return paginateResponses(request, req => this.listLogs(req));
  }

  /**
   * Lists all services that support logging.
   * @param ListServicesRequest
   * @return ListServicesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ListServices.ts.html |here} to see how to use ListServices API.
   */
  public async listServices(
    listServicesRequest: requests.ListServicesRequest
  ): Promise<responses.ListServicesResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#listServices.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listServicesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listServicesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/v2/registry/services",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServicesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ServiceSummary,
        type: "Array<model.ServiceSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-previous-page"),
            key: "opcPreviousPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all unified agent configurations in the specified compartment.
   * @param ListUnifiedAgentConfigurationsRequest
   * @return ListUnifiedAgentConfigurationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ListUnifiedAgentConfigurations.ts.html |here} to see how to use ListUnifiedAgentConfigurations API.
   */
  public async listUnifiedAgentConfigurations(
    listUnifiedAgentConfigurationsRequest: requests.ListUnifiedAgentConfigurationsRequest
  ): Promise<responses.ListUnifiedAgentConfigurationsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LoggingManagementClient#listUnifiedAgentConfigurations."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": listUnifiedAgentConfigurationsRequest.compartmentId,
      "logId": listUnifiedAgentConfigurationsRequest.logId,
      "isCompartmentIdInSubtree": listUnifiedAgentConfigurationsRequest.isCompartmentIdInSubtree,
      "groupId": listUnifiedAgentConfigurationsRequest.groupId,
      "displayName": listUnifiedAgentConfigurationsRequest.displayName,
      "lifecycleState": listUnifiedAgentConfigurationsRequest.lifecycleState,
      "limit": listUnifiedAgentConfigurationsRequest.limit,
      "page": listUnifiedAgentConfigurationsRequest.page,
      "sortBy": listUnifiedAgentConfigurationsRequest.sortBy,
      "sortOrder": listUnifiedAgentConfigurationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUnifiedAgentConfigurationsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listUnifiedAgentConfigurationsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/unifiedAgentConfigurations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUnifiedAgentConfigurationsResponse>{},
        body: await response.json(),
        bodyKey: "unifiedAgentConfigurationCollection",
        bodyModel: model.UnifiedAgentConfigurationCollection,
        type: "model.UnifiedAgentConfigurationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-previous-page"),
            key: "opcPreviousPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a list of errors for a given work request.
   *
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#listWorkRequestErrors.");
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestErrorsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Return a list of logs for a given work request.
   *
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#listWorkRequestLogs.");
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestLogsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLog,
        type: "Array<model.WorkRequestLog>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLog objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLog> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Lists the work requests in a compartment.
   *
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#listWorkRequests.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "status": listWorkRequestsRequest.status,
      "id": listWorkRequestsRequest.id,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestSummary,
        type: "Array<model.WorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-previous-page"),
            key: "opcPreviousPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Updates the existing log object with the associated configuration. This call
   *       fails if the log object does not exist.
   *
   * @param UpdateLogRequest
   * @return UpdateLogResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/UpdateLog.ts.html |here} to see how to use UpdateLog API.
   */
  public async updateLog(
    updateLogRequest: requests.UpdateLogRequest
  ): Promise<responses.UpdateLogResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#updateLog.");
    const pathParams = {
      "{logGroupId}": updateLogRequest.logGroupId,
      "{logId}": updateLogRequest.logId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLogRequest.ifMatch,
      "opc-request-id": updateLogRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateLogRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups/{logGroupId}/logs/{logId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLogRequest.updateLogDetails,
        "UpdateLogDetails",
        model.UpdateLogDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLogResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the existing log group with the associated configuration. This call
   *       fails if the log group does not exist.
   *
   * @param UpdateLogGroupRequest
   * @return UpdateLogGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/UpdateLogGroup.ts.html |here} to see how to use UpdateLogGroup API.
   */
  public async updateLogGroup(
    updateLogGroupRequest: requests.UpdateLogGroupRequest
  ): Promise<responses.UpdateLogGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation LoggingManagementClient#updateLogGroup.");
    const pathParams = {
      "{logGroupId}": updateLogGroupRequest.logGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLogGroupRequest.ifMatch,
      "opc-request-id": updateLogGroupRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateLogGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logGroups/{logGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLogGroupRequest.updateLogGroupDetails,
        "UpdateLogGroupDetails",
        model.UpdateLogGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLogGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates an  existing log saved search.
   *
   * @param UpdateLogSavedSearchRequest
   * @return UpdateLogSavedSearchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/UpdateLogSavedSearch.ts.html |here} to see how to use UpdateLogSavedSearch API.
   */
  public async updateLogSavedSearch(
    updateLogSavedSearchRequest: requests.UpdateLogSavedSearchRequest
  ): Promise<responses.UpdateLogSavedSearchResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LoggingManagementClient#updateLogSavedSearch.");
    const pathParams = {
      "{logSavedSearchId}": updateLogSavedSearchRequest.logSavedSearchId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLogSavedSearchRequest.ifMatch,
      "opc-request-id": updateLogSavedSearchRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateLogSavedSearchRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/logSavedSearches/{logSavedSearchId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLogSavedSearchRequest.updateLogSavedSearchDetails,
        "UpdateLogSavedSearchDetails",
        model.UpdateLogSavedSearchDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLogSavedSearchResponse>{},
        body: await response.json(),
        bodyKey: "logSavedSearch",
        bodyModel: model.LogSavedSearch,
        type: "model.LogSavedSearch",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update an existing unified agent configuration. This call
   *       fails if the log group does not exist.
   *
   * @param UpdateUnifiedAgentConfigurationRequest
   * @return UpdateUnifiedAgentConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/logging/UpdateUnifiedAgentConfiguration.ts.html |here} to see how to use UpdateUnifiedAgentConfiguration API.
   */
  public async updateUnifiedAgentConfiguration(
    updateUnifiedAgentConfigurationRequest: requests.UpdateUnifiedAgentConfigurationRequest
  ): Promise<responses.UpdateUnifiedAgentConfigurationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LoggingManagementClient#updateUnifiedAgentConfiguration."
      );
    const pathParams = {
      "{unifiedAgentConfigurationId}":
        updateUnifiedAgentConfigurationRequest.unifiedAgentConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateUnifiedAgentConfigurationRequest.ifMatch,
      "opc-request-id": updateUnifiedAgentConfigurationRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateUnifiedAgentConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/unifiedAgentConfigurations/{unifiedAgentConfigurationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateUnifiedAgentConfigurationRequest.updateUnifiedAgentConfigurationDetails,
        "UpdateUnifiedAgentConfigurationDetails",
        model.UpdateUnifiedAgentConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateUnifiedAgentConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

/**
 * Core Services API
 * API covering the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services. Use this API
to manage resources such as virtual cloud networks (VCNs), compute instances, and
block storage volumes.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { WorkRequestClient } from "oci-workrequests";
import { BlockstorageWaiter } from "./blockstorage-waiter";
import { ComputeWaiter } from "./compute-waiter";
import { ComputeManagementWaiter } from "./computemanagement-waiter";
import { VirtualNetworkWaiter } from "./virtualnetwork-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum BlockstorageApiKeys {}

export class BlockstorageClient {
  protected static serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": BlockstorageWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20160918";
    if (this.logger) this.logger.info(`BlockstorageClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      BlockstorageClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      BlockstorageClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new BlockstorageWaiter for resources for this service.
   *
   * @param workRequestClient The work request service client used to query for work request status
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(
    workRequestClient: WorkRequestClient,
    config?: common.WaiterConfiguration
  ): BlockstorageWaiter {
    this._waiters = new BlockstorageWaiter(this, workRequestClient, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): BlockstorageWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Moves a boot volume backup into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeBootVolumeBackupCompartmentRequest
   * @return ChangeBootVolumeBackupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeBootVolumeBackupCompartment.ts.html |here} to see how to use ChangeBootVolumeBackupCompartment API.
   */
  public async changeBootVolumeBackupCompartment(
    changeBootVolumeBackupCompartmentRequest: requests.ChangeBootVolumeBackupCompartmentRequest
  ): Promise<responses.ChangeBootVolumeBackupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeBootVolumeBackupCompartment.");
    const pathParams = {
      "{bootVolumeBackupId}": changeBootVolumeBackupCompartmentRequest.bootVolumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeBootVolumeBackupCompartmentRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups/{bootVolumeBackupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeBootVolumeBackupCompartmentRequest.changeBootVolumeBackupCompartmentDetails,
        "ChangeBootVolumeBackupCompartmentDetails",
        models.ChangeBootVolumeBackupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeBootVolumeBackupCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeBootVolumeBackupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a boot volume into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeBootVolumeCompartmentRequest
   * @return ChangeBootVolumeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeBootVolumeCompartment.ts.html |here} to see how to use ChangeBootVolumeCompartment API.
   */
  public async changeBootVolumeCompartment(
    changeBootVolumeCompartmentRequest: requests.ChangeBootVolumeCompartmentRequest
  ): Promise<responses.ChangeBootVolumeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeBootVolumeCompartment.");
    const pathParams = {
      "{bootVolumeId}": changeBootVolumeCompartmentRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeBootVolumeCompartmentRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeBootVolumeCompartmentRequest.changeBootVolumeCompartmentDetails,
        "ChangeBootVolumeCompartmentDetails",
        models.ChangeBootVolumeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeBootVolumeCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeBootVolumeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a volume backup into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeVolumeBackupCompartmentRequest
   * @return ChangeVolumeBackupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVolumeBackupCompartment.ts.html |here} to see how to use ChangeVolumeBackupCompartment API.
   */
  public async changeVolumeBackupCompartment(
    changeVolumeBackupCompartmentRequest: requests.ChangeVolumeBackupCompartmentRequest
  ): Promise<responses.ChangeVolumeBackupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeVolumeBackupCompartment.");
    const pathParams = {
      "{volumeBackupId}": changeVolumeBackupCompartmentRequest.volumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVolumeBackupCompartmentRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups/{volumeBackupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVolumeBackupCompartmentRequest.changeVolumeBackupCompartmentDetails,
        "ChangeVolumeBackupCompartmentDetails",
        models.ChangeVolumeBackupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeVolumeBackupCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVolumeBackupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a volume into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeVolumeCompartmentRequest
   * @return ChangeVolumeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVolumeCompartment.ts.html |here} to see how to use ChangeVolumeCompartment API.
   */
  public async changeVolumeCompartment(
    changeVolumeCompartmentRequest: requests.ChangeVolumeCompartmentRequest
  ): Promise<responses.ChangeVolumeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeVolumeCompartment.");
    const pathParams = {
      "{volumeId}": changeVolumeCompartmentRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVolumeCompartmentRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVolumeCompartmentRequest.changeVolumeCompartmentDetails,
        "ChangeVolumeCompartmentDetails",
        models.ChangeVolumeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeVolumeCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVolumeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a volume group backup into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeVolumeGroupBackupCompartmentRequest
   * @return ChangeVolumeGroupBackupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVolumeGroupBackupCompartment.ts.html |here} to see how to use ChangeVolumeGroupBackupCompartment API.
   */
  public async changeVolumeGroupBackupCompartment(
    changeVolumeGroupBackupCompartmentRequest: requests.ChangeVolumeGroupBackupCompartmentRequest
  ): Promise<responses.ChangeVolumeGroupBackupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeVolumeGroupBackupCompartment.");
    const pathParams = {
      "{volumeGroupBackupId}": changeVolumeGroupBackupCompartmentRequest.volumeGroupBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVolumeGroupBackupCompartmentRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups/{volumeGroupBackupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVolumeGroupBackupCompartmentRequest.changeVolumeGroupBackupCompartmentDetails,
        "ChangeVolumeGroupBackupCompartmentDetails",
        models.ChangeVolumeGroupBackupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeVolumeGroupBackupCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVolumeGroupBackupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a volume group into a different compartment within the same tenancy.
   * For information about moving resources between compartments,
   * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeVolumeGroupCompartmentRequest
   * @return ChangeVolumeGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVolumeGroupCompartment.ts.html |here} to see how to use ChangeVolumeGroupCompartment API.
   */
  public async changeVolumeGroupCompartment(
    changeVolumeGroupCompartmentRequest: requests.ChangeVolumeGroupCompartmentRequest
  ): Promise<responses.ChangeVolumeGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#changeVolumeGroupCompartment.");
    const pathParams = {
      "{volumeGroupId}": changeVolumeGroupCompartmentRequest.volumeGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVolumeGroupCompartmentRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups/{volumeGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVolumeGroupCompartmentRequest.changeVolumeGroupCompartmentDetails,
        "ChangeVolumeGroupCompartmentDetails",
        models.ChangeVolumeGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeVolumeGroupCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVolumeGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a boot volume backup copy in specified region. For general information about volume backups,
   * see [Overview of Boot Volume Backups](https://docs.cloud.oracle.com/Content/Block/Concepts/bootvolumebackups.htm)
   *
   * @param CopyBootVolumeBackupRequest
   * @return CopyBootVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CopyBootVolumeBackup.ts.html |here} to see how to use CopyBootVolumeBackup API.
   */
  public async copyBootVolumeBackup(
    copyBootVolumeBackupRequest: requests.CopyBootVolumeBackupRequest
  ): Promise<responses.CopyBootVolumeBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#copyBootVolumeBackup.");
    const pathParams = {
      "{bootVolumeBackupId}": copyBootVolumeBackupRequest.bootVolumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": copyBootVolumeBackupRequest.opcRetryToken,
      "opc-request-id": copyBootVolumeBackupRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups/{bootVolumeBackupId}/actions/copy",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        copyBootVolumeBackupRequest.copyBootVolumeBackupDetails,
        "CopyBootVolumeBackupDetails",
        models.CopyBootVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      copyBootVolumeBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CopyBootVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeBackup",
        bodyModel: "model.BootVolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a volume backup copy in specified region. For general information about volume backups,
   * see [Overview of Block Volume Service Backups](https://docs.cloud.oracle.com/Content/Block/Concepts/blockvolumebackups.htm)
   *
   * @param CopyVolumeBackupRequest
   * @return CopyVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CopyVolumeBackup.ts.html |here} to see how to use CopyVolumeBackup API.
   */
  public async copyVolumeBackup(
    copyVolumeBackupRequest: requests.CopyVolumeBackupRequest
  ): Promise<responses.CopyVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#copyVolumeBackup.");
    const pathParams = {
      "{volumeBackupId}": copyVolumeBackupRequest.volumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": copyVolumeBackupRequest.opcRetryToken,
      "opc-request-id": copyVolumeBackupRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups/{volumeBackupId}/actions/copy",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        copyVolumeBackupRequest.copyVolumeBackupDetails,
        "CopyVolumeBackupDetails",
        models.CopyVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      copyVolumeBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CopyVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackup",
        bodyModel: "model.VolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new boot volume in the specified compartment from an existing boot volume or a boot volume backup.
   * For general information about boot volumes, see [Boot Volumes](https://docs.cloud.oracle.com/Content/Block/Concepts/bootvolumes.htm).
   * You may optionally specify a *display name* for the volume, which is simply a friendly name or
   * description. It does not have to be unique, and you can change it. Avoid entering confidential information.
   *
   * @param CreateBootVolumeRequest
   * @return CreateBootVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateBootVolume.ts.html |here} to see how to use CreateBootVolume API.
   */
  public async createBootVolume(
    createBootVolumeRequest: requests.CreateBootVolumeRequest
  ): Promise<responses.CreateBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#createBootVolume.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createBootVolumeRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBootVolumeRequest.createBootVolumeDetails,
        "CreateBootVolumeDetails",
        models.CreateBootVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createBootVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBootVolumeResponse>{},
        body: await response.json(),
        bodyKey: "bootVolume",
        bodyModel: "model.BootVolume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new boot volume backup of the specified boot volume. For general information about boot volume backups,
* see [Overview of Boot Volume Backups](https://docs.cloud.oracle.com/Content/Block/Concepts/bootvolumebackups.htm)
* <p>
When the request is received, the backup object is in a REQUEST_RECEIVED state.
* When the data is imaged, it goes into a CREATING state.
* After the backup is fully uploaded to the cloud, it goes into an AVAILABLE state.
* 
     * @param CreateBootVolumeBackupRequest
     * @return CreateBootVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateBootVolumeBackup.ts.html |here} to see how to use CreateBootVolumeBackup API.
     */
  public async createBootVolumeBackup(
    createBootVolumeBackupRequest: requests.CreateBootVolumeBackupRequest
  ): Promise<responses.CreateBootVolumeBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#createBootVolumeBackup.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createBootVolumeBackupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBootVolumeBackupRequest.createBootVolumeBackupDetails,
        "CreateBootVolumeBackupDetails",
        models.CreateBootVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createBootVolumeBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBootVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeBackup",
        bodyModel: "model.BootVolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new volume in the specified compartment. Volumes can be created in sizes ranging from
* 50 GB (51200 MB) to 32 TB (33554432 MB), in 1 GB (1024 MB) increments. By default, volumes are 1 TB (1048576 MB).
* For general information about block volumes, see
* [Overview of Block Volume Service](https://docs.cloud.oracle.com/Content/Block/Concepts/overview.htm).
* <p>
A volume and instance can be in separate compartments but must be in the same availability domain.
* For information about access control and compartments, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm). For information about
* availability domains, see [Regions and Availability Domains](https://docs.cloud.oracle.com/Content/General/Concepts/regions.htm).
* To get a list of availability domains, use the `ListAvailabilityDomains` operation
* in the Identity and Access Management Service API.
* <p>
You may optionally specify a *display name* for the volume, which is simply a friendly name or
* description. It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * @param CreateVolumeRequest
     * @return CreateVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolume.ts.html |here} to see how to use CreateVolume API.
     */
  public async createVolume(
    createVolumeRequest: requests.CreateVolumeRequest
  ): Promise<responses.CreateVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#createVolume.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVolumeRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeRequest.createVolumeDetails,
        "CreateVolumeDetails",
        models.CreateVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeResponse>{},
        body: await response.json(),
        bodyKey: "volume",
        bodyModel: "model.Volume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new backup of the specified volume. For general information about volume backups,
* see [Overview of Block Volume Service Backups](https://docs.cloud.oracle.com/Content/Block/Concepts/blockvolumebackups.htm)
* <p>
When the request is received, the backup object is in a REQUEST_RECEIVED state.
* When the data is imaged, it goes into a CREATING state.
* After the backup is fully uploaded to the cloud, it goes into an AVAILABLE state.
* 
     * @param CreateVolumeBackupRequest
     * @return CreateVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolumeBackup.ts.html |here} to see how to use CreateVolumeBackup API.
     */
  public async createVolumeBackup(
    createVolumeBackupRequest: requests.CreateVolumeBackupRequest
  ): Promise<responses.CreateVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#createVolumeBackup.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVolumeBackupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeBackupRequest.createVolumeBackupDetails,
        "CreateVolumeBackupDetails",
        models.CreateVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createVolumeBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackup",
        bodyModel: "model.VolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new user defined backup policy.
* <p>
For more information about Oracle defined backup policies and user defined backup policies,
* see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm).
* 
     * @param CreateVolumeBackupPolicyRequest
     * @return CreateVolumeBackupPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolumeBackupPolicy.ts.html |here} to see how to use CreateVolumeBackupPolicy API.
     */
  public async createVolumeBackupPolicy(
    createVolumeBackupPolicyRequest: requests.CreateVolumeBackupPolicyRequest
  ): Promise<responses.CreateVolumeBackupPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#createVolumeBackupPolicy.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVolumeBackupPolicyRequest.opcRetryToken,
      "opc-request-id": createVolumeBackupPolicyRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeBackupPolicyRequest.createVolumeBackupPolicyDetails,
        "CreateVolumeBackupPolicyDetails",
        models.CreateVolumeBackupPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createVolumeBackupPolicyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeBackupPolicyResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackupPolicy",
        bodyModel: "model.VolumeBackupPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Assigns a volume backup policy to the specified volume. Note that a given volume can
   * only have one backup policy assigned to it. If this operation is used for a volume that already
   * has a different backup policy assigned, the prior backup policy will be silently unassigned.
   *
   * @param CreateVolumeBackupPolicyAssignmentRequest
   * @return CreateVolumeBackupPolicyAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolumeBackupPolicyAssignment.ts.html |here} to see how to use CreateVolumeBackupPolicyAssignment API.
   */
  public async createVolumeBackupPolicyAssignment(
    createVolumeBackupPolicyAssignmentRequest: requests.CreateVolumeBackupPolicyAssignmentRequest
  ): Promise<responses.CreateVolumeBackupPolicyAssignmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#createVolumeBackupPolicyAssignment.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicyAssignments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeBackupPolicyAssignmentRequest.createVolumeBackupPolicyAssignmentDetails,
        "CreateVolumeBackupPolicyAssignmentDetails",
        models.CreateVolumeBackupPolicyAssignmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createVolumeBackupPolicyAssignmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeBackupPolicyAssignmentResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackupPolicyAssignment",
        bodyModel: "model.VolumeBackupPolicyAssignment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new volume group in the specified compartment.
* A volume group is a collection of volumes and may be created from a list of volumes, cloning an existing
* volume group, or by restoring a volume group backup. A volume group can contain up to 64 volumes.
* You may optionally specify a *display name* for the volume group, which is simply a friendly name or
* description. It does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
For more information, see [Volume Groups](https://docs.cloud.oracle.com/Content/Block/Concepts/volumegroups.htm).
* 
     * @param CreateVolumeGroupRequest
     * @return CreateVolumeGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolumeGroup.ts.html |here} to see how to use CreateVolumeGroup API.
     */
  public async createVolumeGroup(
    createVolumeGroupRequest: requests.CreateVolumeGroupRequest
  ): Promise<responses.CreateVolumeGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#createVolumeGroup.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVolumeGroupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeGroupRequest.createVolumeGroupDetails,
        "CreateVolumeGroupDetails",
        models.CreateVolumeGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createVolumeGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeGroupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroup",
        bodyModel: "model.VolumeGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new backup volume group of the specified volume group.
   * For more information, see [Volume Groups](https://docs.cloud.oracle.com/Content/Block/Concepts/volumegroups.htm).
   *
   * @param CreateVolumeGroupBackupRequest
   * @return CreateVolumeGroupBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVolumeGroupBackup.ts.html |here} to see how to use CreateVolumeGroupBackup API.
   */
  public async createVolumeGroupBackup(
    createVolumeGroupBackupRequest: requests.CreateVolumeGroupBackupRequest
  ): Promise<responses.CreateVolumeGroupBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#createVolumeGroupBackup.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVolumeGroupBackupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVolumeGroupBackupRequest.createVolumeGroupBackupDetails,
        "CreateVolumeGroupBackupDetails",
        models.CreateVolumeGroupBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createVolumeGroupBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVolumeGroupBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroupBackup",
        bodyModel: "model.VolumeGroupBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified boot volume. The volume cannot have an active connection to an instance.
   * To disconnect the boot volume from a connected instance, see
   * [Disconnecting From a Boot Volume](https://docs.cloud.oracle.com/Content/Block/Tasks/deletingbootvolume.htm).
   * **Warning:** All data on the boot volume will be permanently lost when the boot volume is deleted.
   *
   * @param DeleteBootVolumeRequest
   * @return DeleteBootVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteBootVolume.ts.html |here} to see how to use DeleteBootVolume API.
   */
  public async deleteBootVolume(
    deleteBootVolumeRequest: requests.DeleteBootVolumeRequest
  ): Promise<responses.DeleteBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#deleteBootVolume.");
    const pathParams = {
      "{bootVolumeId}": deleteBootVolumeRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteBootVolumeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteBootVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBootVolumeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a boot volume backup.
   * @param DeleteBootVolumeBackupRequest
   * @return DeleteBootVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteBootVolumeBackup.ts.html |here} to see how to use DeleteBootVolumeBackup API.
   */
  public async deleteBootVolumeBackup(
    deleteBootVolumeBackupRequest: requests.DeleteBootVolumeBackupRequest
  ): Promise<responses.DeleteBootVolumeBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#deleteBootVolumeBackup.");
    const pathParams = {
      "{bootVolumeBackupId}": deleteBootVolumeBackupRequest.bootVolumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteBootVolumeBackupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups/{bootVolumeBackupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteBootVolumeBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBootVolumeBackupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the specified boot volume's assigned Key Management encryption key.
   *
   * @param DeleteBootVolumeKmsKeyRequest
   * @return DeleteBootVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteBootVolumeKmsKey.ts.html |here} to see how to use DeleteBootVolumeKmsKey API.
   */
  public async deleteBootVolumeKmsKey(
    deleteBootVolumeKmsKeyRequest: requests.DeleteBootVolumeKmsKeyRequest
  ): Promise<responses.DeleteBootVolumeKmsKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#deleteBootVolumeKmsKey.");
    const pathParams = {
      "{bootVolumeId}": deleteBootVolumeKmsKeyRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteBootVolumeKmsKeyRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}/kmsKey",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteBootVolumeKmsKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBootVolumeKmsKeyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified volume. The volume cannot have an active connection to an instance.
   * To disconnect the volume from a connected instance, see
   * [Disconnecting From a Volume](https://docs.cloud.oracle.com/Content/Block/Tasks/disconnectingfromavolume.htm).
   * **Warning:** All data on the volume will be permanently lost when the volume is deleted.
   *
   * @param DeleteVolumeRequest
   * @return DeleteVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolume.ts.html |here} to see how to use DeleteVolume API.
   */
  public async deleteVolume(
    deleteVolumeRequest: requests.DeleteVolumeRequest
  ): Promise<responses.DeleteVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#deleteVolume.");
    const pathParams = {
      "{volumeId}": deleteVolumeRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a volume backup.
   * @param DeleteVolumeBackupRequest
   * @return DeleteVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeBackup.ts.html |here} to see how to use DeleteVolumeBackup API.
   */
  public async deleteVolumeBackup(
    deleteVolumeBackupRequest: requests.DeleteVolumeBackupRequest
  ): Promise<responses.DeleteVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#deleteVolumeBackup.");
    const pathParams = {
      "{volumeBackupId}": deleteVolumeBackupRequest.volumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeBackupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups/{volumeBackupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteVolumeBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeBackupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes a user defined backup policy.
*  For more information about user defined backup policies,
*  see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm#UserDefinedBackupPolicies).
* <p>
 Avoid entering confidential information.
* 
     * @param DeleteVolumeBackupPolicyRequest
     * @return DeleteVolumeBackupPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeBackupPolicy.ts.html |here} to see how to use DeleteVolumeBackupPolicy API.
     */
  public async deleteVolumeBackupPolicy(
    deleteVolumeBackupPolicyRequest: requests.DeleteVolumeBackupPolicyRequest
  ): Promise<responses.DeleteVolumeBackupPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#deleteVolumeBackupPolicy.");
    const pathParams = {
      "{policyId}": deleteVolumeBackupPolicyRequest.policyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteVolumeBackupPolicyRequest.opcRequestId,
      "if-match": deleteVolumeBackupPolicyRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicies/{policyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteVolumeBackupPolicyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeBackupPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a volume backup policy assignment.
   * @param DeleteVolumeBackupPolicyAssignmentRequest
   * @return DeleteVolumeBackupPolicyAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeBackupPolicyAssignment.ts.html |here} to see how to use DeleteVolumeBackupPolicyAssignment API.
   */
  public async deleteVolumeBackupPolicyAssignment(
    deleteVolumeBackupPolicyAssignmentRequest: requests.DeleteVolumeBackupPolicyAssignmentRequest
  ): Promise<responses.DeleteVolumeBackupPolicyAssignmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#deleteVolumeBackupPolicyAssignment.");
    const pathParams = {
      "{policyAssignmentId}": deleteVolumeBackupPolicyAssignmentRequest.policyAssignmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeBackupPolicyAssignmentRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicyAssignments/{policyAssignmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteVolumeBackupPolicyAssignmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeBackupPolicyAssignmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified volume group. Individual volumes are not deleted, only the volume group is deleted.
   * For more information, see [Volume Groups](https://docs.cloud.oracle.com/Content/Block/Concepts/volumegroups.htm).
   *
   * @param DeleteVolumeGroupRequest
   * @return DeleteVolumeGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeGroup.ts.html |here} to see how to use DeleteVolumeGroup API.
   */
  public async deleteVolumeGroup(
    deleteVolumeGroupRequest: requests.DeleteVolumeGroupRequest
  ): Promise<responses.DeleteVolumeGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#deleteVolumeGroup.");
    const pathParams = {
      "{volumeGroupId}": deleteVolumeGroupRequest.volumeGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeGroupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups/{volumeGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteVolumeGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a volume group backup. This operation deletes all the backups in the volume group. For more information, see [Volume Groups](https://docs.cloud.oracle.com/Content/Block/Concepts/volumegroups.htm).
   * @param DeleteVolumeGroupBackupRequest
   * @return DeleteVolumeGroupBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeGroupBackup.ts.html |here} to see how to use DeleteVolumeGroupBackup API.
   */
  public async deleteVolumeGroupBackup(
    deleteVolumeGroupBackupRequest: requests.DeleteVolumeGroupBackupRequest
  ): Promise<responses.DeleteVolumeGroupBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#deleteVolumeGroupBackup.");
    const pathParams = {
      "{volumeGroupBackupId}": deleteVolumeGroupBackupRequest.volumeGroupBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeGroupBackupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups/{volumeGroupBackupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteVolumeGroupBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeGroupBackupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the specified volume's assigned Key Management encryption key.
   *
   * @param DeleteVolumeKmsKeyRequest
   * @return DeleteVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVolumeKmsKey.ts.html |here} to see how to use DeleteVolumeKmsKey API.
   */
  public async deleteVolumeKmsKey(
    deleteVolumeKmsKeyRequest: requests.DeleteVolumeKmsKeyRequest
  ): Promise<responses.DeleteVolumeKmsKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#deleteVolumeKmsKey.");
    const pathParams = {
      "{volumeId}": deleteVolumeKmsKeyRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVolumeKmsKeyRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}/kmsKey",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteVolumeKmsKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVolumeKmsKeyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified boot volume.
   * @param GetBootVolumeRequest
   * @return GetBootVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetBootVolume.ts.html |here} to see how to use GetBootVolume API.
   */
  public async getBootVolume(
    getBootVolumeRequest: requests.GetBootVolumeRequest
  ): Promise<responses.GetBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getBootVolume.");
    const pathParams = {
      "{bootVolumeId}": getBootVolumeRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getBootVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBootVolumeResponse>{},
        body: await response.json(),
        bodyKey: "bootVolume",
        bodyModel: "model.BootVolume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified boot volume backup.
   * @param GetBootVolumeBackupRequest
   * @return GetBootVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetBootVolumeBackup.ts.html |here} to see how to use GetBootVolumeBackup API.
   */
  public async getBootVolumeBackup(
    getBootVolumeBackupRequest: requests.GetBootVolumeBackupRequest
  ): Promise<responses.GetBootVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getBootVolumeBackup.");
    const pathParams = {
      "{bootVolumeBackupId}": getBootVolumeBackupRequest.bootVolumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups/{bootVolumeBackupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getBootVolumeBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBootVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeBackup",
        bodyModel: "model.BootVolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Key Management encryption key assigned to the specified boot volume.
   *
   * @param GetBootVolumeKmsKeyRequest
   * @return GetBootVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetBootVolumeKmsKey.ts.html |here} to see how to use GetBootVolumeKmsKey API.
   */
  public async getBootVolumeKmsKey(
    getBootVolumeKmsKeyRequest: requests.GetBootVolumeKmsKeyRequest
  ): Promise<responses.GetBootVolumeKmsKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getBootVolumeKmsKey.");
    const pathParams = {
      "{bootVolumeId}": getBootVolumeKmsKeyRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": getBootVolumeKmsKeyRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}/kmsKey",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getBootVolumeKmsKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBootVolumeKmsKeyResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeKmsKey",
        bodyModel: "model.BootVolumeKmsKey",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified volume.
   * @param GetVolumeRequest
   * @return GetVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolume.ts.html |here} to see how to use GetVolume API.
   */
  public async getVolume(
    getVolumeRequest: requests.GetVolumeRequest
  ): Promise<responses.GetVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getVolume.");
    const pathParams = {
      "{volumeId}": getVolumeRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeResponse>{},
        body: await response.json(),
        bodyKey: "volume",
        bodyModel: "model.Volume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified volume backup.
   * @param GetVolumeBackupRequest
   * @return GetVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeBackup.ts.html |here} to see how to use GetVolumeBackup API.
   */
  public async getVolumeBackup(
    getVolumeBackupRequest: requests.GetVolumeBackupRequest
  ): Promise<responses.GetVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getVolumeBackup.");
    const pathParams = {
      "{volumeBackupId}": getVolumeBackupRequest.volumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups/{volumeBackupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVolumeBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackup",
        bodyModel: "model.VolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified volume backup policy.
   * @param GetVolumeBackupPolicyRequest
   * @return GetVolumeBackupPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeBackupPolicy.ts.html |here} to see how to use GetVolumeBackupPolicy API.
   */
  public async getVolumeBackupPolicy(
    getVolumeBackupPolicyRequest: requests.GetVolumeBackupPolicyRequest
  ): Promise<responses.GetVolumeBackupPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#getVolumeBackupPolicy.");
    const pathParams = {
      "{policyId}": getVolumeBackupPolicyRequest.policyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicies/{policyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVolumeBackupPolicyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeBackupPolicyResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackupPolicy",
        bodyModel: "model.VolumeBackupPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the volume backup policy assignment for the specified volume. The
   * `assetId` query parameter is required, and the returned list will contain at most
   * one item, since volume can only have one volume backup policy assigned at a time.
   *
   * @param GetVolumeBackupPolicyAssetAssignmentRequest
   * @return GetVolumeBackupPolicyAssetAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeBackupPolicyAssetAssignment.ts.html |here} to see how to use GetVolumeBackupPolicyAssetAssignment API.
   */
  public async getVolumeBackupPolicyAssetAssignment(
    getVolumeBackupPolicyAssetAssignmentRequest: requests.GetVolumeBackupPolicyAssetAssignmentRequest
  ): Promise<responses.GetVolumeBackupPolicyAssetAssignmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation BlockstorageClient#getVolumeBackupPolicyAssetAssignment."
      );
    const pathParams = {};

    const queryParams = {
      "assetId": getVolumeBackupPolicyAssetAssignmentRequest.assetId,
      "limit": getVolumeBackupPolicyAssetAssignmentRequest.limit,
      "page": getVolumeBackupPolicyAssetAssignmentRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicyAssignments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVolumeBackupPolicyAssetAssignmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeBackupPolicyAssetAssignmentResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "VolumeBackupPolicyAssignment[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeBackupPolicyAssignment objects
   * contained in responses from the getVolumeBackupPolicyAssetAssignment operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllVolumeBackupPolicyAssetAssignment(
    request: requests.GetVolumeBackupPolicyAssetAssignmentRequest
  ): AsyncIterableIterator<models.VolumeBackupPolicyAssignment> {
    return paginateRecords(request, req => this.getVolumeBackupPolicyAssetAssignment(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the getVolumeBackupPolicyAssetAssignment operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllVolumeBackupPolicyAssetAssignmentResponses(
    request: requests.GetVolumeBackupPolicyAssetAssignmentRequest
  ): AsyncIterableIterator<responses.GetVolumeBackupPolicyAssetAssignmentResponse> {
    return paginateResponses(request, req => this.getVolumeBackupPolicyAssetAssignment(req));
  }

  /**
   * Gets information for the specified volume backup policy assignment.
   * @param GetVolumeBackupPolicyAssignmentRequest
   * @return GetVolumeBackupPolicyAssignmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeBackupPolicyAssignment.ts.html |here} to see how to use GetVolumeBackupPolicyAssignment API.
   */
  public async getVolumeBackupPolicyAssignment(
    getVolumeBackupPolicyAssignmentRequest: requests.GetVolumeBackupPolicyAssignmentRequest
  ): Promise<responses.GetVolumeBackupPolicyAssignmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#getVolumeBackupPolicyAssignment.");
    const pathParams = {
      "{policyAssignmentId}": getVolumeBackupPolicyAssignmentRequest.policyAssignmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicyAssignments/{policyAssignmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVolumeBackupPolicyAssignmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeBackupPolicyAssignmentResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackupPolicyAssignment",
        bodyModel: "model.VolumeBackupPolicyAssignment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified volume group. For more information, see [Volume Groups](https://docs.cloud.oracle.com/Content/Block/Concepts/volumegroups.htm).
   * @param GetVolumeGroupRequest
   * @return GetVolumeGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeGroup.ts.html |here} to see how to use GetVolumeGroup API.
   */
  public async getVolumeGroup(
    getVolumeGroupRequest: requests.GetVolumeGroupRequest
  ): Promise<responses.GetVolumeGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getVolumeGroup.");
    const pathParams = {
      "{volumeGroupId}": getVolumeGroupRequest.volumeGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups/{volumeGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVolumeGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeGroupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroup",
        bodyModel: "model.VolumeGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information for the specified volume group backup. For more information, see [Volume Groups](https://docs.cloud.oracle.com/Content/Block/Concepts/volumegroups.htm).
   * @param GetVolumeGroupBackupRequest
   * @return GetVolumeGroupBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeGroupBackup.ts.html |here} to see how to use GetVolumeGroupBackup API.
   */
  public async getVolumeGroupBackup(
    getVolumeGroupBackupRequest: requests.GetVolumeGroupBackupRequest
  ): Promise<responses.GetVolumeGroupBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#getVolumeGroupBackup.");
    const pathParams = {
      "{volumeGroupBackupId}": getVolumeGroupBackupRequest.volumeGroupBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups/{volumeGroupBackupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVolumeGroupBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeGroupBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroupBackup",
        bodyModel: "model.VolumeGroupBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Key Management encryption key assigned to the specified volume.
   *
   * @param GetVolumeKmsKeyRequest
   * @return GetVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeKmsKey.ts.html |here} to see how to use GetVolumeKmsKey API.
   */
  public async getVolumeKmsKey(
    getVolumeKmsKeyRequest: requests.GetVolumeKmsKeyRequest
  ): Promise<responses.GetVolumeKmsKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#getVolumeKmsKey.");
    const pathParams = {
      "{volumeId}": getVolumeKmsKeyRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": getVolumeKmsKeyRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}/kmsKey",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVolumeKmsKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeKmsKeyResponse>{},
        body: await response.json(),
        bodyKey: "volumeKmsKey",
        bodyModel: "model.VolumeKmsKey",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the boot volume backups in the specified compartment. You can filter the results by boot volume.
   *
   * @param ListBootVolumeBackupsRequest
   * @return ListBootVolumeBackupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListBootVolumeBackups.ts.html |here} to see how to use ListBootVolumeBackups API.
   */
  public async listBootVolumeBackups(
    listBootVolumeBackupsRequest: requests.ListBootVolumeBackupsRequest
  ): Promise<responses.ListBootVolumeBackupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#listBootVolumeBackups.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listBootVolumeBackupsRequest.compartmentId,
      "bootVolumeId": listBootVolumeBackupsRequest.bootVolumeId,
      "limit": listBootVolumeBackupsRequest.limit,
      "page": listBootVolumeBackupsRequest.page,
      "displayName": listBootVolumeBackupsRequest.displayName,
      "sourceBootVolumeBackupId": listBootVolumeBackupsRequest.sourceBootVolumeBackupId,
      "sortBy": listBootVolumeBackupsRequest.sortBy,
      "sortOrder": listBootVolumeBackupsRequest.sortOrder,
      "lifecycleState": listBootVolumeBackupsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listBootVolumeBackupsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBootVolumeBackupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "BootVolumeBackup[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.BootVolumeBackup objects
   * contained in responses from the listBootVolumeBackups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumeBackups(
    request: requests.ListBootVolumeBackupsRequest
  ): AsyncIterableIterator<models.BootVolumeBackup> {
    return paginateRecords(request, req => this.listBootVolumeBackups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBootVolumeBackups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumeBackupsResponses(
    request: requests.ListBootVolumeBackupsRequest
  ): AsyncIterableIterator<responses.ListBootVolumeBackupsResponse> {
    return paginateResponses(request, req => this.listBootVolumeBackups(req));
  }

  /**
   * Lists the boot volumes in the specified compartment and availability domain.
   *
   * @param ListBootVolumesRequest
   * @return ListBootVolumesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListBootVolumes.ts.html |here} to see how to use ListBootVolumes API.
   */
  public async listBootVolumes(
    listBootVolumesRequest: requests.ListBootVolumesRequest
  ): Promise<responses.ListBootVolumesResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#listBootVolumes.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listBootVolumesRequest.availabilityDomain,
      "compartmentId": listBootVolumesRequest.compartmentId,
      "limit": listBootVolumesRequest.limit,
      "page": listBootVolumesRequest.page,
      "volumeGroupId": listBootVolumesRequest.volumeGroupId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listBootVolumesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBootVolumesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "BootVolume[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.BootVolume objects
   * contained in responses from the listBootVolumes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumes(
    request: requests.ListBootVolumesRequest
  ): AsyncIterableIterator<models.BootVolume> {
    return paginateRecords(request, req => this.listBootVolumes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBootVolumes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumesResponses(
    request: requests.ListBootVolumesRequest
  ): AsyncIterableIterator<responses.ListBootVolumesResponse> {
    return paginateResponses(request, req => this.listBootVolumes(req));
  }

  /**
     * Lists all the volume backup policies available in the specified compartment.
* <p>
For more information about Oracle defined backup policies and user defined backup policies,
* see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm).
* 
     * @param ListVolumeBackupPoliciesRequest
     * @return ListVolumeBackupPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumeBackupPolicies.ts.html |here} to see how to use ListVolumeBackupPolicies API.
     */
  public async listVolumeBackupPolicies(
    listVolumeBackupPoliciesRequest: requests.ListVolumeBackupPoliciesRequest
  ): Promise<responses.ListVolumeBackupPoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#listVolumeBackupPolicies.");
    const pathParams = {};

    const queryParams = {
      "limit": listVolumeBackupPoliciesRequest.limit,
      "page": listVolumeBackupPoliciesRequest.page,
      "compartmentId": listVolumeBackupPoliciesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVolumeBackupPoliciesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumeBackupPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "VolumeBackupPolicy[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeBackupPolicy objects
   * contained in responses from the listVolumeBackupPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeBackupPolicies(
    request: requests.ListVolumeBackupPoliciesRequest
  ): AsyncIterableIterator<models.VolumeBackupPolicy> {
    return paginateRecords(request, req => this.listVolumeBackupPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumeBackupPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeBackupPoliciesResponses(
    request: requests.ListVolumeBackupPoliciesRequest
  ): AsyncIterableIterator<responses.ListVolumeBackupPoliciesResponse> {
    return paginateResponses(request, req => this.listVolumeBackupPolicies(req));
  }

  /**
   * Lists the volume backups in the specified compartment. You can filter the results by volume.
   *
   * @param ListVolumeBackupsRequest
   * @return ListVolumeBackupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumeBackups.ts.html |here} to see how to use ListVolumeBackups API.
   */
  public async listVolumeBackups(
    listVolumeBackupsRequest: requests.ListVolumeBackupsRequest
  ): Promise<responses.ListVolumeBackupsResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#listVolumeBackups.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVolumeBackupsRequest.compartmentId,
      "volumeId": listVolumeBackupsRequest.volumeId,
      "limit": listVolumeBackupsRequest.limit,
      "page": listVolumeBackupsRequest.page,
      "displayName": listVolumeBackupsRequest.displayName,
      "sourceVolumeBackupId": listVolumeBackupsRequest.sourceVolumeBackupId,
      "sortBy": listVolumeBackupsRequest.sortBy,
      "sortOrder": listVolumeBackupsRequest.sortOrder,
      "lifecycleState": listVolumeBackupsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVolumeBackupsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumeBackupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "VolumeBackup[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeBackup objects
   * contained in responses from the listVolumeBackups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeBackups(
    request: requests.ListVolumeBackupsRequest
  ): AsyncIterableIterator<models.VolumeBackup> {
    return paginateRecords(request, req => this.listVolumeBackups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumeBackups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeBackupsResponses(
    request: requests.ListVolumeBackupsRequest
  ): AsyncIterableIterator<responses.ListVolumeBackupsResponse> {
    return paginateResponses(request, req => this.listVolumeBackups(req));
  }

  /**
   * Lists the volume group backups in the specified compartment. You can filter the results by volume group.
   * For more information, see [Volume Groups](https://docs.cloud.oracle.com/Content/Block/Concepts/volumegroups.htm).
   *
   * @param ListVolumeGroupBackupsRequest
   * @return ListVolumeGroupBackupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumeGroupBackups.ts.html |here} to see how to use ListVolumeGroupBackups API.
   */
  public async listVolumeGroupBackups(
    listVolumeGroupBackupsRequest: requests.ListVolumeGroupBackupsRequest
  ): Promise<responses.ListVolumeGroupBackupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#listVolumeGroupBackups.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVolumeGroupBackupsRequest.compartmentId,
      "volumeGroupId": listVolumeGroupBackupsRequest.volumeGroupId,
      "limit": listVolumeGroupBackupsRequest.limit,
      "page": listVolumeGroupBackupsRequest.page,
      "displayName": listVolumeGroupBackupsRequest.displayName,
      "sortBy": listVolumeGroupBackupsRequest.sortBy,
      "sortOrder": listVolumeGroupBackupsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVolumeGroupBackupsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumeGroupBackupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "VolumeGroupBackup[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeGroupBackup objects
   * contained in responses from the listVolumeGroupBackups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeGroupBackups(
    request: requests.ListVolumeGroupBackupsRequest
  ): AsyncIterableIterator<models.VolumeGroupBackup> {
    return paginateRecords(request, req => this.listVolumeGroupBackups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumeGroupBackups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeGroupBackupsResponses(
    request: requests.ListVolumeGroupBackupsRequest
  ): AsyncIterableIterator<responses.ListVolumeGroupBackupsResponse> {
    return paginateResponses(request, req => this.listVolumeGroupBackups(req));
  }

  /**
   * Lists the volume groups in the specified compartment and availability domain.
   * For more information, see [Volume Groups](https://docs.cloud.oracle.com/Content/Block/Concepts/volumegroups.htm).
   *
   * @param ListVolumeGroupsRequest
   * @return ListVolumeGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumeGroups.ts.html |here} to see how to use ListVolumeGroups API.
   */
  public async listVolumeGroups(
    listVolumeGroupsRequest: requests.ListVolumeGroupsRequest
  ): Promise<responses.ListVolumeGroupsResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#listVolumeGroups.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listVolumeGroupsRequest.availabilityDomain,
      "compartmentId": listVolumeGroupsRequest.compartmentId,
      "limit": listVolumeGroupsRequest.limit,
      "page": listVolumeGroupsRequest.page,
      "displayName": listVolumeGroupsRequest.displayName,
      "sortBy": listVolumeGroupsRequest.sortBy,
      "sortOrder": listVolumeGroupsRequest.sortOrder,
      "lifecycleState": listVolumeGroupsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVolumeGroupsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumeGroupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "VolumeGroup[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeGroup objects
   * contained in responses from the listVolumeGroups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeGroups(
    request: requests.ListVolumeGroupsRequest
  ): AsyncIterableIterator<models.VolumeGroup> {
    return paginateRecords(request, req => this.listVolumeGroups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumeGroups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeGroupsResponses(
    request: requests.ListVolumeGroupsRequest
  ): AsyncIterableIterator<responses.ListVolumeGroupsResponse> {
    return paginateResponses(request, req => this.listVolumeGroups(req));
  }

  /**
   * Lists the volumes in the specified compartment and availability domain.
   *
   * @param ListVolumesRequest
   * @return ListVolumesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumes.ts.html |here} to see how to use ListVolumes API.
   */
  public async listVolumes(
    listVolumesRequest: requests.ListVolumesRequest
  ): Promise<responses.ListVolumesResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#listVolumes.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listVolumesRequest.availabilityDomain,
      "compartmentId": listVolumesRequest.compartmentId,
      "limit": listVolumesRequest.limit,
      "page": listVolumesRequest.page,
      "displayName": listVolumesRequest.displayName,
      "sortBy": listVolumesRequest.sortBy,
      "sortOrder": listVolumesRequest.sortOrder,
      "volumeGroupId": listVolumesRequest.volumeGroupId,
      "lifecycleState": listVolumesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVolumesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Volume[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Volume objects
   * contained in responses from the listVolumes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumes(
    request: requests.ListVolumesRequest
  ): AsyncIterableIterator<models.Volume> {
    return paginateRecords(request, req => this.listVolumes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumesResponses(
    request: requests.ListVolumesRequest
  ): AsyncIterableIterator<responses.ListVolumesResponse> {
    return paginateResponses(request, req => this.listVolumes(req));
  }

  /**
   * Updates the specified boot volume's display name, defined tags, and free-form tags.
   * @param UpdateBootVolumeRequest
   * @return UpdateBootVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateBootVolume.ts.html |here} to see how to use UpdateBootVolume API.
   */
  public async updateBootVolume(
    updateBootVolumeRequest: requests.UpdateBootVolumeRequest
  ): Promise<responses.UpdateBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#updateBootVolume.");
    const pathParams = {
      "{bootVolumeId}": updateBootVolumeRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBootVolumeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBootVolumeRequest.updateBootVolumeDetails,
        "UpdateBootVolumeDetails",
        models.UpdateBootVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateBootVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBootVolumeResponse>{},
        body: await response.json(),
        bodyKey: "bootVolume",
        bodyModel: "model.BootVolume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the display name for the specified boot volume backup.
   * Avoid entering confidential information.
   *
   * @param UpdateBootVolumeBackupRequest
   * @return UpdateBootVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateBootVolumeBackup.ts.html |here} to see how to use UpdateBootVolumeBackup API.
   */
  public async updateBootVolumeBackup(
    updateBootVolumeBackupRequest: requests.UpdateBootVolumeBackupRequest
  ): Promise<responses.UpdateBootVolumeBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#updateBootVolumeBackup.");
    const pathParams = {
      "{bootVolumeBackupId}": updateBootVolumeBackupRequest.bootVolumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBootVolumeBackupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeBackups/{bootVolumeBackupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBootVolumeBackupRequest.updateBootVolumeBackupDetails,
        "UpdateBootVolumeBackupDetails",
        models.UpdateBootVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateBootVolumeBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBootVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeBackup",
        bodyModel: "model.BootVolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified volume with a new Key Management master encryption key.
   *
   * @param UpdateBootVolumeKmsKeyRequest
   * @return UpdateBootVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateBootVolumeKmsKey.ts.html |here} to see how to use UpdateBootVolumeKmsKey API.
   */
  public async updateBootVolumeKmsKey(
    updateBootVolumeKmsKeyRequest: requests.UpdateBootVolumeKmsKeyRequest
  ): Promise<responses.UpdateBootVolumeKmsKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#updateBootVolumeKmsKey.");
    const pathParams = {
      "{bootVolumeId}": updateBootVolumeKmsKeyRequest.bootVolumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBootVolumeKmsKeyRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumes/{bootVolumeId}/kmsKey",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBootVolumeKmsKeyRequest.updateBootVolumeKmsKeyDetails,
        "UpdateBootVolumeKmsKeyDetails",
        models.UpdateBootVolumeKmsKeyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateBootVolumeKmsKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBootVolumeKmsKeyResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeKmsKey",
        bodyModel: "model.BootVolumeKmsKey",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified volume's display name.
   * Avoid entering confidential information.
   *
   * @param UpdateVolumeRequest
   * @return UpdateVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolume.ts.html |here} to see how to use UpdateVolume API.
   */
  public async updateVolume(
    updateVolumeRequest: requests.UpdateVolumeRequest
  ): Promise<responses.UpdateVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#updateVolume.");
    const pathParams = {
      "{volumeId}": updateVolumeRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeRequest.updateVolumeDetails,
        "UpdateVolumeDetails",
        models.UpdateVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeResponse>{},
        body: await response.json(),
        bodyKey: "volume",
        bodyModel: "model.Volume",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the display name for the specified volume backup.
   * Avoid entering confidential information.
   *
   * @param UpdateVolumeBackupRequest
   * @return UpdateVolumeBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolumeBackup.ts.html |here} to see how to use UpdateVolumeBackup API.
   */
  public async updateVolumeBackup(
    updateVolumeBackupRequest: requests.UpdateVolumeBackupRequest
  ): Promise<responses.UpdateVolumeBackupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#updateVolumeBackup.");
    const pathParams = {
      "{volumeBackupId}": updateVolumeBackupRequest.volumeBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeBackupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackups/{volumeBackupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeBackupRequest.updateVolumeBackupDetails,
        "UpdateVolumeBackupDetails",
        models.UpdateVolumeBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateVolumeBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackup",
        bodyModel: "model.VolumeBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates a user defined backup policy.
*  For more information about user defined backup policies,
*  see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm#UserDefinedBackupPolicies).
* <p>
 Avoid entering confidential information.
* 
     * @param UpdateVolumeBackupPolicyRequest
     * @return UpdateVolumeBackupPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolumeBackupPolicy.ts.html |here} to see how to use UpdateVolumeBackupPolicy API.
     */
  public async updateVolumeBackupPolicy(
    updateVolumeBackupPolicyRequest: requests.UpdateVolumeBackupPolicyRequest
  ): Promise<responses.UpdateVolumeBackupPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#updateVolumeBackupPolicy.");
    const pathParams = {
      "{policyId}": updateVolumeBackupPolicyRequest.policyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeBackupPolicyRequest.ifMatch,
      "opc-request-id": updateVolumeBackupPolicyRequest.opcRequestId,
      "opc-retry-token": updateVolumeBackupPolicyRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeBackupPolicies/{policyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeBackupPolicyRequest.updateVolumeBackupPolicyDetails,
        "UpdateVolumeBackupPolicyDetails",
        models.UpdateVolumeBackupPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateVolumeBackupPolicyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeBackupPolicyResponse>{},
        body: await response.json(),
        bodyKey: "volumeBackupPolicy",
        bodyModel: "model.VolumeBackupPolicy",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the set of volumes in a volume group along with the display name. Use this operation
* to add or remove volumes in a volume group. Specify the full list of volume IDs to include in the
* volume group. If the volume ID is not specified in the call, it will be removed from the volume group.
* Avoid entering confidential information.
* <p>
For more information, see [Volume Groups](https://docs.cloud.oracle.com/Content/Block/Concepts/volumegroups.htm).
* 
     * @param UpdateVolumeGroupRequest
     * @return UpdateVolumeGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolumeGroup.ts.html |here} to see how to use UpdateVolumeGroup API.
     */
  public async updateVolumeGroup(
    updateVolumeGroupRequest: requests.UpdateVolumeGroupRequest
  ): Promise<responses.UpdateVolumeGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#updateVolumeGroup.");
    const pathParams = {
      "{volumeGroupId}": updateVolumeGroupRequest.volumeGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeGroupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroups/{volumeGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeGroupRequest.updateVolumeGroupDetails,
        "UpdateVolumeGroupDetails",
        models.UpdateVolumeGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateVolumeGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeGroupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroup",
        bodyModel: "model.VolumeGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the display name for the specified volume group backup. For more information, see [Volume Groups](https://docs.cloud.oracle.com/Content/Block/Concepts/volumegroups.htm).
   * @param UpdateVolumeGroupBackupRequest
   * @return UpdateVolumeGroupBackupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolumeGroupBackup.ts.html |here} to see how to use UpdateVolumeGroupBackup API.
   */
  public async updateVolumeGroupBackup(
    updateVolumeGroupBackupRequest: requests.UpdateVolumeGroupBackupRequest
  ): Promise<responses.UpdateVolumeGroupBackupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BlockstorageClient#updateVolumeGroupBackup.");
    const pathParams = {
      "{volumeGroupBackupId}": updateVolumeGroupBackupRequest.volumeGroupBackupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeGroupBackupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeGroupBackups/{volumeGroupBackupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeGroupBackupRequest.updateVolumeGroupBackupDetails,
        "UpdateVolumeGroupBackupDetails",
        models.UpdateVolumeGroupBackupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateVolumeGroupBackupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeGroupBackupResponse>{},
        body: await response.json(),
        bodyKey: "volumeGroupBackup",
        bodyModel: "model.VolumeGroupBackup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified volume with a new Key Management master encryption key.
   *
   * @param UpdateVolumeKmsKeyRequest
   * @return UpdateVolumeKmsKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVolumeKmsKey.ts.html |here} to see how to use UpdateVolumeKmsKey API.
   */
  public async updateVolumeKmsKey(
    updateVolumeKmsKeyRequest: requests.UpdateVolumeKmsKeyRequest
  ): Promise<responses.UpdateVolumeKmsKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation BlockstorageClient#updateVolumeKmsKey.");
    const pathParams = {
      "{volumeId}": updateVolumeKmsKeyRequest.volumeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVolumeKmsKeyRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumes/{volumeId}/kmsKey",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVolumeKmsKeyRequest.updateVolumeKmsKeyDetails,
        "UpdateVolumeKmsKeyDetails",
        models.UpdateVolumeKmsKeyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateVolumeKmsKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVolumeKmsKeyResponse>{},
        body: await response.json(),
        bodyKey: "volumeKmsKey",
        bodyModel: "model.VolumeKmsKey",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum ComputeApiKeys {}

export class ComputeClient {
  protected static serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ComputeWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20160918";
    if (this.logger) this.logger.info(`ComputeClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ComputeClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ComputeClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new ComputeWaiter for resources for this service.
   *
   * @param workRequestClient The work request service client used to query for work request status
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(
    workRequestClient: WorkRequestClient,
    config?: common.WaiterConfiguration
  ): ComputeWaiter {
    this._waiters = new ComputeWaiter(this, workRequestClient, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ComputeWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Adds a shape to the compatible shapes list for the image.
   * @param AddImageShapeCompatibilityEntryRequest
   * @return AddImageShapeCompatibilityEntryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddImageShapeCompatibilityEntry.ts.html |here} to see how to use AddImageShapeCompatibilityEntry API.
   */
  public async addImageShapeCompatibilityEntry(
    addImageShapeCompatibilityEntryRequest: requests.AddImageShapeCompatibilityEntryRequest
  ): Promise<responses.AddImageShapeCompatibilityEntryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#addImageShapeCompatibilityEntry.");
    const pathParams = {
      "{imageId}": addImageShapeCompatibilityEntryRequest.imageId,
      "{shapeName}": addImageShapeCompatibilityEntryRequest.shapeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/shapes/{shapeName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        addImageShapeCompatibilityEntryRequest.addImageShapeCompatibilityEntryDetails,
        "AddImageShapeCompatibilityEntryDetails",
        models.AddImageShapeCompatibilityEntryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      addImageShapeCompatibilityEntryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AddImageShapeCompatibilityEntryResponse>{},
        body: await response.json(),
        bodyKey: "imageShapeCompatibilityEntry",
        bodyModel: "model.ImageShapeCompatibilityEntry",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Attaches the specified boot volume to the specified instance.
   *
   * @param AttachBootVolumeRequest
   * @return AttachBootVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AttachBootVolume.ts.html |here} to see how to use AttachBootVolume API.
   */
  public async attachBootVolume(
    attachBootVolumeRequest: requests.AttachBootVolumeRequest
  ): Promise<responses.AttachBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#attachBootVolume.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": attachBootVolumeRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeAttachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachBootVolumeRequest.attachBootVolumeDetails,
        "AttachBootVolumeDetails",
        models.AttachBootVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      attachBootVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachBootVolumeResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeAttachment",
        bodyModel: "model.BootVolumeAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a secondary VNIC and attaches it to the specified instance.
   * For more information about secondary VNICs, see
   * [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/Content/Network/Tasks/managingVNICs.htm).
   *
   * @param AttachVnicRequest
   * @return AttachVnicResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AttachVnic.ts.html |here} to see how to use AttachVnic API.
   */
  public async attachVnic(
    attachVnicRequest: requests.AttachVnicRequest
  ): Promise<responses.AttachVnicResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#attachVnic.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": attachVnicRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnicAttachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachVnicRequest.attachVnicDetails,
        "AttachVnicDetails",
        models.AttachVnicDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      attachVnicRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachVnicResponse>{},
        body: await response.json(),
        bodyKey: "vnicAttachment",
        bodyModel: "model.VnicAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Attaches the specified storage volume to the specified instance.
   *
   * @param AttachVolumeRequest
   * @return AttachVolumeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AttachVolume.ts.html |here} to see how to use AttachVolume API.
   */
  public async attachVolume(
    attachVolumeRequest: requests.AttachVolumeRequest
  ): Promise<responses.AttachVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#attachVolume.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": attachVolumeRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeAttachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachVolumeRequest.attachVolumeDetails,
        "AttachVolumeDetails",
        models.AttachVolumeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      attachVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachVolumeResponse>{},
        body: await response.json(),
        bodyKey: "volumeAttachment",
        bodyModel: "model.VolumeAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Captures the most recent serial console data (up to a megabyte) for the
* specified instance.
* <p>
The `CaptureConsoleHistory` operation works with the other console history operations
* as described below.
* <p>
1. Use `CaptureConsoleHistory` to request the capture of up to a megabyte of the
* most recent console history. This call returns a `ConsoleHistory`
* object. The object will have a state of REQUESTED.
* 2. Wait for the capture operation to succeed by polling `GetConsoleHistory` with
* the identifier of the console history metadata. The state of the
* `ConsoleHistory` object will go from REQUESTED to GETTING-HISTORY and
* then SUCCEEDED (or FAILED).
* 3. Use `GetConsoleHistoryContent` to get the actual console history data (not the
* metadata).
* 4. Optionally, use `DeleteConsoleHistory` to delete the console history metadata
* and the console history data.
* 
     * @param CaptureConsoleHistoryRequest
     * @return CaptureConsoleHistoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CaptureConsoleHistory.ts.html |here} to see how to use CaptureConsoleHistory API.
     */
  public async captureConsoleHistory(
    captureConsoleHistoryRequest: requests.CaptureConsoleHistoryRequest
  ): Promise<responses.CaptureConsoleHistoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#captureConsoleHistory.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": captureConsoleHistoryRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        captureConsoleHistoryRequest.captureConsoleHistoryDetails,
        "CaptureConsoleHistoryDetails",
        models.CaptureConsoleHistoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      captureConsoleHistoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CaptureConsoleHistoryResponse>{},
        body: await response.json(),
        bodyKey: "consoleHistory",
        bodyModel: "model.ConsoleHistory",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a compute image capability schema into a different compartment within the same tenancy.
   * For information about moving resources between compartments, see
   *         [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeComputeImageCapabilitySchemaCompartmentRequest
   * @return ChangeComputeImageCapabilitySchemaCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeComputeImageCapabilitySchemaCompartment.ts.html |here} to see how to use ChangeComputeImageCapabilitySchemaCompartment API.
   */
  public async changeComputeImageCapabilitySchemaCompartment(
    changeComputeImageCapabilitySchemaCompartmentRequest: requests.ChangeComputeImageCapabilitySchemaCompartmentRequest
  ): Promise<responses.ChangeComputeImageCapabilitySchemaCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#changeComputeImageCapabilitySchemaCompartment."
      );
    const pathParams = {
      "{computeImageCapabilitySchemaId}":
        changeComputeImageCapabilitySchemaCompartmentRequest.computeImageCapabilitySchemaId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeComputeImageCapabilitySchemaCompartmentRequest.ifMatch,
      "opc-request-id": changeComputeImageCapabilitySchemaCompartmentRequest.opcRequestId,
      "opc-retry-token": changeComputeImageCapabilitySchemaCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeComputeImageCapabilitySchemaCompartmentRequest.changeComputeImageCapabilitySchemaCompartmentDetails,
        "ChangeComputeImageCapabilitySchemaCompartmentDetails",
        models.ChangeComputeImageCapabilitySchemaCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeComputeImageCapabilitySchemaCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeComputeImageCapabilitySchemaCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a dedicated virtual machine host from one compartment to another.
   * @param ChangeDedicatedVmHostCompartmentRequest
   * @return ChangeDedicatedVmHostCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeDedicatedVmHostCompartment.ts.html |here} to see how to use ChangeDedicatedVmHostCompartment API.
   */
  public async changeDedicatedVmHostCompartment(
    changeDedicatedVmHostCompartmentRequest: requests.ChangeDedicatedVmHostCompartmentRequest
  ): Promise<responses.ChangeDedicatedVmHostCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#changeDedicatedVmHostCompartment.");
    const pathParams = {
      "{dedicatedVmHostId}": changeDedicatedVmHostCompartmentRequest.dedicatedVmHostId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeDedicatedVmHostCompartmentRequest.ifMatch,
      "opc-request-id": changeDedicatedVmHostCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDedicatedVmHostCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts/{dedicatedVmHostId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDedicatedVmHostCompartmentRequest.changeDedicatedVmHostCompartmentDetails,
        "ChangeDedicatedVmHostCompartmentDetails",
        models.ChangeDedicatedVmHostCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeDedicatedVmHostCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDedicatedVmHostCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves an image into a different compartment within the same tenancy. For information about moving
   * resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeImageCompartmentRequest
   * @return ChangeImageCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeImageCompartment.ts.html |here} to see how to use ChangeImageCompartment API.
   */
  public async changeImageCompartment(
    changeImageCompartmentRequest: requests.ChangeImageCompartmentRequest
  ): Promise<responses.ChangeImageCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#changeImageCompartment.");
    const pathParams = {
      "{imageId}": changeImageCompartmentRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeImageCompartmentRequest.ifMatch,
      "opc-request-id": changeImageCompartmentRequest.opcRequestId,
      "opc-retry-token": changeImageCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeImageCompartmentRequest.changeImageCompartmentDetails,
        "ChangeImageCompartmentDetails",
        models.ChangeImageCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeImageCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeImageCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves an instance into a different compartment within the same tenancy. For information about
* moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
When you move an instance to a different compartment, associated resources such as boot volumes and VNICs
* are not moved.
* 
     * @param ChangeInstanceCompartmentRequest
     * @return ChangeInstanceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeInstanceCompartment.ts.html |here} to see how to use ChangeInstanceCompartment API.
     */
  public async changeInstanceCompartment(
    changeInstanceCompartmentRequest: requests.ChangeInstanceCompartmentRequest
  ): Promise<responses.ChangeInstanceCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#changeInstanceCompartment.");
    const pathParams = {
      "{instanceId}": changeInstanceCompartmentRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeInstanceCompartmentRequest.ifMatch,
      "opc-request-id": changeInstanceCompartmentRequest.opcRequestId,
      "opc-retry-token": changeInstanceCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeInstanceCompartmentRequest.changeInstanceCompartmentDetails,
        "ChangeInstanceCompartmentDetails",
        models.ChangeInstanceCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeInstanceCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeInstanceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a subscription for listing resource version for a compartment. It will take some time to propagate to all regions.
   *
   * @param CreateAppCatalogSubscriptionRequest
   * @return CreateAppCatalogSubscriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateAppCatalogSubscription.ts.html |here} to see how to use CreateAppCatalogSubscription API.
   */
  public async createAppCatalogSubscription(
    createAppCatalogSubscriptionRequest: requests.CreateAppCatalogSubscriptionRequest
  ): Promise<responses.CreateAppCatalogSubscriptionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#createAppCatalogSubscription.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createAppCatalogSubscriptionRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogSubscriptions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAppCatalogSubscriptionRequest.createAppCatalogSubscriptionDetails,
        "CreateAppCatalogSubscriptionDetails",
        models.CreateAppCatalogSubscriptionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createAppCatalogSubscriptionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAppCatalogSubscriptionResponse>{},
        body: await response.json(),
        bodyKey: "appCatalogSubscription",
        bodyModel: "model.AppCatalogSubscription",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates compute image capability schema.
   *
   * @param CreateComputeImageCapabilitySchemaRequest
   * @return CreateComputeImageCapabilitySchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateComputeImageCapabilitySchema.ts.html |here} to see how to use CreateComputeImageCapabilitySchema API.
   */
  public async createComputeImageCapabilitySchema(
    createComputeImageCapabilitySchemaRequest: requests.CreateComputeImageCapabilitySchemaRequest
  ): Promise<responses.CreateComputeImageCapabilitySchemaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#createComputeImageCapabilitySchema.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createComputeImageCapabilitySchemaRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeImageCapabilitySchemas",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createComputeImageCapabilitySchemaRequest.createComputeImageCapabilitySchemaDetails,
        "CreateComputeImageCapabilitySchemaDetails",
        models.CreateComputeImageCapabilitySchemaDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createComputeImageCapabilitySchemaRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateComputeImageCapabilitySchemaResponse>{},
        body: await response.json(),
        bodyKey: "computeImageCapabilitySchema",
        bodyModel: "model.ComputeImageCapabilitySchema",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new dedicated virtual machine host in the specified compartment and the specified availability domain.
   * Dedicated virtual machine hosts enable you to run your Compute virtual machine (VM) instances on dedicated servers
   * that are a single tenant and not shared with other customers.
   * For more information, see [Dedicated Virtual Machine Hosts](https://docs.cloud.oracle.com/iaas/Content/Compute/Concepts/dedicatedvmhosts.htm).
   *
   * @param CreateDedicatedVmHostRequest
   * @return CreateDedicatedVmHostResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateDedicatedVmHost.ts.html |here} to see how to use CreateDedicatedVmHost API.
   */
  public async createDedicatedVmHost(
    createDedicatedVmHostRequest: requests.CreateDedicatedVmHostRequest
  ): Promise<responses.CreateDedicatedVmHostResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#createDedicatedVmHost.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDedicatedVmHostRequest.opcRequestId,
      "opc-retry-token": createDedicatedVmHostRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDedicatedVmHostRequest.createDedicatedVmHostDetails,
        "CreateDedicatedVmHostDetails",
        models.CreateDedicatedVmHostDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createDedicatedVmHostRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDedicatedVmHostResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedVmHost",
        bodyModel: "model.DedicatedVmHost",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a boot disk image for the specified instance or imports an exported image from the Oracle Cloud Infrastructure Object Storage service.
* <p>
When creating a new image, you must provide the OCID of the instance you want to use as the basis for the image, and
* the OCID of the compartment containing that instance. For more information about images,
* see [Managing Custom Images](https://docs.cloud.oracle.com/Content/Compute/Tasks/managingcustomimages.htm).
* <p>
When importing an exported image from Object Storage, you specify the source information
* in {@link #imageSourceDetails(ImageSourceDetailsRequest) imageSourceDetails}.
* <p>
When importing an image based on the namespace, bucket name, and object name,
* use {@link #imageSourceViaObjectStorageTupleDetails(ImageSourceViaObjectStorageTupleDetailsRequest) imageSourceViaObjectStorageTupleDetails}.
* <p>
When importing an image based on the Object Storage URL, use
* {@link #imageSourceViaObjectStorageUriDetails(ImageSourceViaObjectStorageUriDetailsRequest) imageSourceViaObjectStorageUriDetails}.
* See [Object Storage URLs](https://docs.cloud.oracle.com/Content/Compute/Tasks/imageimportexport.htm#URLs) and [Using Pre-Authenticated Requests](https://docs.cloud.oracle.com/Content/Object/Tasks/usingpreauthenticatedrequests.htm)
* for constructing URLs for image import/export.
* <p>
For more information about importing exported images, see
* [Image Import/Export](https://docs.cloud.oracle.com/Content/Compute/Tasks/imageimportexport.htm).
* <p>
You may optionally specify a *display name* for the image, which is simply a friendly name or description.
* It does not have to be unique, and you can change it. See {@link #updateImage(UpdateImageRequest) updateImage}.
* Avoid entering confidential information.
* 
     * @param CreateImageRequest
     * @return CreateImageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateImage.ts.html |here} to see how to use CreateImage API.
     */
  public async createImage(
    createImageRequest: requests.CreateImageRequest
  ): Promise<responses.CreateImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#createImage.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createImageRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createImageRequest.createImageDetails,
        "CreateImageDetails",
        models.CreateImageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createImageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateImageResponse>{},
        body: await response.json(),
        bodyKey: "image",
        bodyModel: "model.Image",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new console connection to the specified instance.
* After the console connection has been created and is available,
* you connect to the console using SSH.
* <p>
For more information about console access, see [Accessing the Console](https://docs.cloud.oracle.com/Content/Compute/References/serialconsole.htm).
* 
     * @param CreateInstanceConsoleConnectionRequest
     * @return CreateInstanceConsoleConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateInstanceConsoleConnection.ts.html |here} to see how to use CreateInstanceConsoleConnection API.
     */
  public async createInstanceConsoleConnection(
    createInstanceConsoleConnectionRequest: requests.CreateInstanceConsoleConnectionRequest
  ): Promise<responses.CreateInstanceConsoleConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#createInstanceConsoleConnection.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createInstanceConsoleConnectionRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleConnections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createInstanceConsoleConnectionRequest.createInstanceConsoleConnectionDetails,
        "CreateInstanceConsoleConnectionDetails",
        models.CreateInstanceConsoleConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createInstanceConsoleConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateInstanceConsoleConnectionResponse>{},
        body: await response.json(),
        bodyKey: "instanceConsoleConnection",
        bodyModel: "model.InstanceConsoleConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a subscription for a listing resource version for a compartment.
   * @param DeleteAppCatalogSubscriptionRequest
   * @return DeleteAppCatalogSubscriptionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteAppCatalogSubscription.ts.html |here} to see how to use DeleteAppCatalogSubscription API.
   */
  public async deleteAppCatalogSubscription(
    deleteAppCatalogSubscriptionRequest: requests.DeleteAppCatalogSubscriptionRequest
  ): Promise<responses.DeleteAppCatalogSubscriptionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#deleteAppCatalogSubscription.");
    const pathParams = {};

    const queryParams = {
      "listingId": deleteAppCatalogSubscriptionRequest.listingId,
      "compartmentId": deleteAppCatalogSubscriptionRequest.compartmentId,
      "resourceVersion": deleteAppCatalogSubscriptionRequest.resourceVersion
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogSubscriptions",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteAppCatalogSubscriptionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAppCatalogSubscriptionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified Compute Image Capability Schema
   *
   * @param DeleteComputeImageCapabilitySchemaRequest
   * @return DeleteComputeImageCapabilitySchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteComputeImageCapabilitySchema.ts.html |here} to see how to use DeleteComputeImageCapabilitySchema API.
   */
  public async deleteComputeImageCapabilitySchema(
    deleteComputeImageCapabilitySchemaRequest: requests.DeleteComputeImageCapabilitySchemaRequest
  ): Promise<responses.DeleteComputeImageCapabilitySchemaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#deleteComputeImageCapabilitySchema.");
    const pathParams = {
      "{computeImageCapabilitySchemaId}":
        deleteComputeImageCapabilitySchemaRequest.computeImageCapabilitySchemaId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteComputeImageCapabilitySchemaRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteComputeImageCapabilitySchemaRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteComputeImageCapabilitySchemaResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified console history metadata and the console history data.
   * @param DeleteConsoleHistoryRequest
   * @return DeleteConsoleHistoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteConsoleHistory.ts.html |here} to see how to use DeleteConsoleHistory API.
   */
  public async deleteConsoleHistory(
    deleteConsoleHistoryRequest: requests.DeleteConsoleHistoryRequest
  ): Promise<responses.DeleteConsoleHistoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#deleteConsoleHistory.");
    const pathParams = {
      "{instanceConsoleHistoryId}": deleteConsoleHistoryRequest.instanceConsoleHistoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteConsoleHistoryRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories/{instanceConsoleHistoryId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteConsoleHistoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteConsoleHistoryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified dedicated virtual machine host.
* <p>
If any VM instances are assigned to the dedicated virtual machine host,
* the delete operation will fail and the service will return a 409 response code.
* 
     * @param DeleteDedicatedVmHostRequest
     * @return DeleteDedicatedVmHostResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteDedicatedVmHost.ts.html |here} to see how to use DeleteDedicatedVmHost API.
     */
  public async deleteDedicatedVmHost(
    deleteDedicatedVmHostRequest: requests.DeleteDedicatedVmHostRequest
  ): Promise<responses.DeleteDedicatedVmHostResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#deleteDedicatedVmHost.");
    const pathParams = {
      "{dedicatedVmHostId}": deleteDedicatedVmHostRequest.dedicatedVmHostId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteDedicatedVmHostRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts/{dedicatedVmHostId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteDedicatedVmHostRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDedicatedVmHostResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an image.
   * @param DeleteImageRequest
   * @return DeleteImageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteImage.ts.html |here} to see how to use DeleteImage API.
   */
  public async deleteImage(
    deleteImageRequest: requests.DeleteImageRequest
  ): Promise<responses.DeleteImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#deleteImage.");
    const pathParams = {
      "{imageId}": deleteImageRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteImageRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteImageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteImageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified instance console connection.
   * @param DeleteInstanceConsoleConnectionRequest
   * @return DeleteInstanceConsoleConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteInstanceConsoleConnection.ts.html |here} to see how to use DeleteInstanceConsoleConnection API.
   */
  public async deleteInstanceConsoleConnection(
    deleteInstanceConsoleConnectionRequest: requests.DeleteInstanceConsoleConnectionRequest
  ): Promise<responses.DeleteInstanceConsoleConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#deleteInstanceConsoleConnection.");
    const pathParams = {
      "{instanceConsoleConnectionId}":
        deleteInstanceConsoleConnectionRequest.instanceConsoleConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteInstanceConsoleConnectionRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleConnections/{instanceConsoleConnectionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteInstanceConsoleConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteInstanceConsoleConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Detaches a boot volume from an instance. You must specify the OCID of the boot volume attachment.
* <p>
This is an asynchronous operation. The attachment's `lifecycleState` will change to DETACHING temporarily
* until the attachment is completely removed.
* 
     * @param DetachBootVolumeRequest
     * @return DetachBootVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DetachBootVolume.ts.html |here} to see how to use DetachBootVolume API.
     */
  public async detachBootVolume(
    detachBootVolumeRequest: requests.DetachBootVolumeRequest
  ): Promise<responses.DetachBootVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#detachBootVolume.");
    const pathParams = {
      "{bootVolumeAttachmentId}": detachBootVolumeRequest.bootVolumeAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detachBootVolumeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeAttachments/{bootVolumeAttachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      detachBootVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachBootVolumeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detaches and deletes the specified secondary VNIC.
   * This operation cannot be used on the instance's primary VNIC.
   * When you terminate an instance, all attached VNICs (primary
   * and secondary) are automatically detached and deleted.
   * <p>
   **Important:** If the VNIC has a
   * {@link PrivateIp} that is the
   * [target of a route rule](https://docs.cloud.oracle.com/Content/Network/Tasks/managingroutetables.htm#privateip),
   * deleting the VNIC causes that route rule to blackhole and the traffic
   * will be dropped.
   *
   * @param DetachVnicRequest
   * @return DetachVnicResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DetachVnic.ts.html |here} to see how to use DetachVnic API.
   */
  public async detachVnic(
    detachVnicRequest: requests.DetachVnicRequest
  ): Promise<responses.DetachVnicResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#detachVnic.");
    const pathParams = {
      "{vnicAttachmentId}": detachVnicRequest.vnicAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detachVnicRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnicAttachments/{vnicAttachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      detachVnicRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachVnicResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Detaches a storage volume from an instance. You must specify the OCID of the volume attachment.
* <p>
This is an asynchronous operation. The attachment's `lifecycleState` will change to DETACHING temporarily
* until the attachment is completely removed.
* 
     * @param DetachVolumeRequest
     * @return DetachVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DetachVolume.ts.html |here} to see how to use DetachVolume API.
     */
  public async detachVolume(
    detachVolumeRequest: requests.DetachVolumeRequest
  ): Promise<responses.DetachVolumeResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#detachVolume.");
    const pathParams = {
      "{volumeAttachmentId}": detachVolumeRequest.volumeAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detachVolumeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeAttachments/{volumeAttachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      detachVolumeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachVolumeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Exports the specified image to the Oracle Cloud Infrastructure Object Storage service. You can use the Object Storage URL,
* or the namespace, bucket name, and object name when specifying the location to export to.
* <p>
For more information about exporting images, see [Image Import/Export](https://docs.cloud.oracle.com/Content/Compute/Tasks/imageimportexport.htm).
* <p>
To perform an image export, you need write access to the Object Storage bucket for the image,
* see [Let Users Write Objects to Object Storage Buckets](https://docs.cloud.oracle.com/Content/Identity/Concepts/commonpolicies.htm#Let4).
* <p>
See [Object Storage URLs](https://docs.cloud.oracle.com/Content/Compute/Tasks/imageimportexport.htm#URLs) and [Using Pre-Authenticated Requests](https://docs.cloud.oracle.com/Content/Object/Tasks/usingpreauthenticatedrequests.htm)
* for constructing URLs for image import/export.
* 
     * @param ExportImageRequest
     * @return ExportImageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ExportImage.ts.html |here} to see how to use ExportImage API.
     */
  public async exportImage(
    exportImageRequest: requests.ExportImageRequest
  ): Promise<responses.ExportImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#exportImage.");
    const pathParams = {
      "{imageId}": exportImageRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": exportImageRequest.opcRetryToken,
      "if-match": exportImageRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/actions/export",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        exportImageRequest.exportImageDetails,
        "ExportImageDetails",
        models.ExportImageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      exportImageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ExportImageResponse>{},
        body: await response.json(),
        bodyKey: "image",
        bodyModel: "model.Image",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified listing.
   * @param GetAppCatalogListingRequest
   * @return GetAppCatalogListingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetAppCatalogListing.ts.html |here} to see how to use GetAppCatalogListing API.
   */
  public async getAppCatalogListing(
    getAppCatalogListingRequest: requests.GetAppCatalogListingRequest
  ): Promise<responses.GetAppCatalogListingResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getAppCatalogListing.");
    const pathParams = {
      "{listingId}": getAppCatalogListingRequest.listingId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogListings/{listingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getAppCatalogListingRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAppCatalogListingResponse>{},
        body: await response.json(),
        bodyKey: "appCatalogListing",
        bodyModel: "model.AppCatalogListing",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the agreements for a particular resource version of a listing.
   * @param GetAppCatalogListingAgreementsRequest
   * @return GetAppCatalogListingAgreementsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetAppCatalogListingAgreements.ts.html |here} to see how to use GetAppCatalogListingAgreements API.
   */
  public async getAppCatalogListingAgreements(
    getAppCatalogListingAgreementsRequest: requests.GetAppCatalogListingAgreementsRequest
  ): Promise<responses.GetAppCatalogListingAgreementsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getAppCatalogListingAgreements.");
    const pathParams = {
      "{listingId}": getAppCatalogListingAgreementsRequest.listingId,
      "{resourceVersion}": getAppCatalogListingAgreementsRequest.resourceVersion
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogListings/{listingId}/resourceVersions/{resourceVersion}/agreements",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getAppCatalogListingAgreementsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAppCatalogListingAgreementsResponse>{},
        body: await response.json(),
        bodyKey: "appCatalogListingResourceVersionAgreements",
        bodyModel: "model.AppCatalogListingResourceVersionAgreements",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified listing resource version.
   * @param GetAppCatalogListingResourceVersionRequest
   * @return GetAppCatalogListingResourceVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetAppCatalogListingResourceVersion.ts.html |here} to see how to use GetAppCatalogListingResourceVersion API.
   */
  public async getAppCatalogListingResourceVersion(
    getAppCatalogListingResourceVersionRequest: requests.GetAppCatalogListingResourceVersionRequest
  ): Promise<responses.GetAppCatalogListingResourceVersionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getAppCatalogListingResourceVersion.");
    const pathParams = {
      "{listingId}": getAppCatalogListingResourceVersionRequest.listingId,
      "{resourceVersion}": getAppCatalogListingResourceVersionRequest.resourceVersion
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogListings/{listingId}/resourceVersions/{resourceVersion}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getAppCatalogListingResourceVersionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAppCatalogListingResourceVersionResponse>{},
        body: await response.json(),
        bodyKey: "appCatalogListingResourceVersion",
        bodyModel: "model.AppCatalogListingResourceVersion",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified boot volume attachment.
   * @param GetBootVolumeAttachmentRequest
   * @return GetBootVolumeAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetBootVolumeAttachment.ts.html |here} to see how to use GetBootVolumeAttachment API.
   */
  public async getBootVolumeAttachment(
    getBootVolumeAttachmentRequest: requests.GetBootVolumeAttachmentRequest
  ): Promise<responses.GetBootVolumeAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getBootVolumeAttachment.");
    const pathParams = {
      "{bootVolumeAttachmentId}": getBootVolumeAttachmentRequest.bootVolumeAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeAttachments/{bootVolumeAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getBootVolumeAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBootVolumeAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "bootVolumeAttachment",
        bodyModel: "model.BootVolumeAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Compute Global Image Capability Schema
   * @param GetComputeGlobalImageCapabilitySchemaRequest
   * @return GetComputeGlobalImageCapabilitySchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetComputeGlobalImageCapabilitySchema.ts.html |here} to see how to use GetComputeGlobalImageCapabilitySchema API.
   */
  public async getComputeGlobalImageCapabilitySchema(
    getComputeGlobalImageCapabilitySchemaRequest: requests.GetComputeGlobalImageCapabilitySchemaRequest
  ): Promise<responses.GetComputeGlobalImageCapabilitySchemaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getComputeGlobalImageCapabilitySchema.");
    const pathParams = {
      "{computeGlobalImageCapabilitySchemaId}":
        getComputeGlobalImageCapabilitySchemaRequest.computeGlobalImageCapabilitySchemaId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeGlobalImageCapabilitySchemas/{computeGlobalImageCapabilitySchemaId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getComputeGlobalImageCapabilitySchemaRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetComputeGlobalImageCapabilitySchemaResponse>{},
        body: await response.json(),
        bodyKey: "computeGlobalImageCapabilitySchema",
        bodyModel: "model.ComputeGlobalImageCapabilitySchema",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Compute Global Image Capability Schema Version
   * @param GetComputeGlobalImageCapabilitySchemaVersionRequest
   * @return GetComputeGlobalImageCapabilitySchemaVersionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetComputeGlobalImageCapabilitySchemaVersion.ts.html |here} to see how to use GetComputeGlobalImageCapabilitySchemaVersion API.
   */
  public async getComputeGlobalImageCapabilitySchemaVersion(
    getComputeGlobalImageCapabilitySchemaVersionRequest: requests.GetComputeGlobalImageCapabilitySchemaVersionRequest
  ): Promise<responses.GetComputeGlobalImageCapabilitySchemaVersionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#getComputeGlobalImageCapabilitySchemaVersion."
      );
    const pathParams = {
      "{computeGlobalImageCapabilitySchemaId}":
        getComputeGlobalImageCapabilitySchemaVersionRequest.computeGlobalImageCapabilitySchemaId,
      "{computeGlobalImageCapabilitySchemaVersionName}":
        getComputeGlobalImageCapabilitySchemaVersionRequest.computeGlobalImageCapabilitySchemaVersionName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/computeGlobalImageCapabilitySchemas/{computeGlobalImageCapabilitySchemaId}/versions/{computeGlobalImageCapabilitySchemaVersionName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getComputeGlobalImageCapabilitySchemaVersionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetComputeGlobalImageCapabilitySchemaVersionResponse>{},
        body: await response.json(),
        bodyKey: "computeGlobalImageCapabilitySchemaVersion",
        bodyModel: "model.ComputeGlobalImageCapabilitySchemaVersion",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Compute Image Capability Schema
   *
   * @param GetComputeImageCapabilitySchemaRequest
   * @return GetComputeImageCapabilitySchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetComputeImageCapabilitySchema.ts.html |here} to see how to use GetComputeImageCapabilitySchema API.
   */
  public async getComputeImageCapabilitySchema(
    getComputeImageCapabilitySchemaRequest: requests.GetComputeImageCapabilitySchemaRequest
  ): Promise<responses.GetComputeImageCapabilitySchemaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getComputeImageCapabilitySchema.");
    const pathParams = {
      "{computeImageCapabilitySchemaId}":
        getComputeImageCapabilitySchemaRequest.computeImageCapabilitySchemaId
    };

    const queryParams = {
      "isMergeEnabled": getComputeImageCapabilitySchemaRequest.isMergeEnabled
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getComputeImageCapabilitySchemaRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetComputeImageCapabilitySchemaResponse>{},
        body: await response.json(),
        bodyKey: "computeImageCapabilitySchema",
        bodyModel: "model.ComputeImageCapabilitySchema",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Shows the metadata for the specified console history.
   * See {@link #captureConsoleHistory(CaptureConsoleHistoryRequest) captureConsoleHistory}
   * for details about using the console history operations.
   *
   * @param GetConsoleHistoryRequest
   * @return GetConsoleHistoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetConsoleHistory.ts.html |here} to see how to use GetConsoleHistory API.
   */
  public async getConsoleHistory(
    getConsoleHistoryRequest: requests.GetConsoleHistoryRequest
  ): Promise<responses.GetConsoleHistoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getConsoleHistory.");
    const pathParams = {
      "{instanceConsoleHistoryId}": getConsoleHistoryRequest.instanceConsoleHistoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories/{instanceConsoleHistoryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getConsoleHistoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConsoleHistoryResponse>{},
        body: await response.json(),
        bodyKey: "consoleHistory",
        bodyModel: "model.ConsoleHistory",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the actual console history data (not the metadata).
   * See {@link #captureConsoleHistory(CaptureConsoleHistoryRequest) captureConsoleHistory}
   * for details about using the console history operations.
   *
   * @param GetConsoleHistoryContentRequest
   * @return GetConsoleHistoryContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetConsoleHistoryContent.ts.html |here} to see how to use GetConsoleHistoryContent API.
   */
  public async getConsoleHistoryContent(
    getConsoleHistoryContentRequest: requests.GetConsoleHistoryContentRequest
  ): Promise<responses.GetConsoleHistoryContentResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getConsoleHistoryContent.");
    const pathParams = {
      "{instanceConsoleHistoryId}": getConsoleHistoryContentRequest.instanceConsoleHistoryId
    };

    const queryParams = {
      "offset": getConsoleHistoryContentRequest.offset,
      "length": getConsoleHistoryContentRequest.length
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories/{instanceConsoleHistoryId}/data",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getConsoleHistoryContentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConsoleHistoryContentResponse>{},
        body: await response.json(),
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-bytes-remaining"),
            key: "opcBytesRemaining",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified dedicated virtual machine host.
   * @param GetDedicatedVmHostRequest
   * @return GetDedicatedVmHostResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDedicatedVmHost.ts.html |here} to see how to use GetDedicatedVmHost API.
   */
  public async getDedicatedVmHost(
    getDedicatedVmHostRequest: requests.GetDedicatedVmHostRequest
  ): Promise<responses.GetDedicatedVmHostResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getDedicatedVmHost.");
    const pathParams = {
      "{dedicatedVmHostId}": getDedicatedVmHostRequest.dedicatedVmHostId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDedicatedVmHostRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts/{dedicatedVmHostId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDedicatedVmHostRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDedicatedVmHostResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedVmHost",
        bodyModel: "model.DedicatedVmHost",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified image.
   * @param GetImageRequest
   * @return GetImageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetImage.ts.html |here} to see how to use GetImage API.
   */
  public async getImage(
    getImageRequest: requests.GetImageRequest
  ): Promise<responses.GetImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getImage.");
    const pathParams = {
      "{imageId}": getImageRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getImageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetImageResponse>{},
        body: await response.json(),
        bodyKey: "image",
        bodyModel: "model.Image",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves an image shape compatibility entry.
   * @param GetImageShapeCompatibilityEntryRequest
   * @return GetImageShapeCompatibilityEntryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetImageShapeCompatibilityEntry.ts.html |here} to see how to use GetImageShapeCompatibilityEntry API.
   */
  public async getImageShapeCompatibilityEntry(
    getImageShapeCompatibilityEntryRequest: requests.GetImageShapeCompatibilityEntryRequest
  ): Promise<responses.GetImageShapeCompatibilityEntryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getImageShapeCompatibilityEntry.");
    const pathParams = {
      "{imageId}": getImageShapeCompatibilityEntryRequest.imageId,
      "{shapeName}": getImageShapeCompatibilityEntryRequest.shapeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getImageShapeCompatibilityEntryRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/shapes/{shapeName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getImageShapeCompatibilityEntryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetImageShapeCompatibilityEntryResponse>{},
        body: await response.json(),
        bodyKey: "imageShapeCompatibilityEntry",
        bodyModel: "model.ImageShapeCompatibilityEntry",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified instance.
   * @param GetInstanceRequest
   * @return GetInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstance.ts.html |here} to see how to use GetInstance API.
   */
  public async getInstance(
    getInstanceRequest: requests.GetInstanceRequest
  ): Promise<responses.GetInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getInstance.");
    const pathParams = {
      "{instanceId}": getInstanceRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getInstanceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstanceResponse>{},
        body: await response.json(),
        bodyKey: "instance",
        bodyModel: "model.Instance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified instance console connection's information.
   * @param GetInstanceConsoleConnectionRequest
   * @return GetInstanceConsoleConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstanceConsoleConnection.ts.html |here} to see how to use GetInstanceConsoleConnection API.
   */
  public async getInstanceConsoleConnection(
    getInstanceConsoleConnectionRequest: requests.GetInstanceConsoleConnectionRequest
  ): Promise<responses.GetInstanceConsoleConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getInstanceConsoleConnection.");
    const pathParams = {
      "{instanceConsoleConnectionId}":
        getInstanceConsoleConnectionRequest.instanceConsoleConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleConnections/{instanceConsoleConnectionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getInstanceConsoleConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstanceConsoleConnectionResponse>{},
        body: await response.json(),
        bodyKey: "instanceConsoleConnection",
        bodyModel: "model.InstanceConsoleConnection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the information for the specified VNIC attachment.
   *
   * @param GetVnicAttachmentRequest
   * @return GetVnicAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVnicAttachment.ts.html |here} to see how to use GetVnicAttachment API.
   */
  public async getVnicAttachment(
    getVnicAttachmentRequest: requests.GetVnicAttachmentRequest
  ): Promise<responses.GetVnicAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getVnicAttachment.");
    const pathParams = {
      "{vnicAttachmentId}": getVnicAttachmentRequest.vnicAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnicAttachments/{vnicAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVnicAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVnicAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "vnicAttachment",
        bodyModel: "model.VnicAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified volume attachment.
   * @param GetVolumeAttachmentRequest
   * @return GetVolumeAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVolumeAttachment.ts.html |here} to see how to use GetVolumeAttachment API.
   */
  public async getVolumeAttachment(
    getVolumeAttachmentRequest: requests.GetVolumeAttachmentRequest
  ): Promise<responses.GetVolumeAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#getVolumeAttachment.");
    const pathParams = {
      "{volumeAttachmentId}": getVolumeAttachmentRequest.volumeAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeAttachments/{volumeAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVolumeAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVolumeAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "volumeAttachment",
        bodyModel: "model.VolumeAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the generated credentials for the instance. Only works for instances that require a password to log in, such as Windows.
   * For certain operating systems, users will be forced to change the initial credentials.
   *
   * @param GetWindowsInstanceInitialCredentialsRequest
   * @return GetWindowsInstanceInitialCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetWindowsInstanceInitialCredentials.ts.html |here} to see how to use GetWindowsInstanceInitialCredentials API.
   */
  public async getWindowsInstanceInitialCredentials(
    getWindowsInstanceInitialCredentialsRequest: requests.GetWindowsInstanceInitialCredentialsRequest
  ): Promise<responses.GetWindowsInstanceInitialCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#getWindowsInstanceInitialCredentials.");
    const pathParams = {
      "{instanceId}": getWindowsInstanceInitialCredentialsRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}/initialCredentials",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getWindowsInstanceInitialCredentialsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWindowsInstanceInitialCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "instanceCredentials",
        bodyModel: "model.InstanceCredentials",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Performs one of the following power actions on the specified instance:
* <p>
- **START** - Powers on the instance.
* <p>
- **STOP** - Powers off the instance.
* <p>
- **RESET** - Powers off the instance and then powers it back on.
* <p>
- **SOFTSTOP** - Gracefully shuts down the instance by sending a shutdown command to the operating system.
* If the applications that run on the instance take a long time to shut down, they could be improperly stopped, resulting
* in data corruption. To avoid this, shut down the instance using the commands available in the OS before you softstop the
* instance.
* <p>
- **SOFTRESET** - Gracefully reboots the instance by sending a shutdown command to the operating system, and
* then powers the instance back on.
* <p>
For more information, see [Stopping and Starting an Instance](https://docs.cloud.oracle.com/Content/Compute/Tasks/restartinginstance.htm).
* 
     * @param InstanceActionRequest
     * @return InstanceActionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/InstanceAction.ts.html |here} to see how to use InstanceAction API.
     */
  public async instanceAction(
    instanceActionRequest: requests.InstanceActionRequest
  ): Promise<responses.InstanceActionResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#instanceAction.");
    const pathParams = {
      "{instanceId}": instanceActionRequest.instanceId
    };

    const queryParams = {
      "action": instanceActionRequest.action
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": instanceActionRequest.opcRetryToken,
      "if-match": instanceActionRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      instanceActionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.InstanceActionResponse>{},
        body: await response.json(),
        bodyKey: "instance",
        bodyModel: "model.Instance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new instance in the specified compartment and the specified availability domain.
* For general information about instances, see
* [Overview of the Compute Service](https://docs.cloud.oracle.com/Content/Compute/Concepts/computeoverview.htm).
* <p>
For information about access control and compartments, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* <p>
For information about availability domains, see
* [Regions and Availability Domains](https://docs.cloud.oracle.com/Content/General/Concepts/regions.htm).
* To get a list of availability domains, use the `ListAvailabilityDomains` operation
* in the Identity and Access Management Service API.
* <p>
All Oracle Cloud Infrastructure resources, including instances, get an Oracle-assigned,
* unique ID called an Oracle Cloud Identifier (OCID).
* When you create a resource, you can find its OCID in the response. You can
* also retrieve a resource's OCID by using a List API operation
* on that resource type, or by viewing the resource in the Console.
* <p>
To launch an instance using an image or a boot volume use the `sourceDetails` parameter in {@link LaunchInstanceDetails}.
* <p>
When you launch an instance, it is automatically attached to a virtual
* network interface card (VNIC), called the *primary VNIC*. The VNIC
* has a private IP address from the subnet's CIDR. You can either assign a
* private IP address of your choice or let Oracle automatically assign one.
* You can choose whether the instance has a public IP address. To retrieve the
* addresses, use the {@link #listVnicAttachments(ListVnicAttachmentsRequest) listVnicAttachments}
* operation to get the VNIC ID for the instance, and then call
* {@link #getVnic(GetVnicRequest) getVnic} with the VNIC ID.
* <p>
You can later add secondary VNICs to an instance. For more information, see
* [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/Content/Network/Tasks/managingVNICs.htm).
* <p>
To launch an instance from a Marketplace image listing, you must provide the image ID of the
* listing resource version that you want, but you also must subscribe to the listing before you try
* to launch the instance. To subscribe to the listing, use the {@link #getAppCatalogListingAgreements(GetAppCatalogListingAgreementsRequest) getAppCatalogListingAgreements}
* operation to get the signature for the terms of use agreement for the desired listing resource version.
* Then, call {@link #createAppCatalogSubscription(CreateAppCatalogSubscriptionRequest) createAppCatalogSubscription}
* with the signature. To get the image ID for the LaunchInstance operation, call
* {@link #getAppCatalogListingResourceVersion(GetAppCatalogListingResourceVersionRequest) getAppCatalogListingResourceVersion}.
* 
     * @param LaunchInstanceRequest
     * @return LaunchInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/LaunchInstance.ts.html |here} to see how to use LaunchInstance API.
     */
  public async launchInstance(
    launchInstanceRequest: requests.LaunchInstanceRequest
  ): Promise<responses.LaunchInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#launchInstance.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": launchInstanceRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        launchInstanceRequest.launchInstanceDetails,
        "LaunchInstanceDetails",
        models.LaunchInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      launchInstanceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.LaunchInstanceResponse>{},
        body: await response.json(),
        bodyKey: "instance",
        bodyModel: "model.Instance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets all resource versions for a particular listing.
   * @param ListAppCatalogListingResourceVersionsRequest
   * @return ListAppCatalogListingResourceVersionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListAppCatalogListingResourceVersions.ts.html |here} to see how to use ListAppCatalogListingResourceVersions API.
   */
  public async listAppCatalogListingResourceVersions(
    listAppCatalogListingResourceVersionsRequest: requests.ListAppCatalogListingResourceVersionsRequest
  ): Promise<responses.ListAppCatalogListingResourceVersionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listAppCatalogListingResourceVersions.");
    const pathParams = {
      "{listingId}": listAppCatalogListingResourceVersionsRequest.listingId
    };

    const queryParams = {
      "limit": listAppCatalogListingResourceVersionsRequest.limit,
      "page": listAppCatalogListingResourceVersionsRequest.page,
      "sortOrder": listAppCatalogListingResourceVersionsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogListings/{listingId}/resourceVersions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listAppCatalogListingResourceVersionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAppCatalogListingResourceVersionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "AppCatalogListingResourceVersionSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.AppCatalogListingResourceVersionSummary objects
   * contained in responses from the listAppCatalogListingResourceVersions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogListingResourceVersions(
    request: requests.ListAppCatalogListingResourceVersionsRequest
  ): AsyncIterableIterator<models.AppCatalogListingResourceVersionSummary> {
    return paginateRecords(request, req => this.listAppCatalogListingResourceVersions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAppCatalogListingResourceVersions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogListingResourceVersionsResponses(
    request: requests.ListAppCatalogListingResourceVersionsRequest
  ): AsyncIterableIterator<responses.ListAppCatalogListingResourceVersionsResponse> {
    return paginateResponses(request, req => this.listAppCatalogListingResourceVersions(req));
  }

  /**
   * Lists the published listings.
   * @param ListAppCatalogListingsRequest
   * @return ListAppCatalogListingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListAppCatalogListings.ts.html |here} to see how to use ListAppCatalogListings API.
   */
  public async listAppCatalogListings(
    listAppCatalogListingsRequest: requests.ListAppCatalogListingsRequest
  ): Promise<responses.ListAppCatalogListingsResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listAppCatalogListings.");
    const pathParams = {};

    const queryParams = {
      "limit": listAppCatalogListingsRequest.limit,
      "page": listAppCatalogListingsRequest.page,
      "sortOrder": listAppCatalogListingsRequest.sortOrder,
      "publisherName": listAppCatalogListingsRequest.publisherName,
      "publisherType": listAppCatalogListingsRequest.publisherType,
      "displayName": listAppCatalogListingsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogListings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listAppCatalogListingsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAppCatalogListingsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "AppCatalogListingSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.AppCatalogListingSummary objects
   * contained in responses from the listAppCatalogListings operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogListings(
    request: requests.ListAppCatalogListingsRequest
  ): AsyncIterableIterator<models.AppCatalogListingSummary> {
    return paginateRecords(request, req => this.listAppCatalogListings(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAppCatalogListings operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogListingsResponses(
    request: requests.ListAppCatalogListingsRequest
  ): AsyncIterableIterator<responses.ListAppCatalogListingsResponse> {
    return paginateResponses(request, req => this.listAppCatalogListings(req));
  }

  /**
   * Lists subscriptions for a compartment.
   * @param ListAppCatalogSubscriptionsRequest
   * @return ListAppCatalogSubscriptionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListAppCatalogSubscriptions.ts.html |here} to see how to use ListAppCatalogSubscriptions API.
   */
  public async listAppCatalogSubscriptions(
    listAppCatalogSubscriptionsRequest: requests.ListAppCatalogSubscriptionsRequest
  ): Promise<responses.ListAppCatalogSubscriptionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listAppCatalogSubscriptions.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAppCatalogSubscriptionsRequest.compartmentId,
      "limit": listAppCatalogSubscriptionsRequest.limit,
      "page": listAppCatalogSubscriptionsRequest.page,
      "sortBy": listAppCatalogSubscriptionsRequest.sortBy,
      "sortOrder": listAppCatalogSubscriptionsRequest.sortOrder,
      "listingId": listAppCatalogSubscriptionsRequest.listingId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/appCatalogSubscriptions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listAppCatalogSubscriptionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAppCatalogSubscriptionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "AppCatalogSubscriptionSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.AppCatalogSubscriptionSummary objects
   * contained in responses from the listAppCatalogSubscriptions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogSubscriptions(
    request: requests.ListAppCatalogSubscriptionsRequest
  ): AsyncIterableIterator<models.AppCatalogSubscriptionSummary> {
    return paginateRecords(request, req => this.listAppCatalogSubscriptions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAppCatalogSubscriptions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAppCatalogSubscriptionsResponses(
    request: requests.ListAppCatalogSubscriptionsRequest
  ): AsyncIterableIterator<responses.ListAppCatalogSubscriptionsResponse> {
    return paginateResponses(request, req => this.listAppCatalogSubscriptions(req));
  }

  /**
   * Lists the boot volume attachments in the specified compartment. You can filter the
   * list by specifying an instance OCID, boot volume OCID, or both.
   *
   * @param ListBootVolumeAttachmentsRequest
   * @return ListBootVolumeAttachmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListBootVolumeAttachments.ts.html |here} to see how to use ListBootVolumeAttachments API.
   */
  public async listBootVolumeAttachments(
    listBootVolumeAttachmentsRequest: requests.ListBootVolumeAttachmentsRequest
  ): Promise<responses.ListBootVolumeAttachmentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listBootVolumeAttachments.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listBootVolumeAttachmentsRequest.availabilityDomain,
      "compartmentId": listBootVolumeAttachmentsRequest.compartmentId,
      "limit": listBootVolumeAttachmentsRequest.limit,
      "page": listBootVolumeAttachmentsRequest.page,
      "instanceId": listBootVolumeAttachmentsRequest.instanceId,
      "bootVolumeId": listBootVolumeAttachmentsRequest.bootVolumeId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bootVolumeAttachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listBootVolumeAttachmentsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBootVolumeAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "BootVolumeAttachment[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.BootVolumeAttachment objects
   * contained in responses from the listBootVolumeAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumeAttachments(
    request: requests.ListBootVolumeAttachmentsRequest
  ): AsyncIterableIterator<models.BootVolumeAttachment> {
    return paginateRecords(request, req => this.listBootVolumeAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBootVolumeAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBootVolumeAttachmentsResponses(
    request: requests.ListBootVolumeAttachmentsRequest
  ): AsyncIterableIterator<responses.ListBootVolumeAttachmentsResponse> {
    return paginateResponses(request, req => this.listBootVolumeAttachments(req));
  }

  /**
   * Lists Compute Global Image Capability Schema versions in the specified compartment.
   *
   * @param ListComputeGlobalImageCapabilitySchemaVersionsRequest
   * @return ListComputeGlobalImageCapabilitySchemaVersionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeGlobalImageCapabilitySchemaVersions.ts.html |here} to see how to use ListComputeGlobalImageCapabilitySchemaVersions API.
   */
  public async listComputeGlobalImageCapabilitySchemaVersions(
    listComputeGlobalImageCapabilitySchemaVersionsRequest: requests.ListComputeGlobalImageCapabilitySchemaVersionsRequest
  ): Promise<responses.ListComputeGlobalImageCapabilitySchemaVersionsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeClient#listComputeGlobalImageCapabilitySchemaVersions."
      );
    const pathParams = {
      "{computeGlobalImageCapabilitySchemaId}":
        listComputeGlobalImageCapabilitySchemaVersionsRequest.computeGlobalImageCapabilitySchemaId
    };

    const queryParams = {
      "displayName": listComputeGlobalImageCapabilitySchemaVersionsRequest.displayName,
      "limit": listComputeGlobalImageCapabilitySchemaVersionsRequest.limit,
      "page": listComputeGlobalImageCapabilitySchemaVersionsRequest.page,
      "sortBy": listComputeGlobalImageCapabilitySchemaVersionsRequest.sortBy,
      "sortOrder": listComputeGlobalImageCapabilitySchemaVersionsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeGlobalImageCapabilitySchemas/{computeGlobalImageCapabilitySchemaId}/versions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listComputeGlobalImageCapabilitySchemaVersionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeGlobalImageCapabilitySchemaVersionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ComputeGlobalImageCapabilitySchemaVersionSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ComputeGlobalImageCapabilitySchemaVersionSummary objects
   * contained in responses from the listComputeGlobalImageCapabilitySchemaVersions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeGlobalImageCapabilitySchemaVersions(
    request: requests.ListComputeGlobalImageCapabilitySchemaVersionsRequest
  ): AsyncIterableIterator<models.ComputeGlobalImageCapabilitySchemaVersionSummary> {
    return paginateRecords(request, req =>
      this.listComputeGlobalImageCapabilitySchemaVersions(req)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listComputeGlobalImageCapabilitySchemaVersions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeGlobalImageCapabilitySchemaVersionsResponses(
    request: requests.ListComputeGlobalImageCapabilitySchemaVersionsRequest
  ): AsyncIterableIterator<responses.ListComputeGlobalImageCapabilitySchemaVersionsResponse> {
    return paginateResponses(request, req =>
      this.listComputeGlobalImageCapabilitySchemaVersions(req)
    );
  }

  /**
   * Lists Compute Global Image Capability Schema in the specified compartment.
   *
   * @param ListComputeGlobalImageCapabilitySchemasRequest
   * @return ListComputeGlobalImageCapabilitySchemasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeGlobalImageCapabilitySchemas.ts.html |here} to see how to use ListComputeGlobalImageCapabilitySchemas API.
   */
  public async listComputeGlobalImageCapabilitySchemas(
    listComputeGlobalImageCapabilitySchemasRequest: requests.ListComputeGlobalImageCapabilitySchemasRequest
  ): Promise<responses.ListComputeGlobalImageCapabilitySchemasResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listComputeGlobalImageCapabilitySchemas.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listComputeGlobalImageCapabilitySchemasRequest.compartmentId,
      "displayName": listComputeGlobalImageCapabilitySchemasRequest.displayName,
      "limit": listComputeGlobalImageCapabilitySchemasRequest.limit,
      "page": listComputeGlobalImageCapabilitySchemasRequest.page,
      "sortBy": listComputeGlobalImageCapabilitySchemasRequest.sortBy,
      "sortOrder": listComputeGlobalImageCapabilitySchemasRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeGlobalImageCapabilitySchemas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listComputeGlobalImageCapabilitySchemasRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeGlobalImageCapabilitySchemasResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ComputeGlobalImageCapabilitySchemaSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ComputeGlobalImageCapabilitySchemaSummary objects
   * contained in responses from the listComputeGlobalImageCapabilitySchemas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeGlobalImageCapabilitySchemas(
    request: requests.ListComputeGlobalImageCapabilitySchemasRequest
  ): AsyncIterableIterator<models.ComputeGlobalImageCapabilitySchemaSummary> {
    return paginateRecords(request, req => this.listComputeGlobalImageCapabilitySchemas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listComputeGlobalImageCapabilitySchemas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeGlobalImageCapabilitySchemasResponses(
    request: requests.ListComputeGlobalImageCapabilitySchemasRequest
  ): AsyncIterableIterator<responses.ListComputeGlobalImageCapabilitySchemasResponse> {
    return paginateResponses(request, req => this.listComputeGlobalImageCapabilitySchemas(req));
  }

  /**
   * Lists Compute Image Capability Schema in the specified compartment. You can also query by a specific imageId.
   *
   * @param ListComputeImageCapabilitySchemasRequest
   * @return ListComputeImageCapabilitySchemasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListComputeImageCapabilitySchemas.ts.html |here} to see how to use ListComputeImageCapabilitySchemas API.
   */
  public async listComputeImageCapabilitySchemas(
    listComputeImageCapabilitySchemasRequest: requests.ListComputeImageCapabilitySchemasRequest
  ): Promise<responses.ListComputeImageCapabilitySchemasResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listComputeImageCapabilitySchemas.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listComputeImageCapabilitySchemasRequest.compartmentId,
      "imageId": listComputeImageCapabilitySchemasRequest.imageId,
      "displayName": listComputeImageCapabilitySchemasRequest.displayName,
      "limit": listComputeImageCapabilitySchemasRequest.limit,
      "page": listComputeImageCapabilitySchemasRequest.page,
      "sortBy": listComputeImageCapabilitySchemasRequest.sortBy,
      "sortOrder": listComputeImageCapabilitySchemasRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeImageCapabilitySchemas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listComputeImageCapabilitySchemasRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListComputeImageCapabilitySchemasResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ComputeImageCapabilitySchemaSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ComputeImageCapabilitySchemaSummary objects
   * contained in responses from the listComputeImageCapabilitySchemas operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeImageCapabilitySchemas(
    request: requests.ListComputeImageCapabilitySchemasRequest
  ): AsyncIterableIterator<models.ComputeImageCapabilitySchemaSummary> {
    return paginateRecords(request, req => this.listComputeImageCapabilitySchemas(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listComputeImageCapabilitySchemas operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllComputeImageCapabilitySchemasResponses(
    request: requests.ListComputeImageCapabilitySchemasRequest
  ): AsyncIterableIterator<responses.ListComputeImageCapabilitySchemasResponse> {
    return paginateResponses(request, req => this.listComputeImageCapabilitySchemas(req));
  }

  /**
   * Lists the console history metadata for the specified compartment or instance.
   *
   * @param ListConsoleHistoriesRequest
   * @return ListConsoleHistoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListConsoleHistories.ts.html |here} to see how to use ListConsoleHistories API.
   */
  public async listConsoleHistories(
    listConsoleHistoriesRequest: requests.ListConsoleHistoriesRequest
  ): Promise<responses.ListConsoleHistoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listConsoleHistories.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listConsoleHistoriesRequest.availabilityDomain,
      "compartmentId": listConsoleHistoriesRequest.compartmentId,
      "limit": listConsoleHistoriesRequest.limit,
      "page": listConsoleHistoriesRequest.page,
      "instanceId": listConsoleHistoriesRequest.instanceId,
      "sortBy": listConsoleHistoriesRequest.sortBy,
      "sortOrder": listConsoleHistoriesRequest.sortOrder,
      "lifecycleState": listConsoleHistoriesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listConsoleHistoriesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConsoleHistoriesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ConsoleHistory[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ConsoleHistory objects
   * contained in responses from the listConsoleHistories operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllConsoleHistories(
    request: requests.ListConsoleHistoriesRequest
  ): AsyncIterableIterator<models.ConsoleHistory> {
    return paginateRecords(request, req => this.listConsoleHistories(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listConsoleHistories operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllConsoleHistoriesResponses(
    request: requests.ListConsoleHistoriesRequest
  ): AsyncIterableIterator<responses.ListConsoleHistoriesResponse> {
    return paginateResponses(request, req => this.listConsoleHistories(req));
  }

  /**
   * Lists the shapes that can be used to launch a virtual machine instance on a dedicated virtual machine host within the specified compartment.
   * You can filter the list by compatibility with a specific dedicated virtual machine host shape.
   *
   * @param ListDedicatedVmHostInstanceShapesRequest
   * @return ListDedicatedVmHostInstanceShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDedicatedVmHostInstanceShapes.ts.html |here} to see how to use ListDedicatedVmHostInstanceShapes API.
   */
  public async listDedicatedVmHostInstanceShapes(
    listDedicatedVmHostInstanceShapesRequest: requests.ListDedicatedVmHostInstanceShapesRequest
  ): Promise<responses.ListDedicatedVmHostInstanceShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listDedicatedVmHostInstanceShapes.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listDedicatedVmHostInstanceShapesRequest.availabilityDomain,
      "compartmentId": listDedicatedVmHostInstanceShapesRequest.compartmentId,
      "dedicatedVmHostShape": listDedicatedVmHostInstanceShapesRequest.dedicatedVmHostShape,
      "limit": listDedicatedVmHostInstanceShapesRequest.limit,
      "page": listDedicatedVmHostInstanceShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDedicatedVmHostInstanceShapesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHostInstanceShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDedicatedVmHostInstanceShapesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDedicatedVmHostInstanceShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "DedicatedVmHostInstanceShapeSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostInstanceShapeSummary objects
   * contained in responses from the listDedicatedVmHostInstanceShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostInstanceShapes(
    request: requests.ListDedicatedVmHostInstanceShapesRequest
  ): AsyncIterableIterator<models.DedicatedVmHostInstanceShapeSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHostInstanceShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostInstanceShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostInstanceShapesResponses(
    request: requests.ListDedicatedVmHostInstanceShapesRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostInstanceShapesResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHostInstanceShapes(req));
  }

  /**
   * Returns the list of instances on the dedicated virtual machine hosts that match the specified criteria.
   *
   * @param ListDedicatedVmHostInstancesRequest
   * @return ListDedicatedVmHostInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDedicatedVmHostInstances.ts.html |here} to see how to use ListDedicatedVmHostInstances API.
   */
  public async listDedicatedVmHostInstances(
    listDedicatedVmHostInstancesRequest: requests.ListDedicatedVmHostInstancesRequest
  ): Promise<responses.ListDedicatedVmHostInstancesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listDedicatedVmHostInstances.");
    const pathParams = {
      "{dedicatedVmHostId}": listDedicatedVmHostInstancesRequest.dedicatedVmHostId
    };

    const queryParams = {
      "availabilityDomain": listDedicatedVmHostInstancesRequest.availabilityDomain,
      "compartmentId": listDedicatedVmHostInstancesRequest.compartmentId,
      "limit": listDedicatedVmHostInstancesRequest.limit,
      "page": listDedicatedVmHostInstancesRequest.page,
      "sortBy": listDedicatedVmHostInstancesRequest.sortBy,
      "sortOrder": listDedicatedVmHostInstancesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDedicatedVmHostInstancesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts/{dedicatedVmHostId}/instances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDedicatedVmHostInstancesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDedicatedVmHostInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "DedicatedVmHostInstanceSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostInstanceSummary objects
   * contained in responses from the listDedicatedVmHostInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostInstances(
    request: requests.ListDedicatedVmHostInstancesRequest
  ): AsyncIterableIterator<models.DedicatedVmHostInstanceSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHostInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostInstancesResponses(
    request: requests.ListDedicatedVmHostInstancesRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostInstancesResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHostInstances(req));
  }

  /**
   * Lists the shapes that can be used to launch a dedicated virtual machine host within the specified compartment.
   *
   * @param ListDedicatedVmHostShapesRequest
   * @return ListDedicatedVmHostShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDedicatedVmHostShapes.ts.html |here} to see how to use ListDedicatedVmHostShapes API.
   */
  public async listDedicatedVmHostShapes(
    listDedicatedVmHostShapesRequest: requests.ListDedicatedVmHostShapesRequest
  ): Promise<responses.ListDedicatedVmHostShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listDedicatedVmHostShapes.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listDedicatedVmHostShapesRequest.availabilityDomain,
      "compartmentId": listDedicatedVmHostShapesRequest.compartmentId,
      "instanceShapeName": listDedicatedVmHostShapesRequest.instanceShapeName,
      "limit": listDedicatedVmHostShapesRequest.limit,
      "page": listDedicatedVmHostShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDedicatedVmHostShapesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHostShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDedicatedVmHostShapesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDedicatedVmHostShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "DedicatedVmHostShapeSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostShapeSummary objects
   * contained in responses from the listDedicatedVmHostShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostShapes(
    request: requests.ListDedicatedVmHostShapesRequest
  ): AsyncIterableIterator<models.DedicatedVmHostShapeSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHostShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostShapesResponses(
    request: requests.ListDedicatedVmHostShapesRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostShapesResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHostShapes(req));
  }

  /**
     * Returns the list of dedicated virtual machine hosts that match the specified criteria in the specified compartment.
* <p>
You can limit the list by specifying a dedicated virtual machine host display name. The list will include all the identically-named
* dedicated virtual machine hosts in the compartment.
* 
     * @param ListDedicatedVmHostsRequest
     * @return ListDedicatedVmHostsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDedicatedVmHosts.ts.html |here} to see how to use ListDedicatedVmHosts API.
     */
  public async listDedicatedVmHosts(
    listDedicatedVmHostsRequest: requests.ListDedicatedVmHostsRequest
  ): Promise<responses.ListDedicatedVmHostsResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listDedicatedVmHosts.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listDedicatedVmHostsRequest.availabilityDomain,
      "compartmentId": listDedicatedVmHostsRequest.compartmentId,
      "lifecycleState": listDedicatedVmHostsRequest.lifecycleState,
      "displayName": listDedicatedVmHostsRequest.displayName,
      "instanceShapeName": listDedicatedVmHostsRequest.instanceShapeName,
      "limit": listDedicatedVmHostsRequest.limit,
      "page": listDedicatedVmHostsRequest.page,
      "sortBy": listDedicatedVmHostsRequest.sortBy,
      "sortOrder": listDedicatedVmHostsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDedicatedVmHostsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDedicatedVmHostsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDedicatedVmHostsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "DedicatedVmHostSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.DedicatedVmHostSummary objects
   * contained in responses from the listDedicatedVmHosts operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHosts(
    request: requests.ListDedicatedVmHostsRequest
  ): AsyncIterableIterator<models.DedicatedVmHostSummary> {
    return paginateRecords(request, req => this.listDedicatedVmHosts(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHosts operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDedicatedVmHostsResponses(
    request: requests.ListDedicatedVmHostsRequest
  ): AsyncIterableIterator<responses.ListDedicatedVmHostsResponse> {
    return paginateResponses(request, req => this.listDedicatedVmHosts(req));
  }

  /**
   * Lists the compatible shapes for the specified image.
   * @param ListImageShapeCompatibilityEntriesRequest
   * @return ListImageShapeCompatibilityEntriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListImageShapeCompatibilityEntries.ts.html |here} to see how to use ListImageShapeCompatibilityEntries API.
   */
  public async listImageShapeCompatibilityEntries(
    listImageShapeCompatibilityEntriesRequest: requests.ListImageShapeCompatibilityEntriesRequest
  ): Promise<responses.ListImageShapeCompatibilityEntriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listImageShapeCompatibilityEntries.");
    const pathParams = {
      "{imageId}": listImageShapeCompatibilityEntriesRequest.imageId
    };

    const queryParams = {
      "limit": listImageShapeCompatibilityEntriesRequest.limit,
      "page": listImageShapeCompatibilityEntriesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listImageShapeCompatibilityEntriesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/shapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listImageShapeCompatibilityEntriesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListImageShapeCompatibilityEntriesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ImageShapeCompatibilitySummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ImageShapeCompatibilitySummary objects
   * contained in responses from the listImageShapeCompatibilityEntries operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllImageShapeCompatibilityEntries(
    request: requests.ListImageShapeCompatibilityEntriesRequest
  ): AsyncIterableIterator<models.ImageShapeCompatibilitySummary> {
    return paginateRecords(request, req => this.listImageShapeCompatibilityEntries(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listImageShapeCompatibilityEntries operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllImageShapeCompatibilityEntriesResponses(
    request: requests.ListImageShapeCompatibilityEntriesRequest
  ): AsyncIterableIterator<responses.ListImageShapeCompatibilityEntriesResponse> {
    return paginateResponses(request, req => this.listImageShapeCompatibilityEntries(req));
  }

  /**
     * Lists the available images in the specified compartment, including both
* [Oracle-provided images](https://docs.cloud.oracle.com/Content/Compute/References/images.htm) and
* [custom images](https://docs.cloud.oracle.com/Content/Compute/Tasks/managingcustomimages.htm) that have
* been created. The list of images returned is ordered to first show all
* Oracle-provided images, then all custom images.
* <p>
The order of images returned may change when new images are released.
* 
     * @param ListImagesRequest
     * @return ListImagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListImages.ts.html |here} to see how to use ListImages API.
     */
  public async listImages(
    listImagesRequest: requests.ListImagesRequest
  ): Promise<responses.ListImagesResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listImages.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listImagesRequest.compartmentId,
      "displayName": listImagesRequest.displayName,
      "operatingSystem": listImagesRequest.operatingSystem,
      "operatingSystemVersion": listImagesRequest.operatingSystemVersion,
      "shape": listImagesRequest.shape,
      "limit": listImagesRequest.limit,
      "page": listImagesRequest.page,
      "sortBy": listImagesRequest.sortBy,
      "sortOrder": listImagesRequest.sortOrder,
      "lifecycleState": listImagesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listImagesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListImagesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Image[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Image objects
   * contained in responses from the listImages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllImages(request: requests.ListImagesRequest): AsyncIterableIterator<models.Image> {
    return paginateRecords(request, req => this.listImages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listImages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllImagesResponses(
    request: requests.ListImagesRequest
  ): AsyncIterableIterator<responses.ListImagesResponse> {
    return paginateResponses(request, req => this.listImages(req));
  }

  /**
     * Lists the console connections for the specified compartment or instance.
* <p>
For more information about console access, see [Accessing the Console](https://docs.cloud.oracle.com/Content/Compute/References/serialconsole.htm).
* 
     * @param ListInstanceConsoleConnectionsRequest
     * @return ListInstanceConsoleConnectionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstanceConsoleConnections.ts.html |here} to see how to use ListInstanceConsoleConnections API.
     */
  public async listInstanceConsoleConnections(
    listInstanceConsoleConnectionsRequest: requests.ListInstanceConsoleConnectionsRequest
  ): Promise<responses.ListInstanceConsoleConnectionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#listInstanceConsoleConnections.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listInstanceConsoleConnectionsRequest.compartmentId,
      "instanceId": listInstanceConsoleConnectionsRequest.instanceId,
      "limit": listInstanceConsoleConnectionsRequest.limit,
      "page": listInstanceConsoleConnectionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleConnections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listInstanceConsoleConnectionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstanceConsoleConnectionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "InstanceConsoleConnection[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstanceConsoleConnection objects
   * contained in responses from the listInstanceConsoleConnections operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceConsoleConnections(
    request: requests.ListInstanceConsoleConnectionsRequest
  ): AsyncIterableIterator<models.InstanceConsoleConnection> {
    return paginateRecords(request, req => this.listInstanceConsoleConnections(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstanceConsoleConnections operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceConsoleConnectionsResponses(
    request: requests.ListInstanceConsoleConnectionsRequest
  ): AsyncIterableIterator<responses.ListInstanceConsoleConnectionsResponse> {
    return paginateResponses(request, req => this.listInstanceConsoleConnections(req));
  }

  /**
   * Gets a list of all the devices for given instance. You can optionally filter results by device availability.
   * @param ListInstanceDevicesRequest
   * @return ListInstanceDevicesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstanceDevices.ts.html |here} to see how to use ListInstanceDevices API.
   */
  public async listInstanceDevices(
    listInstanceDevicesRequest: requests.ListInstanceDevicesRequest
  ): Promise<responses.ListInstanceDevicesResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listInstanceDevices.");
    const pathParams = {
      "{instanceId}": listInstanceDevicesRequest.instanceId
    };

    const queryParams = {
      "isAvailable": listInstanceDevicesRequest.isAvailable,
      "name": listInstanceDevicesRequest.name,
      "limit": listInstanceDevicesRequest.limit,
      "page": listInstanceDevicesRequest.page,
      "sortBy": listInstanceDevicesRequest.sortBy,
      "sortOrder": listInstanceDevicesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listInstanceDevicesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}/devices",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listInstanceDevicesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstanceDevicesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Device[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Device objects
   * contained in responses from the listInstanceDevices operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceDevices(
    request: requests.ListInstanceDevicesRequest
  ): AsyncIterableIterator<models.Device> {
    return paginateRecords(request, req => this.listInstanceDevices(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstanceDevices operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceDevicesResponses(
    request: requests.ListInstanceDevicesRequest
  ): AsyncIterableIterator<responses.ListInstanceDevicesResponse> {
    return paginateResponses(request, req => this.listInstanceDevices(req));
  }

  /**
   * Lists the instances in the specified compartment and the specified availability domain.
   * You can filter the results by specifying an instance name (the list will include all the identically-named
   * instances in the compartment).
   *
   * @param ListInstancesRequest
   * @return ListInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstances.ts.html |here} to see how to use ListInstances API.
   */
  public async listInstances(
    listInstancesRequest: requests.ListInstancesRequest
  ): Promise<responses.ListInstancesResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listInstances.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listInstancesRequest.availabilityDomain,
      "compartmentId": listInstancesRequest.compartmentId,
      "displayName": listInstancesRequest.displayName,
      "limit": listInstancesRequest.limit,
      "page": listInstancesRequest.page,
      "sortBy": listInstancesRequest.sortBy,
      "sortOrder": listInstancesRequest.sortOrder,
      "lifecycleState": listInstancesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listInstancesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Instance[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Instance objects
   * contained in responses from the listInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstances(
    request: requests.ListInstancesRequest
  ): AsyncIterableIterator<models.Instance> {
    return paginateRecords(request, req => this.listInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstancesResponses(
    request: requests.ListInstancesRequest
  ): AsyncIterableIterator<responses.ListInstancesResponse> {
    return paginateResponses(request, req => this.listInstances(req));
  }

  /**
   * Lists the shapes that can be used to launch an instance within the specified compartment. You can
   * filter the list by compatibility with a specific image.
   *
   * @param ListShapesRequest
   * @return ListShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListShapes.ts.html |here} to see how to use ListShapes API.
   */
  public async listShapes(
    listShapesRequest: requests.ListShapesRequest
  ): Promise<responses.ListShapesResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listShapes.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listShapesRequest.availabilityDomain,
      "compartmentId": listShapesRequest.compartmentId,
      "limit": listShapesRequest.limit,
      "page": listShapesRequest.page,
      "imageId": listShapesRequest.imageId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/shapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listShapesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Shape[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Shape objects
   * contained in responses from the listShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllShapes(request: requests.ListShapesRequest): AsyncIterableIterator<models.Shape> {
    return paginateRecords(request, req => this.listShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllShapesResponses(
    request: requests.ListShapesRequest
  ): AsyncIterableIterator<responses.ListShapesResponse> {
    return paginateResponses(request, req => this.listShapes(req));
  }

  /**
   * Lists the VNIC attachments in the specified compartment. A VNIC attachment
   * resides in the same compartment as the attached instance. The list can be
   * filtered by instance, VNIC, or availability domain.
   *
   * @param ListVnicAttachmentsRequest
   * @return ListVnicAttachmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVnicAttachments.ts.html |here} to see how to use ListVnicAttachments API.
   */
  public async listVnicAttachments(
    listVnicAttachmentsRequest: requests.ListVnicAttachmentsRequest
  ): Promise<responses.ListVnicAttachmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listVnicAttachments.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listVnicAttachmentsRequest.availabilityDomain,
      "compartmentId": listVnicAttachmentsRequest.compartmentId,
      "instanceId": listVnicAttachmentsRequest.instanceId,
      "limit": listVnicAttachmentsRequest.limit,
      "page": listVnicAttachmentsRequest.page,
      "vnicId": listVnicAttachmentsRequest.vnicId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnicAttachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVnicAttachmentsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVnicAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "VnicAttachment[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.VnicAttachment objects
   * contained in responses from the listVnicAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVnicAttachments(
    request: requests.ListVnicAttachmentsRequest
  ): AsyncIterableIterator<models.VnicAttachment> {
    return paginateRecords(request, req => this.listVnicAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVnicAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVnicAttachmentsResponses(
    request: requests.ListVnicAttachmentsRequest
  ): AsyncIterableIterator<responses.ListVnicAttachmentsResponse> {
    return paginateResponses(request, req => this.listVnicAttachments(req));
  }

  /**
     * Lists the volume attachments in the specified compartment. You can filter the
* list by specifying an instance OCID, volume OCID, or both.
* <p>
Currently, the only supported volume attachment type are {@link IScsiVolumeAttachment} and
* {@link ParavirtualizedVolumeAttachment}.
* 
     * @param ListVolumeAttachmentsRequest
     * @return ListVolumeAttachmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVolumeAttachments.ts.html |here} to see how to use ListVolumeAttachments API.
     */
  public async listVolumeAttachments(
    listVolumeAttachmentsRequest: requests.ListVolumeAttachmentsRequest
  ): Promise<responses.ListVolumeAttachmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#listVolumeAttachments.");
    const pathParams = {};

    const queryParams = {
      "availabilityDomain": listVolumeAttachmentsRequest.availabilityDomain,
      "compartmentId": listVolumeAttachmentsRequest.compartmentId,
      "limit": listVolumeAttachmentsRequest.limit,
      "page": listVolumeAttachmentsRequest.page,
      "instanceId": listVolumeAttachmentsRequest.instanceId,
      "volumeId": listVolumeAttachmentsRequest.volumeId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/volumeAttachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVolumeAttachmentsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVolumeAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "VolumeAttachment[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.VolumeAttachment objects
   * contained in responses from the listVolumeAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeAttachments(
    request: requests.ListVolumeAttachmentsRequest
  ): AsyncIterableIterator<models.VolumeAttachment> {
    return paginateRecords(request, req => this.listVolumeAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVolumeAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVolumeAttachmentsResponses(
    request: requests.ListVolumeAttachmentsRequest
  ): AsyncIterableIterator<responses.ListVolumeAttachmentsResponse> {
    return paginateResponses(request, req => this.listVolumeAttachments(req));
  }

  /**
   * Removes a shape from the compatible shapes list for the image.
   * @param RemoveImageShapeCompatibilityEntryRequest
   * @return RemoveImageShapeCompatibilityEntryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveImageShapeCompatibilityEntry.ts.html |here} to see how to use RemoveImageShapeCompatibilityEntry API.
   */
  public async removeImageShapeCompatibilityEntry(
    removeImageShapeCompatibilityEntryRequest: requests.RemoveImageShapeCompatibilityEntryRequest
  ): Promise<responses.RemoveImageShapeCompatibilityEntryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#removeImageShapeCompatibilityEntry.");
    const pathParams = {
      "{imageId}": removeImageShapeCompatibilityEntryRequest.imageId,
      "{shapeName}": removeImageShapeCompatibilityEntryRequest.shapeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}/shapes/{shapeName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      removeImageShapeCompatibilityEntryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveImageShapeCompatibilityEntryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Terminates the specified instance. Any attached VNICs and volumes are automatically detached
* when the instance terminates.
* <p>
To preserve the boot volume associated with the instance, specify `true` for `PreserveBootVolumeQueryParam`.
* To delete the boot volume when the instance is deleted, specify `false` or do not specify a value for `PreserveBootVolumeQueryParam`.
* <p>
This is an asynchronous operation. The instance's `lifecycleState` will change to TERMINATING temporarily
* until the instance is completely removed.
* 
     * @param TerminateInstanceRequest
     * @return TerminateInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/TerminateInstance.ts.html |here} to see how to use TerminateInstance API.
     */
  public async terminateInstance(
    terminateInstanceRequest: requests.TerminateInstanceRequest
  ): Promise<responses.TerminateInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#terminateInstance.");
    const pathParams = {
      "{instanceId}": terminateInstanceRequest.instanceId
    };

    const queryParams = {
      "preserveBootVolume": terminateInstanceRequest.preserveBootVolume
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": terminateInstanceRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      terminateInstanceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.TerminateInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Compute Image Capability Schema
   *
   * @param UpdateComputeImageCapabilitySchemaRequest
   * @return UpdateComputeImageCapabilitySchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateComputeImageCapabilitySchema.ts.html |here} to see how to use UpdateComputeImageCapabilitySchema API.
   */
  public async updateComputeImageCapabilitySchema(
    updateComputeImageCapabilitySchemaRequest: requests.UpdateComputeImageCapabilitySchemaRequest
  ): Promise<responses.UpdateComputeImageCapabilitySchemaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#updateComputeImageCapabilitySchema.");
    const pathParams = {
      "{computeImageCapabilitySchemaId}":
        updateComputeImageCapabilitySchemaRequest.computeImageCapabilitySchemaId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateComputeImageCapabilitySchemaRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateComputeImageCapabilitySchemaRequest.updateComputeImageCapabilitySchemaDetails,
        "UpdateComputeImageCapabilitySchemaDetails",
        models.UpdateComputeImageCapabilitySchemaDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateComputeImageCapabilitySchemaRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateComputeImageCapabilitySchemaResponse>{},
        body: await response.json(),
        bodyKey: "computeImageCapabilitySchema",
        bodyModel: "model.ComputeImageCapabilitySchema",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified console history metadata.
   * @param UpdateConsoleHistoryRequest
   * @return UpdateConsoleHistoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateConsoleHistory.ts.html |here} to see how to use UpdateConsoleHistory API.
   */
  public async updateConsoleHistory(
    updateConsoleHistoryRequest: requests.UpdateConsoleHistoryRequest
  ): Promise<responses.UpdateConsoleHistoryResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#updateConsoleHistory.");
    const pathParams = {
      "{instanceConsoleHistoryId}": updateConsoleHistoryRequest.instanceConsoleHistoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateConsoleHistoryRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleHistories/{instanceConsoleHistoryId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConsoleHistoryRequest.updateConsoleHistoryDetails,
        "UpdateConsoleHistoryDetails",
        models.UpdateConsoleHistoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateConsoleHistoryRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConsoleHistoryResponse>{},
        body: await response.json(),
        bodyKey: "consoleHistory",
        bodyModel: "model.ConsoleHistory",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the displayName, freeformTags, and definedTags attributes for the specified dedicated virtual machine host.
   * If an attribute value is not included, it will not be updated.
   *
   * @param UpdateDedicatedVmHostRequest
   * @return UpdateDedicatedVmHostResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDedicatedVmHost.ts.html |here} to see how to use UpdateDedicatedVmHost API.
   */
  public async updateDedicatedVmHost(
    updateDedicatedVmHostRequest: requests.UpdateDedicatedVmHostRequest
  ): Promise<responses.UpdateDedicatedVmHostResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#updateDedicatedVmHost.");
    const pathParams = {
      "{dedicatedVmHostId}": updateDedicatedVmHostRequest.dedicatedVmHostId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDedicatedVmHostRequest.ifMatch,
      "opc-request-id": updateDedicatedVmHostRequest.opcRequestId,
      "opc-retry-token": updateDedicatedVmHostRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dedicatedVmHosts/{dedicatedVmHostId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDedicatedVmHostRequest.updateDedicatedVmHostDetails,
        "UpdateDedicatedVmHostDetails",
        models.UpdateDedicatedVmHostDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateDedicatedVmHostRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDedicatedVmHostResponse>{},
        body: await response.json(),
        bodyKey: "dedicatedVmHost",
        bodyModel: "model.DedicatedVmHost",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the display name of the image. Avoid entering confidential information.
   * @param UpdateImageRequest
   * @return UpdateImageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateImage.ts.html |here} to see how to use UpdateImage API.
   */
  public async updateImage(
    updateImageRequest: requests.UpdateImageRequest
  ): Promise<responses.UpdateImageResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#updateImage.");
    const pathParams = {
      "{imageId}": updateImageRequest.imageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateImageRequest.opcRetryToken,
      "if-match": updateImageRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/images/{imageId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateImageRequest.updateImageDetails,
        "UpdateImageDetails",
        models.UpdateImageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateImageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateImageResponse>{},
        body: await response.json(),
        bodyKey: "image",
        bodyModel: "model.Image",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates certain fields on the specified instance. Fields that are not provided in the
* request will not be updated. Avoid entering confidential information.
* <p>
Changes to metadata fields will be reflected in the instance metadata service (this may take
* up to a minute).
* <p>
The OCID of the instance remains the same.
* 
     * @param UpdateInstanceRequest
     * @return UpdateInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateInstance.ts.html |here} to see how to use UpdateInstance API.
     */
  public async updateInstance(
    updateInstanceRequest: requests.UpdateInstanceRequest
  ): Promise<responses.UpdateInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation ComputeClient#updateInstance.");
    const pathParams = {
      "{instanceId}": updateInstanceRequest.instanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateInstanceRequest.opcRetryToken,
      "if-match": updateInstanceRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instances/{instanceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInstanceRequest.updateInstanceDetails,
        "UpdateInstanceDetails",
        models.UpdateInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateInstanceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInstanceResponse>{},
        body: await response.json(),
        bodyKey: "instance",
        bodyModel: "model.Instance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the defined tags and free-form tags for the specified instance console connection.
   * @param UpdateInstanceConsoleConnectionRequest
   * @return UpdateInstanceConsoleConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateInstanceConsoleConnection.ts.html |here} to see how to use UpdateInstanceConsoleConnection API.
   */
  public async updateInstanceConsoleConnection(
    updateInstanceConsoleConnectionRequest: requests.UpdateInstanceConsoleConnectionRequest
  ): Promise<responses.UpdateInstanceConsoleConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeClient#updateInstanceConsoleConnection.");
    const pathParams = {
      "{instanceConsoleConnectionId}":
        updateInstanceConsoleConnectionRequest.instanceConsoleConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateInstanceConsoleConnectionRequest.opcRequestId,
      "if-match": updateInstanceConsoleConnectionRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConsoleConnections/{instanceConsoleConnectionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInstanceConsoleConnectionRequest.updateInstanceConsoleConnectionDetails,
        "UpdateInstanceConsoleConnectionDetails",
        models.UpdateInstanceConsoleConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateInstanceConsoleConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInstanceConsoleConnectionResponse>{},
        body: await response.json(),
        bodyKey: "instanceConsoleConnection",
        bodyModel: "model.InstanceConsoleConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum ComputeManagementApiKeys {}

export class ComputeManagementClient {
  protected static serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ComputeManagementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20160918";
    if (this.logger) this.logger.info(`ComputeManagementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ComputeManagementClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ComputeManagementClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new ComputeManagementWaiter for resources for this service.
   *
   * @param workRequestClient The work request service client used to query for work request status
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(
    workRequestClient: WorkRequestClient,
    config?: common.WaiterConfiguration
  ): ComputeManagementWaiter {
    this._waiters = new ComputeManagementWaiter(this, workRequestClient, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ComputeManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Attach a load balancer to the instance pool.
   *
   * @param AttachLoadBalancerRequest
   * @return AttachLoadBalancerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AttachLoadBalancer.ts.html |here} to see how to use AttachLoadBalancer API.
   */
  public async attachLoadBalancer(
    attachLoadBalancerRequest: requests.AttachLoadBalancerRequest
  ): Promise<responses.AttachLoadBalancerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#attachLoadBalancer.");
    const pathParams = {
      "{instancePoolId}": attachLoadBalancerRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": attachLoadBalancerRequest.opcRetryToken,
      "if-match": attachLoadBalancerRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/attachLoadBalancer",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachLoadBalancerRequest.attachLoadBalancerDetails,
        "AttachLoadBalancerDetails",
        models.AttachLoadBalancerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      attachLoadBalancerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachLoadBalancerResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves a cluster network into a different compartment within the same tenancy. For
* information about moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
When you move a cluster network to a different compartment, associated resources such as the instances
* in the cluster network, boot volumes, and VNICs are not moved.
* 
     * @param ChangeClusterNetworkCompartmentRequest
     * @return ChangeClusterNetworkCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeClusterNetworkCompartment.ts.html |here} to see how to use ChangeClusterNetworkCompartment API.
     */
  public async changeClusterNetworkCompartment(
    changeClusterNetworkCompartmentRequest: requests.ChangeClusterNetworkCompartmentRequest
  ): Promise<responses.ChangeClusterNetworkCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeManagementClient#changeClusterNetworkCompartment."
      );
    const pathParams = {
      "{clusterNetworkId}": changeClusterNetworkCompartmentRequest.clusterNetworkId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeClusterNetworkCompartmentRequest.ifMatch,
      "opc-request-id": changeClusterNetworkCompartmentRequest.opcRequestId,
      "opc-retry-token": changeClusterNetworkCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks/{clusterNetworkId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeClusterNetworkCompartmentRequest.changeClusterNetworkCompartmentDetails,
        "ChangeClusterNetworkCompartmentDetails",
        models.ChangeClusterNetworkCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeClusterNetworkCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeClusterNetworkCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves an instance configuration into a different compartment within the same tenancy.
* For information about moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
When you move an instance configuration to a different compartment, associated resources such as
* instance pools are not moved.
* <p>
**Important:** Most of the properties for an existing instance configuration, including the compartment,
* cannot be modified after you create the instance configuration. Although you can move an instance configuration
* to a different compartment, you will not be able to use the instance configuration to manage instance pools
* in the new compartment. If you want to update an instance configuration to point to a different compartment,
* you should instead create a new instance configuration in the target compartment using
* [CreateInstanceConfiguration](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConfiguration/CreateInstanceConfiguration).
* 
     * @param ChangeInstanceConfigurationCompartmentRequest
     * @return ChangeInstanceConfigurationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeInstanceConfigurationCompartment.ts.html |here} to see how to use ChangeInstanceConfigurationCompartment API.
     */
  public async changeInstanceConfigurationCompartment(
    changeInstanceConfigurationCompartmentRequest: requests.ChangeInstanceConfigurationCompartmentRequest
  ): Promise<responses.ChangeInstanceConfigurationCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeManagementClient#changeInstanceConfigurationCompartment."
      );
    const pathParams = {
      "{instanceConfigurationId}":
        changeInstanceConfigurationCompartmentRequest.instanceConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeInstanceConfigurationCompartmentRequest.ifMatch,
      "opc-request-id": changeInstanceConfigurationCompartmentRequest.opcRequestId,
      "opc-retry-token": changeInstanceConfigurationCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations/{instanceConfigurationId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeInstanceConfigurationCompartmentRequest.changeInstanceConfigurationCompartmentDetails,
        "ChangeInstanceConfigurationCompartmentDetails",
        models.ChangeInstanceConfigurationCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeInstanceConfigurationCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeInstanceConfigurationCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves an instance pool into a different compartment within the same tenancy. For
* information about moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
When you move an instance pool to a different compartment, associated resources such as the instances in
* the pool, boot volumes, VNICs, and autoscaling configurations are not moved.
* 
     * @param ChangeInstancePoolCompartmentRequest
     * @return ChangeInstancePoolCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeInstancePoolCompartment.ts.html |here} to see how to use ChangeInstancePoolCompartment API.
     */
  public async changeInstancePoolCompartment(
    changeInstancePoolCompartmentRequest: requests.ChangeInstancePoolCompartmentRequest
  ): Promise<responses.ChangeInstancePoolCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#changeInstancePoolCompartment.");
    const pathParams = {
      "{instancePoolId}": changeInstancePoolCompartmentRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeInstancePoolCompartmentRequest.ifMatch,
      "opc-request-id": changeInstancePoolCompartmentRequest.opcRequestId,
      "opc-retry-token": changeInstancePoolCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeInstancePoolCompartmentRequest.changeInstancePoolCompartmentDetails,
        "ChangeInstancePoolCompartmentDetails",
        models.ChangeInstancePoolCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeInstancePoolCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeInstancePoolCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a cluster network. For more information about cluster networks, see
   * [Managing Cluster Networks](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingclusternetworks.htm).
   *
   * @param CreateClusterNetworkRequest
   * @return CreateClusterNetworkResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateClusterNetwork.ts.html |here} to see how to use CreateClusterNetwork API.
   */
  public async createClusterNetwork(
    createClusterNetworkRequest: requests.CreateClusterNetworkRequest
  ): Promise<responses.CreateClusterNetworkResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#createClusterNetwork.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createClusterNetworkRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createClusterNetworkRequest.createClusterNetworkDetails,
        "CreateClusterNetworkDetails",
        models.CreateClusterNetworkDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createClusterNetworkRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateClusterNetworkResponse>{},
        body: await response.json(),
        bodyKey: "clusterNetwork",
        bodyModel: "model.ClusterNetwork",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates an instance configuration. An instance configuration is a template that defines the
   * settings to use when creating Compute instances.
   *
   * @param CreateInstanceConfigurationRequest
   * @return CreateInstanceConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateInstanceConfiguration.ts.html |here} to see how to use CreateInstanceConfiguration API.
   */
  public async createInstanceConfiguration(
    createInstanceConfigurationRequest: requests.CreateInstanceConfigurationRequest
  ): Promise<responses.CreateInstanceConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#createInstanceConfiguration.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createInstanceConfigurationRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createInstanceConfigurationRequest.createInstanceConfiguration,
        "CreateInstanceConfigurationBase",
        models.CreateInstanceConfigurationBase.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createInstanceConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateInstanceConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "instanceConfiguration",
        bodyModel: "model.InstanceConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create an instance pool.
   * @param CreateInstancePoolRequest
   * @return CreateInstancePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateInstancePool.ts.html |here} to see how to use CreateInstancePool API.
   */
  public async createInstancePool(
    createInstancePoolRequest: requests.CreateInstancePoolRequest
  ): Promise<responses.CreateInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#createInstancePool.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createInstancePoolRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createInstancePoolRequest.createInstancePoolDetails,
        "CreateInstancePoolDetails",
        models.CreateInstancePoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createInstancePoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an instance configuration.
   * @param DeleteInstanceConfigurationRequest
   * @return DeleteInstanceConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteInstanceConfiguration.ts.html |here} to see how to use DeleteInstanceConfiguration API.
   */
  public async deleteInstanceConfiguration(
    deleteInstanceConfigurationRequest: requests.DeleteInstanceConfigurationRequest
  ): Promise<responses.DeleteInstanceConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#deleteInstanceConfiguration.");
    const pathParams = {
      "{instanceConfigurationId}": deleteInstanceConfigurationRequest.instanceConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteInstanceConfigurationRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations/{instanceConfigurationId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteInstanceConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteInstanceConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detach a load balancer from the instance pool.
   *
   * @param DetachLoadBalancerRequest
   * @return DetachLoadBalancerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DetachLoadBalancer.ts.html |here} to see how to use DetachLoadBalancer API.
   */
  public async detachLoadBalancer(
    detachLoadBalancerRequest: requests.DetachLoadBalancerRequest
  ): Promise<responses.DetachLoadBalancerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#detachLoadBalancer.");
    const pathParams = {
      "{instancePoolId}": detachLoadBalancerRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": detachLoadBalancerRequest.opcRetryToken,
      "if-match": detachLoadBalancerRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/detachLoadBalancer",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachLoadBalancerRequest.detachLoadBalancerDetails,
        "DetachLoadBalancerDetails",
        models.DetachLoadBalancerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      detachLoadBalancerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachLoadBalancerResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified cluster network.
   * @param GetClusterNetworkRequest
   * @return GetClusterNetworkResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetClusterNetwork.ts.html |here} to see how to use GetClusterNetwork API.
   */
  public async getClusterNetwork(
    getClusterNetworkRequest: requests.GetClusterNetworkRequest
  ): Promise<responses.GetClusterNetworkResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#getClusterNetwork.");
    const pathParams = {
      "{clusterNetworkId}": getClusterNetworkRequest.clusterNetworkId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks/{clusterNetworkId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getClusterNetworkRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetClusterNetworkResponse>{},
        body: await response.json(),
        bodyKey: "clusterNetwork",
        bodyModel: "model.ClusterNetwork",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified instance configuration
   * @param GetInstanceConfigurationRequest
   * @return GetInstanceConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstanceConfiguration.ts.html |here} to see how to use GetInstanceConfiguration API.
   */
  public async getInstanceConfiguration(
    getInstanceConfigurationRequest: requests.GetInstanceConfigurationRequest
  ): Promise<responses.GetInstanceConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#getInstanceConfiguration.");
    const pathParams = {
      "{instanceConfigurationId}": getInstanceConfigurationRequest.instanceConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations/{instanceConfigurationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getInstanceConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstanceConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "instanceConfiguration",
        bodyModel: "model.InstanceConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified instance pool
   * @param GetInstancePoolRequest
   * @return GetInstancePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstancePool.ts.html |here} to see how to use GetInstancePool API.
   */
  public async getInstancePool(
    getInstancePoolRequest: requests.GetInstancePoolRequest
  ): Promise<responses.GetInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#getInstancePool.");
    const pathParams = {
      "{instancePoolId}": getInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getInstancePoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a load balancer that is attached to the specified instance pool.
   *
   * @param GetInstancePoolLoadBalancerAttachmentRequest
   * @return GetInstancePoolLoadBalancerAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInstancePoolLoadBalancerAttachment.ts.html |here} to see how to use GetInstancePoolLoadBalancerAttachment API.
   */
  public async getInstancePoolLoadBalancerAttachment(
    getInstancePoolLoadBalancerAttachmentRequest: requests.GetInstancePoolLoadBalancerAttachmentRequest
  ): Promise<responses.GetInstancePoolLoadBalancerAttachmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ComputeManagementClient#getInstancePoolLoadBalancerAttachment."
      );
    const pathParams = {
      "{instancePoolId}": getInstancePoolLoadBalancerAttachmentRequest.instancePoolId,
      "{instancePoolLoadBalancerAttachmentId}":
        getInstancePoolLoadBalancerAttachmentRequest.instancePoolLoadBalancerAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/instancePools/{instancePoolId}/loadBalancerAttachments/{instancePoolLoadBalancerAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getInstancePoolLoadBalancerAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInstancePoolLoadBalancerAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "instancePoolLoadBalancerAttachment",
        bodyModel: "model.InstancePoolLoadBalancerAttachment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Launches an instance from an instance configuration.
* <p>
If the instance configuration does not include all of the parameters that are
* required to launch an instance, such as the availability domain and subnet ID, you must
* provide these parameters when you launch an instance from the instance configuration.
* For more information, see the {@link InstanceConfiguration}
* resource.
* 
     * @param LaunchInstanceConfigurationRequest
     * @return LaunchInstanceConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/LaunchInstanceConfiguration.ts.html |here} to see how to use LaunchInstanceConfiguration API.
     */
  public async launchInstanceConfiguration(
    launchInstanceConfigurationRequest: requests.LaunchInstanceConfigurationRequest
  ): Promise<responses.LaunchInstanceConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#launchInstanceConfiguration.");
    const pathParams = {
      "{instanceConfigurationId}": launchInstanceConfigurationRequest.instanceConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": launchInstanceConfigurationRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations/{instanceConfigurationId}/actions/launch",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        launchInstanceConfigurationRequest.instanceConfiguration,
        "InstanceConfigurationInstanceDetails",
        models.InstanceConfigurationInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      launchInstanceConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.LaunchInstanceConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "instance",
        bodyModel: "model.Instance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the instances in the specified cluster network.
   * @param ListClusterNetworkInstancesRequest
   * @return ListClusterNetworkInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListClusterNetworkInstances.ts.html |here} to see how to use ListClusterNetworkInstances API.
   */
  public async listClusterNetworkInstances(
    listClusterNetworkInstancesRequest: requests.ListClusterNetworkInstancesRequest
  ): Promise<responses.ListClusterNetworkInstancesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#listClusterNetworkInstances.");
    const pathParams = {
      "{clusterNetworkId}": listClusterNetworkInstancesRequest.clusterNetworkId
    };

    const queryParams = {
      "compartmentId": listClusterNetworkInstancesRequest.compartmentId,
      "displayName": listClusterNetworkInstancesRequest.displayName,
      "limit": listClusterNetworkInstancesRequest.limit,
      "page": listClusterNetworkInstancesRequest.page,
      "sortBy": listClusterNetworkInstancesRequest.sortBy,
      "sortOrder": listClusterNetworkInstancesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks/{clusterNetworkId}/instances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listClusterNetworkInstancesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListClusterNetworkInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "InstanceSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstanceSummary objects
   * contained in responses from the listClusterNetworkInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllClusterNetworkInstances(
    request: requests.ListClusterNetworkInstancesRequest
  ): AsyncIterableIterator<models.InstanceSummary> {
    return paginateRecords(request, req => this.listClusterNetworkInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listClusterNetworkInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllClusterNetworkInstancesResponses(
    request: requests.ListClusterNetworkInstancesRequest
  ): AsyncIterableIterator<responses.ListClusterNetworkInstancesResponse> {
    return paginateResponses(request, req => this.listClusterNetworkInstances(req));
  }

  /**
   * Lists the cluster networks in the specified compartment.
   * @param ListClusterNetworksRequest
   * @return ListClusterNetworksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListClusterNetworks.ts.html |here} to see how to use ListClusterNetworks API.
   */
  public async listClusterNetworks(
    listClusterNetworksRequest: requests.ListClusterNetworksRequest
  ): Promise<responses.ListClusterNetworksResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#listClusterNetworks.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listClusterNetworksRequest.compartmentId,
      "displayName": listClusterNetworksRequest.displayName,
      "limit": listClusterNetworksRequest.limit,
      "page": listClusterNetworksRequest.page,
      "sortBy": listClusterNetworksRequest.sortBy,
      "sortOrder": listClusterNetworksRequest.sortOrder,
      "lifecycleState": listClusterNetworksRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listClusterNetworksRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListClusterNetworksResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ClusterNetworkSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ClusterNetworkSummary objects
   * contained in responses from the listClusterNetworks operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllClusterNetworks(
    request: requests.ListClusterNetworksRequest
  ): AsyncIterableIterator<models.ClusterNetworkSummary> {
    return paginateRecords(request, req => this.listClusterNetworks(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listClusterNetworks operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllClusterNetworksResponses(
    request: requests.ListClusterNetworksRequest
  ): AsyncIterableIterator<responses.ListClusterNetworksResponse> {
    return paginateResponses(request, req => this.listClusterNetworks(req));
  }

  /**
   * Lists the instance configurations in the specified compartment.
   *
   * @param ListInstanceConfigurationsRequest
   * @return ListInstanceConfigurationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstanceConfigurations.ts.html |here} to see how to use ListInstanceConfigurations API.
   */
  public async listInstanceConfigurations(
    listInstanceConfigurationsRequest: requests.ListInstanceConfigurationsRequest
  ): Promise<responses.ListInstanceConfigurationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#listInstanceConfigurations.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listInstanceConfigurationsRequest.compartmentId,
      "limit": listInstanceConfigurationsRequest.limit,
      "page": listInstanceConfigurationsRequest.page,
      "sortBy": listInstanceConfigurationsRequest.sortBy,
      "sortOrder": listInstanceConfigurationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listInstanceConfigurationsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstanceConfigurationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "InstanceConfigurationSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstanceConfigurationSummary objects
   * contained in responses from the listInstanceConfigurations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceConfigurations(
    request: requests.ListInstanceConfigurationsRequest
  ): AsyncIterableIterator<models.InstanceConfigurationSummary> {
    return paginateRecords(request, req => this.listInstanceConfigurations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstanceConfigurations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstanceConfigurationsResponses(
    request: requests.ListInstanceConfigurationsRequest
  ): AsyncIterableIterator<responses.ListInstanceConfigurationsResponse> {
    return paginateResponses(request, req => this.listInstanceConfigurations(req));
  }

  /**
   * List the instances in the specified instance pool.
   * @param ListInstancePoolInstancesRequest
   * @return ListInstancePoolInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstancePoolInstances.ts.html |here} to see how to use ListInstancePoolInstances API.
   */
  public async listInstancePoolInstances(
    listInstancePoolInstancesRequest: requests.ListInstancePoolInstancesRequest
  ): Promise<responses.ListInstancePoolInstancesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#listInstancePoolInstances.");
    const pathParams = {
      "{instancePoolId}": listInstancePoolInstancesRequest.instancePoolId
    };

    const queryParams = {
      "compartmentId": listInstancePoolInstancesRequest.compartmentId,
      "displayName": listInstancePoolInstancesRequest.displayName,
      "limit": listInstancePoolInstancesRequest.limit,
      "page": listInstancePoolInstancesRequest.page,
      "sortBy": listInstancePoolInstancesRequest.sortBy,
      "sortOrder": listInstancePoolInstancesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/instances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listInstancePoolInstancesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstancePoolInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "InstanceSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstanceSummary objects
   * contained in responses from the listInstancePoolInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstancePoolInstances(
    request: requests.ListInstancePoolInstancesRequest
  ): AsyncIterableIterator<models.InstanceSummary> {
    return paginateRecords(request, req => this.listInstancePoolInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstancePoolInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstancePoolInstancesResponses(
    request: requests.ListInstancePoolInstancesRequest
  ): AsyncIterableIterator<responses.ListInstancePoolInstancesResponse> {
    return paginateResponses(request, req => this.listInstancePoolInstances(req));
  }

  /**
   * Lists the instance pools in the specified compartment.
   * @param ListInstancePoolsRequest
   * @return ListInstancePoolsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInstancePools.ts.html |here} to see how to use ListInstancePools API.
   */
  public async listInstancePools(
    listInstancePoolsRequest: requests.ListInstancePoolsRequest
  ): Promise<responses.ListInstancePoolsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#listInstancePools.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listInstancePoolsRequest.compartmentId,
      "displayName": listInstancePoolsRequest.displayName,
      "limit": listInstancePoolsRequest.limit,
      "page": listInstancePoolsRequest.page,
      "sortBy": listInstancePoolsRequest.sortBy,
      "sortOrder": listInstancePoolsRequest.sortOrder,
      "lifecycleState": listInstancePoolsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listInstancePoolsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInstancePoolsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "InstancePoolSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.InstancePoolSummary objects
   * contained in responses from the listInstancePools operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstancePools(
    request: requests.ListInstancePoolsRequest
  ): AsyncIterableIterator<models.InstancePoolSummary> {
    return paginateRecords(request, req => this.listInstancePools(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInstancePools operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInstancePoolsResponses(
    request: requests.ListInstancePoolsRequest
  ): AsyncIterableIterator<responses.ListInstancePoolsResponse> {
    return paginateResponses(request, req => this.listInstancePools(req));
  }

  /**
   * Performs the reset (power off and power on) action on the specified instance pool,
   * which performs the action on all the instances in the pool.
   *
   * @param ResetInstancePoolRequest
   * @return ResetInstancePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ResetInstancePool.ts.html |here} to see how to use ResetInstancePool API.
   */
  public async resetInstancePool(
    resetInstancePoolRequest: requests.ResetInstancePoolRequest
  ): Promise<responses.ResetInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#resetInstancePool.");
    const pathParams = {
      "{instancePoolId}": resetInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": resetInstancePoolRequest.opcRetryToken,
      "if-match": resetInstancePoolRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/reset",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      resetInstancePoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ResetInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Performs the softreset (ACPI shutdown and power on) action on the specified instance pool,
   * which performs the action on all the instances in the pool.
   *
   * @param SoftresetInstancePoolRequest
   * @return SoftresetInstancePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/SoftresetInstancePool.ts.html |here} to see how to use SoftresetInstancePool API.
   */
  public async softresetInstancePool(
    softresetInstancePoolRequest: requests.SoftresetInstancePoolRequest
  ): Promise<responses.SoftresetInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#softresetInstancePool.");
    const pathParams = {
      "{instancePoolId}": softresetInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": softresetInstancePoolRequest.opcRetryToken,
      "if-match": softresetInstancePoolRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/softreset",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      softresetInstancePoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SoftresetInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Performs the start (power on) action on the specified instance pool,
   * which performs the action on all the instances in the pool.
   *
   * @param StartInstancePoolRequest
   * @return StartInstancePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/StartInstancePool.ts.html |here} to see how to use StartInstancePool API.
   */
  public async startInstancePool(
    startInstancePoolRequest: requests.StartInstancePoolRequest
  ): Promise<responses.StartInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#startInstancePool.");
    const pathParams = {
      "{instancePoolId}": startInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": startInstancePoolRequest.opcRetryToken,
      "if-match": startInstancePoolRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/start",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      startInstancePoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.StartInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Performs the stop (power off) action on the specified instance pool,
   * which performs the action on all the instances in the pool.
   *
   * @param StopInstancePoolRequest
   * @return StopInstancePoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/StopInstancePool.ts.html |here} to see how to use StopInstancePool API.
   */
  public async stopInstancePool(
    stopInstancePoolRequest: requests.StopInstancePoolRequest
  ): Promise<responses.StopInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#stopInstancePool.");
    const pathParams = {
      "{instancePoolId}": stopInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": stopInstancePoolRequest.opcRetryToken,
      "if-match": stopInstancePoolRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}/actions/stop",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      stopInstancePoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.StopInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Terminates the specified cluster network.
* <p>
When you delete a cluster network, all of its resources are permanently deleted,
* including associated instances and instance pools.
* 
     * @param TerminateClusterNetworkRequest
     * @return TerminateClusterNetworkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/TerminateClusterNetwork.ts.html |here} to see how to use TerminateClusterNetwork API.
     */
  public async terminateClusterNetwork(
    terminateClusterNetworkRequest: requests.TerminateClusterNetworkRequest
  ): Promise<responses.TerminateClusterNetworkResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#terminateClusterNetwork.");
    const pathParams = {
      "{clusterNetworkId}": terminateClusterNetworkRequest.clusterNetworkId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": terminateClusterNetworkRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks/{clusterNetworkId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      terminateClusterNetworkRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.TerminateClusterNetworkResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Terminate the specified instance pool.
* <p>
**Warning:** When you delete an instance pool, the resources that were created by the pool are permanently
* deleted, including associated instances, attached boot volumes, and block volumes.
* <p>
If an autoscaling configuration applies to the instance pool, the autoscaling configuration will be deleted
* asynchronously after the pool is deleted. You can also manually delete the autoscaling configuration using
* the `DeleteAutoScalingConfiguration` operation in the Autoscaling API.
* 
     * @param TerminateInstancePoolRequest
     * @return TerminateInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/TerminateInstancePool.ts.html |here} to see how to use TerminateInstancePool API.
     */
  public async terminateInstancePool(
    terminateInstancePoolRequest: requests.TerminateInstancePoolRequest
  ): Promise<responses.TerminateInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#terminateInstancePool.");
    const pathParams = {
      "{instancePoolId}": terminateInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": terminateInstancePoolRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      terminateInstancePoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.TerminateInstancePoolResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified cluster network. The OCID of the cluster network remains the same.
   *
   * @param UpdateClusterNetworkRequest
   * @return UpdateClusterNetworkResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateClusterNetwork.ts.html |here} to see how to use UpdateClusterNetwork API.
   */
  public async updateClusterNetwork(
    updateClusterNetworkRequest: requests.UpdateClusterNetworkRequest
  ): Promise<responses.UpdateClusterNetworkResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#updateClusterNetwork.");
    const pathParams = {
      "{clusterNetworkId}": updateClusterNetworkRequest.clusterNetworkId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateClusterNetworkRequest.opcRetryToken,
      "if-match": updateClusterNetworkRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/clusterNetworks/{clusterNetworkId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateClusterNetworkRequest.updateClusterNetworkDetails,
        "UpdateClusterNetworkDetails",
        models.UpdateClusterNetworkDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateClusterNetworkRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateClusterNetworkResponse>{},
        body: await response.json(),
        bodyKey: "clusterNetwork",
        bodyModel: "model.ClusterNetwork",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the free-form tags, defined tags, and display name of an instance configuration.
   * @param UpdateInstanceConfigurationRequest
   * @return UpdateInstanceConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateInstanceConfiguration.ts.html |here} to see how to use UpdateInstanceConfiguration API.
   */
  public async updateInstanceConfiguration(
    updateInstanceConfigurationRequest: requests.UpdateInstanceConfigurationRequest
  ): Promise<responses.UpdateInstanceConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#updateInstanceConfiguration.");
    const pathParams = {
      "{instanceConfigurationId}": updateInstanceConfigurationRequest.instanceConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateInstanceConfigurationRequest.opcRetryToken,
      "if-match": updateInstanceConfigurationRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instanceConfigurations/{instanceConfigurationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInstanceConfigurationRequest.updateInstanceConfigurationDetails,
        "UpdateInstanceConfigurationDetails",
        models.UpdateInstanceConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateInstanceConfigurationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInstanceConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "instanceConfiguration",
        bodyModel: "model.InstanceConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Update the specified instance pool.
* <p>
The OCID of the instance pool remains the same.
* 
     * @param UpdateInstancePoolRequest
     * @return UpdateInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateInstancePool.ts.html |here} to see how to use UpdateInstancePool API.
     */
  public async updateInstancePool(
    updateInstancePoolRequest: requests.UpdateInstancePoolRequest
  ): Promise<responses.UpdateInstancePoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ComputeManagementClient#updateInstancePool.");
    const pathParams = {
      "{instancePoolId}": updateInstancePoolRequest.instancePoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateInstancePoolRequest.opcRetryToken,
      "if-match": updateInstancePoolRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/instancePools/{instancePoolId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInstancePoolRequest.updateInstancePoolDetails,
        "UpdateInstancePoolDetails",
        models.UpdateInstancePoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateInstancePoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInstancePoolResponse>{},
        body: await response.json(),
        bodyKey: "instancePool",
        bodyModel: "model.InstancePool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum VirtualNetworkApiKeys {}

export class VirtualNetworkClient {
  protected static serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": VirtualNetworkWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20160918";
    if (this.logger) this.logger.info(`VirtualNetworkClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      VirtualNetworkClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      VirtualNetworkClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new VirtualNetworkWaiter for resources for this service.
   *
   * @param workRequestClient The work request service client used to query for work request status
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(
    workRequestClient: WorkRequestClient,
    config?: common.WaiterConfiguration
  ): VirtualNetworkWaiter {
    this._waiters = new VirtualNetworkWaiter(this, workRequestClient, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): VirtualNetworkWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Adds one or more security rules to the specified network security group.
   *
   * @param AddNetworkSecurityGroupSecurityRulesRequest
   * @return AddNetworkSecurityGroupSecurityRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use AddNetworkSecurityGroupSecurityRules API.
   */
  public async addNetworkSecurityGroupSecurityRules(
    addNetworkSecurityGroupSecurityRulesRequest: requests.AddNetworkSecurityGroupSecurityRulesRequest
  ): Promise<responses.AddNetworkSecurityGroupSecurityRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#addNetworkSecurityGroupSecurityRules."
      );
    const pathParams = {
      "{networkSecurityGroupId}": addNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/addSecurityRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addNetworkSecurityGroupSecurityRulesRequest.addNetworkSecurityGroupSecurityRulesDetails,
        "AddNetworkSecurityGroupSecurityRulesDetails",
        models.AddNetworkSecurityGroupSecurityRulesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      addNetworkSecurityGroupSecurityRulesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AddNetworkSecurityGroupSecurityRulesResponse>{},
        body: await response.json(),
        bodyKey: "addedNetworkSecurityGroupSecurityRules",
        bodyModel: "model.AddedNetworkSecurityGroupSecurityRules",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a Cidr from the named Byoip Range prefix to the referenced Public IP Pool.
   * The cidr must be a subset of the Byoip Range in question.
   * The cidr must not overlap with any other cidr already added to this
   * or any other Public Ip Pool.
   *
   * @param AddPublicIpPoolCapacityRequest
   * @return AddPublicIpPoolCapacityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddPublicIpPoolCapacity.ts.html |here} to see how to use AddPublicIpPoolCapacity API.
   */
  public async addPublicIpPoolCapacity(
    addPublicIpPoolCapacityRequest: requests.AddPublicIpPoolCapacityRequest
  ): Promise<responses.AddPublicIpPoolCapacityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#addPublicIpPoolCapacity.");
    const pathParams = {
      "{publicIpPoolId}": addPublicIpPoolCapacityRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addPublicIpPoolCapacityRequest.opcRequestId,
      "opc-retry-token": addPublicIpPoolCapacityRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}/actions/addCapacity",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addPublicIpPoolCapacityRequest.addPublicIpPoolCapacityDetails,
        "AddPublicIpPoolCapacityDetails",
        models.AddPublicIpPoolCapacityDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      addPublicIpPoolCapacityRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AddPublicIpPoolCapacityResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPool",
        bodyModel: "model.PublicIpPool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Add a CIDR to a VCN. The new CIDR must maintain the following rules -
* <p>
a. The CIDR provided is valid
* b. The new CIDR range should not overlap with any existing CIDRs
* c. The new CIDR should not exceed the max limit of CIDRs per VCNs
* d. The new CIDR range does not overlap with any peered VCNs
* 
     * @param AddVcnCidrRequest
     * @return AddVcnCidrResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AddVcnCidr.ts.html |here} to see how to use AddVcnCidr API.
     */
  public async addVcnCidr(
    addVcnCidrRequest: requests.AddVcnCidrRequest
  ): Promise<responses.AddVcnCidrResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#addVcnCidr.");
    const pathParams = {
      "{vcnId}": addVcnCidrRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addVcnCidrRequest.opcRequestId,
      "opc-retry-token": addVcnCidrRequest.opcRetryToken,
      "if-match": addVcnCidrRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/actions/addCidr",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addVcnCidrRequest.addVcnCidrDetails,
        "AddVcnCidrDetails",
        models.AddVcnCidrDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      addVcnCidrRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AddVcnCidrResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * initiate route advertisements for the Byoip Range prefix.
   * the prefix must be in PROVISIONED state
   *
   * @param AdvertiseByoipRangeRequest
   * @return AdvertiseByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AdvertiseByoipRange.ts.html |here} to see how to use AdvertiseByoipRange API.
   */
  public async advertiseByoipRange(
    advertiseByoipRangeRequest: requests.AdvertiseByoipRangeRequest
  ): Promise<responses.AdvertiseByoipRangeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#advertiseByoipRange.");
    const pathParams = {
      "{byoipRangeId}": advertiseByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": advertiseByoipRangeRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}/actions/advertise",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      advertiseByoipRangeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AdvertiseByoipRangeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds the specified {@link Service} to the list of enabled
   * `Service` objects for the specified gateway. You must also set up a route rule with the
   * `cidrBlock` of the `Service` as the rule's destination and the service gateway as the rule's
   * target. See {@link RouteTable}.
   * <p>
   **Note:** The `AttachServiceId` operation is an easy way to add an individual `Service` to
   * the service gateway. Compare it with
   * {@link #updateServiceGateway(UpdateServiceGatewayRequest) updateServiceGateway}, which replaces
   * the entire existing list of enabled `Service` objects with the list that you provide in the
   * `Update` call.
   *
   * @param AttachServiceIdRequest
   * @return AttachServiceIdResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/AttachServiceId.ts.html |here} to see how to use AttachServiceId API.
   */
  public async attachServiceId(
    attachServiceIdRequest: requests.AttachServiceIdRequest
  ): Promise<responses.AttachServiceIdResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#attachServiceId.");
    const pathParams = {
      "{serviceGatewayId}": attachServiceIdRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": attachServiceIdRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}/actions/attachService",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        attachServiceIdRequest.attachServiceDetails,
        "ServiceIdRequestDetails",
        models.ServiceIdRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      attachServiceIdRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AttachServiceIdResponse>{},
        body: await response.json(),
        bodyKey: "serviceGateway",
        bodyModel: "model.ServiceGateway",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds one or more customer public IP prefixes to the specified public virtual circuit.
   * Use this operation (and not {@link #updateVirtualCircuit(UpdateVirtualCircuitRequest) updateVirtualCircuit})
   * to add prefixes to the virtual circuit. Oracle must verify the customer's ownership
   * of each prefix before traffic for that prefix will flow across the virtual circuit.
   *
   * @param BulkAddVirtualCircuitPublicPrefixesRequest
   * @return BulkAddVirtualCircuitPublicPrefixesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/BulkAddVirtualCircuitPublicPrefixes.ts.html |here} to see how to use BulkAddVirtualCircuitPublicPrefixes API.
   */
  public async bulkAddVirtualCircuitPublicPrefixes(
    bulkAddVirtualCircuitPublicPrefixesRequest: requests.BulkAddVirtualCircuitPublicPrefixesRequest
  ): Promise<responses.BulkAddVirtualCircuitPublicPrefixesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#bulkAddVirtualCircuitPublicPrefixes."
      );
    const pathParams = {
      "{virtualCircuitId}": bulkAddVirtualCircuitPublicPrefixesRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}/actions/bulkAddPublicPrefixes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkAddVirtualCircuitPublicPrefixesRequest.bulkAddVirtualCircuitPublicPrefixesDetails,
        "BulkAddVirtualCircuitPublicPrefixesDetails",
        models.BulkAddVirtualCircuitPublicPrefixesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      bulkAddVirtualCircuitPublicPrefixesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkAddVirtualCircuitPublicPrefixesResponse>{},
        responseHeaders: []
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes one or more customer public IP prefixes from the specified public virtual circuit.
   * Use this operation (and not {@link #updateVirtualCircuit(UpdateVirtualCircuitRequest) updateVirtualCircuit})
   * to remove prefixes from the virtual circuit. When the virtual circuit's state switches
   * back to PROVISIONED, Oracle stops advertising the specified prefixes across the connection.
   *
   * @param BulkDeleteVirtualCircuitPublicPrefixesRequest
   * @return BulkDeleteVirtualCircuitPublicPrefixesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/BulkDeleteVirtualCircuitPublicPrefixes.ts.html |here} to see how to use BulkDeleteVirtualCircuitPublicPrefixes API.
   */
  public async bulkDeleteVirtualCircuitPublicPrefixes(
    bulkDeleteVirtualCircuitPublicPrefixesRequest: requests.BulkDeleteVirtualCircuitPublicPrefixesRequest
  ): Promise<responses.BulkDeleteVirtualCircuitPublicPrefixesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#bulkDeleteVirtualCircuitPublicPrefixes."
      );
    const pathParams = {
      "{virtualCircuitId}": bulkDeleteVirtualCircuitPublicPrefixesRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}/actions/bulkDeletePublicPrefixes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        bulkDeleteVirtualCircuitPublicPrefixesRequest.bulkDeleteVirtualCircuitPublicPrefixesDetails,
        "BulkDeleteVirtualCircuitPublicPrefixesDetails",
        models.BulkDeleteVirtualCircuitPublicPrefixesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      bulkDeleteVirtualCircuitPublicPrefixesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.BulkDeleteVirtualCircuitPublicPrefixesResponse>{},
        responseHeaders: []
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a byoip range into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeByoipRangeCompartmentRequest
   * @return ChangeByoipRangeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeByoipRangeCompartment.ts.html |here} to see how to use ChangeByoipRangeCompartment API.
   */
  public async changeByoipRangeCompartment(
    changeByoipRangeCompartmentRequest: requests.ChangeByoipRangeCompartmentRequest
  ): Promise<responses.ChangeByoipRangeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeByoipRangeCompartment.");
    const pathParams = {
      "{byoipRangeId}": changeByoipRangeCompartmentRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeByoipRangeCompartmentRequest.opcRequestId,
      "opc-retry-token": changeByoipRangeCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeByoipRangeCompartmentRequest.changeByoipRangeCompartmentDetails,
        "ChangeByoipRangeCompartmentDetails",
        models.ChangeByoipRangeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeByoipRangeCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeByoipRangeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a CPE object into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeCpeCompartmentRequest
   * @return ChangeCpeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeCpeCompartment.ts.html |here} to see how to use ChangeCpeCompartment API.
   */
  public async changeCpeCompartment(
    changeCpeCompartmentRequest: requests.ChangeCpeCompartmentRequest
  ): Promise<responses.ChangeCpeCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeCpeCompartment.");
    const pathParams = {
      "{cpeId}": changeCpeCompartmentRequest.cpeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeCpeCompartmentRequest.opcRequestId,
      "opc-retry-token": changeCpeCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes/{cpeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCpeCompartmentRequest.changeCpeCompartmentDetails,
        "ChangeCpeCompartmentDetails",
        models.ChangeCpeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeCpeCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCpeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a cross-connect into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeCrossConnectCompartmentRequest
   * @return ChangeCrossConnectCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeCrossConnectCompartment.ts.html |here} to see how to use ChangeCrossConnectCompartment API.
   */
  public async changeCrossConnectCompartment(
    changeCrossConnectCompartmentRequest: requests.ChangeCrossConnectCompartmentRequest
  ): Promise<responses.ChangeCrossConnectCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeCrossConnectCompartment.");
    const pathParams = {
      "{crossConnectId}": changeCrossConnectCompartmentRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeCrossConnectCompartmentRequest.opcRequestId,
      "opc-retry-token": changeCrossConnectCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCrossConnectCompartmentRequest.changeCrossConnectCompartmentDetails,
        "ChangeCrossConnectCompartmentDetails",
        models.ChangeCrossConnectCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeCrossConnectCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCrossConnectCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a cross-connect group into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeCrossConnectGroupCompartmentRequest
   * @return ChangeCrossConnectGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeCrossConnectGroupCompartment.ts.html |here} to see how to use ChangeCrossConnectGroupCompartment API.
   */
  public async changeCrossConnectGroupCompartment(
    changeCrossConnectGroupCompartmentRequest: requests.ChangeCrossConnectGroupCompartmentRequest
  ): Promise<responses.ChangeCrossConnectGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#changeCrossConnectGroupCompartment."
      );
    const pathParams = {
      "{crossConnectGroupId}": changeCrossConnectGroupCompartmentRequest.crossConnectGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeCrossConnectGroupCompartmentRequest.opcRequestId,
      "opc-retry-token": changeCrossConnectGroupCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups/{crossConnectGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeCrossConnectGroupCompartmentRequest.changeCrossConnectGroupCompartmentDetails,
        "ChangeCrossConnectGroupCompartmentDetails",
        models.ChangeCrossConnectGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeCrossConnectGroupCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeCrossConnectGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a set of DHCP options into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeDhcpOptionsCompartmentRequest
   * @return ChangeDhcpOptionsCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeDhcpOptionsCompartment.ts.html |here} to see how to use ChangeDhcpOptionsCompartment API.
   */
  public async changeDhcpOptionsCompartment(
    changeDhcpOptionsCompartmentRequest: requests.ChangeDhcpOptionsCompartmentRequest
  ): Promise<responses.ChangeDhcpOptionsCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeDhcpOptionsCompartment.");
    const pathParams = {
      "{dhcpId}": changeDhcpOptionsCompartmentRequest.dhcpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDhcpOptionsCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDhcpOptionsCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps/{dhcpId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDhcpOptionsCompartmentRequest.changeDhcpOptionsCompartmentDetails,
        "ChangeDhcpOptionsCompartmentDetails",
        models.ChangeDhcpOptionsCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeDhcpOptionsCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDhcpOptionsCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a DRG into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeDrgCompartmentRequest
   * @return ChangeDrgCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeDrgCompartment.ts.html |here} to see how to use ChangeDrgCompartment API.
   */
  public async changeDrgCompartment(
    changeDrgCompartmentRequest: requests.ChangeDrgCompartmentRequest
  ): Promise<responses.ChangeDrgCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeDrgCompartment.");
    const pathParams = {
      "{drgId}": changeDrgCompartmentRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeDrgCompartmentRequest.opcRequestId,
      "opc-retry-token": changeDrgCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeDrgCompartmentRequest.changeDrgCompartmentDetails,
        "ChangeDrgCompartmentDetails",
        models.ChangeDrgCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeDrgCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeDrgCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves an IPSec connection into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeIPSecConnectionCompartmentRequest
   * @return ChangeIPSecConnectionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeIPSecConnectionCompartment.ts.html |here} to see how to use ChangeIPSecConnectionCompartment API.
   */
  public async changeIPSecConnectionCompartment(
    changeIPSecConnectionCompartmentRequest: requests.ChangeIPSecConnectionCompartmentRequest
  ): Promise<responses.ChangeIPSecConnectionCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeIPSecConnectionCompartment.");
    const pathParams = {
      "{ipscId}": changeIPSecConnectionCompartmentRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeIPSecConnectionCompartmentRequest.opcRequestId,
      "opc-retry-token": changeIPSecConnectionCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeIPSecConnectionCompartmentRequest.changeIPSecConnectionCompartmentDetails,
        "ChangeIPSecConnectionCompartmentDetails",
        models.ChangeIPSecConnectionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeIPSecConnectionCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeIPSecConnectionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves an internet gateway into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeInternetGatewayCompartmentRequest
   * @return ChangeInternetGatewayCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeInternetGatewayCompartment.ts.html |here} to see how to use ChangeInternetGatewayCompartment API.
   */
  public async changeInternetGatewayCompartment(
    changeInternetGatewayCompartmentRequest: requests.ChangeInternetGatewayCompartmentRequest
  ): Promise<responses.ChangeInternetGatewayCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeInternetGatewayCompartment.");
    const pathParams = {
      "{igId}": changeInternetGatewayCompartmentRequest.igId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeInternetGatewayCompartmentRequest.opcRequestId,
      "opc-retry-token": changeInternetGatewayCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways/{igId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeInternetGatewayCompartmentRequest.changeInternetGatewayCompartmentDetails,
        "ChangeInternetGatewayCompartmentDetails",
        models.ChangeInternetGatewayCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeInternetGatewayCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeInternetGatewayCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a local peering gateway into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeLocalPeeringGatewayCompartmentRequest
   * @return ChangeLocalPeeringGatewayCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeLocalPeeringGatewayCompartment.ts.html |here} to see how to use ChangeLocalPeeringGatewayCompartment API.
   */
  public async changeLocalPeeringGatewayCompartment(
    changeLocalPeeringGatewayCompartmentRequest: requests.ChangeLocalPeeringGatewayCompartmentRequest
  ): Promise<responses.ChangeLocalPeeringGatewayCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#changeLocalPeeringGatewayCompartment."
      );
    const pathParams = {
      "{localPeeringGatewayId}": changeLocalPeeringGatewayCompartmentRequest.localPeeringGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeLocalPeeringGatewayCompartmentRequest.opcRequestId,
      "opc-retry-token": changeLocalPeeringGatewayCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways/{localPeeringGatewayId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLocalPeeringGatewayCompartmentRequest.changeLocalPeeringGatewayCompartmentDetails,
        "ChangeLocalPeeringGatewayCompartmentDetails",
        models.ChangeLocalPeeringGatewayCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeLocalPeeringGatewayCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLocalPeeringGatewayCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a NAT gateway into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeNatGatewayCompartmentRequest
   * @return ChangeNatGatewayCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeNatGatewayCompartment.ts.html |here} to see how to use ChangeNatGatewayCompartment API.
   */
  public async changeNatGatewayCompartment(
    changeNatGatewayCompartmentRequest: requests.ChangeNatGatewayCompartmentRequest
  ): Promise<responses.ChangeNatGatewayCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeNatGatewayCompartment.");
    const pathParams = {
      "{natGatewayId}": changeNatGatewayCompartmentRequest.natGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeNatGatewayCompartmentRequest.opcRequestId,
      "opc-retry-token": changeNatGatewayCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways/{natGatewayId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeNatGatewayCompartmentRequest.changeNatGatewayCompartmentDetails,
        "ChangeNatGatewayCompartmentDetails",
        models.ChangeNatGatewayCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeNatGatewayCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeNatGatewayCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a network security group into a different compartment within the same tenancy. For
   * information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeNetworkSecurityGroupCompartmentRequest
   * @return ChangeNetworkSecurityGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeNetworkSecurityGroupCompartment.ts.html |here} to see how to use ChangeNetworkSecurityGroupCompartment API.
   */
  public async changeNetworkSecurityGroupCompartment(
    changeNetworkSecurityGroupCompartmentRequest: requests.ChangeNetworkSecurityGroupCompartmentRequest
  ): Promise<responses.ChangeNetworkSecurityGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#changeNetworkSecurityGroupCompartment."
      );
    const pathParams = {
      "{networkSecurityGroupId}":
        changeNetworkSecurityGroupCompartmentRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeNetworkSecurityGroupCompartmentRequest.opcRequestId,
      "opc-retry-token": changeNetworkSecurityGroupCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeNetworkSecurityGroupCompartmentRequest.changeNetworkSecurityGroupCompartmentDetails,
        "ChangeNetworkSecurityGroupCompartmentDetails",
        models.ChangeNetworkSecurityGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeNetworkSecurityGroupCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeNetworkSecurityGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Moves a public IP into a different compartment within the same tenancy. For information
* about moving resources between compartments, see
* [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* <p>
This operation applies only to reserved public IPs. Ephemeral public IPs always belong to the
* same compartment as their VNIC and move accordingly.
* 
     * @param ChangePublicIpCompartmentRequest
     * @return ChangePublicIpCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangePublicIpCompartment.ts.html |here} to see how to use ChangePublicIpCompartment API.
     */
  public async changePublicIpCompartment(
    changePublicIpCompartmentRequest: requests.ChangePublicIpCompartmentRequest
  ): Promise<responses.ChangePublicIpCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changePublicIpCompartment.");
    const pathParams = {
      "{publicIpId}": changePublicIpCompartmentRequest.publicIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changePublicIpCompartmentRequest.opcRequestId,
      "opc-retry-token": changePublicIpCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/{publicIpId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changePublicIpCompartmentRequest.changePublicIpCompartmentDetails,
        "ChangePublicIpCompartmentDetails",
        models.ChangePublicIpCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changePublicIpCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangePublicIpCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a public IP pool into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangePublicIpPoolCompartmentRequest
   * @return ChangePublicIpPoolCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangePublicIpPoolCompartment.ts.html |here} to see how to use ChangePublicIpPoolCompartment API.
   */
  public async changePublicIpPoolCompartment(
    changePublicIpPoolCompartmentRequest: requests.ChangePublicIpPoolCompartmentRequest
  ): Promise<responses.ChangePublicIpPoolCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changePublicIpPoolCompartment.");
    const pathParams = {
      "{publicIpPoolId}": changePublicIpPoolCompartmentRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changePublicIpPoolCompartmentRequest.opcRequestId,
      "opc-retry-token": changePublicIpPoolCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changePublicIpPoolCompartmentRequest.changePublicIpPoolCompartmentDetails,
        "ChangePublicIpPoolCompartmentDetails",
        models.ChangePublicIpPoolCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changePublicIpPoolCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangePublicIpPoolCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a remote peering connection (RPC) into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeRemotePeeringConnectionCompartmentRequest
   * @return ChangeRemotePeeringConnectionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeRemotePeeringConnectionCompartment.ts.html |here} to see how to use ChangeRemotePeeringConnectionCompartment API.
   */
  public async changeRemotePeeringConnectionCompartment(
    changeRemotePeeringConnectionCompartmentRequest: requests.ChangeRemotePeeringConnectionCompartmentRequest
  ): Promise<responses.ChangeRemotePeeringConnectionCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#changeRemotePeeringConnectionCompartment."
      );
    const pathParams = {
      "{remotePeeringConnectionId}":
        changeRemotePeeringConnectionCompartmentRequest.remotePeeringConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeRemotePeeringConnectionCompartmentRequest.opcRequestId,
      "opc-retry-token": changeRemotePeeringConnectionCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections/{remotePeeringConnectionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeRemotePeeringConnectionCompartmentRequest.changeRemotePeeringConnectionCompartmentDetails,
        "ChangeRemotePeeringConnectionCompartmentDetails",
        models.ChangeRemotePeeringConnectionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeRemotePeeringConnectionCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeRemotePeeringConnectionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a route table into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeRouteTableCompartmentRequest
   * @return ChangeRouteTableCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeRouteTableCompartment.ts.html |here} to see how to use ChangeRouteTableCompartment API.
   */
  public async changeRouteTableCompartment(
    changeRouteTableCompartmentRequest: requests.ChangeRouteTableCompartmentRequest
  ): Promise<responses.ChangeRouteTableCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeRouteTableCompartment.");
    const pathParams = {
      "{rtId}": changeRouteTableCompartmentRequest.rtId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeRouteTableCompartmentRequest.opcRequestId,
      "opc-retry-token": changeRouteTableCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables/{rtId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeRouteTableCompartmentRequest.changeRouteTableCompartmentDetails,
        "ChangeRouteTableCompartmentDetails",
        models.ChangeRouteTableCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeRouteTableCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeRouteTableCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a security list into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeSecurityListCompartmentRequest
   * @return ChangeSecurityListCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeSecurityListCompartment.ts.html |here} to see how to use ChangeSecurityListCompartment API.
   */
  public async changeSecurityListCompartment(
    changeSecurityListCompartmentRequest: requests.ChangeSecurityListCompartmentRequest
  ): Promise<responses.ChangeSecurityListCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeSecurityListCompartment.");
    const pathParams = {
      "{securityListId}": changeSecurityListCompartmentRequest.securityListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeSecurityListCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSecurityListCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists/{securityListId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSecurityListCompartmentRequest.changeSecurityListCompartmentDetails,
        "ChangeSecurityListCompartmentDetails",
        models.ChangeSecurityListCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeSecurityListCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSecurityListCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a service gateway into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeServiceGatewayCompartmentRequest
   * @return ChangeServiceGatewayCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeServiceGatewayCompartment.ts.html |here} to see how to use ChangeServiceGatewayCompartment API.
   */
  public async changeServiceGatewayCompartment(
    changeServiceGatewayCompartmentRequest: requests.ChangeServiceGatewayCompartmentRequest
  ): Promise<responses.ChangeServiceGatewayCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeServiceGatewayCompartment.");
    const pathParams = {
      "{serviceGatewayId}": changeServiceGatewayCompartmentRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeServiceGatewayCompartmentRequest.opcRequestId,
      "opc-retry-token": changeServiceGatewayCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeServiceGatewayCompartmentRequest.changeServiceGatewayCompartmentDetails,
        "ChangeServiceGatewayCompartmentDetails",
        models.ChangeServiceGatewayCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeServiceGatewayCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeServiceGatewayCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a subnet into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeSubnetCompartmentRequest
   * @return ChangeSubnetCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeSubnetCompartment.ts.html |here} to see how to use ChangeSubnetCompartment API.
   */
  public async changeSubnetCompartment(
    changeSubnetCompartmentRequest: requests.ChangeSubnetCompartmentRequest
  ): Promise<responses.ChangeSubnetCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeSubnetCompartment.");
    const pathParams = {
      "{subnetId}": changeSubnetCompartmentRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeSubnetCompartmentRequest.opcRequestId,
      "opc-retry-token": changeSubnetCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets/{subnetId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSubnetCompartmentRequest.changeSubnetCompartmentDetails,
        "ChangeSubnetCompartmentDetails",
        models.ChangeSubnetCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeSubnetCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSubnetCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a VCN into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeVcnCompartmentRequest
   * @return ChangeVcnCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVcnCompartment.ts.html |here} to see how to use ChangeVcnCompartment API.
   */
  public async changeVcnCompartment(
    changeVcnCompartmentRequest: requests.ChangeVcnCompartmentRequest
  ): Promise<responses.ChangeVcnCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeVcnCompartment.");
    const pathParams = {
      "{vcnId}": changeVcnCompartmentRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVcnCompartmentRequest.opcRequestId,
      "opc-retry-token": changeVcnCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVcnCompartmentRequest.changeVcnCompartmentDetails,
        "ChangeVcnCompartmentDetails",
        models.ChangeVcnCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeVcnCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVcnCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a virtual circuit into a different compartment within the same tenancy. For information
   * about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeVirtualCircuitCompartmentRequest
   * @return ChangeVirtualCircuitCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVirtualCircuitCompartment.ts.html |here} to see how to use ChangeVirtualCircuitCompartment API.
   */
  public async changeVirtualCircuitCompartment(
    changeVirtualCircuitCompartmentRequest: requests.ChangeVirtualCircuitCompartmentRequest
  ): Promise<responses.ChangeVirtualCircuitCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeVirtualCircuitCompartment.");
    const pathParams = {
      "{virtualCircuitId}": changeVirtualCircuitCompartmentRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeVirtualCircuitCompartmentRequest.opcRequestId,
      "opc-retry-token": changeVirtualCircuitCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVirtualCircuitCompartmentRequest.changeVirtualCircuitCompartmentDetails,
        "ChangeVirtualCircuitCompartmentDetails",
        models.ChangeVirtualCircuitCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeVirtualCircuitCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVirtualCircuitCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a VLAN into a different compartment within the same tenancy.
   * For information about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeVlanCompartmentRequest
   * @return ChangeVlanCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ChangeVlanCompartment.ts.html |here} to see how to use ChangeVlanCompartment API.
   */
  public async changeVlanCompartment(
    changeVlanCompartmentRequest: requests.ChangeVlanCompartmentRequest
  ): Promise<responses.ChangeVlanCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#changeVlanCompartment.");
    const pathParams = {
      "{vlanId}": changeVlanCompartmentRequest.vlanId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeVlanCompartmentRequest.ifMatch,
      "opc-request-id": changeVlanCompartmentRequest.opcRequestId,
      "opc-retry-token": changeVlanCompartmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans/{vlanId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVlanCompartmentRequest.changeVlanCompartmentDetails,
        "ChangeVlanCompartmentDetails",
        models.ChangeVlanCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeVlanCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVlanCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Connects this local peering gateway (LPG) to another one in the same region.
* <p>
This operation must be called by the VCN administrator who is designated as
* the *requestor* in the peering relationship. The *acceptor* must implement
* an Identity and Access Management (IAM) policy that gives the requestor permission
* to connect to LPGs in the acceptor's compartment. Without that permission, this
* operation will fail. For more information, see
* [VCN Peering](https://docs.cloud.oracle.com/Content/Network/Tasks/VCNpeering.htm).
* 
     * @param ConnectLocalPeeringGatewaysRequest
     * @return ConnectLocalPeeringGatewaysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ConnectLocalPeeringGateways.ts.html |here} to see how to use ConnectLocalPeeringGateways API.
     */
  public async connectLocalPeeringGateways(
    connectLocalPeeringGatewaysRequest: requests.ConnectLocalPeeringGatewaysRequest
  ): Promise<responses.ConnectLocalPeeringGatewaysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#connectLocalPeeringGateways.");
    const pathParams = {
      "{localPeeringGatewayId}": connectLocalPeeringGatewaysRequest.localPeeringGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways/{localPeeringGatewayId}/actions/connect",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        connectLocalPeeringGatewaysRequest.connectLocalPeeringGatewaysDetails,
        "ConnectLocalPeeringGatewaysDetails",
        models.ConnectLocalPeeringGatewaysDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      connectLocalPeeringGatewaysRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ConnectLocalPeeringGatewaysResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Connects this RPC to another one in a different region.
* <p>
This operation must be called by the VCN administrator who is designated as
* the *requestor* in the peering relationship. The *acceptor* must implement
* an Identity and Access Management (IAM) policy that gives the requestor permission
* to connect to RPCs in the acceptor's compartment. Without that permission, this
* operation will fail. For more information, see
* [VCN Peering](https://docs.cloud.oracle.com/Content/Network/Tasks/VCNpeering.htm).
* 
     * @param ConnectRemotePeeringConnectionsRequest
     * @return ConnectRemotePeeringConnectionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ConnectRemotePeeringConnections.ts.html |here} to see how to use ConnectRemotePeeringConnections API.
     */
  public async connectRemotePeeringConnections(
    connectRemotePeeringConnectionsRequest: requests.ConnectRemotePeeringConnectionsRequest
  ): Promise<responses.ConnectRemotePeeringConnectionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#connectRemotePeeringConnections.");
    const pathParams = {
      "{remotePeeringConnectionId}":
        connectRemotePeeringConnectionsRequest.remotePeeringConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections/{remotePeeringConnectionId}/actions/connect",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        connectRemotePeeringConnectionsRequest.connectRemotePeeringConnectionsDetails,
        "ConnectRemotePeeringConnectionsDetails",
        models.ConnectRemotePeeringConnectionsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      connectRemotePeeringConnectionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ConnectRemotePeeringConnectionsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Byoip Range prefix.
   *
   * @param CreateByoipRangeRequest
   * @return CreateByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateByoipRange.ts.html |here} to see how to use CreateByoipRange API.
   */
  public async createByoipRange(
    createByoipRangeRequest: requests.CreateByoipRangeRequest
  ): Promise<responses.CreateByoipRangeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createByoipRange.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createByoipRangeRequest.opcRequestId,
      "opc-retry-token": createByoipRangeRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createByoipRangeRequest.createByoipRangeDetails,
        "CreateByoipRangeDetails",
        models.CreateByoipRangeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createByoipRangeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateByoipRangeResponse>{},
        body: await response.json(),
        bodyKey: "byoipRange",
        bodyModel: "model.ByoipRange",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new virtual customer-premises equipment (CPE) object in the specified compartment. For
* more information, see [IPSec VPNs](https://docs.cloud.oracle.com/Content/Network/Tasks/managingIPsec.htm).
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want
* the CPE to reside. Notice that the CPE doesn't have to be in the same compartment as the IPSec
* connection or other Networking Service components. If you're not sure which compartment to
* use, put the CPE in the same compartment as the DRG. For more information about
* compartments and access control, see [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You must provide the public IP address of your on-premises router. See
* [Configuring Your On-Premises Router for an IPSec VPN](https://docs.cloud.oracle.com/Content/Network/Tasks/configuringCPE.htm).
* <p>
You may optionally specify a *display name* for the CPE, otherwise a default is provided. It does not have to
* be unique, and you can change it. Avoid entering confidential information.
* 
     * @param CreateCpeRequest
     * @return CreateCpeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateCpe.ts.html |here} to see how to use CreateCpe API.
     */
  public async createCpe(
    createCpeRequest: requests.CreateCpeRequest
  ): Promise<responses.CreateCpeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createCpe.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createCpeRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCpeRequest.createCpeDetails,
        "CreateCpeDetails",
        models.CreateCpeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createCpeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCpeResponse>{},
        body: await response.json(),
        bodyKey: "cpe",
        bodyModel: "model.Cpe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new cross-connect. Oracle recommends you create each cross-connect in a
* {@link CrossConnectGroup} so you can use link aggregation
* with the connection.
* <p>
After creating the `CrossConnect` object, you need to go the FastConnect location
* and request to have the physical cable installed. For more information, see
* [FastConnect Overview](https://docs.cloud.oracle.com/Content/Network/Concepts/fastconnect.htm).
* <p>
For the purposes of access control, you must provide the OCID of the
* compartment where you want the cross-connect to reside. If you're
* not sure which compartment to use, put the cross-connect in the
* same compartment with your VCN. For more information about
* compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the cross-connect.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * @param CreateCrossConnectRequest
     * @return CreateCrossConnectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateCrossConnect.ts.html |here} to see how to use CreateCrossConnect API.
     */
  public async createCrossConnect(
    createCrossConnectRequest: requests.CreateCrossConnectRequest
  ): Promise<responses.CreateCrossConnectResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createCrossConnect.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createCrossConnectRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCrossConnectRequest.createCrossConnectDetails,
        "CreateCrossConnectDetails",
        models.CreateCrossConnectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createCrossConnectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCrossConnectResponse>{},
        body: await response.json(),
        bodyKey: "crossConnect",
        bodyModel: "model.CrossConnect",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new cross-connect group to use with Oracle Cloud Infrastructure
* FastConnect. For more information, see
* [FastConnect Overview](https://docs.cloud.oracle.com/Content/Network/Concepts/fastconnect.htm).
* <p>
For the purposes of access control, you must provide the OCID of the
* compartment where you want the cross-connect group to reside. If you're
* not sure which compartment to use, put the cross-connect group in the
* same compartment with your VCN. For more information about
* compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the cross-connect group.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * @param CreateCrossConnectGroupRequest
     * @return CreateCrossConnectGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateCrossConnectGroup.ts.html |here} to see how to use CreateCrossConnectGroup API.
     */
  public async createCrossConnectGroup(
    createCrossConnectGroupRequest: requests.CreateCrossConnectGroupRequest
  ): Promise<responses.CreateCrossConnectGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createCrossConnectGroup.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createCrossConnectGroupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCrossConnectGroupRequest.createCrossConnectGroupDetails,
        "CreateCrossConnectGroupDetails",
        models.CreateCrossConnectGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createCrossConnectGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCrossConnectGroupResponse>{},
        body: await response.json(),
        bodyKey: "crossConnectGroup",
        bodyModel: "model.CrossConnectGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new set of DHCP options for the specified VCN. For more information, see
* {@link DhcpOptions}.
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want the set of
* DHCP options to reside. Notice that the set of options doesn't have to be in the same compartment as the VCN,
* subnets, or other Networking Service components. If you're not sure which compartment to use, put the set
* of DHCP options in the same compartment as the VCN. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the set of DHCP options, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * @param CreateDhcpOptionsRequest
     * @return CreateDhcpOptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateDhcpOptions.ts.html |here} to see how to use CreateDhcpOptions API.
     */
  public async createDhcpOptions(
    createDhcpOptionsRequest: requests.CreateDhcpOptionsRequest
  ): Promise<responses.CreateDhcpOptionsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createDhcpOptions.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDhcpOptionsRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDhcpOptionsRequest.createDhcpDetails,
        "CreateDhcpDetails",
        models.CreateDhcpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createDhcpOptionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDhcpOptionsResponse>{},
        body: await response.json(),
        bodyKey: "dhcpOptions",
        bodyModel: "model.DhcpOptions",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new dynamic routing gateway (DRG) in the specified compartment. For more information,
* see [Dynamic Routing Gateways (DRGs)](https://docs.cloud.oracle.com/Content/Network/Tasks/managingDRGs.htm).
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want
* the DRG to reside. Notice that the DRG doesn't have to be in the same compartment as the VCN,
* the DRG attachment, or other Networking Service components. If you're not sure which compartment
* to use, put the DRG in the same compartment as the VCN. For more information about compartments
* and access control, see [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the DRG, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * @param CreateDrgRequest
     * @return CreateDrgResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateDrg.ts.html |here} to see how to use CreateDrg API.
     */
  public async createDrg(
    createDrgRequest: requests.CreateDrgRequest
  ): Promise<responses.CreateDrgResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createDrg.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDrgRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDrgRequest.createDrgDetails,
        "CreateDrgDetails",
        models.CreateDrgDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createDrgRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDrgResponse>{},
        body: await response.json(),
        bodyKey: "drg",
        bodyModel: "model.Drg",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Attaches the specified DRG to the specified VCN. A VCN can be attached to only one DRG at a time,
* and vice versa. The response includes a `DrgAttachment` object with its own OCID. For more
* information about DRGs, see
* [Dynamic Routing Gateways (DRGs)](https://docs.cloud.oracle.com/Content/Network/Tasks/managingDRGs.htm).
* <p>
You may optionally specify a *display name* for the attachment, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
For the purposes of access control, the DRG attachment is automatically placed into the same compartment
* as the VCN. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* 
     * @param CreateDrgAttachmentRequest
     * @return CreateDrgAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateDrgAttachment.ts.html |here} to see how to use CreateDrgAttachment API.
     */
  public async createDrgAttachment(
    createDrgAttachmentRequest: requests.CreateDrgAttachmentRequest
  ): Promise<responses.CreateDrgAttachmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createDrgAttachment.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDrgAttachmentRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgAttachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDrgAttachmentRequest.createDrgAttachmentDetails,
        "CreateDrgAttachmentDetails",
        models.CreateDrgAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createDrgAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDrgAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "drgAttachment",
        bodyModel: "model.DrgAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new IPSec connection between the specified DRG and CPE. For more information, see
* [IPSec VPNs](https://docs.cloud.oracle.com/Content/Network/Tasks/managingIPsec.htm).
* <p>
If you configure at least one tunnel to use static routing, then in the request you must provide
* at least one valid static route (you're allowed a maximum of 10). For example: 10.0.0.0/16.
* If you configure both tunnels to use BGP dynamic routing, you can provide an empty list for
* the static routes. For more information, see the important note in
* {@link IPSecConnection}.
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want the
* IPSec connection to reside. Notice that the IPSec connection doesn't have to be in the same compartment
* as the DRG, CPE, or other Networking Service components. If you're not sure which compartment to
* use, put the IPSec connection in the same compartment as the DRG. For more information about
* compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the IPSec connection, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
After creating the IPSec connection, you need to configure your on-premises router
* with tunnel-specific information. For tunnel status and the required configuration information, see:
* <p>
  * {@link IPSecConnectionTunnel}
*   * {@link IPSecConnectionTunnelSharedSecret}
* <p>
For each tunnel, you need the IP address of Oracle's VPN headend and the shared secret
* (that is, the pre-shared key). For more information, see
* [Configuring Your On-Premises Router for an IPSec VPN](https://docs.cloud.oracle.com/Content/Network/Tasks/configuringCPE.htm).
* 
     * @param CreateIPSecConnectionRequest
     * @return CreateIPSecConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateIPSecConnection.ts.html |here} to see how to use CreateIPSecConnection API.
     */
  public async createIPSecConnection(
    createIPSecConnectionRequest: requests.CreateIPSecConnectionRequest
  ): Promise<responses.CreateIPSecConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createIPSecConnection.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createIPSecConnectionRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createIPSecConnectionRequest.createIPSecConnectionDetails,
        "CreateIPSecConnectionDetails",
        models.CreateIPSecConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createIPSecConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateIPSecConnectionResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnection",
        bodyModel: "model.IPSecConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new internet gateway for the specified VCN. For more information, see
* [Access to the Internet](https://docs.cloud.oracle.com/Content/Network/Tasks/managingIGs.htm).
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want the Internet
* Gateway to reside. Notice that the internet gateway doesn't have to be in the same compartment as the VCN or
* other Networking Service components. If you're not sure which compartment to use, put the Internet
* Gateway in the same compartment with the VCN. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the internet gateway, otherwise a default is provided. It
* does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
For traffic to flow between a subnet and an internet gateway, you must create a route rule accordingly in
* the subnet's route table (for example, 0.0.0.0/0 > internet gateway). See
* {@link #updateRouteTable(UpdateRouteTableRequest) updateRouteTable}.
* <p>
You must specify whether the internet gateway is enabled when you create it. If it's disabled, that means no
* traffic will flow to/from the internet even if there's a route rule that enables that traffic. You can later
* use {@link #updateInternetGateway(UpdateInternetGatewayRequest) updateInternetGateway} to easily disable/enable
* the gateway without changing the route rule.
* 
     * @param CreateInternetGatewayRequest
     * @return CreateInternetGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateInternetGateway.ts.html |here} to see how to use CreateInternetGateway API.
     */
  public async createInternetGateway(
    createInternetGatewayRequest: requests.CreateInternetGatewayRequest
  ): Promise<responses.CreateInternetGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createInternetGateway.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createInternetGatewayRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createInternetGatewayRequest.createInternetGatewayDetails,
        "CreateInternetGatewayDetails",
        models.CreateInternetGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createInternetGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateInternetGatewayResponse>{},
        body: await response.json(),
        bodyKey: "internetGateway",
        bodyModel: "model.InternetGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates an IPv6 for the specified VNIC.
   *
   * @param CreateIpv6Request
   * @return CreateIpv6Response
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateIpv6.ts.html |here} to see how to use CreateIpv6 API.
   */
  public async createIpv6(
    createIpv6Request: requests.CreateIpv6Request
  ): Promise<responses.CreateIpv6Response> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createIpv6.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createIpv6Request.opcRequestId,
      "opc-retry-token": createIpv6Request.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipv6",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createIpv6Request.createIpv6Details,
        "CreateIpv6Details",
        models.CreateIpv6Details.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createIpv6Request.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateIpv6Response>{},
        body: await response.json(),
        bodyKey: "ipv6",
        bodyModel: "model.Ipv6",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new local peering gateway (LPG) for the specified VCN.
   *
   * @param CreateLocalPeeringGatewayRequest
   * @return CreateLocalPeeringGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateLocalPeeringGateway.ts.html |here} to see how to use CreateLocalPeeringGateway API.
   */
  public async createLocalPeeringGateway(
    createLocalPeeringGatewayRequest: requests.CreateLocalPeeringGatewayRequest
  ): Promise<responses.CreateLocalPeeringGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createLocalPeeringGateway.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createLocalPeeringGatewayRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLocalPeeringGatewayRequest.createLocalPeeringGatewayDetails,
        "CreateLocalPeeringGatewayDetails",
        models.CreateLocalPeeringGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createLocalPeeringGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLocalPeeringGatewayResponse>{},
        body: await response.json(),
        bodyKey: "localPeeringGateway",
        bodyModel: "model.LocalPeeringGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new NAT gateway for the specified VCN. You must also set up a route rule with the
   * NAT gateway as the rule's target. See {@link RouteTable}.
   *
   * @param CreateNatGatewayRequest
   * @return CreateNatGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateNatGateway.ts.html |here} to see how to use CreateNatGateway API.
   */
  public async createNatGateway(
    createNatGatewayRequest: requests.CreateNatGatewayRequest
  ): Promise<responses.CreateNatGatewayResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createNatGateway.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createNatGatewayRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createNatGatewayRequest.createNatGatewayDetails,
        "CreateNatGatewayDetails",
        models.CreateNatGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createNatGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateNatGatewayResponse>{},
        body: await response.json(),
        bodyKey: "natGateway",
        bodyModel: "model.NatGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new network security group for the specified VCN.
   *
   * @param CreateNetworkSecurityGroupRequest
   * @return CreateNetworkSecurityGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateNetworkSecurityGroup.ts.html |here} to see how to use CreateNetworkSecurityGroup API.
   */
  public async createNetworkSecurityGroup(
    createNetworkSecurityGroupRequest: requests.CreateNetworkSecurityGroupRequest
  ): Promise<responses.CreateNetworkSecurityGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createNetworkSecurityGroup.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createNetworkSecurityGroupRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createNetworkSecurityGroupRequest.createNetworkSecurityGroupDetails,
        "CreateNetworkSecurityGroupDetails",
        models.CreateNetworkSecurityGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createNetworkSecurityGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateNetworkSecurityGroupResponse>{},
        body: await response.json(),
        bodyKey: "networkSecurityGroup",
        bodyModel: "model.NetworkSecurityGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a secondary private IP for the specified VNIC.
   * For more information about secondary private IPs, see
   * [IP Addresses](https://docs.cloud.oracle.com/Content/Network/Tasks/managingIPaddresses.htm).
   *
   * @param CreatePrivateIpRequest
   * @return CreatePrivateIpResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreatePrivateIp.ts.html |here} to see how to use CreatePrivateIp API.
   */
  public async createPrivateIp(
    createPrivateIpRequest: requests.CreatePrivateIpRequest
  ): Promise<responses.CreatePrivateIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createPrivateIp.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPrivateIpRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateIps",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPrivateIpRequest.createPrivateIpDetails,
        "CreatePrivateIpDetails",
        models.CreatePrivateIpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createPrivateIpRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePrivateIpResponse>{},
        body: await response.json(),
        bodyKey: "privateIp",
        bodyModel: "model.PrivateIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a public IP. Use the `lifetime` property to specify whether it's an ephemeral or
* reserved public IP. For information about limits on how many you can create, see
* [Public IP Addresses](https://docs.cloud.oracle.com/Content/Network/Tasks/managingpublicIPs.htm).
* <p>
* **For an ephemeral public IP assigned to a private IP:** You must also specify a `privateIpId`
* with the OCID of the primary private IP you want to assign the public IP to. The public IP is
* created in the same availability domain as the private IP. An ephemeral public IP must always be
* assigned to a private IP, and only to the *primary* private IP on a VNIC, not a secondary
* private IP. Exception: If you create a {@link NatGateway}, Oracle
* automatically assigns the NAT gateway a regional ephemeral public IP that you cannot remove.
* <p>
* **For a reserved public IP:** You may also optionally assign the public IP to a private
* IP by specifying `privateIpId`. Or you can later assign the public IP with
* {@link #updatePublicIp(UpdatePublicIpRequest) updatePublicIp}.
* <p>
**Note:** When assigning a public IP to a private IP, the private IP must not already have
* a public IP with `lifecycleState` = ASSIGNING or ASSIGNED. If it does, an error is returned.
* <p>
Also, for reserved public IPs, the optional assignment part of this operation is
* asynchronous. Poll the public IP's `lifecycleState` to determine if the assignment
* succeeded.
* 
     * @param CreatePublicIpRequest
     * @return CreatePublicIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreatePublicIp.ts.html |here} to see how to use CreatePublicIp API.
     */
  public async createPublicIp(
    createPublicIpRequest: requests.CreatePublicIpRequest
  ): Promise<responses.CreatePublicIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createPublicIp.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createPublicIpRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPublicIpRequest.createPublicIpDetails,
        "CreatePublicIpDetails",
        models.CreatePublicIpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createPublicIpRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePublicIpResponse>{},
        body: await response.json(),
        bodyKey: "publicIp",
        bodyModel: "model.PublicIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Public Ip Pool
   *
   * @param CreatePublicIpPoolRequest
   * @return CreatePublicIpPoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreatePublicIpPool.ts.html |here} to see how to use CreatePublicIpPool API.
   */
  public async createPublicIpPool(
    createPublicIpPoolRequest: requests.CreatePublicIpPoolRequest
  ): Promise<responses.CreatePublicIpPoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createPublicIpPool.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createPublicIpPoolRequest.opcRequestId,
      "opc-retry-token": createPublicIpPoolRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPublicIpPoolRequest.createPublicIpPoolDetails,
        "CreatePublicIpPoolDetails",
        models.CreatePublicIpPoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createPublicIpPoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePublicIpPoolResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPool",
        bodyModel: "model.PublicIpPool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new remote peering connection (RPC) for the specified DRG.
   *
   * @param CreateRemotePeeringConnectionRequest
   * @return CreateRemotePeeringConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateRemotePeeringConnection.ts.html |here} to see how to use CreateRemotePeeringConnection API.
   */
  public async createRemotePeeringConnection(
    createRemotePeeringConnectionRequest: requests.CreateRemotePeeringConnectionRequest
  ): Promise<responses.CreateRemotePeeringConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createRemotePeeringConnection.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createRemotePeeringConnectionRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRemotePeeringConnectionRequest.createRemotePeeringConnectionDetails,
        "CreateRemotePeeringConnectionDetails",
        models.CreateRemotePeeringConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createRemotePeeringConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRemotePeeringConnectionResponse>{},
        body: await response.json(),
        bodyKey: "remotePeeringConnection",
        bodyModel: "model.RemotePeeringConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new route table for the specified VCN. In the request you must also include at least one route
* rule for the new route table. For information on the number of rules you can have in a route table, see
* [Service Limits](https://docs.cloud.oracle.com/Content/General/Concepts/servicelimits.htm). For general information about route
* tables in your VCN and the types of targets you can use in route rules,
* see [Route Tables](https://docs.cloud.oracle.com/Content/Network/Tasks/managingroutetables.htm).
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want the route
* table to reside. Notice that the route table doesn't have to be in the same compartment as the VCN, subnets,
* or other Networking Service components. If you're not sure which compartment to use, put the route
* table in the same compartment as the VCN. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the route table, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * @param CreateRouteTableRequest
     * @return CreateRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateRouteTable.ts.html |here} to see how to use CreateRouteTable API.
     */
  public async createRouteTable(
    createRouteTableRequest: requests.CreateRouteTableRequest
  ): Promise<responses.CreateRouteTableResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createRouteTable.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createRouteTableRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRouteTableRequest.createRouteTableDetails,
        "CreateRouteTableDetails",
        models.CreateRouteTableDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createRouteTableRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRouteTableResponse>{},
        body: await response.json(),
        bodyKey: "routeTable",
        bodyModel: "model.RouteTable",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new security list for the specified VCN. For more information
* about security lists, see [Security Lists](https://docs.cloud.oracle.com/Content/Network/Concepts/securitylists.htm).
* For information on the number of rules you can have in a security list, see
* [Service Limits](https://docs.cloud.oracle.com/Content/General/Concepts/servicelimits.htm).
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want the security
* list to reside. Notice that the security list doesn't have to be in the same compartment as the VCN, subnets,
* or other Networking Service components. If you're not sure which compartment to use, put the security
* list in the same compartment as the VCN. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the security list, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * @param CreateSecurityListRequest
     * @return CreateSecurityListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateSecurityList.ts.html |here} to see how to use CreateSecurityList API.
     */
  public async createSecurityList(
    createSecurityListRequest: requests.CreateSecurityListRequest
  ): Promise<responses.CreateSecurityListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createSecurityList.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSecurityListRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSecurityListRequest.createSecurityListDetails,
        "CreateSecurityListDetails",
        models.CreateSecurityListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createSecurityListRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSecurityListResponse>{},
        body: await response.json(),
        bodyKey: "securityList",
        bodyModel: "model.SecurityList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new service gateway in the specified compartment.
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want
* the service gateway to reside. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the service gateway, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* 
     * @param CreateServiceGatewayRequest
     * @return CreateServiceGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateServiceGateway.ts.html |here} to see how to use CreateServiceGateway API.
     */
  public async createServiceGateway(
    createServiceGatewayRequest: requests.CreateServiceGatewayRequest
  ): Promise<responses.CreateServiceGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createServiceGateway.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createServiceGatewayRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createServiceGatewayRequest.createServiceGatewayDetails,
        "CreateServiceGatewayDetails",
        models.CreateServiceGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createServiceGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateServiceGatewayResponse>{},
        body: await response.json(),
        bodyKey: "serviceGateway",
        bodyModel: "model.ServiceGateway",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new subnet in the specified VCN. You can't change the size of the subnet after creation,
* so it's important to think about the size of subnets you need before creating them.
* For more information, see [VCNs and Subnets](https://docs.cloud.oracle.com/Content/Network/Tasks/managingVCNs.htm).
* For information on the number of subnets you can have in a VCN, see
* [Service Limits](https://docs.cloud.oracle.com/Content/General/Concepts/servicelimits.htm).
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want the subnet
* to reside. Notice that the subnet doesn't have to be in the same compartment as the VCN, route tables, or
* other Networking Service components. If you're not sure which compartment to use, put the subnet in
* the same compartment as the VCN. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm). For information about OCIDs,
* see [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally associate a route table with the subnet. If you don't, the subnet will use the
* VCN's default route table. For more information about route tables, see
* [Route Tables](https://docs.cloud.oracle.com/Content/Network/Tasks/managingroutetables.htm).
* <p>
You may optionally associate a security list with the subnet. If you don't, the subnet will use the
* VCN's default security list. For more information about security lists, see
* [Security Lists](https://docs.cloud.oracle.com/Content/Network/Concepts/securitylists.htm).
* <p>
You may optionally associate a set of DHCP options with the subnet. If you don't, the subnet will use the
* VCN's default set. For more information about DHCP options, see
* [DHCP Options](https://docs.cloud.oracle.com/Content/Network/Tasks/managingDHCP.htm).
* <p>
You may optionally specify a *display name* for the subnet, otherwise a default is provided.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
You can also add a DNS label for the subnet, which is required if you want the Internet and
* VCN Resolver to resolve hostnames for instances in the subnet. For more information, see
* [DNS in Your Virtual Cloud Network](https://docs.cloud.oracle.com/Content/Network/Concepts/dns.htm).
* 
     * @param CreateSubnetRequest
     * @return CreateSubnetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateSubnet.ts.html |here} to see how to use CreateSubnet API.
     */
  public async createSubnet(
    createSubnetRequest: requests.CreateSubnetRequest
  ): Promise<responses.CreateSubnetResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createSubnet.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSubnetRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSubnetRequest.createSubnetDetails,
        "CreateSubnetDetails",
        models.CreateSubnetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createSubnetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSubnetResponse>{},
        body: await response.json(),
        bodyKey: "subnet",
        bodyModel: "model.Subnet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new virtual cloud network (VCN). For more information, see
* [VCNs and Subnets](https://docs.cloud.oracle.com/Content/Network/Tasks/managingVCNs.htm).
* <p>
To create the VCN, you may specify a list of IPv4 CIDR blocks. The CIDRs must maintain
* the following rules -
* <p>
a. The list of CIDRs provided are valid
* b. There is no overlap between different CIDRs
* c. The list of CIDRs does not exceed the max limit of CIDRs per VCN
* <p>
Oracle recommends using one of the private IP address ranges specified in [RFC 1918]
* (https://tools.ietf.org/html/rfc1918) (10.0.0.0/8, 172.16/12, and 192.168/16). Example:
* 172.16.0.0/16. The CIDR blocks can range from /16 to /30, and they must not overlap with
* your on-premises network.
* <p>
For the purposes of access control, you must provide the OCID of the compartment where you want the VCN to
* reside. Consult an Oracle Cloud Infrastructure administrator in your organization if you're not sure which
* compartment to use. Notice that the VCN doesn't have to be in the same compartment as the subnets or other
* Networking Service components. For more information about compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the VCN, otherwise a default is provided. It does not have to
* be unique, and you can change it. Avoid entering confidential information.
* <p>
You can also add a DNS label for the VCN, which is required if you want the instances to use the
* Interent and VCN Resolver option for DNS in the VCN. For more information, see
* [DNS in Your Virtual Cloud Network](https://docs.cloud.oracle.com/Content/Network/Concepts/dns.htm).
* <p>
The VCN automatically comes with a default route table, default security list, and default set of DHCP options.
* The OCID for each is returned in the response. You can't delete these default objects, but you can change their
* contents (that is, change the route rules, security list rules, and so on).
* <p>
The VCN and subnets you create are not accessible until you attach an internet gateway or set up an IPSec VPN
* or FastConnect. For more information, see
* [Overview of the Networking Service](https://docs.cloud.oracle.com/Content/Network/Concepts/overview.htm).
* 
     * @param CreateVcnRequest
     * @return CreateVcnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVcn.ts.html |here} to see how to use CreateVcn API.
     */
  public async createVcn(
    createVcnRequest: requests.CreateVcnRequest
  ): Promise<responses.CreateVcnResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createVcn.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVcnRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVcnRequest.createVcnDetails,
        "CreateVcnDetails",
        models.CreateVcnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createVcnRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVcnResponse>{},
        body: await response.json(),
        bodyKey: "vcn",
        bodyModel: "model.Vcn",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new virtual circuit to use with Oracle Cloud
* Infrastructure FastConnect. For more information, see
* [FastConnect Overview](https://docs.cloud.oracle.com/Content/Network/Concepts/fastconnect.htm).
* <p>
For the purposes of access control, you must provide the OCID of the
* compartment where you want the virtual circuit to reside. If you're
* not sure which compartment to use, put the virtual circuit in the
* same compartment with the DRG it's using. For more information about
* compartments and access control, see
* [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
* For information about OCIDs, see
* [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
* <p>
You may optionally specify a *display name* for the virtual circuit.
* It does not have to be unique, and you can change it. Avoid entering confidential information.
* <p>
**Important:** When creating a virtual circuit, you specify a DRG for
* the traffic to flow through. Make sure you attach the DRG to your
* VCN and confirm the VCN's routing sends traffic to the DRG. Otherwise
* traffic will not flow. For more information, see
* [Route Tables](https://docs.cloud.oracle.com/Content/Network/Tasks/managingroutetables.htm).
* 
     * @param CreateVirtualCircuitRequest
     * @return CreateVirtualCircuitResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVirtualCircuit.ts.html |here} to see how to use CreateVirtualCircuit API.
     */
  public async createVirtualCircuit(
    createVirtualCircuitRequest: requests.CreateVirtualCircuitRequest
  ): Promise<responses.CreateVirtualCircuitResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#createVirtualCircuit.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVirtualCircuitRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVirtualCircuitRequest.createVirtualCircuitDetails,
        "CreateVirtualCircuitDetails",
        models.CreateVirtualCircuitDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createVirtualCircuitRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVirtualCircuitResponse>{},
        body: await response.json(),
        bodyKey: "virtualCircuit",
        bodyModel: "model.VirtualCircuit",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a VLAN in the specified VCN and the specified compartment.
   *
   * @param CreateVlanRequest
   * @return CreateVlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/CreateVlan.ts.html |here} to see how to use CreateVlan API.
   */
  public async createVlan(
    createVlanRequest: requests.CreateVlanRequest
  ): Promise<responses.CreateVlanResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#createVlan.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createVlanRequest.opcRetryToken,
      "opc-request-id": createVlanRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVlanRequest.createVlanDetails,
        "CreateVlanDetails",
        models.CreateVlanDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createVlanRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVlanResponse>{},
        body: await response.json(),
        bodyKey: "vlan",
        bodyModel: "model.Vlan",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified Byoip Range prefix.
* The prefix must be in CREATING, PROVISIONED or FAILED state.
* It must not have any subranges allocated to a Public Ip Pool object.
* You must specify the object's OCID.
* <p>
In case the range is currently PROVISIONED, the operation will be asynchronous as it needs to be de-ptovisioned first.
* 
     * @param DeleteByoipRangeRequest
     * @return DeleteByoipRangeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteByoipRange.ts.html |here} to see how to use DeleteByoipRange API.
     */
  public async deleteByoipRange(
    deleteByoipRangeRequest: requests.DeleteByoipRangeRequest
  ): Promise<responses.DeleteByoipRangeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteByoipRange.");
    const pathParams = {
      "{byoipRangeId}": deleteByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteByoipRangeRequest.opcRequestId,
      "if-match": deleteByoipRangeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteByoipRangeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteByoipRangeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified CPE object. The CPE must not be connected to a DRG. This is an asynchronous
   * operation. The CPE's `lifecycleState` will change to TERMINATING temporarily until the CPE is completely
   * removed.
   *
   * @param DeleteCpeRequest
   * @return DeleteCpeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteCpe.ts.html |here} to see how to use DeleteCpe API.
   */
  public async deleteCpe(
    deleteCpeRequest: requests.DeleteCpeRequest
  ): Promise<responses.DeleteCpeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteCpe.");
    const pathParams = {
      "{cpeId}": deleteCpeRequest.cpeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCpeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes/{cpeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteCpeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCpeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified cross-connect. It must not be mapped to a
   * {@link VirtualCircuit}.
   *
   * @param DeleteCrossConnectRequest
   * @return DeleteCrossConnectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteCrossConnect.ts.html |here} to see how to use DeleteCrossConnect API.
   */
  public async deleteCrossConnect(
    deleteCrossConnectRequest: requests.DeleteCrossConnectRequest
  ): Promise<responses.DeleteCrossConnectResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteCrossConnect.");
    const pathParams = {
      "{crossConnectId}": deleteCrossConnectRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCrossConnectRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteCrossConnectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCrossConnectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified cross-connect group. It must not contain any
   * cross-connects, and it cannot be mapped to a
   * {@link VirtualCircuit}.
   *
   * @param DeleteCrossConnectGroupRequest
   * @return DeleteCrossConnectGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteCrossConnectGroup.ts.html |here} to see how to use DeleteCrossConnectGroup API.
   */
  public async deleteCrossConnectGroup(
    deleteCrossConnectGroupRequest: requests.DeleteCrossConnectGroupRequest
  ): Promise<responses.DeleteCrossConnectGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteCrossConnectGroup.");
    const pathParams = {
      "{crossConnectGroupId}": deleteCrossConnectGroupRequest.crossConnectGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteCrossConnectGroupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups/{crossConnectGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteCrossConnectGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCrossConnectGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified set of DHCP options, but only if it's not associated with a subnet. You can't delete a
* VCN's default set of DHCP options.
* <p>
This is an asynchronous operation. The state of the set of options will switch to TERMINATING temporarily
* until the set is completely removed.
* 
     * @param DeleteDhcpOptionsRequest
     * @return DeleteDhcpOptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteDhcpOptions.ts.html |here} to see how to use DeleteDhcpOptions API.
     */
  public async deleteDhcpOptions(
    deleteDhcpOptionsRequest: requests.DeleteDhcpOptionsRequest
  ): Promise<responses.DeleteDhcpOptionsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteDhcpOptions.");
    const pathParams = {
      "{dhcpId}": deleteDhcpOptionsRequest.dhcpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDhcpOptionsRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps/{dhcpId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteDhcpOptionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDhcpOptionsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified DRG. The DRG must not be attached to a VCN or be connected to your on-premise
   * network. Also, there must not be a route table that lists the DRG as a target. This is an asynchronous
   * operation. The DRG's `lifecycleState` will change to TERMINATING temporarily until the DRG is completely
   * removed.
   *
   * @param DeleteDrgRequest
   * @return DeleteDrgResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteDrg.ts.html |here} to see how to use DeleteDrg API.
   */
  public async deleteDrg(
    deleteDrgRequest: requests.DeleteDrgRequest
  ): Promise<responses.DeleteDrgResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteDrg.");
    const pathParams = {
      "{drgId}": deleteDrgRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDrgRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteDrgRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDrgResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detaches a DRG from a VCN by deleting the corresponding `DrgAttachment`. This is an asynchronous
   * operation. The attachment's `lifecycleState` will change to DETACHING temporarily until the attachment
   * is completely removed.
   *
   * @param DeleteDrgAttachmentRequest
   * @return DeleteDrgAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteDrgAttachment.ts.html |here} to see how to use DeleteDrgAttachment API.
   */
  public async deleteDrgAttachment(
    deleteDrgAttachmentRequest: requests.DeleteDrgAttachmentRequest
  ): Promise<responses.DeleteDrgAttachmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteDrgAttachment.");
    const pathParams = {
      "{drgAttachmentId}": deleteDrgAttachmentRequest.drgAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDrgAttachmentRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgAttachments/{drgAttachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteDrgAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDrgAttachmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified IPSec connection. If your goal is to disable the IPSec VPN between your VCN and
* on-premises network, it's easiest to simply detach the DRG but keep all the IPSec VPN components intact.
* If you were to delete all the components and then later need to create an IPSec VPN again, you would
* need to configure your on-premises router again with the new information returned from
* {@link #createIPSecConnection(CreateIPSecConnectionRequest) createIPSecConnection}.
* <p>
This is an asynchronous operation. The connection's `lifecycleState` will change to TERMINATING temporarily
* until the connection is completely removed.
* 
     * @param DeleteIPSecConnectionRequest
     * @return DeleteIPSecConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteIPSecConnection.ts.html |here} to see how to use DeleteIPSecConnection API.
     */
  public async deleteIPSecConnection(
    deleteIPSecConnectionRequest: requests.DeleteIPSecConnectionRequest
  ): Promise<responses.DeleteIPSecConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteIPSecConnection.");
    const pathParams = {
      "{ipscId}": deleteIPSecConnectionRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteIPSecConnectionRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteIPSecConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteIPSecConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified internet gateway. The internet gateway does not have to be disabled, but
* there must not be a route table that lists it as a target.
* <p>
This is an asynchronous operation. The gateway's `lifecycleState` will change to TERMINATING temporarily
* until the gateway is completely removed.
* 
     * @param DeleteInternetGatewayRequest
     * @return DeleteInternetGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteInternetGateway.ts.html |here} to see how to use DeleteInternetGateway API.
     */
  public async deleteInternetGateway(
    deleteInternetGatewayRequest: requests.DeleteInternetGatewayRequest
  ): Promise<responses.DeleteInternetGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteInternetGateway.");
    const pathParams = {
      "{igId}": deleteInternetGatewayRequest.igId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteInternetGatewayRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways/{igId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteInternetGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteInternetGatewayResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Unassigns and deletes the specified IPv6. You must specify the object's OCID.
   * The IPv6 address is returned to the subnet's pool of available addresses.
   *
   * @param DeleteIpv6Request
   * @return DeleteIpv6Response
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteIpv6.ts.html |here} to see how to use DeleteIpv6 API.
   */
  public async deleteIpv6(
    deleteIpv6Request: requests.DeleteIpv6Request
  ): Promise<responses.DeleteIpv6Response> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteIpv6.");
    const pathParams = {
      "{ipv6Id}": deleteIpv6Request.ipv6Id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteIpv6Request.ifMatch,
      "opc-request-id": deleteIpv6Request.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipv6/{ipv6Id}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteIpv6Request.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteIpv6Response>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified local peering gateway (LPG).
* <p>
This is an asynchronous operation; the local peering gateway's `lifecycleState` changes to TERMINATING temporarily
* until the local peering gateway is completely removed.
* 
     * @param DeleteLocalPeeringGatewayRequest
     * @return DeleteLocalPeeringGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteLocalPeeringGateway.ts.html |here} to see how to use DeleteLocalPeeringGateway API.
     */
  public async deleteLocalPeeringGateway(
    deleteLocalPeeringGatewayRequest: requests.DeleteLocalPeeringGatewayRequest
  ): Promise<responses.DeleteLocalPeeringGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteLocalPeeringGateway.");
    const pathParams = {
      "{localPeeringGatewayId}": deleteLocalPeeringGatewayRequest.localPeeringGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteLocalPeeringGatewayRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways/{localPeeringGatewayId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteLocalPeeringGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLocalPeeringGatewayResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified NAT gateway. The NAT gateway does not have to be disabled, but there
* must not be a route rule that lists the NAT gateway as a target.
* <p>
This is an asynchronous operation. The NAT gateway's `lifecycleState` will change to
* TERMINATING temporarily until the NAT gateway is completely removed.
* 
     * @param DeleteNatGatewayRequest
     * @return DeleteNatGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteNatGateway.ts.html |here} to see how to use DeleteNatGateway API.
     */
  public async deleteNatGateway(
    deleteNatGatewayRequest: requests.DeleteNatGatewayRequest
  ): Promise<responses.DeleteNatGatewayResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteNatGateway.");
    const pathParams = {
      "{natGatewayId}": deleteNatGatewayRequest.natGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteNatGatewayRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways/{natGatewayId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteNatGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNatGatewayResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified network security group. The group must not contain any VNICs.
* <p>
To get a list of the VNICs in a network security group, use
* {@link #listNetworkSecurityGroupVnics(ListNetworkSecurityGroupVnicsRequest) listNetworkSecurityGroupVnics}.
* Each returned {@link NetworkSecurityGroupVnic} object
* contains both the OCID of the VNIC and the OCID of the VNIC's parent resource (for example,
* the Compute instance that the VNIC is attached to).
* 
     * @param DeleteNetworkSecurityGroupRequest
     * @return DeleteNetworkSecurityGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteNetworkSecurityGroup.ts.html |here} to see how to use DeleteNetworkSecurityGroup API.
     */
  public async deleteNetworkSecurityGroup(
    deleteNetworkSecurityGroupRequest: requests.DeleteNetworkSecurityGroupRequest
  ): Promise<responses.DeleteNetworkSecurityGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteNetworkSecurityGroup.");
    const pathParams = {
      "{networkSecurityGroupId}": deleteNetworkSecurityGroupRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteNetworkSecurityGroupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteNetworkSecurityGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNetworkSecurityGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Unassigns and deletes the specified private IP. You must
* specify the object's OCID. The private IP address is returned to
* the subnet's pool of available addresses.
* <p>
This operation cannot be used with primary private IPs, which are
* automatically unassigned and deleted when the VNIC is terminated.
* <p>
**Important:** If a secondary private IP is the
* [target of a route rule](https://docs.cloud.oracle.com/Content/Network/Tasks/managingroutetables.htm#privateip),
* unassigning it from the VNIC causes that route rule to blackhole and the traffic
* will be dropped.
* 
     * @param DeletePrivateIpRequest
     * @return DeletePrivateIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeletePrivateIp.ts.html |here} to see how to use DeletePrivateIp API.
     */
  public async deletePrivateIp(
    deletePrivateIpRequest: requests.DeletePrivateIpRequest
  ): Promise<responses.DeletePrivateIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deletePrivateIp.");
    const pathParams = {
      "{privateIpId}": deletePrivateIpRequest.privateIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePrivateIpRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateIps/{privateIpId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deletePrivateIpRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePrivateIpResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Unassigns and deletes the specified public IP (either ephemeral or reserved).
* You must specify the object's OCID. The public IP address is returned to the
* Oracle Cloud Infrastructure public IP pool.
* <p>
**Note:** You cannot update, unassign, or delete the public IP that Oracle automatically
* assigned to an entity for you (such as a load balancer or NAT gateway). The public IP is
* automatically deleted if the assigned entity is terminated.
* <p>
For an assigned reserved public IP, the initial unassignment portion of this operation
* is asynchronous. Poll the public IP's `lifecycleState` to determine
* if the operation succeeded.
* <p>
If you want to simply unassign a reserved public IP and return it to your pool
* of reserved public IPs, instead use
* {@link #updatePublicIp(UpdatePublicIpRequest) updatePublicIp}.
* 
     * @param DeletePublicIpRequest
     * @return DeletePublicIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeletePublicIp.ts.html |here} to see how to use DeletePublicIp API.
     */
  public async deletePublicIp(
    deletePublicIpRequest: requests.DeletePublicIpRequest
  ): Promise<responses.DeletePublicIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deletePublicIp.");
    const pathParams = {
      "{publicIpId}": deletePublicIpRequest.publicIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deletePublicIpRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/{publicIpId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deletePublicIpRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePublicIpResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified Public Ip Pool
   * It must not have any active address allocations
   * You must specify the object's OCID.
   *
   * @param DeletePublicIpPoolRequest
   * @return DeletePublicIpPoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeletePublicIpPool.ts.html |here} to see how to use DeletePublicIpPool API.
   */
  public async deletePublicIpPool(
    deletePublicIpPoolRequest: requests.DeletePublicIpPoolRequest
  ): Promise<responses.DeletePublicIpPoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deletePublicIpPool.");
    const pathParams = {
      "{publicIpPoolId}": deletePublicIpPoolRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deletePublicIpPoolRequest.opcRequestId,
      "if-match": deletePublicIpPoolRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deletePublicIpPoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePublicIpPoolResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the remote peering connection (RPC).
* <p>
This is an asynchronous operation; the RPC's `lifecycleState` changes to TERMINATING temporarily
* until the RPC is completely removed.
* 
     * @param DeleteRemotePeeringConnectionRequest
     * @return DeleteRemotePeeringConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteRemotePeeringConnection.ts.html |here} to see how to use DeleteRemotePeeringConnection API.
     */
  public async deleteRemotePeeringConnection(
    deleteRemotePeeringConnectionRequest: requests.DeleteRemotePeeringConnectionRequest
  ): Promise<responses.DeleteRemotePeeringConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteRemotePeeringConnection.");
    const pathParams = {
      "{remotePeeringConnectionId}": deleteRemotePeeringConnectionRequest.remotePeeringConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRemotePeeringConnectionRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections/{remotePeeringConnectionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteRemotePeeringConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRemotePeeringConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified route table, but only if it's not associated with a subnet. You can't delete a
* VCN's default route table.
* <p>
This is an asynchronous operation. The route table's `lifecycleState` will change to TERMINATING temporarily
* until the route table is completely removed.
* 
     * @param DeleteRouteTableRequest
     * @return DeleteRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteRouteTable.ts.html |here} to see how to use DeleteRouteTable API.
     */
  public async deleteRouteTable(
    deleteRouteTableRequest: requests.DeleteRouteTableRequest
  ): Promise<responses.DeleteRouteTableResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteRouteTable.");
    const pathParams = {
      "{rtId}": deleteRouteTableRequest.rtId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRouteTableRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables/{rtId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteRouteTableRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRouteTableResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified security list, but only if it's not associated with a subnet. You can't delete
* a VCN's default security list.
* <p>
This is an asynchronous operation. The security list's `lifecycleState` will change to TERMINATING temporarily
* until the security list is completely removed.
* 
     * @param DeleteSecurityListRequest
     * @return DeleteSecurityListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteSecurityList.ts.html |here} to see how to use DeleteSecurityList API.
     */
  public async deleteSecurityList(
    deleteSecurityListRequest: requests.DeleteSecurityListRequest
  ): Promise<responses.DeleteSecurityListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteSecurityList.");
    const pathParams = {
      "{securityListId}": deleteSecurityListRequest.securityListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSecurityListRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists/{securityListId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteSecurityListRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSecurityListResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified service gateway. There must not be a route table that lists the service
   * gateway as a target.
   *
   * @param DeleteServiceGatewayRequest
   * @return DeleteServiceGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteServiceGateway.ts.html |here} to see how to use DeleteServiceGateway API.
   */
  public async deleteServiceGateway(
    deleteServiceGatewayRequest: requests.DeleteServiceGatewayRequest
  ): Promise<responses.DeleteServiceGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteServiceGateway.");
    const pathParams = {
      "{serviceGatewayId}": deleteServiceGatewayRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteServiceGatewayRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteServiceGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteServiceGatewayResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified subnet, but only if there are no instances in the subnet. This is an asynchronous
   * operation. The subnet's `lifecycleState` will change to TERMINATING temporarily. If there are any
   * instances in the subnet, the state will instead change back to AVAILABLE.
   *
   * @param DeleteSubnetRequest
   * @return DeleteSubnetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteSubnet.ts.html |here} to see how to use DeleteSubnet API.
   */
  public async deleteSubnet(
    deleteSubnetRequest: requests.DeleteSubnetRequest
  ): Promise<responses.DeleteSubnetResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteSubnet.");
    const pathParams = {
      "{subnetId}": deleteSubnetRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSubnetRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets/{subnetId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteSubnetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSubnetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified VCN. The VCN must be empty and have no attached gateways. This is an asynchronous
   * operation. The VCN's `lifecycleState` will change to TERMINATING temporarily until the VCN is completely
   * removed.
   *
   * @param DeleteVcnRequest
   * @return DeleteVcnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVcn.ts.html |here} to see how to use DeleteVcn API.
   */
  public async deleteVcn(
    deleteVcnRequest: requests.DeleteVcnRequest
  ): Promise<responses.DeleteVcnResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteVcn.");
    const pathParams = {
      "{vcnId}": deleteVcnRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVcnRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteVcnRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVcnResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified virtual circuit.
   * <p>
   **Important:** If you're using FastConnect via a provider,
   * make sure to also terminate the connection with
   * the provider, or else the provider may continue to bill you.
   *
   * @param DeleteVirtualCircuitRequest
   * @return DeleteVirtualCircuitResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVirtualCircuit.ts.html |here} to see how to use DeleteVirtualCircuit API.
   */
  public async deleteVirtualCircuit(
    deleteVirtualCircuitRequest: requests.DeleteVirtualCircuitRequest
  ): Promise<responses.DeleteVirtualCircuitResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#deleteVirtualCircuit.");
    const pathParams = {
      "{virtualCircuitId}": deleteVirtualCircuitRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVirtualCircuitRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteVirtualCircuitRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVirtualCircuitResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified VLAN, but only if there are no VNICs in the VLAN.
   *
   * @param DeleteVlanRequest
   * @return DeleteVlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DeleteVlan.ts.html |here} to see how to use DeleteVlan API.
   */
  public async deleteVlan(
    deleteVlanRequest: requests.DeleteVlanRequest
  ): Promise<responses.DeleteVlanResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#deleteVlan.");
    const pathParams = {
      "{vlanId}": deleteVlanRequest.vlanId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVlanRequest.ifMatch,
      "opc-request-id": deleteVlanRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans/{vlanId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteVlanRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVlanResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the specified {@link Service} from the list of enabled
   * `Service` objects for the specified gateway. You do not need to remove any route
   * rules that specify this `Service` object's `cidrBlock` as the destination CIDR. However, consider
   * removing the rules if your intent is to permanently disable use of the `Service` through this
   * service gateway.
   * <p>
   **Note:** The `DetachServiceId` operation is an easy way to remove an individual `Service` from
   * the service gateway. Compare it with
   * {@link #updateServiceGateway(UpdateServiceGatewayRequest) updateServiceGateway}, which replaces
   * the entire existing list of enabled `Service` objects with the list that you provide in the
   * `Update` call. `UpdateServiceGateway` also lets you block all traffic through the service
   * gateway without having to remove each of the individual `Service` objects.
   *
   * @param DetachServiceIdRequest
   * @return DetachServiceIdResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/DetachServiceId.ts.html |here} to see how to use DetachServiceId API.
   */
  public async detachServiceId(
    detachServiceIdRequest: requests.DetachServiceIdRequest
  ): Promise<responses.DetachServiceIdResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#detachServiceId.");
    const pathParams = {
      "{serviceGatewayId}": detachServiceIdRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detachServiceIdRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}/actions/detachService",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detachServiceIdRequest.detachServiceDetails,
        "ServiceIdRequestDetails",
        models.ServiceIdRequestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      detachServiceIdRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DetachServiceIdResponse>{},
        body: await response.json(),
        bodyKey: "serviceGateway",
        bodyModel: "model.ServiceGateway",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Byoip Range object. You must specify the object's OCID.
   *
   * @param GetByoipRangeRequest
   * @return GetByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetByoipRange.ts.html |here} to see how to use GetByoipRange API.
   */
  public async getByoipRange(
    getByoipRangeRequest: requests.GetByoipRangeRequest
  ): Promise<responses.GetByoipRangeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getByoipRange.");
    const pathParams = {
      "{byoipRangeId}": getByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getByoipRangeRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getByoipRangeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetByoipRangeResponse>{},
        body: await response.json(),
        bodyKey: "byoipRange",
        bodyModel: "model.ByoipRange",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified CPE's information.
   * @param GetCpeRequest
   * @return GetCpeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCpe.ts.html |here} to see how to use GetCpe API.
   */
  public async getCpe(getCpeRequest: requests.GetCpeRequest): Promise<responses.GetCpeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getCpe.");
    const pathParams = {
      "{cpeId}": getCpeRequest.cpeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes/{cpeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getCpeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCpeResponse>{},
        body: await response.json(),
        bodyKey: "cpe",
        bodyModel: "model.Cpe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Renders a set of CPE configuration content that can help a network engineer configure the actual
* CPE device (for example, a hardware router) represented by the specified {@link Cpe}
* object.
* <p>
The rendered content is specific to the type of CPE device (for example, Cisco ASA). Therefore the
* {@link Cpe} must have the CPE's device type specified by the `cpeDeviceShapeId`
* attribute. The content optionally includes answers that the customer provides (see
* {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}),
* merged with a template of other information specific to the CPE device type.
* <p>
The operation returns configuration information for *all* of the
* {@link IPSecConnection} objects that use the specified CPE.
* Here are similar operations:
* <p>
  * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
*   returns CPE configuration content for all tunnels in a single IPSec connection.
*   * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
*   returns CPE configuration content for a specific tunnel within an IPSec connection.
* 
     * @param GetCpeDeviceConfigContentRequest
     * @return GetCpeDeviceConfigContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCpeDeviceConfigContent.ts.html |here} to see how to use GetCpeDeviceConfigContent API.
     */
  public async getCpeDeviceConfigContent(
    getCpeDeviceConfigContentRequest: requests.GetCpeDeviceConfigContentRequest
  ): Promise<responses.GetCpeDeviceConfigContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getCpeDeviceConfigContent.");
    const pathParams = {
      "{cpeId}": getCpeDeviceConfigContentRequest.cpeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCpeDeviceConfigContentRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes/{cpeId}/cpeConfigContent",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getCpeDeviceConfigContentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCpeDeviceConfigContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the detailed information about the specified CPE device type. This might include a set of questions
   * that are specific to the particular CPE device type. The customer must supply answers to those questions
   * (see {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}).
   * The service merges the answers with a template of other information for the CPE device type. The following
   * operations return the merged content:
   * <p>
   * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
   *   * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
   *   * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
   *
   * @param GetCpeDeviceShapeRequest
   * @return GetCpeDeviceShapeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCpeDeviceShape.ts.html |here} to see how to use GetCpeDeviceShape API.
   */
  public async getCpeDeviceShape(
    getCpeDeviceShapeRequest: requests.GetCpeDeviceShapeRequest
  ): Promise<responses.GetCpeDeviceShapeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getCpeDeviceShape.");
    const pathParams = {
      "{cpeDeviceShapeId}": getCpeDeviceShapeRequest.cpeDeviceShapeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCpeDeviceShapeRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpeDeviceShapes/{cpeDeviceShapeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getCpeDeviceShapeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCpeDeviceShapeResponse>{},
        body: await response.json(),
        bodyKey: "cpeDeviceShapeDetail",
        bodyModel: "model.CpeDeviceShapeDetail",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified cross-connect's information.
   * @param GetCrossConnectRequest
   * @return GetCrossConnectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCrossConnect.ts.html |here} to see how to use GetCrossConnect API.
   */
  public async getCrossConnect(
    getCrossConnectRequest: requests.GetCrossConnectRequest
  ): Promise<responses.GetCrossConnectResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnect.");
    const pathParams = {
      "{crossConnectId}": getCrossConnectRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getCrossConnectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCrossConnectResponse>{},
        body: await response.json(),
        bodyKey: "crossConnect",
        bodyModel: "model.CrossConnect",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified cross-connect group's information.
   * @param GetCrossConnectGroupRequest
   * @return GetCrossConnectGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCrossConnectGroup.ts.html |here} to see how to use GetCrossConnectGroup API.
   */
  public async getCrossConnectGroup(
    getCrossConnectGroupRequest: requests.GetCrossConnectGroupRequest
  ): Promise<responses.GetCrossConnectGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnectGroup.");
    const pathParams = {
      "{crossConnectGroupId}": getCrossConnectGroupRequest.crossConnectGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups/{crossConnectGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getCrossConnectGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCrossConnectGroupResponse>{},
        body: await response.json(),
        bodyKey: "crossConnectGroup",
        bodyModel: "model.CrossConnectGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the Letter of Authority for the specified cross-connect.
   * @param GetCrossConnectLetterOfAuthorityRequest
   * @return GetCrossConnectLetterOfAuthorityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCrossConnectLetterOfAuthority.ts.html |here} to see how to use GetCrossConnectLetterOfAuthority API.
   */
  public async getCrossConnectLetterOfAuthority(
    getCrossConnectLetterOfAuthorityRequest: requests.GetCrossConnectLetterOfAuthorityRequest
  ): Promise<responses.GetCrossConnectLetterOfAuthorityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnectLetterOfAuthority.");
    const pathParams = {
      "{crossConnectId}": getCrossConnectLetterOfAuthorityRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}/letterOfAuthority",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getCrossConnectLetterOfAuthorityRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCrossConnectLetterOfAuthorityResponse>{},
        body: await response.json(),
        bodyKey: "letterOfAuthority",
        bodyModel: "model.LetterOfAuthority",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the specified cross-connect.
   *
   * @param GetCrossConnectStatusRequest
   * @return GetCrossConnectStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetCrossConnectStatus.ts.html |here} to see how to use GetCrossConnectStatus API.
   */
  public async getCrossConnectStatus(
    getCrossConnectStatusRequest: requests.GetCrossConnectStatusRequest
  ): Promise<responses.GetCrossConnectStatusResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnectStatus.");
    const pathParams = {
      "{crossConnectId}": getCrossConnectStatusRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}/status",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getCrossConnectStatusRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCrossConnectStatusResponse>{},
        body: await response.json(),
        bodyKey: "crossConnectStatus",
        bodyModel: "model.CrossConnectStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified set of DHCP options.
   * @param GetDhcpOptionsRequest
   * @return GetDhcpOptionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDhcpOptions.ts.html |here} to see how to use GetDhcpOptions API.
   */
  public async getDhcpOptions(
    getDhcpOptionsRequest: requests.GetDhcpOptionsRequest
  ): Promise<responses.GetDhcpOptionsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getDhcpOptions.");
    const pathParams = {
      "{dhcpId}": getDhcpOptionsRequest.dhcpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps/{dhcpId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDhcpOptionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDhcpOptionsResponse>{},
        body: await response.json(),
        bodyKey: "dhcpOptions",
        bodyModel: "model.DhcpOptions",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified DRG's information.
   * @param GetDrgRequest
   * @return GetDrgResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDrg.ts.html |here} to see how to use GetDrg API.
   */
  public async getDrg(getDrgRequest: requests.GetDrgRequest): Promise<responses.GetDrgResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getDrg.");
    const pathParams = {
      "{drgId}": getDrgRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDrgRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrgResponse>{},
        body: await response.json(),
        bodyKey: "drg",
        bodyModel: "model.Drg",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the information for the specified `DrgAttachment`.
   * @param GetDrgAttachmentRequest
   * @return GetDrgAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDrgAttachment.ts.html |here} to see how to use GetDrgAttachment API.
   */
  public async getDrgAttachment(
    getDrgAttachmentRequest: requests.GetDrgAttachmentRequest
  ): Promise<responses.GetDrgAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getDrgAttachment.");
    const pathParams = {
      "{drgAttachmentId}": getDrgAttachmentRequest.drgAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgAttachments/{drgAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDrgAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrgAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "drgAttachment",
        bodyModel: "model.DrgAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the redundancy status for the specified DRG. For more information, see
   * [Redundancy Remedies](https://docs.cloud.oracle.com/Content/Network/Troubleshoot/drgredundancy.htm).
   *
   * @param GetDrgRedundancyStatusRequest
   * @return GetDrgRedundancyStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetDrgRedundancyStatus.ts.html |here} to see how to use GetDrgRedundancyStatus API.
   */
  public async getDrgRedundancyStatus(
    getDrgRedundancyStatusRequest: requests.GetDrgRedundancyStatusRequest
  ): Promise<responses.GetDrgRedundancyStatusResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getDrgRedundancyStatus.");
    const pathParams = {
      "{drgId}": getDrgRedundancyStatusRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDrgRedundancyStatusRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}/redundancyStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDrgRedundancyStatusRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDrgRedundancyStatusResponse>{},
        body: await response.json(),
        bodyKey: "drgRedundancyStatus",
        bodyModel: "model.DrgRedundancyStatus",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified provider service.
   * For more information, see [FastConnect Overview](https://docs.cloud.oracle.com/Content/Network/Concepts/fastconnect.htm).
   *
   * @param GetFastConnectProviderServiceRequest
   * @return GetFastConnectProviderServiceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetFastConnectProviderService.ts.html |here} to see how to use GetFastConnectProviderService API.
   */
  public async getFastConnectProviderService(
    getFastConnectProviderServiceRequest: requests.GetFastConnectProviderServiceRequest
  ): Promise<responses.GetFastConnectProviderServiceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getFastConnectProviderService.");
    const pathParams = {
      "{providerServiceId}": getFastConnectProviderServiceRequest.providerServiceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fastConnectProviderServices/{providerServiceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getFastConnectProviderServiceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFastConnectProviderServiceResponse>{},
        body: await response.json(),
        bodyKey: "fastConnectProviderService",
        bodyModel: "model.FastConnectProviderService",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified provider service key's information. Use this operation to validate a
   * provider service key. An invalid key returns a 404 error.
   *
   * @param GetFastConnectProviderServiceKeyRequest
   * @return GetFastConnectProviderServiceKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetFastConnectProviderServiceKey.ts.html |here} to see how to use GetFastConnectProviderServiceKey API.
   */
  public async getFastConnectProviderServiceKey(
    getFastConnectProviderServiceKeyRequest: requests.GetFastConnectProviderServiceKeyRequest
  ): Promise<responses.GetFastConnectProviderServiceKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getFastConnectProviderServiceKey.");
    const pathParams = {
      "{providerServiceId}": getFastConnectProviderServiceKeyRequest.providerServiceId,
      "{providerServiceKeyName}": getFastConnectProviderServiceKeyRequest.providerServiceKeyName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/fastConnectProviderServices/{providerServiceId}/providerServiceKeys/{providerServiceKeyName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getFastConnectProviderServiceKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFastConnectProviderServiceKeyResponse>{},
        body: await response.json(),
        bodyKey: "fastConnectProviderServiceKey",
        bodyModel: "model.FastConnectProviderServiceKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified IPSec connection's basic information, including the static routes for the
   * on-premises router. If you want the status of the connection (whether it's up or down), use
   * {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}.
   *
   * @param GetIPSecConnectionRequest
   * @return GetIPSecConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIPSecConnection.ts.html |here} to see how to use GetIPSecConnection API.
   */
  public async getIPSecConnection(
    getIPSecConnectionRequest: requests.GetIPSecConnectionRequest
  ): Promise<responses.GetIPSecConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnection.");
    const pathParams = {
      "{ipscId}": getIPSecConnectionRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getIPSecConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIPSecConnectionResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnection",
        bodyModel: "model.IPSecConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deprecated. To get tunnel information, instead use:
   * <p>
   * {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}
   * * {@link #getIPSecConnectionTunnelSharedSecret(GetIPSecConnectionTunnelSharedSecretRequest) getIPSecConnectionTunnelSharedSecret}
   *
   * @param GetIPSecConnectionDeviceConfigRequest
   * @return GetIPSecConnectionDeviceConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIPSecConnectionDeviceConfig.ts.html |here} to see how to use GetIPSecConnectionDeviceConfig API.
   */
  public async getIPSecConnectionDeviceConfig(
    getIPSecConnectionDeviceConfigRequest: requests.GetIPSecConnectionDeviceConfigRequest
  ): Promise<responses.GetIPSecConnectionDeviceConfigResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnectionDeviceConfig.");
    const pathParams = {
      "{ipscId}": getIPSecConnectionDeviceConfigRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/deviceConfig",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getIPSecConnectionDeviceConfigRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIPSecConnectionDeviceConfigResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionDeviceConfig",
        bodyModel: "model.IPSecConnectionDeviceConfig",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deprecated. To get the tunnel status, instead use
   * {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}.
   *
   * @param GetIPSecConnectionDeviceStatusRequest
   * @return GetIPSecConnectionDeviceStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIPSecConnectionDeviceStatus.ts.html |here} to see how to use GetIPSecConnectionDeviceStatus API.
   */
  public async getIPSecConnectionDeviceStatus(
    getIPSecConnectionDeviceStatusRequest: requests.GetIPSecConnectionDeviceStatusRequest
  ): Promise<responses.GetIPSecConnectionDeviceStatusResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnectionDeviceStatus.");
    const pathParams = {
      "{ipscId}": getIPSecConnectionDeviceStatusRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/deviceStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getIPSecConnectionDeviceStatusRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIPSecConnectionDeviceStatusResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionDeviceStatus",
        bodyModel: "model.IPSecConnectionDeviceStatus",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified tunnel's information. The resulting object does not include the tunnel's
   * shared secret (pre-shared key). To retrieve that, use
   * {@link #getIPSecConnectionTunnelSharedSecret(GetIPSecConnectionTunnelSharedSecretRequest) getIPSecConnectionTunnelSharedSecret}.
   *
   * @param GetIPSecConnectionTunnelRequest
   * @return GetIPSecConnectionTunnelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIPSecConnectionTunnel.ts.html |here} to see how to use GetIPSecConnectionTunnel API.
   */
  public async getIPSecConnectionTunnel(
    getIPSecConnectionTunnelRequest: requests.GetIPSecConnectionTunnelRequest
  ): Promise<responses.GetIPSecConnectionTunnelResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnectionTunnel.");
    const pathParams = {
      "{ipscId}": getIPSecConnectionTunnelRequest.ipscId,
      "{tunnelId}": getIPSecConnectionTunnelRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getIPSecConnectionTunnelRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIPSecConnectionTunnelResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionTunnel",
        bodyModel: "model.IPSecConnectionTunnel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified tunnel's shared secret (pre-shared key). To get other information
   * about the tunnel, use {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}.
   *
   * @param GetIPSecConnectionTunnelSharedSecretRequest
   * @return GetIPSecConnectionTunnelSharedSecretResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIPSecConnectionTunnelSharedSecret.ts.html |here} to see how to use GetIPSecConnectionTunnelSharedSecret API.
   */
  public async getIPSecConnectionTunnelSharedSecret(
    getIPSecConnectionTunnelSharedSecretRequest: requests.GetIPSecConnectionTunnelSharedSecretRequest
  ): Promise<responses.GetIPSecConnectionTunnelSharedSecretResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#getIPSecConnectionTunnelSharedSecret."
      );
    const pathParams = {
      "{ipscId}": getIPSecConnectionTunnelSharedSecretRequest.ipscId,
      "{tunnelId}": getIPSecConnectionTunnelSharedSecretRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/sharedSecret",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getIPSecConnectionTunnelSharedSecretRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIPSecConnectionTunnelSharedSecretResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionTunnelSharedSecret",
        bodyModel: "model.IPSecConnectionTunnelSharedSecret",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified internet gateway's information.
   * @param GetInternetGatewayRequest
   * @return GetInternetGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetInternetGateway.ts.html |here} to see how to use GetInternetGateway API.
   */
  public async getInternetGateway(
    getInternetGatewayRequest: requests.GetInternetGatewayRequest
  ): Promise<responses.GetInternetGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getInternetGateway.");
    const pathParams = {
      "{igId}": getInternetGatewayRequest.igId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways/{igId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getInternetGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetInternetGatewayResponse>{},
        body: await response.json(),
        bodyKey: "internetGateway",
        bodyModel: "model.InternetGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Renders a set of CPE configuration content for the specified IPSec connection (for all the
* tunnels in the connection). The content helps a network engineer configure the actual CPE
* device (for example, a hardware router) that the specified IPSec connection terminates on.
* <p>
The rendered content is specific to the type of CPE device (for example, Cisco ASA). Therefore the
* {@link Cpe} used by the specified {@link IPSecConnection}
* must have the CPE's device type specified by the `cpeDeviceShapeId` attribute. The content
* optionally includes answers that the customer provides (see
* {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}),
* merged with a template of other information specific to the CPE device type.
* <p>
The operation returns configuration information for all tunnels in the single specified
* {@link IPSecConnection} object. Here are other similar
* operations:
* <p>
  * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
*   returns CPE configuration content for a specific tunnel within an IPSec connection.
*   * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
*   returns CPE configuration content for *all* IPSec connections that use a specific CPE.
* 
     * @param GetIpsecCpeDeviceConfigContentRequest
     * @return GetIpsecCpeDeviceConfigContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIpsecCpeDeviceConfigContent.ts.html |here} to see how to use GetIpsecCpeDeviceConfigContent API.
     */
  public async getIpsecCpeDeviceConfigContent(
    getIpsecCpeDeviceConfigContentRequest: requests.GetIpsecCpeDeviceConfigContentRequest
  ): Promise<responses.GetIpsecCpeDeviceConfigContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getIpsecCpeDeviceConfigContent.");
    const pathParams = {
      "{ipscId}": getIpsecCpeDeviceConfigContentRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getIpsecCpeDeviceConfigContentRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/cpeConfigContent",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getIpsecCpeDeviceConfigContentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIpsecCpeDeviceConfigContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified IPv6. You must specify the object's OCID.
   * Alternatively, you can get the object by using
   * {@link #listIpv6s(ListIpv6sRequest) listIpv6s}
   * with the IPv6 address (for example, 2001:0db8:0123:1111:98fe:dcba:9876:4321) and subnet OCID.
   *
   * @param GetIpv6Request
   * @return GetIpv6Response
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetIpv6.ts.html |here} to see how to use GetIpv6 API.
   */
  public async getIpv6(
    getIpv6Request: requests.GetIpv6Request
  ): Promise<responses.GetIpv6Response> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getIpv6.");
    const pathParams = {
      "{ipv6Id}": getIpv6Request.ipv6Id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getIpv6Request.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipv6/{ipv6Id}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getIpv6Request.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIpv6Response>{},
        body: await response.json(),
        bodyKey: "ipv6",
        bodyModel: "model.Ipv6",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified local peering gateway's information.
   * @param GetLocalPeeringGatewayRequest
   * @return GetLocalPeeringGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetLocalPeeringGateway.ts.html |here} to see how to use GetLocalPeeringGateway API.
   */
  public async getLocalPeeringGateway(
    getLocalPeeringGatewayRequest: requests.GetLocalPeeringGatewayRequest
  ): Promise<responses.GetLocalPeeringGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getLocalPeeringGateway.");
    const pathParams = {
      "{localPeeringGatewayId}": getLocalPeeringGatewayRequest.localPeeringGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways/{localPeeringGatewayId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getLocalPeeringGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLocalPeeringGatewayResponse>{},
        body: await response.json(),
        bodyKey: "localPeeringGateway",
        bodyModel: "model.LocalPeeringGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified NAT gateway's information.
   * @param GetNatGatewayRequest
   * @return GetNatGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetNatGateway.ts.html |here} to see how to use GetNatGateway API.
   */
  public async getNatGateway(
    getNatGatewayRequest: requests.GetNatGatewayRequest
  ): Promise<responses.GetNatGatewayResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getNatGateway.");
    const pathParams = {
      "{natGatewayId}": getNatGatewayRequest.natGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways/{natGatewayId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getNatGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNatGatewayResponse>{},
        body: await response.json(),
        bodyKey: "natGateway",
        bodyModel: "model.NatGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets the specified network security group's information.
* <p>
To list the VNICs in an NSG, see
* {@link #listNetworkSecurityGroupVnics(ListNetworkSecurityGroupVnicsRequest) listNetworkSecurityGroupVnics}.
* <p>
To list the security rules in an NSG, see
* {@link #listNetworkSecurityGroupSecurityRules(ListNetworkSecurityGroupSecurityRulesRequest) listNetworkSecurityGroupSecurityRules}.
* 
     * @param GetNetworkSecurityGroupRequest
     * @return GetNetworkSecurityGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetNetworkSecurityGroup.ts.html |here} to see how to use GetNetworkSecurityGroup API.
     */
  public async getNetworkSecurityGroup(
    getNetworkSecurityGroupRequest: requests.GetNetworkSecurityGroupRequest
  ): Promise<responses.GetNetworkSecurityGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getNetworkSecurityGroup.");
    const pathParams = {
      "{networkSecurityGroupId}": getNetworkSecurityGroupRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getNetworkSecurityGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNetworkSecurityGroupResponse>{},
        body: await response.json(),
        bodyKey: "networkSecurityGroup",
        bodyModel: "model.NetworkSecurityGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified private IP. You must specify the object's OCID.
   * Alternatively, you can get the object by using
   * {@link #listPrivateIps(ListPrivateIpsRequest) listPrivateIps}
   * with the private IP address (for example, 10.0.3.3) and subnet OCID.
   *
   * @param GetPrivateIpRequest
   * @return GetPrivateIpResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetPrivateIp.ts.html |here} to see how to use GetPrivateIp API.
   */
  public async getPrivateIp(
    getPrivateIpRequest: requests.GetPrivateIpRequest
  ): Promise<responses.GetPrivateIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getPrivateIp.");
    const pathParams = {
      "{privateIpId}": getPrivateIpRequest.privateIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateIps/{privateIpId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getPrivateIpRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPrivateIpResponse>{},
        body: await response.json(),
        bodyKey: "privateIp",
        bodyModel: "model.PrivateIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets the specified public IP. You must specify the object's OCID.
* <p>
Alternatively, you can get the object by using {@link #getPublicIpByIpAddress(GetPublicIpByIpAddressRequest) getPublicIpByIpAddress}
* with the public IP address (for example, 203.0.113.2).
* <p>
Or you can use {@link #getPublicIpByPrivateIpId(GetPublicIpByPrivateIpIdRequest) getPublicIpByPrivateIpId}
* with the OCID of the private IP that the public IP is assigned to.
* <p>
**Note:** If you're fetching a reserved public IP that is in the process of being
* moved to a different private IP, the service returns the public IP object with
* `lifecycleState` = ASSIGNING and `assignedEntityId` = OCID of the target private IP.
* 
     * @param GetPublicIpRequest
     * @return GetPublicIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetPublicIp.ts.html |here} to see how to use GetPublicIp API.
     */
  public async getPublicIp(
    getPublicIpRequest: requests.GetPublicIpRequest
  ): Promise<responses.GetPublicIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getPublicIp.");
    const pathParams = {
      "{publicIpId}": getPublicIpRequest.publicIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/{publicIpId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getPublicIpRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublicIpResponse>{},
        body: await response.json(),
        bodyKey: "publicIp",
        bodyModel: "model.PublicIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the public IP based on the public IP address (for example, 203.0.113.2).
   * <p>
   **Note:** If you're fetching a reserved public IP that is in the process of being
   * moved to a different private IP, the service returns the public IP object with
   * `lifecycleState` = ASSIGNING and `assignedEntityId` = OCID of the target private IP.
   *
   * @param GetPublicIpByIpAddressRequest
   * @return GetPublicIpByIpAddressResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetPublicIpByIpAddress.ts.html |here} to see how to use GetPublicIpByIpAddress API.
   */
  public async getPublicIpByIpAddress(
    getPublicIpByIpAddressRequest: requests.GetPublicIpByIpAddressRequest
  ): Promise<responses.GetPublicIpByIpAddressResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getPublicIpByIpAddress.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/actions/getByIpAddress",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        getPublicIpByIpAddressRequest.getPublicIpByIpAddressDetails,
        "GetPublicIpByIpAddressDetails",
        models.GetPublicIpByIpAddressDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getPublicIpByIpAddressRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublicIpByIpAddressResponse>{},
        body: await response.json(),
        bodyKey: "publicIp",
        bodyModel: "model.PublicIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the public IP assigned to the specified private IP. You must specify the OCID
   * of the private IP. If no public IP is assigned, a 404 is returned.
   * <p>
   **Note:** If you're fetching a reserved public IP that is in the process of being
   * moved to a different private IP, and you provide the OCID of the original private
   * IP, this operation returns a 404. If you instead provide the OCID of the target
   * private IP, or if you instead call
   * {@link #getPublicIp(GetPublicIpRequest) getPublicIp} or
   * {@link #getPublicIpByIpAddress(GetPublicIpByIpAddressRequest) getPublicIpByIpAddress}, the
   * service returns the public IP object with `lifecycleState` = ASSIGNING and
   * `assignedEntityId` = OCID of the target private IP.
   *
   * @param GetPublicIpByPrivateIpIdRequest
   * @return GetPublicIpByPrivateIpIdResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetPublicIpByPrivateIpId.ts.html |here} to see how to use GetPublicIpByPrivateIpId API.
   */
  public async getPublicIpByPrivateIpId(
    getPublicIpByPrivateIpIdRequest: requests.GetPublicIpByPrivateIpIdRequest
  ): Promise<responses.GetPublicIpByPrivateIpIdResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getPublicIpByPrivateIpId.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/actions/getByPrivateIpId",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        getPublicIpByPrivateIpIdRequest.getPublicIpByPrivateIpIdDetails,
        "GetPublicIpByPrivateIpIdDetails",
        models.GetPublicIpByPrivateIpIdDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getPublicIpByPrivateIpIdRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublicIpByPrivateIpIdResponse>{},
        body: await response.json(),
        bodyKey: "publicIp",
        bodyModel: "model.PublicIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Public Ip Pool object. You must specify the object's OCID.
   *
   * @param GetPublicIpPoolRequest
   * @return GetPublicIpPoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetPublicIpPool.ts.html |here} to see how to use GetPublicIpPool API.
   */
  public async getPublicIpPool(
    getPublicIpPoolRequest: requests.GetPublicIpPoolRequest
  ): Promise<responses.GetPublicIpPoolResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getPublicIpPool.");
    const pathParams = {
      "{publicIpPoolId}": getPublicIpPoolRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPublicIpPoolRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getPublicIpPoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPublicIpPoolResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPool",
        bodyModel: "model.PublicIpPool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the specified remote peering connection's information.
   *
   * @param GetRemotePeeringConnectionRequest
   * @return GetRemotePeeringConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetRemotePeeringConnection.ts.html |here} to see how to use GetRemotePeeringConnection API.
   */
  public async getRemotePeeringConnection(
    getRemotePeeringConnectionRequest: requests.GetRemotePeeringConnectionRequest
  ): Promise<responses.GetRemotePeeringConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getRemotePeeringConnection.");
    const pathParams = {
      "{remotePeeringConnectionId}": getRemotePeeringConnectionRequest.remotePeeringConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections/{remotePeeringConnectionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRemotePeeringConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRemotePeeringConnectionResponse>{},
        body: await response.json(),
        bodyKey: "remotePeeringConnection",
        bodyModel: "model.RemotePeeringConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified route table's information.
   * @param GetRouteTableRequest
   * @return GetRouteTableResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetRouteTable.ts.html |here} to see how to use GetRouteTable API.
   */
  public async getRouteTable(
    getRouteTableRequest: requests.GetRouteTableRequest
  ): Promise<responses.GetRouteTableResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getRouteTable.");
    const pathParams = {
      "{rtId}": getRouteTableRequest.rtId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables/{rtId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRouteTableRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRouteTableResponse>{},
        body: await response.json(),
        bodyKey: "routeTable",
        bodyModel: "model.RouteTable",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified security list's information.
   * @param GetSecurityListRequest
   * @return GetSecurityListResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetSecurityList.ts.html |here} to see how to use GetSecurityList API.
   */
  public async getSecurityList(
    getSecurityListRequest: requests.GetSecurityListRequest
  ): Promise<responses.GetSecurityListResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getSecurityList.");
    const pathParams = {
      "{securityListId}": getSecurityListRequest.securityListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists/{securityListId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getSecurityListRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityListResponse>{},
        body: await response.json(),
        bodyKey: "securityList",
        bodyModel: "model.SecurityList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified {@link Service} object.
   *
   * @param GetServiceRequest
   * @return GetServiceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetService.ts.html |here} to see how to use GetService API.
   */
  public async getService(
    getServiceRequest: requests.GetServiceRequest
  ): Promise<responses.GetServiceResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getService.");
    const pathParams = {
      "{serviceId}": getServiceRequest.serviceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/services/{serviceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getServiceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetServiceResponse>{},
        body: await response.json(),
        bodyKey: "service",
        bodyModel: "model.Service",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified service gateway's information.
   * @param GetServiceGatewayRequest
   * @return GetServiceGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetServiceGateway.ts.html |here} to see how to use GetServiceGateway API.
   */
  public async getServiceGateway(
    getServiceGatewayRequest: requests.GetServiceGatewayRequest
  ): Promise<responses.GetServiceGatewayResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getServiceGateway.");
    const pathParams = {
      "{serviceGatewayId}": getServiceGatewayRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getServiceGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetServiceGatewayResponse>{},
        body: await response.json(),
        bodyKey: "serviceGateway",
        bodyModel: "model.ServiceGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified subnet's information.
   * @param GetSubnetRequest
   * @return GetSubnetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetSubnet.ts.html |here} to see how to use GetSubnet API.
   */
  public async getSubnet(
    getSubnetRequest: requests.GetSubnetRequest
  ): Promise<responses.GetSubnetResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getSubnet.");
    const pathParams = {
      "{subnetId}": getSubnetRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets/{subnetId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getSubnetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSubnetResponse>{},
        body: await response.json(),
        bodyKey: "subnet",
        bodyModel: "model.Subnet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the set of CPE configuration answers for the tunnel, which the customer provided in
   * {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}.
   * To get the full set of content for the tunnel (any answers merged with the template of other
   * information specific to the CPE device type), use
   * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}.
   *
   * @param GetTunnelCpeDeviceConfigRequest
   * @return GetTunnelCpeDeviceConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetTunnelCpeDeviceConfig.ts.html |here} to see how to use GetTunnelCpeDeviceConfig API.
   */
  public async getTunnelCpeDeviceConfig(
    getTunnelCpeDeviceConfigRequest: requests.GetTunnelCpeDeviceConfigRequest
  ): Promise<responses.GetTunnelCpeDeviceConfigResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getTunnelCpeDeviceConfig.");
    const pathParams = {
      "{ipscId}": getTunnelCpeDeviceConfigRequest.ipscId,
      "{tunnelId}": getTunnelCpeDeviceConfigRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTunnelCpeDeviceConfigRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/tunnelDeviceConfig",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTunnelCpeDeviceConfigRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTunnelCpeDeviceConfigResponse>{},
        body: await response.json(),
        bodyKey: "tunnelCpeDeviceConfig",
        bodyModel: "model.TunnelCpeDeviceConfig",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Renders a set of CPE configuration content for the specified IPSec tunnel. The content helps a
* network engineer configure the actual CPE device (for example, a hardware router) that the specified
* IPSec tunnel terminates on.
* <p>
The rendered content is specific to the type of CPE device (for example, Cisco ASA). Therefore the
* {@link Cpe} used by the specified {@link IPSecConnection}
* must have the CPE's device type specified by the `cpeDeviceShapeId` attribute. The content
* optionally includes answers that the customer provides (see
* {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}),
* merged with a template of other information specific to the CPE device type.
* <p>
The operation returns configuration information for only the specified IPSec tunnel.
* Here are other similar operations:
* <p>
  * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
*   returns CPE configuration content for all tunnels in a single IPSec connection.
*   * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
*   returns CPE configuration content for *all* IPSec connections that use a specific CPE.
* 
     * @param GetTunnelCpeDeviceConfigContentRequest
     * @return GetTunnelCpeDeviceConfigContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetTunnelCpeDeviceConfigContent.ts.html |here} to see how to use GetTunnelCpeDeviceConfigContent API.
     */
  public async getTunnelCpeDeviceConfigContent(
    getTunnelCpeDeviceConfigContentRequest: requests.GetTunnelCpeDeviceConfigContentRequest
  ): Promise<responses.GetTunnelCpeDeviceConfigContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getTunnelCpeDeviceConfigContent.");
    const pathParams = {
      "{ipscId}": getTunnelCpeDeviceConfigContentRequest.ipscId,
      "{tunnelId}": getTunnelCpeDeviceConfigContentRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTunnelCpeDeviceConfigContentRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/tunnelDeviceConfig/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTunnelCpeDeviceConfigContentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTunnelCpeDeviceConfigContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified VCN's information.
   * @param GetVcnRequest
   * @return GetVcnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVcn.ts.html |here} to see how to use GetVcn API.
   */
  public async getVcn(getVcnRequest: requests.GetVcnRequest): Promise<responses.GetVcnResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getVcn.");
    const pathParams = {
      "{vcnId}": getVcnRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVcnRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVcnResponse>{},
        body: await response.json(),
        bodyKey: "vcn",
        bodyModel: "model.Vcn",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the associated DNS resolver information with a vcn
   * @param GetVcnDnsResolverAssociationRequest
   * @return GetVcnDnsResolverAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVcnDnsResolverAssociation.ts.html |here} to see how to use GetVcnDnsResolverAssociation API.
   */
  public async getVcnDnsResolverAssociation(
    getVcnDnsResolverAssociationRequest: requests.GetVcnDnsResolverAssociationRequest
  ): Promise<responses.GetVcnDnsResolverAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#getVcnDnsResolverAssociation.");
    const pathParams = {
      "{vcnId}": getVcnDnsResolverAssociationRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVcnDnsResolverAssociationRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/dnsResolverAssociation",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVcnDnsResolverAssociationRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVcnDnsResolverAssociationResponse>{},
        body: await response.json(),
        bodyKey: "vcnDnsResolverAssociation",
        bodyModel: "model.VcnDnsResolverAssociation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified virtual circuit's information.
   * @param GetVirtualCircuitRequest
   * @return GetVirtualCircuitResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVirtualCircuit.ts.html |here} to see how to use GetVirtualCircuit API.
   */
  public async getVirtualCircuit(
    getVirtualCircuitRequest: requests.GetVirtualCircuitRequest
  ): Promise<responses.GetVirtualCircuitResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getVirtualCircuit.");
    const pathParams = {
      "{virtualCircuitId}": getVirtualCircuitRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVirtualCircuitRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVirtualCircuitResponse>{},
        body: await response.json(),
        bodyKey: "virtualCircuit",
        bodyModel: "model.VirtualCircuit",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified VLAN's information.
   * @param GetVlanRequest
   * @return GetVlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVlan.ts.html |here} to see how to use GetVlan API.
   */
  public async getVlan(
    getVlanRequest: requests.GetVlanRequest
  ): Promise<responses.GetVlanResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getVlan.");
    const pathParams = {
      "{vlanId}": getVlanRequest.vlanId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVlanRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans/{vlanId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVlanRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVlanResponse>{},
        body: await response.json(),
        bodyKey: "vlan",
        bodyModel: "model.Vlan",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the information for the specified virtual network interface card (VNIC).
   * You can get the VNIC OCID from the
   * {@link #listVnicAttachments(ListVnicAttachmentsRequest) listVnicAttachments}
   * operation.
   *
   * @param GetVnicRequest
   * @return GetVnicResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/GetVnic.ts.html |here} to see how to use GetVnic API.
   */
  public async getVnic(
    getVnicRequest: requests.GetVnicRequest
  ): Promise<responses.GetVnicResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#getVnic.");
    const pathParams = {
      "{vnicId}": getVnicRequest.vnicId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnics/{vnicId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getVnicRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVnicResponse>{},
        body: await response.json(),
        bodyKey: "vnic",
        bodyModel: "model.Vnic",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the regions that support remote VCN peering (which is peering across regions).
   * For more information, see [VCN Peering](https://docs.cloud.oracle.com/Content/Network/Tasks/VCNpeering.htm).
   *
   * @param ListAllowedPeerRegionsForRemotePeeringRequest
   * @return ListAllowedPeerRegionsForRemotePeeringResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListAllowedPeerRegionsForRemotePeering.ts.html |here} to see how to use ListAllowedPeerRegionsForRemotePeering API.
   */
  public async listAllowedPeerRegionsForRemotePeering(
    listAllowedPeerRegionsForRemotePeeringRequest: requests.ListAllowedPeerRegionsForRemotePeeringRequest
  ): Promise<responses.ListAllowedPeerRegionsForRemotePeeringResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#listAllowedPeerRegionsForRemotePeering."
      );
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/allowedPeerRegionsForRemotePeering",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listAllowedPeerRegionsForRemotePeeringRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAllowedPeerRegionsForRemotePeeringResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "PeerRegionForRemotePeering[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the ByoipAllocatedRange objects for the ByoipRange.
   * Each ByoipAllocatedRange object has a CIDR block part of the ByoipRange and the PublicIpPool it is assigned to.
   *
   * @param ListByoipAllocatedRangesRequest
   * @return ListByoipAllocatedRangesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListByoipAllocatedRanges.ts.html |here} to see how to use ListByoipAllocatedRanges API.
   */
  public async listByoipAllocatedRanges(
    listByoipAllocatedRangesRequest: requests.ListByoipAllocatedRangesRequest
  ): Promise<responses.ListByoipAllocatedRangesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listByoipAllocatedRanges.");
    const pathParams = {
      "{byoipRangeId}": listByoipAllocatedRangesRequest.byoipRangeId
    };

    const queryParams = {
      "limit": listByoipAllocatedRangesRequest.limit,
      "page": listByoipAllocatedRangesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listByoipAllocatedRangesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}/byoipAllocatedRanges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listByoipAllocatedRangesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListByoipAllocatedRangesResponse>{},
        body: await response.json(),
        bodyKey: "byoipAllocatedRangeCollection",
        bodyModel: "model.ByoipAllocatedRangeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the ByoipRange objects in the specified compartment.
   * You can filter the list by using query parameters.
   *
   * @param ListByoipRangesRequest
   * @return ListByoipRangesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListByoipRanges.ts.html |here} to see how to use ListByoipRanges API.
   */
  public async listByoipRanges(
    listByoipRangesRequest: requests.ListByoipRangesRequest
  ): Promise<responses.ListByoipRangesResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listByoipRanges.");
    const pathParams = {};

    const queryParams = {
      "limit": listByoipRangesRequest.limit,
      "page": listByoipRangesRequest.page,
      "displayName": listByoipRangesRequest.displayName,
      "lifecycleState": listByoipRangesRequest.lifecycleState,
      "sortBy": listByoipRangesRequest.sortBy,
      "sortOrder": listByoipRangesRequest.sortOrder,
      "compartmentId": listByoipRangesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listByoipRangesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listByoipRangesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListByoipRangesResponse>{},
        body: await response.json(),
        bodyKey: "byoipRangeCollection",
        bodyModel: "model.ByoipRangeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Lists the CPE device types that the Networking service provides CPE configuration
* content for (example: Cisco ASA). The content helps a network engineer configure
* the actual CPE device represented by a {@link Cpe} object.
* <p>
If you want to generate CPE configuration content for one of the returned CPE device types,
* ensure that the {@link Cpe} object's `cpeDeviceShapeId` attribute is set
* to the CPE device type's OCID (returned by this operation).
* <p>
For information about generating CPE configuration content, see these operations:
* <p>
  * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
*   * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
*   * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
* 
     * @param ListCpeDeviceShapesRequest
     * @return ListCpeDeviceShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCpeDeviceShapes.ts.html |here} to see how to use ListCpeDeviceShapes API.
     */
  public async listCpeDeviceShapes(
    listCpeDeviceShapesRequest: requests.ListCpeDeviceShapesRequest
  ): Promise<responses.ListCpeDeviceShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listCpeDeviceShapes.");
    const pathParams = {};

    const queryParams = {
      "limit": listCpeDeviceShapesRequest.limit,
      "page": listCpeDeviceShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCpeDeviceShapesRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpeDeviceShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listCpeDeviceShapesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCpeDeviceShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "CpeDeviceShapeSummary[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.CpeDeviceShapeSummary objects
   * contained in responses from the listCpeDeviceShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCpeDeviceShapes(
    request: requests.ListCpeDeviceShapesRequest
  ): AsyncIterableIterator<models.CpeDeviceShapeSummary> {
    return paginateRecords(request, req => this.listCpeDeviceShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCpeDeviceShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCpeDeviceShapesResponses(
    request: requests.ListCpeDeviceShapesRequest
  ): AsyncIterableIterator<responses.ListCpeDeviceShapesResponse> {
    return paginateResponses(request, req => this.listCpeDeviceShapes(req));
  }

  /**
   * Lists the customer-premises equipment objects (CPEs) in the specified compartment.
   *
   * @param ListCpesRequest
   * @return ListCpesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCpes.ts.html |here} to see how to use ListCpes API.
   */
  public async listCpes(
    listCpesRequest: requests.ListCpesRequest
  ): Promise<responses.ListCpesResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listCpes.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCpesRequest.compartmentId,
      "limit": listCpesRequest.limit,
      "page": listCpesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listCpesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCpesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Cpe[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Cpe objects
   * contained in responses from the listCpes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCpes(request: requests.ListCpesRequest): AsyncIterableIterator<models.Cpe> {
    return paginateRecords(request, req => this.listCpes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCpes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCpesResponses(
    request: requests.ListCpesRequest
  ): AsyncIterableIterator<responses.ListCpesResponse> {
    return paginateResponses(request, req => this.listCpes(req));
  }

  /**
   * Lists the cross-connect groups in the specified compartment.
   *
   * @param ListCrossConnectGroupsRequest
   * @return ListCrossConnectGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCrossConnectGroups.ts.html |here} to see how to use ListCrossConnectGroups API.
   */
  public async listCrossConnectGroups(
    listCrossConnectGroupsRequest: requests.ListCrossConnectGroupsRequest
  ): Promise<responses.ListCrossConnectGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listCrossConnectGroups.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCrossConnectGroupsRequest.compartmentId,
      "limit": listCrossConnectGroupsRequest.limit,
      "page": listCrossConnectGroupsRequest.page,
      "displayName": listCrossConnectGroupsRequest.displayName,
      "sortBy": listCrossConnectGroupsRequest.sortBy,
      "sortOrder": listCrossConnectGroupsRequest.sortOrder,
      "lifecycleState": listCrossConnectGroupsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listCrossConnectGroupsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCrossConnectGroupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "CrossConnectGroup[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.CrossConnectGroup objects
   * contained in responses from the listCrossConnectGroups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnectGroups(
    request: requests.ListCrossConnectGroupsRequest
  ): AsyncIterableIterator<models.CrossConnectGroup> {
    return paginateRecords(request, req => this.listCrossConnectGroups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCrossConnectGroups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnectGroupsResponses(
    request: requests.ListCrossConnectGroupsRequest
  ): AsyncIterableIterator<responses.ListCrossConnectGroupsResponse> {
    return paginateResponses(request, req => this.listCrossConnectGroups(req));
  }

  /**
   * Lists the available FastConnect locations for cross-connect installation. You need
   * this information so you can specify your desired location when you create a cross-connect.
   *
   * @param ListCrossConnectLocationsRequest
   * @return ListCrossConnectLocationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCrossConnectLocations.ts.html |here} to see how to use ListCrossConnectLocations API.
   */
  public async listCrossConnectLocations(
    listCrossConnectLocationsRequest: requests.ListCrossConnectLocationsRequest
  ): Promise<responses.ListCrossConnectLocationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listCrossConnectLocations.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCrossConnectLocationsRequest.compartmentId,
      "limit": listCrossConnectLocationsRequest.limit,
      "page": listCrossConnectLocationsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectLocations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listCrossConnectLocationsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCrossConnectLocationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "CrossConnectLocation[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.CrossConnectLocation objects
   * contained in responses from the listCrossConnectLocations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnectLocations(
    request: requests.ListCrossConnectLocationsRequest
  ): AsyncIterableIterator<models.CrossConnectLocation> {
    return paginateRecords(request, req => this.listCrossConnectLocations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCrossConnectLocations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnectLocationsResponses(
    request: requests.ListCrossConnectLocationsRequest
  ): AsyncIterableIterator<responses.ListCrossConnectLocationsResponse> {
    return paginateResponses(request, req => this.listCrossConnectLocations(req));
  }

  /**
   * Lists the cross-connects in the specified compartment. You can filter the list
   * by specifying the OCID of a cross-connect group.
   *
   * @param ListCrossConnectsRequest
   * @return ListCrossConnectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCrossConnects.ts.html |here} to see how to use ListCrossConnects API.
   */
  public async listCrossConnects(
    listCrossConnectsRequest: requests.ListCrossConnectsRequest
  ): Promise<responses.ListCrossConnectsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listCrossConnects.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCrossConnectsRequest.compartmentId,
      "crossConnectGroupId": listCrossConnectsRequest.crossConnectGroupId,
      "limit": listCrossConnectsRequest.limit,
      "page": listCrossConnectsRequest.page,
      "displayName": listCrossConnectsRequest.displayName,
      "sortBy": listCrossConnectsRequest.sortBy,
      "sortOrder": listCrossConnectsRequest.sortOrder,
      "lifecycleState": listCrossConnectsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listCrossConnectsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCrossConnectsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "CrossConnect[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.CrossConnect objects
   * contained in responses from the listCrossConnects operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnects(
    request: requests.ListCrossConnectsRequest
  ): AsyncIterableIterator<models.CrossConnect> {
    return paginateRecords(request, req => this.listCrossConnects(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCrossConnects operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossConnectsResponses(
    request: requests.ListCrossConnectsRequest
  ): AsyncIterableIterator<responses.ListCrossConnectsResponse> {
    return paginateResponses(request, req => this.listCrossConnects(req));
  }

  /**
   * Lists the available port speeds for cross-connects. You need this information
   * so you can specify your desired port speed (that is, shape) when you create a
   * cross-connect.
   *
   * @param ListCrossconnectPortSpeedShapesRequest
   * @return ListCrossconnectPortSpeedShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListCrossconnectPortSpeedShapes.ts.html |here} to see how to use ListCrossconnectPortSpeedShapes API.
   */
  public async listCrossconnectPortSpeedShapes(
    listCrossconnectPortSpeedShapesRequest: requests.ListCrossconnectPortSpeedShapesRequest
  ): Promise<responses.ListCrossconnectPortSpeedShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listCrossconnectPortSpeedShapes.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listCrossconnectPortSpeedShapesRequest.compartmentId,
      "limit": listCrossconnectPortSpeedShapesRequest.limit,
      "page": listCrossconnectPortSpeedShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectPortSpeedShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listCrossconnectPortSpeedShapesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCrossconnectPortSpeedShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "CrossConnectPortSpeedShape[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.CrossConnectPortSpeedShape objects
   * contained in responses from the listCrossconnectPortSpeedShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossconnectPortSpeedShapes(
    request: requests.ListCrossconnectPortSpeedShapesRequest
  ): AsyncIterableIterator<models.CrossConnectPortSpeedShape> {
    return paginateRecords(request, req => this.listCrossconnectPortSpeedShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listCrossconnectPortSpeedShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllCrossconnectPortSpeedShapesResponses(
    request: requests.ListCrossconnectPortSpeedShapesRequest
  ): AsyncIterableIterator<responses.ListCrossconnectPortSpeedShapesResponse> {
    return paginateResponses(request, req => this.listCrossconnectPortSpeedShapes(req));
  }

  /**
   * Lists the sets of DHCP options in the specified VCN and specified compartment.
   * If the VCN ID is not provided, then the list includes the sets of DHCP options from all VCNs in the specified compartment.
   * The response includes the default set of options that automatically comes with each VCN,
   * plus any other sets you've created.
   *
   * @param ListDhcpOptionsRequest
   * @return ListDhcpOptionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDhcpOptions.ts.html |here} to see how to use ListDhcpOptions API.
   */
  public async listDhcpOptions(
    listDhcpOptionsRequest: requests.ListDhcpOptionsRequest
  ): Promise<responses.ListDhcpOptionsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listDhcpOptions.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDhcpOptionsRequest.compartmentId,
      "vcnId": listDhcpOptionsRequest.vcnId,
      "limit": listDhcpOptionsRequest.limit,
      "page": listDhcpOptionsRequest.page,
      "displayName": listDhcpOptionsRequest.displayName,
      "sortBy": listDhcpOptionsRequest.sortBy,
      "sortOrder": listDhcpOptionsRequest.sortOrder,
      "lifecycleState": listDhcpOptionsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDhcpOptionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDhcpOptionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "DhcpOptions[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.DhcpOptions objects
   * contained in responses from the listDhcpOptions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDhcpOptions(
    request: requests.ListDhcpOptionsRequest
  ): AsyncIterableIterator<models.DhcpOptions> {
    return paginateRecords(request, req => this.listDhcpOptions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDhcpOptions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDhcpOptionsResponses(
    request: requests.ListDhcpOptionsRequest
  ): AsyncIterableIterator<responses.ListDhcpOptionsResponse> {
    return paginateResponses(request, req => this.listDhcpOptions(req));
  }

  /**
   * Lists the `DrgAttachment` objects for the specified compartment. You can filter the
   * results by VCN or DRG.
   *
   * @param ListDrgAttachmentsRequest
   * @return ListDrgAttachmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDrgAttachments.ts.html |here} to see how to use ListDrgAttachments API.
   */
  public async listDrgAttachments(
    listDrgAttachmentsRequest: requests.ListDrgAttachmentsRequest
  ): Promise<responses.ListDrgAttachmentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listDrgAttachments.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDrgAttachmentsRequest.compartmentId,
      "vcnId": listDrgAttachmentsRequest.vcnId,
      "drgId": listDrgAttachmentsRequest.drgId,
      "limit": listDrgAttachmentsRequest.limit,
      "page": listDrgAttachmentsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgAttachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDrgAttachmentsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrgAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "DrgAttachment[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.DrgAttachment objects
   * contained in responses from the listDrgAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgAttachments(
    request: requests.ListDrgAttachmentsRequest
  ): AsyncIterableIterator<models.DrgAttachment> {
    return paginateRecords(request, req => this.listDrgAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDrgAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgAttachmentsResponses(
    request: requests.ListDrgAttachmentsRequest
  ): AsyncIterableIterator<responses.ListDrgAttachmentsResponse> {
    return paginateResponses(request, req => this.listDrgAttachments(req));
  }

  /**
   * Lists the DRGs in the specified compartment.
   *
   * @param ListDrgsRequest
   * @return ListDrgsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListDrgs.ts.html |here} to see how to use ListDrgs API.
   */
  public async listDrgs(
    listDrgsRequest: requests.ListDrgsRequest
  ): Promise<responses.ListDrgsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listDrgs.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listDrgsRequest.compartmentId,
      "limit": listDrgsRequest.limit,
      "page": listDrgsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDrgsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDrgsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Drg[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Drg objects
   * contained in responses from the listDrgs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgs(request: requests.ListDrgsRequest): AsyncIterableIterator<models.Drg> {
    return paginateRecords(request, req => this.listDrgs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listDrgs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllDrgsResponses(
    request: requests.ListDrgsRequest
  ): AsyncIterableIterator<responses.ListDrgsResponse> {
    return paginateResponses(request, req => this.listDrgs(req));
  }

  /**
     * Lists the service offerings from supported providers. You need this
* information so you can specify your desired provider and service
* offering when you create a virtual circuit.
* <p>
For the compartment ID, provide the OCID of your tenancy (the root compartment).
* <p>
For more information, see [FastConnect Overview](https://docs.cloud.oracle.com/Content/Network/Concepts/fastconnect.htm).
* 
     * @param ListFastConnectProviderServicesRequest
     * @return ListFastConnectProviderServicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListFastConnectProviderServices.ts.html |here} to see how to use ListFastConnectProviderServices API.
     */
  public async listFastConnectProviderServices(
    listFastConnectProviderServicesRequest: requests.ListFastConnectProviderServicesRequest
  ): Promise<responses.ListFastConnectProviderServicesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listFastConnectProviderServices.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFastConnectProviderServicesRequest.compartmentId,
      "limit": listFastConnectProviderServicesRequest.limit,
      "page": listFastConnectProviderServicesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fastConnectProviderServices",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listFastConnectProviderServicesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFastConnectProviderServicesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "FastConnectProviderService[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.FastConnectProviderService objects
   * contained in responses from the listFastConnectProviderServices operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFastConnectProviderServices(
    request: requests.ListFastConnectProviderServicesRequest
  ): AsyncIterableIterator<models.FastConnectProviderService> {
    return paginateRecords(request, req => this.listFastConnectProviderServices(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listFastConnectProviderServices operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFastConnectProviderServicesResponses(
    request: requests.ListFastConnectProviderServicesRequest
  ): AsyncIterableIterator<responses.ListFastConnectProviderServicesResponse> {
    return paginateResponses(request, req => this.listFastConnectProviderServices(req));
  }

  /**
     * Gets the list of available virtual circuit bandwidth levels for a provider.
* You need this information so you can specify your desired bandwidth level (shape) when you create a virtual circuit.
* <p>
For more information about virtual circuits, see [FastConnect Overview](https://docs.cloud.oracle.com/Content/Network/Concepts/fastconnect.htm).
* 
     * @param ListFastConnectProviderVirtualCircuitBandwidthShapesRequest
     * @return ListFastConnectProviderVirtualCircuitBandwidthShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListFastConnectProviderVirtualCircuitBandwidthShapes.ts.html |here} to see how to use ListFastConnectProviderVirtualCircuitBandwidthShapes API.
     */
  public async listFastConnectProviderVirtualCircuitBandwidthShapes(
    listFastConnectProviderVirtualCircuitBandwidthShapesRequest: requests.ListFastConnectProviderVirtualCircuitBandwidthShapesRequest
  ): Promise<responses.ListFastConnectProviderVirtualCircuitBandwidthShapesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#listFastConnectProviderVirtualCircuitBandwidthShapes."
      );
    const pathParams = {
      "{providerServiceId}":
        listFastConnectProviderVirtualCircuitBandwidthShapesRequest.providerServiceId
    };

    const queryParams = {
      "limit": listFastConnectProviderVirtualCircuitBandwidthShapesRequest.limit,
      "page": listFastConnectProviderVirtualCircuitBandwidthShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fastConnectProviderServices/{providerServiceId}/virtualCircuitBandwidthShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listFastConnectProviderVirtualCircuitBandwidthShapesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFastConnectProviderVirtualCircuitBandwidthShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "VirtualCircuitBandwidthShape[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.VirtualCircuitBandwidthShape objects
   * contained in responses from the listFastConnectProviderVirtualCircuitBandwidthShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFastConnectProviderVirtualCircuitBandwidthShapes(
    request: requests.ListFastConnectProviderVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<models.VirtualCircuitBandwidthShape> {
    return paginateRecords(request, req =>
      this.listFastConnectProviderVirtualCircuitBandwidthShapes(req)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listFastConnectProviderVirtualCircuitBandwidthShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFastConnectProviderVirtualCircuitBandwidthShapesResponses(
    request: requests.ListFastConnectProviderVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<responses.ListFastConnectProviderVirtualCircuitBandwidthShapesResponse> {
    return paginateResponses(request, req =>
      this.listFastConnectProviderVirtualCircuitBandwidthShapes(req)
    );
  }

  /**
   * Lists the tunnel information for the specified IPSec connection.
   *
   * @param ListIPSecConnectionTunnelsRequest
   * @return ListIPSecConnectionTunnelsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListIPSecConnectionTunnels.ts.html |here} to see how to use ListIPSecConnectionTunnels API.
   */
  public async listIPSecConnectionTunnels(
    listIPSecConnectionTunnelsRequest: requests.ListIPSecConnectionTunnelsRequest
  ): Promise<responses.ListIPSecConnectionTunnelsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listIPSecConnectionTunnels.");
    const pathParams = {
      "{ipscId}": listIPSecConnectionTunnelsRequest.ipscId
    };

    const queryParams = {
      "limit": listIPSecConnectionTunnelsRequest.limit,
      "page": listIPSecConnectionTunnelsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listIPSecConnectionTunnelsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListIPSecConnectionTunnelsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "IPSecConnectionTunnel[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.IPSecConnectionTunnel objects
   * contained in responses from the listIPSecConnectionTunnels operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnectionTunnels(
    request: requests.ListIPSecConnectionTunnelsRequest
  ): AsyncIterableIterator<models.IPSecConnectionTunnel> {
    return paginateRecords(request, req => this.listIPSecConnectionTunnels(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listIPSecConnectionTunnels operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnectionTunnelsResponses(
    request: requests.ListIPSecConnectionTunnelsRequest
  ): AsyncIterableIterator<responses.ListIPSecConnectionTunnelsResponse> {
    return paginateResponses(request, req => this.listIPSecConnectionTunnels(req));
  }

  /**
   * Lists the IPSec connections for the specified compartment. You can filter the
   * results by DRG or CPE.
   *
   * @param ListIPSecConnectionsRequest
   * @return ListIPSecConnectionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListIPSecConnections.ts.html |here} to see how to use ListIPSecConnections API.
   */
  public async listIPSecConnections(
    listIPSecConnectionsRequest: requests.ListIPSecConnectionsRequest
  ): Promise<responses.ListIPSecConnectionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listIPSecConnections.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listIPSecConnectionsRequest.compartmentId,
      "drgId": listIPSecConnectionsRequest.drgId,
      "cpeId": listIPSecConnectionsRequest.cpeId,
      "limit": listIPSecConnectionsRequest.limit,
      "page": listIPSecConnectionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listIPSecConnectionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListIPSecConnectionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "IPSecConnection[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.IPSecConnection objects
   * contained in responses from the listIPSecConnections operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnections(
    request: requests.ListIPSecConnectionsRequest
  ): AsyncIterableIterator<models.IPSecConnection> {
    return paginateRecords(request, req => this.listIPSecConnections(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listIPSecConnections operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIPSecConnectionsResponses(
    request: requests.ListIPSecConnectionsRequest
  ): AsyncIterableIterator<responses.ListIPSecConnectionsResponse> {
    return paginateResponses(request, req => this.listIPSecConnections(req));
  }

  /**
   * Lists the internet gateways in the specified VCN and the specified compartment.
   * If the VCN ID is not provided, then the list includes the internet gateways from all VCNs in the specified compartment.
   *
   * @param ListInternetGatewaysRequest
   * @return ListInternetGatewaysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListInternetGateways.ts.html |here} to see how to use ListInternetGateways API.
   */
  public async listInternetGateways(
    listInternetGatewaysRequest: requests.ListInternetGatewaysRequest
  ): Promise<responses.ListInternetGatewaysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listInternetGateways.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listInternetGatewaysRequest.compartmentId,
      "vcnId": listInternetGatewaysRequest.vcnId,
      "limit": listInternetGatewaysRequest.limit,
      "page": listInternetGatewaysRequest.page,
      "displayName": listInternetGatewaysRequest.displayName,
      "sortBy": listInternetGatewaysRequest.sortBy,
      "sortOrder": listInternetGatewaysRequest.sortOrder,
      "lifecycleState": listInternetGatewaysRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listInternetGatewaysRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListInternetGatewaysResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "InternetGateway[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.InternetGateway objects
   * contained in responses from the listInternetGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInternetGateways(
    request: requests.ListInternetGatewaysRequest
  ): AsyncIterableIterator<models.InternetGateway> {
    return paginateRecords(request, req => this.listInternetGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listInternetGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllInternetGatewaysResponses(
    request: requests.ListInternetGatewaysRequest
  ): AsyncIterableIterator<responses.ListInternetGatewaysResponse> {
    return paginateResponses(request, req => this.listInternetGateways(req));
  }

  /**
   * Lists the {@link Ipv6} objects based
   * on one of these filters:
   * <p>
   * Subnet OCID.
   *   * VNIC OCID.
   *   * Both IPv6 address and subnet OCID: This lets you get an `Ipv6` object based on its private
   *   IPv6 address (for example, 2001:0db8:0123:1111:abcd:ef01:2345:6789) and not its OCID. For comparison,
   *   {@link #getIpv6(GetIpv6Request) getIpv6} requires the OCID.
   *
   * @param ListIpv6sRequest
   * @return ListIpv6sResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListIpv6s.ts.html |here} to see how to use ListIpv6s API.
   */
  public async listIpv6s(
    listIpv6sRequest: requests.ListIpv6sRequest
  ): Promise<responses.ListIpv6sResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listIpv6s.");
    const pathParams = {};

    const queryParams = {
      "limit": listIpv6sRequest.limit,
      "page": listIpv6sRequest.page,
      "ipAddress": listIpv6sRequest.ipAddress,
      "subnetId": listIpv6sRequest.subnetId,
      "vnicId": listIpv6sRequest.vnicId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listIpv6sRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipv6",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listIpv6sRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListIpv6sResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Ipv6[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Ipv6 objects
   * contained in responses from the listIpv6s operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIpv6s(request: requests.ListIpv6sRequest): AsyncIterableIterator<models.Ipv6> {
    return paginateRecords(request, req => this.listIpv6s(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listIpv6s operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllIpv6sResponses(
    request: requests.ListIpv6sRequest
  ): AsyncIterableIterator<responses.ListIpv6sResponse> {
    return paginateResponses(request, req => this.listIpv6s(req));
  }

  /**
   * Lists the local peering gateways (LPGs) for the specified VCN and specified compartment.
   * If the VCN ID is not provided, then the list includes the LPGs from all VCNs in the specified compartment.
   *
   * @param ListLocalPeeringGatewaysRequest
   * @return ListLocalPeeringGatewaysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListLocalPeeringGateways.ts.html |here} to see how to use ListLocalPeeringGateways API.
   */
  public async listLocalPeeringGateways(
    listLocalPeeringGatewaysRequest: requests.ListLocalPeeringGatewaysRequest
  ): Promise<responses.ListLocalPeeringGatewaysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listLocalPeeringGateways.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listLocalPeeringGatewaysRequest.compartmentId,
      "limit": listLocalPeeringGatewaysRequest.limit,
      "page": listLocalPeeringGatewaysRequest.page,
      "vcnId": listLocalPeeringGatewaysRequest.vcnId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listLocalPeeringGatewaysRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLocalPeeringGatewaysResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "LocalPeeringGateway[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.LocalPeeringGateway objects
   * contained in responses from the listLocalPeeringGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLocalPeeringGateways(
    request: requests.ListLocalPeeringGatewaysRequest
  ): AsyncIterableIterator<models.LocalPeeringGateway> {
    return paginateRecords(request, req => this.listLocalPeeringGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listLocalPeeringGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllLocalPeeringGatewaysResponses(
    request: requests.ListLocalPeeringGatewaysRequest
  ): AsyncIterableIterator<responses.ListLocalPeeringGatewaysResponse> {
    return paginateResponses(request, req => this.listLocalPeeringGateways(req));
  }

  /**
   * Lists the NAT gateways in the specified compartment. You may optionally specify a VCN OCID
   * to filter the results by VCN.
   *
   * @param ListNatGatewaysRequest
   * @return ListNatGatewaysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListNatGateways.ts.html |here} to see how to use ListNatGateways API.
   */
  public async listNatGateways(
    listNatGatewaysRequest: requests.ListNatGatewaysRequest
  ): Promise<responses.ListNatGatewaysResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listNatGateways.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNatGatewaysRequest.compartmentId,
      "vcnId": listNatGatewaysRequest.vcnId,
      "limit": listNatGatewaysRequest.limit,
      "page": listNatGatewaysRequest.page,
      "displayName": listNatGatewaysRequest.displayName,
      "sortBy": listNatGatewaysRequest.sortBy,
      "sortOrder": listNatGatewaysRequest.sortOrder,
      "lifecycleState": listNatGatewaysRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listNatGatewaysRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNatGatewaysResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "NatGateway[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.NatGateway objects
   * contained in responses from the listNatGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNatGateways(
    request: requests.ListNatGatewaysRequest
  ): AsyncIterableIterator<models.NatGateway> {
    return paginateRecords(request, req => this.listNatGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNatGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNatGatewaysResponses(
    request: requests.ListNatGatewaysRequest
  ): AsyncIterableIterator<responses.ListNatGatewaysResponse> {
    return paginateResponses(request, req => this.listNatGateways(req));
  }

  /**
   * Lists the security rules in the specified network security group.
   *
   * @param ListNetworkSecurityGroupSecurityRulesRequest
   * @return ListNetworkSecurityGroupSecurityRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use ListNetworkSecurityGroupSecurityRules API.
   */
  public async listNetworkSecurityGroupSecurityRules(
    listNetworkSecurityGroupSecurityRulesRequest: requests.ListNetworkSecurityGroupSecurityRulesRequest
  ): Promise<responses.ListNetworkSecurityGroupSecurityRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#listNetworkSecurityGroupSecurityRules."
      );
    const pathParams = {
      "{networkSecurityGroupId}":
        listNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
    };

    const queryParams = {
      "direction": listNetworkSecurityGroupSecurityRulesRequest.direction,
      "limit": listNetworkSecurityGroupSecurityRulesRequest.limit,
      "page": listNetworkSecurityGroupSecurityRulesRequest.page,
      "sortBy": listNetworkSecurityGroupSecurityRulesRequest.sortBy,
      "sortOrder": listNetworkSecurityGroupSecurityRulesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/securityRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listNetworkSecurityGroupSecurityRulesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkSecurityGroupSecurityRulesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "SecurityRule[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.SecurityRule objects
   * contained in responses from the listNetworkSecurityGroupSecurityRules operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroupSecurityRules(
    request: requests.ListNetworkSecurityGroupSecurityRulesRequest
  ): AsyncIterableIterator<models.SecurityRule> {
    return paginateRecords(request, req => this.listNetworkSecurityGroupSecurityRules(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroupSecurityRules operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroupSecurityRulesResponses(
    request: requests.ListNetworkSecurityGroupSecurityRulesRequest
  ): AsyncIterableIterator<responses.ListNetworkSecurityGroupSecurityRulesResponse> {
    return paginateResponses(request, req => this.listNetworkSecurityGroupSecurityRules(req));
  }

  /**
   * Lists the VNICs in the specified network security group.
   *
   * @param ListNetworkSecurityGroupVnicsRequest
   * @return ListNetworkSecurityGroupVnicsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListNetworkSecurityGroupVnics.ts.html |here} to see how to use ListNetworkSecurityGroupVnics API.
   */
  public async listNetworkSecurityGroupVnics(
    listNetworkSecurityGroupVnicsRequest: requests.ListNetworkSecurityGroupVnicsRequest
  ): Promise<responses.ListNetworkSecurityGroupVnicsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listNetworkSecurityGroupVnics.");
    const pathParams = {
      "{networkSecurityGroupId}": listNetworkSecurityGroupVnicsRequest.networkSecurityGroupId
    };

    const queryParams = {
      "limit": listNetworkSecurityGroupVnicsRequest.limit,
      "page": listNetworkSecurityGroupVnicsRequest.page,
      "sortBy": listNetworkSecurityGroupVnicsRequest.sortBy,
      "sortOrder": listNetworkSecurityGroupVnicsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/vnics",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listNetworkSecurityGroupVnicsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkSecurityGroupVnicsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "NetworkSecurityGroupVnic[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.NetworkSecurityGroupVnic objects
   * contained in responses from the listNetworkSecurityGroupVnics operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroupVnics(
    request: requests.ListNetworkSecurityGroupVnicsRequest
  ): AsyncIterableIterator<models.NetworkSecurityGroupVnic> {
    return paginateRecords(request, req => this.listNetworkSecurityGroupVnics(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroupVnics operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroupVnicsResponses(
    request: requests.ListNetworkSecurityGroupVnicsRequest
  ): AsyncIterableIterator<responses.ListNetworkSecurityGroupVnicsResponse> {
    return paginateResponses(request, req => this.listNetworkSecurityGroupVnics(req));
  }

  /**
   * Lists the network security groups in the specified compartment.
   *
   * @param ListNetworkSecurityGroupsRequest
   * @return ListNetworkSecurityGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListNetworkSecurityGroups.ts.html |here} to see how to use ListNetworkSecurityGroups API.
   */
  public async listNetworkSecurityGroups(
    listNetworkSecurityGroupsRequest: requests.ListNetworkSecurityGroupsRequest
  ): Promise<responses.ListNetworkSecurityGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listNetworkSecurityGroups.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNetworkSecurityGroupsRequest.compartmentId,
      "vcnId": listNetworkSecurityGroupsRequest.vcnId,
      "limit": listNetworkSecurityGroupsRequest.limit,
      "page": listNetworkSecurityGroupsRequest.page,
      "displayName": listNetworkSecurityGroupsRequest.displayName,
      "sortBy": listNetworkSecurityGroupsRequest.sortBy,
      "sortOrder": listNetworkSecurityGroupsRequest.sortOrder,
      "lifecycleState": listNetworkSecurityGroupsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listNetworkSecurityGroupsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkSecurityGroupsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "NetworkSecurityGroup[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.NetworkSecurityGroup objects
   * contained in responses from the listNetworkSecurityGroups operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroups(
    request: requests.ListNetworkSecurityGroupsRequest
  ): AsyncIterableIterator<models.NetworkSecurityGroup> {
    return paginateRecords(request, req => this.listNetworkSecurityGroups(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroups operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNetworkSecurityGroupsResponses(
    request: requests.ListNetworkSecurityGroupsRequest
  ): AsyncIterableIterator<responses.ListNetworkSecurityGroupsResponse> {
    return paginateResponses(request, req => this.listNetworkSecurityGroups(req));
  }

  /**
     * Lists the {@link PrivateIp} objects based
* on one of these filters:
* <p>
  - Subnet OCID.
*   - VNIC OCID.
*   - Both private IP address and subnet OCID: This lets
*   you get a `privateIP` object based on its private IP
*   address (for example, 10.0.3.3) and not its OCID. For comparison,
*   {@link #getPrivateIp(GetPrivateIpRequest) getPrivateIp}
*   requires the OCID.
* <p>
If you're listing all the private IPs associated with a given subnet
* or VNIC, the response includes both primary and secondary private IPs.
* <p>
If you are an Oracle Cloud VMware Solution customer and have VLANs
* in your VCN, you can filter the list by VLAN OCID. See {@link Vlan}.
* 
     * @param ListPrivateIpsRequest
     * @return ListPrivateIpsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListPrivateIps.ts.html |here} to see how to use ListPrivateIps API.
     */
  public async listPrivateIps(
    listPrivateIpsRequest: requests.ListPrivateIpsRequest
  ): Promise<responses.ListPrivateIpsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listPrivateIps.");
    const pathParams = {};

    const queryParams = {
      "limit": listPrivateIpsRequest.limit,
      "page": listPrivateIpsRequest.page,
      "ipAddress": listPrivateIpsRequest.ipAddress,
      "subnetId": listPrivateIpsRequest.subnetId,
      "vnicId": listPrivateIpsRequest.vnicId,
      "vlanId": listPrivateIpsRequest.vlanId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateIps",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listPrivateIpsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPrivateIpsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "PrivateIp[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.PrivateIp objects
   * contained in responses from the listPrivateIps operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPrivateIps(
    request: requests.ListPrivateIpsRequest
  ): AsyncIterableIterator<models.PrivateIp> {
    return paginateRecords(request, req => this.listPrivateIps(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPrivateIps operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPrivateIpsResponses(
    request: requests.ListPrivateIpsRequest
  ): AsyncIterableIterator<responses.ListPrivateIpsResponse> {
    return paginateResponses(request, req => this.listPrivateIps(req));
  }

  /**
   * Lists the PublicIpPool objects in the specified compartment.
   * You can filter the list by using query parameters.
   *
   * @param ListPublicIpPoolsRequest
   * @return ListPublicIpPoolsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListPublicIpPools.ts.html |here} to see how to use ListPublicIpPools API.
   */
  public async listPublicIpPools(
    listPublicIpPoolsRequest: requests.ListPublicIpPoolsRequest
  ): Promise<responses.ListPublicIpPoolsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listPublicIpPools.");
    const pathParams = {};

    const queryParams = {
      "limit": listPublicIpPoolsRequest.limit,
      "page": listPublicIpPoolsRequest.page,
      "displayName": listPublicIpPoolsRequest.displayName,
      "byoipRangeId": listPublicIpPoolsRequest.byoipRangeId,
      "sortBy": listPublicIpPoolsRequest.sortBy,
      "sortOrder": listPublicIpPoolsRequest.sortOrder,
      "compartmentId": listPublicIpPoolsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPublicIpPoolsRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listPublicIpPoolsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPublicIpPoolsResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPoolCollection",
        bodyModel: "model.PublicIpPoolCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Lists the {@link PublicIp} objects
* in the specified compartment. You can filter the list by using query parameters.
* <p>
To list your reserved public IPs:
*   * Set `scope` = `REGION`  (required)
*   * Leave the `availabilityDomain` parameter empty
*   * Set `lifetime` = `RESERVED`
* <p>
To list the ephemeral public IPs assigned to a regional entity such as a NAT gateway:
*   * Set `scope` = `REGION`  (required)
*   * Leave the `availabilityDomain` parameter empty
*   * Set `lifetime` = `EPHEMERAL`
* <p>
To list the ephemeral public IPs assigned to private IPs:
*   * Set `scope` = `AVAILABILITY_DOMAIN` (required)
*   * Set the `availabilityDomain` parameter to the desired availability domain (required)
*   * Set `lifetime` = `EPHEMERAL`
* <p>
**Note:** An ephemeral public IP assigned to a private IP
* is always in the same availability domain and compartment as the private IP.
* 
     * @param ListPublicIpsRequest
     * @return ListPublicIpsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListPublicIps.ts.html |here} to see how to use ListPublicIps API.
     */
  public async listPublicIps(
    listPublicIpsRequest: requests.ListPublicIpsRequest
  ): Promise<responses.ListPublicIpsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listPublicIps.");
    const pathParams = {};

    const queryParams = {
      "limit": listPublicIpsRequest.limit,
      "page": listPublicIpsRequest.page,
      "scope": listPublicIpsRequest.scope,
      "availabilityDomain": listPublicIpsRequest.availabilityDomain,
      "lifetime": listPublicIpsRequest.lifetime,
      "compartmentId": listPublicIpsRequest.compartmentId,
      "publicIpPoolId": listPublicIpsRequest.publicIpPoolId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listPublicIpsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPublicIpsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "PublicIp[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.PublicIp objects
   * contained in responses from the listPublicIps operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPublicIps(
    request: requests.ListPublicIpsRequest
  ): AsyncIterableIterator<models.PublicIp> {
    return paginateRecords(request, req => this.listPublicIps(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPublicIps operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPublicIpsResponses(
    request: requests.ListPublicIpsRequest
  ): AsyncIterableIterator<responses.ListPublicIpsResponse> {
    return paginateResponses(request, req => this.listPublicIps(req));
  }

  /**
   * Lists the remote peering connections (RPCs) for the specified DRG and compartment
   * (the RPC's compartment).
   *
   * @param ListRemotePeeringConnectionsRequest
   * @return ListRemotePeeringConnectionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListRemotePeeringConnections.ts.html |here} to see how to use ListRemotePeeringConnections API.
   */
  public async listRemotePeeringConnections(
    listRemotePeeringConnectionsRequest: requests.ListRemotePeeringConnectionsRequest
  ): Promise<responses.ListRemotePeeringConnectionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listRemotePeeringConnections.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRemotePeeringConnectionsRequest.compartmentId,
      "drgId": listRemotePeeringConnectionsRequest.drgId,
      "limit": listRemotePeeringConnectionsRequest.limit,
      "page": listRemotePeeringConnectionsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listRemotePeeringConnectionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRemotePeeringConnectionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "RemotePeeringConnection[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.RemotePeeringConnection objects
   * contained in responses from the listRemotePeeringConnections operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRemotePeeringConnections(
    request: requests.ListRemotePeeringConnectionsRequest
  ): AsyncIterableIterator<models.RemotePeeringConnection> {
    return paginateRecords(request, req => this.listRemotePeeringConnections(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listRemotePeeringConnections operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRemotePeeringConnectionsResponses(
    request: requests.ListRemotePeeringConnectionsRequest
  ): AsyncIterableIterator<responses.ListRemotePeeringConnectionsResponse> {
    return paginateResponses(request, req => this.listRemotePeeringConnections(req));
  }

  /**
   * Lists the route tables in the specified VCN and specified compartment.
   * If the VCN ID is not provided, then the list includes the route tables from all VCNs in the specified compartment.
   * The response includes the default route table that automatically comes with
   * each VCN in the specified compartment, plus any route tables you've created.
   *
   * @param ListRouteTablesRequest
   * @return ListRouteTablesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListRouteTables.ts.html |here} to see how to use ListRouteTables API.
   */
  public async listRouteTables(
    listRouteTablesRequest: requests.ListRouteTablesRequest
  ): Promise<responses.ListRouteTablesResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listRouteTables.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRouteTablesRequest.compartmentId,
      "limit": listRouteTablesRequest.limit,
      "page": listRouteTablesRequest.page,
      "vcnId": listRouteTablesRequest.vcnId,
      "displayName": listRouteTablesRequest.displayName,
      "sortBy": listRouteTablesRequest.sortBy,
      "sortOrder": listRouteTablesRequest.sortOrder,
      "lifecycleState": listRouteTablesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listRouteTablesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRouteTablesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "RouteTable[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.RouteTable objects
   * contained in responses from the listRouteTables operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRouteTables(
    request: requests.ListRouteTablesRequest
  ): AsyncIterableIterator<models.RouteTable> {
    return paginateRecords(request, req => this.listRouteTables(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listRouteTables operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllRouteTablesResponses(
    request: requests.ListRouteTablesRequest
  ): AsyncIterableIterator<responses.ListRouteTablesResponse> {
    return paginateResponses(request, req => this.listRouteTables(req));
  }

  /**
   * Lists the security lists in the specified VCN and compartment.
   * If the VCN ID is not provided, then the list includes the security lists from all VCNs in the specified compartment.
   *
   * @param ListSecurityListsRequest
   * @return ListSecurityListsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListSecurityLists.ts.html |here} to see how to use ListSecurityLists API.
   */
  public async listSecurityLists(
    listSecurityListsRequest: requests.ListSecurityListsRequest
  ): Promise<responses.ListSecurityListsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listSecurityLists.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSecurityListsRequest.compartmentId,
      "limit": listSecurityListsRequest.limit,
      "page": listSecurityListsRequest.page,
      "vcnId": listSecurityListsRequest.vcnId,
      "displayName": listSecurityListsRequest.displayName,
      "sortBy": listSecurityListsRequest.sortBy,
      "sortOrder": listSecurityListsRequest.sortOrder,
      "lifecycleState": listSecurityListsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listSecurityListsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityListsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "SecurityList[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.SecurityList objects
   * contained in responses from the listSecurityLists operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityLists(
    request: requests.ListSecurityListsRequest
  ): AsyncIterableIterator<models.SecurityList> {
    return paginateRecords(request, req => this.listSecurityLists(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSecurityLists operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSecurityListsResponses(
    request: requests.ListSecurityListsRequest
  ): AsyncIterableIterator<responses.ListSecurityListsResponse> {
    return paginateResponses(request, req => this.listSecurityLists(req));
  }

  /**
   * Lists the service gateways in the specified compartment. You may optionally specify a VCN OCID
   * to filter the results by VCN.
   *
   * @param ListServiceGatewaysRequest
   * @return ListServiceGatewaysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListServiceGateways.ts.html |here} to see how to use ListServiceGateways API.
   */
  public async listServiceGateways(
    listServiceGatewaysRequest: requests.ListServiceGatewaysRequest
  ): Promise<responses.ListServiceGatewaysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listServiceGateways.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listServiceGatewaysRequest.compartmentId,
      "vcnId": listServiceGatewaysRequest.vcnId,
      "limit": listServiceGatewaysRequest.limit,
      "page": listServiceGatewaysRequest.page,
      "sortBy": listServiceGatewaysRequest.sortBy,
      "sortOrder": listServiceGatewaysRequest.sortOrder,
      "lifecycleState": listServiceGatewaysRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listServiceGatewaysRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServiceGatewaysResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "ServiceGateway[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ServiceGateway objects
   * contained in responses from the listServiceGateways operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllServiceGateways(
    request: requests.ListServiceGatewaysRequest
  ): AsyncIterableIterator<models.ServiceGateway> {
    return paginateRecords(request, req => this.listServiceGateways(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listServiceGateways operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllServiceGatewaysResponses(
    request: requests.ListServiceGatewaysRequest
  ): AsyncIterableIterator<responses.ListServiceGatewaysResponse> {
    return paginateResponses(request, req => this.listServiceGateways(req));
  }

  /**
   * Lists the available {@link Service} objects that you can enable for a
   * service gateway in this region.
   *
   * @param ListServicesRequest
   * @return ListServicesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListServices.ts.html |here} to see how to use ListServices API.
   */
  public async listServices(
    listServicesRequest: requests.ListServicesRequest
  ): Promise<responses.ListServicesResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listServices.");
    const pathParams = {};

    const queryParams = {
      "limit": listServicesRequest.limit,
      "page": listServicesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/services",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listServicesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListServicesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Service[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Service objects
   * contained in responses from the listServices operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllServices(
    request: requests.ListServicesRequest
  ): AsyncIterableIterator<models.Service> {
    return paginateRecords(request, req => this.listServices(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listServices operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllServicesResponses(
    request: requests.ListServicesRequest
  ): AsyncIterableIterator<responses.ListServicesResponse> {
    return paginateResponses(request, req => this.listServices(req));
  }

  /**
   * Lists the subnets in the specified VCN and the specified compartment.
   * If the VCN ID is not provided, then the list includes the subnets from all VCNs in the specified compartment.
   *
   * @param ListSubnetsRequest
   * @return ListSubnetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListSubnets.ts.html |here} to see how to use ListSubnets API.
   */
  public async listSubnets(
    listSubnetsRequest: requests.ListSubnetsRequest
  ): Promise<responses.ListSubnetsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listSubnets.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listSubnetsRequest.compartmentId,
      "limit": listSubnetsRequest.limit,
      "page": listSubnetsRequest.page,
      "vcnId": listSubnetsRequest.vcnId,
      "displayName": listSubnetsRequest.displayName,
      "sortBy": listSubnetsRequest.sortBy,
      "sortOrder": listSubnetsRequest.sortOrder,
      "lifecycleState": listSubnetsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listSubnetsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSubnetsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Subnet[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Subnet objects
   * contained in responses from the listSubnets operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSubnets(
    request: requests.ListSubnetsRequest
  ): AsyncIterableIterator<models.Subnet> {
    return paginateRecords(request, req => this.listSubnets(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSubnets operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSubnetsResponses(
    request: requests.ListSubnetsRequest
  ): AsyncIterableIterator<responses.ListSubnetsResponse> {
    return paginateResponses(request, req => this.listSubnets(req));
  }

  /**
   * Lists the virtual cloud networks (VCNs) in the specified compartment.
   *
   * @param ListVcnsRequest
   * @return ListVcnsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVcns.ts.html |here} to see how to use ListVcns API.
   */
  public async listVcns(
    listVcnsRequest: requests.ListVcnsRequest
  ): Promise<responses.ListVcnsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listVcns.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVcnsRequest.compartmentId,
      "limit": listVcnsRequest.limit,
      "page": listVcnsRequest.page,
      "displayName": listVcnsRequest.displayName,
      "sortBy": listVcnsRequest.sortBy,
      "sortOrder": listVcnsRequest.sortOrder,
      "lifecycleState": listVcnsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVcnsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVcnsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Vcn[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Vcn objects
   * contained in responses from the listVcns operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVcns(request: requests.ListVcnsRequest): AsyncIterableIterator<models.Vcn> {
    return paginateRecords(request, req => this.listVcns(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVcns operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVcnsResponses(
    request: requests.ListVcnsRequest
  ): AsyncIterableIterator<responses.ListVcnsResponse> {
    return paginateResponses(request, req => this.listVcns(req));
  }

  /**
   * The deprecated operation lists available bandwidth levels for virtual circuits. For the compartment ID, provide the OCID of your tenancy (the root compartment).
   *
   * @param ListVirtualCircuitBandwidthShapesRequest
   * @return ListVirtualCircuitBandwidthShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVirtualCircuitBandwidthShapes.ts.html |here} to see how to use ListVirtualCircuitBandwidthShapes API.
   */
  public async listVirtualCircuitBandwidthShapes(
    listVirtualCircuitBandwidthShapesRequest: requests.ListVirtualCircuitBandwidthShapesRequest
  ): Promise<responses.ListVirtualCircuitBandwidthShapesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#listVirtualCircuitBandwidthShapes."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVirtualCircuitBandwidthShapesRequest.compartmentId,
      "limit": listVirtualCircuitBandwidthShapesRequest.limit,
      "page": listVirtualCircuitBandwidthShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuitBandwidthShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVirtualCircuitBandwidthShapesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVirtualCircuitBandwidthShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "VirtualCircuitBandwidthShape[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.VirtualCircuitBandwidthShape objects
   * contained in responses from the listVirtualCircuitBandwidthShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualCircuitBandwidthShapes(
    request: requests.ListVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<models.VirtualCircuitBandwidthShape> {
    return paginateRecords(request, req => this.listVirtualCircuitBandwidthShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVirtualCircuitBandwidthShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualCircuitBandwidthShapesResponses(
    request: requests.ListVirtualCircuitBandwidthShapesRequest
  ): AsyncIterableIterator<responses.ListVirtualCircuitBandwidthShapesResponse> {
    return paginateResponses(request, req => this.listVirtualCircuitBandwidthShapes(req));
  }

  /**
   * Lists the public IP prefixes and their details for the specified
   * public virtual circuit.
   *
   * @param ListVirtualCircuitPublicPrefixesRequest
   * @return ListVirtualCircuitPublicPrefixesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVirtualCircuitPublicPrefixes.ts.html |here} to see how to use ListVirtualCircuitPublicPrefixes API.
   */
  public async listVirtualCircuitPublicPrefixes(
    listVirtualCircuitPublicPrefixesRequest: requests.ListVirtualCircuitPublicPrefixesRequest
  ): Promise<responses.ListVirtualCircuitPublicPrefixesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listVirtualCircuitPublicPrefixes.");
    const pathParams = {
      "{virtualCircuitId}": listVirtualCircuitPublicPrefixesRequest.virtualCircuitId
    };

    const queryParams = {
      "verificationState": listVirtualCircuitPublicPrefixesRequest.verificationState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}/publicPrefixes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVirtualCircuitPublicPrefixesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVirtualCircuitPublicPrefixesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "VirtualCircuitPublicPrefix[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the virtual circuits in the specified compartment.
   *
   * @param ListVirtualCircuitsRequest
   * @return ListVirtualCircuitsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVirtualCircuits.ts.html |here} to see how to use ListVirtualCircuits API.
   */
  public async listVirtualCircuits(
    listVirtualCircuitsRequest: requests.ListVirtualCircuitsRequest
  ): Promise<responses.ListVirtualCircuitsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#listVirtualCircuits.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVirtualCircuitsRequest.compartmentId,
      "limit": listVirtualCircuitsRequest.limit,
      "page": listVirtualCircuitsRequest.page,
      "displayName": listVirtualCircuitsRequest.displayName,
      "sortBy": listVirtualCircuitsRequest.sortBy,
      "sortOrder": listVirtualCircuitsRequest.sortOrder,
      "lifecycleState": listVirtualCircuitsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVirtualCircuitsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVirtualCircuitsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "VirtualCircuit[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.VirtualCircuit objects
   * contained in responses from the listVirtualCircuits operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualCircuits(
    request: requests.ListVirtualCircuitsRequest
  ): AsyncIterableIterator<models.VirtualCircuit> {
    return paginateRecords(request, req => this.listVirtualCircuits(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVirtualCircuits operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVirtualCircuitsResponses(
    request: requests.ListVirtualCircuitsRequest
  ): AsyncIterableIterator<responses.ListVirtualCircuitsResponse> {
    return paginateResponses(request, req => this.listVirtualCircuits(req));
  }

  /**
   * Lists the VLANs in the specified VCN and the specified compartment.
   *
   * @param ListVlansRequest
   * @return ListVlansResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ListVlans.ts.html |here} to see how to use ListVlans API.
   */
  public async listVlans(
    listVlansRequest: requests.ListVlansRequest
  ): Promise<responses.ListVlansResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#listVlans.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listVlansRequest.compartmentId,
      "limit": listVlansRequest.limit,
      "page": listVlansRequest.page,
      "vcnId": listVlansRequest.vcnId,
      "displayName": listVlansRequest.displayName,
      "sortBy": listVlansRequest.sortBy,
      "sortOrder": listVlansRequest.sortOrder,
      "lifecycleState": listVlansRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listVlansRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listVlansRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVlansResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: "Vlan[]",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.Vlan objects
   * contained in responses from the listVlans operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVlans(request: requests.ListVlansRequest): AsyncIterableIterator<models.Vlan> {
    return paginateRecords(request, req => this.listVlans(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listVlans operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllVlansResponses(
    request: requests.ListVlansRequest
  ): AsyncIterableIterator<responses.ListVlansResponse> {
    return paginateResponses(request, req => this.listVlans(req));
  }

  /**
     * Update a CIDR from a VCN. The new CIDR must maintain the following rules -
* <p>
a. The CIDR provided is valid
* b. The new CIDR range should not overlap with any existing CIDRs
* c. The new CIDR should not exceed the max limit of CIDRs per VCNs
* d. The new CIDR range does not overlap with any peered VCNs
* e. The new CIDR should overlap with any existing route rule within a VCN
* f. All existing subnet CIDRs are subsets of the updated CIDR ranges
* 
     * @param ModifyVcnCidrRequest
     * @return ModifyVcnCidrResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ModifyVcnCidr.ts.html |here} to see how to use ModifyVcnCidr API.
     */
  public async modifyVcnCidr(
    modifyVcnCidrRequest: requests.ModifyVcnCidrRequest
  ): Promise<responses.ModifyVcnCidrResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#modifyVcnCidr.");
    const pathParams = {
      "{vcnId}": modifyVcnCidrRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": modifyVcnCidrRequest.opcRequestId,
      "opc-retry-token": modifyVcnCidrRequest.opcRetryToken,
      "if-match": modifyVcnCidrRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/actions/modifyCidr",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        modifyVcnCidrRequest.modifyVcnCidrDetails,
        "ModifyVcnCidrDetails",
        models.ModifyVcnCidrDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      modifyVcnCidrRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ModifyVcnCidrResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes one or more security rules from the specified network security group.
   *
   * @param RemoveNetworkSecurityGroupSecurityRulesRequest
   * @return RemoveNetworkSecurityGroupSecurityRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use RemoveNetworkSecurityGroupSecurityRules API.
   */
  public async removeNetworkSecurityGroupSecurityRules(
    removeNetworkSecurityGroupSecurityRulesRequest: requests.RemoveNetworkSecurityGroupSecurityRulesRequest
  ): Promise<responses.RemoveNetworkSecurityGroupSecurityRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#removeNetworkSecurityGroupSecurityRules."
      );
    const pathParams = {
      "{networkSecurityGroupId}":
        removeNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/removeSecurityRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeNetworkSecurityGroupSecurityRulesRequest.removeNetworkSecurityGroupSecurityRulesDetails,
        "RemoveNetworkSecurityGroupSecurityRulesDetails",
        models.RemoveNetworkSecurityGroupSecurityRulesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      removeNetworkSecurityGroupSecurityRulesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveNetworkSecurityGroupSecurityRulesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a Cidr from the referenced Public IP Pool.
   *
   * @param RemovePublicIpPoolCapacityRequest
   * @return RemovePublicIpPoolCapacityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemovePublicIpPoolCapacity.ts.html |here} to see how to use RemovePublicIpPoolCapacity API.
   */
  public async removePublicIpPoolCapacity(
    removePublicIpPoolCapacityRequest: requests.RemovePublicIpPoolCapacityRequest
  ): Promise<responses.RemovePublicIpPoolCapacityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#removePublicIpPoolCapacity.");
    const pathParams = {
      "{publicIpPoolId}": removePublicIpPoolCapacityRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removePublicIpPoolCapacityRequest.opcRequestId,
      "opc-retry-token": removePublicIpPoolCapacityRequest.opcRetryToken
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}/actions/removeCapacity",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removePublicIpPoolCapacityRequest.removePublicIpPoolCapacityDetails,
        "RemovePublicIpPoolCapacityDetails",
        models.RemovePublicIpPoolCapacityDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      removePublicIpPoolCapacityRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemovePublicIpPoolCapacityResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPool",
        bodyModel: "model.PublicIpPool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove a CIDR from a VCN. The CIDR being removed should not have
   * any resources allocated from it.
   *
   * @param RemoveVcnCidrRequest
   * @return RemoveVcnCidrResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/RemoveVcnCidr.ts.html |here} to see how to use RemoveVcnCidr API.
   */
  public async removeVcnCidr(
    removeVcnCidrRequest: requests.RemoveVcnCidrRequest
  ): Promise<responses.RemoveVcnCidrResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#removeVcnCidr.");
    const pathParams = {
      "{vcnId}": removeVcnCidrRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeVcnCidrRequest.opcRequestId,
      "opc-retry-token": removeVcnCidrRequest.opcRetryToken,
      "if-match": removeVcnCidrRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}/actions/removeCidr",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeVcnCidrRequest.removeVcnCidrDetails,
        "RemoveVcnCidrDetails",
        models.RemoveVcnCidrDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      removeVcnCidrRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveVcnCidrResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Byoip Range.
   *
   * @param UpdateByoipRangeRequest
   * @return UpdateByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateByoipRange.ts.html |here} to see how to use UpdateByoipRange API.
   */
  public async updateByoipRange(
    updateByoipRangeRequest: requests.UpdateByoipRangeRequest
  ): Promise<responses.UpdateByoipRangeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateByoipRange.");
    const pathParams = {
      "{byoipRangeId}": updateByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateByoipRangeRequest.opcRequestId,
      "if-match": updateByoipRangeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateByoipRangeRequest.updateByoipRangeDetails,
        "UpdateByoipRangeDetails",
        models.UpdateByoipRangeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateByoipRangeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateByoipRangeResponse>{},
        body: await response.json(),
        bodyKey: "byoipRange",
        bodyModel: "model.ByoipRange",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified CPE's display name or tags.
   * Avoid entering confidential information.
   *
   * @param UpdateCpeRequest
   * @return UpdateCpeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateCpe.ts.html |here} to see how to use UpdateCpe API.
   */
  public async updateCpe(
    updateCpeRequest: requests.UpdateCpeRequest
  ): Promise<responses.UpdateCpeResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateCpe.");
    const pathParams = {
      "{cpeId}": updateCpeRequest.cpeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateCpeRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/cpes/{cpeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCpeRequest.updateCpeDetails,
        "UpdateCpeDetails",
        models.UpdateCpeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateCpeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCpeResponse>{},
        body: await response.json(),
        bodyKey: "cpe",
        bodyModel: "model.Cpe",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified cross-connect.
   * @param UpdateCrossConnectRequest
   * @return UpdateCrossConnectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateCrossConnect.ts.html |here} to see how to use UpdateCrossConnect API.
   */
  public async updateCrossConnect(
    updateCrossConnectRequest: requests.UpdateCrossConnectRequest
  ): Promise<responses.UpdateCrossConnectResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateCrossConnect.");
    const pathParams = {
      "{crossConnectId}": updateCrossConnectRequest.crossConnectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateCrossConnectRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnects/{crossConnectId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCrossConnectRequest.updateCrossConnectDetails,
        "UpdateCrossConnectDetails",
        models.UpdateCrossConnectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateCrossConnectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCrossConnectResponse>{},
        body: await response.json(),
        bodyKey: "crossConnect",
        bodyModel: "model.CrossConnect",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified cross-connect group's display name.
   * Avoid entering confidential information.
   *
   * @param UpdateCrossConnectGroupRequest
   * @return UpdateCrossConnectGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateCrossConnectGroup.ts.html |here} to see how to use UpdateCrossConnectGroup API.
   */
  public async updateCrossConnectGroup(
    updateCrossConnectGroupRequest: requests.UpdateCrossConnectGroupRequest
  ): Promise<responses.UpdateCrossConnectGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateCrossConnectGroup.");
    const pathParams = {
      "{crossConnectGroupId}": updateCrossConnectGroupRequest.crossConnectGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateCrossConnectGroupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/crossConnectGroups/{crossConnectGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateCrossConnectGroupRequest.updateCrossConnectGroupDetails,
        "UpdateCrossConnectGroupDetails",
        models.UpdateCrossConnectGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateCrossConnectGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateCrossConnectGroupResponse>{},
        body: await response.json(),
        bodyKey: "crossConnectGroup",
        bodyModel: "model.CrossConnectGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified set of DHCP options. You can update the display name or the options
* themselves. Avoid entering confidential information.
* <p>
Note that the `options` object you provide replaces the entire existing set of options.
* 
     * @param UpdateDhcpOptionsRequest
     * @return UpdateDhcpOptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDhcpOptions.ts.html |here} to see how to use UpdateDhcpOptions API.
     */
  public async updateDhcpOptions(
    updateDhcpOptionsRequest: requests.UpdateDhcpOptionsRequest
  ): Promise<responses.UpdateDhcpOptionsResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateDhcpOptions.");
    const pathParams = {
      "{dhcpId}": updateDhcpOptionsRequest.dhcpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDhcpOptionsRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/dhcps/{dhcpId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDhcpOptionsRequest.updateDhcpDetails,
        "UpdateDhcpDetails",
        models.UpdateDhcpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateDhcpOptionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDhcpOptionsResponse>{},
        body: await response.json(),
        bodyKey: "dhcpOptions",
        bodyModel: "model.DhcpOptions",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified DRG's display name or tags. Avoid entering confidential information.
   *
   * @param UpdateDrgRequest
   * @return UpdateDrgResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDrg.ts.html |here} to see how to use UpdateDrg API.
   */
  public async updateDrg(
    updateDrgRequest: requests.UpdateDrgRequest
  ): Promise<responses.UpdateDrgResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateDrg.");
    const pathParams = {
      "{drgId}": updateDrgRequest.drgId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDrgRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgs/{drgId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrgRequest.updateDrgDetails,
        "UpdateDrgDetails",
        models.UpdateDrgDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateDrgRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrgResponse>{},
        body: await response.json(),
        bodyKey: "drg",
        bodyModel: "model.Drg",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the display name for the specified `DrgAttachment`.
   * Avoid entering confidential information.
   *
   * @param UpdateDrgAttachmentRequest
   * @return UpdateDrgAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateDrgAttachment.ts.html |here} to see how to use UpdateDrgAttachment API.
   */
  public async updateDrgAttachment(
    updateDrgAttachmentRequest: requests.UpdateDrgAttachmentRequest
  ): Promise<responses.UpdateDrgAttachmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateDrgAttachment.");
    const pathParams = {
      "{drgAttachmentId}": updateDrgAttachmentRequest.drgAttachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDrgAttachmentRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/drgAttachments/{drgAttachmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDrgAttachmentRequest.updateDrgAttachmentDetails,
        "UpdateDrgAttachmentDetails",
        models.UpdateDrgAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateDrgAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDrgAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "drgAttachment",
        bodyModel: "model.DrgAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified IPSec connection.
* <p>
To update an individual IPSec tunnel's attributes, use
* {@link #updateIPSecConnectionTunnel(UpdateIPSecConnectionTunnelRequest) updateIPSecConnectionTunnel}.
* 
     * @param UpdateIPSecConnectionRequest
     * @return UpdateIPSecConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateIPSecConnection.ts.html |here} to see how to use UpdateIPSecConnection API.
     */
  public async updateIPSecConnection(
    updateIPSecConnectionRequest: requests.UpdateIPSecConnectionRequest
  ): Promise<responses.UpdateIPSecConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateIPSecConnection.");
    const pathParams = {
      "{ipscId}": updateIPSecConnectionRequest.ipscId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateIPSecConnectionRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateIPSecConnectionRequest.updateIPSecConnectionDetails,
        "UpdateIPSecConnectionDetails",
        models.UpdateIPSecConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateIPSecConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateIPSecConnectionResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnection",
        bodyModel: "model.IPSecConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified tunnel. This operation lets you change tunnel attributes such as the
   * routing type (BGP dynamic routing or static routing). Here are some important notes:
   * <p>
   * If you change the tunnel's routing type or BGP session configuration, the tunnel will go
   *     down while it's reprovisioned.
   * <p>
   * If you want to switch the tunnel's `routing` from `STATIC` to `BGP`, make sure the tunnel's
   *     BGP session configuration attributes have been set ({@link #bgpSessionInfo(BgpSessionInfoRequest) bgpSessionInfo}).
   * <p>
   * If you want to switch the tunnel's `routing` from `BGP` to `STATIC`, make sure the
   *     {@link IPSecConnection} already has at least one valid CIDR
   *     static route.
   *
   * @param UpdateIPSecConnectionTunnelRequest
   * @return UpdateIPSecConnectionTunnelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateIPSecConnectionTunnel.ts.html |here} to see how to use UpdateIPSecConnectionTunnel API.
   */
  public async updateIPSecConnectionTunnel(
    updateIPSecConnectionTunnelRequest: requests.UpdateIPSecConnectionTunnelRequest
  ): Promise<responses.UpdateIPSecConnectionTunnelResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateIPSecConnectionTunnel.");
    const pathParams = {
      "{ipscId}": updateIPSecConnectionTunnelRequest.ipscId,
      "{tunnelId}": updateIPSecConnectionTunnelRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateIPSecConnectionTunnelRequest.ifMatch,
      "opc-request-id": updateIPSecConnectionTunnelRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateIPSecConnectionTunnelRequest.updateIPSecConnectionTunnelDetails,
        "UpdateIPSecConnectionTunnelDetails",
        models.UpdateIPSecConnectionTunnelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateIPSecConnectionTunnelRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateIPSecConnectionTunnelResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionTunnel",
        bodyModel: "model.IPSecConnectionTunnel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the shared secret (pre-shared key) for the specified tunnel.
   * <p>
   **Important:** If you change the shared secret, the tunnel will go down while it's reprovisioned.
   *
   * @param UpdateIPSecConnectionTunnelSharedSecretRequest
   * @return UpdateIPSecConnectionTunnelSharedSecretResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateIPSecConnectionTunnelSharedSecret.ts.html |here} to see how to use UpdateIPSecConnectionTunnelSharedSecret API.
   */
  public async updateIPSecConnectionTunnelSharedSecret(
    updateIPSecConnectionTunnelSharedSecretRequest: requests.UpdateIPSecConnectionTunnelSharedSecretRequest
  ): Promise<responses.UpdateIPSecConnectionTunnelSharedSecretResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#updateIPSecConnectionTunnelSharedSecret."
      );
    const pathParams = {
      "{ipscId}": updateIPSecConnectionTunnelSharedSecretRequest.ipscId,
      "{tunnelId}": updateIPSecConnectionTunnelSharedSecretRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateIPSecConnectionTunnelSharedSecretRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/sharedSecret",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateIPSecConnectionTunnelSharedSecretRequest.updateIPSecConnectionTunnelSharedSecretDetails,
        "UpdateIPSecConnectionTunnelSharedSecretDetails",
        models.UpdateIPSecConnectionTunnelSharedSecretDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateIPSecConnectionTunnelSharedSecretRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateIPSecConnectionTunnelSharedSecretResponse>{},
        body: await response.json(),
        bodyKey: "iPSecConnectionTunnelSharedSecret",
        bodyModel: "model.IPSecConnectionTunnelSharedSecret",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified internet gateway. You can disable/enable it, or change its display name
* or tags. Avoid entering confidential information.
* <p>
If the gateway is disabled, that means no traffic will flow to/from the internet even if there's
* a route rule that enables that traffic.
* 
     * @param UpdateInternetGatewayRequest
     * @return UpdateInternetGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateInternetGateway.ts.html |here} to see how to use UpdateInternetGateway API.
     */
  public async updateInternetGateway(
    updateInternetGatewayRequest: requests.UpdateInternetGatewayRequest
  ): Promise<responses.UpdateInternetGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateInternetGateway.");
    const pathParams = {
      "{igId}": updateInternetGatewayRequest.igId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateInternetGatewayRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/internetGateways/{igId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateInternetGatewayRequest.updateInternetGatewayDetails,
        "UpdateInternetGatewayDetails",
        models.UpdateInternetGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateInternetGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateInternetGatewayResponse>{},
        body: await response.json(),
        bodyKey: "internetGateway",
        bodyModel: "model.InternetGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified IPv6. You must specify the object's OCID.
   * Use this operation if you want to:
   * <p>
   * Move an IPv6 to a different VNIC in the same subnet.
   *   * Enable/disable internet access for an IPv6.
   *   * Change the display name for an IPv6.
   *   * Update resource tags for an IPv6.
   *
   * @param UpdateIpv6Request
   * @return UpdateIpv6Response
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateIpv6.ts.html |here} to see how to use UpdateIpv6 API.
   */
  public async updateIpv6(
    updateIpv6Request: requests.UpdateIpv6Request
  ): Promise<responses.UpdateIpv6Response> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateIpv6.");
    const pathParams = {
      "{ipv6Id}": updateIpv6Request.ipv6Id
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateIpv6Request.ifMatch,
      "opc-request-id": updateIpv6Request.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipv6/{ipv6Id}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateIpv6Request.updateIpv6Details,
        "UpdateIpv6Details",
        models.UpdateIpv6Details.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateIpv6Request.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateIpv6Response>{},
        body: await response.json(),
        bodyKey: "ipv6",
        bodyModel: "model.Ipv6",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified local peering gateway (LPG).
   *
   * @param UpdateLocalPeeringGatewayRequest
   * @return UpdateLocalPeeringGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateLocalPeeringGateway.ts.html |here} to see how to use UpdateLocalPeeringGateway API.
   */
  public async updateLocalPeeringGateway(
    updateLocalPeeringGatewayRequest: requests.UpdateLocalPeeringGatewayRequest
  ): Promise<responses.UpdateLocalPeeringGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateLocalPeeringGateway.");
    const pathParams = {
      "{localPeeringGatewayId}": updateLocalPeeringGatewayRequest.localPeeringGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLocalPeeringGatewayRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/localPeeringGateways/{localPeeringGatewayId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLocalPeeringGatewayRequest.updateLocalPeeringGatewayDetails,
        "UpdateLocalPeeringGatewayDetails",
        models.UpdateLocalPeeringGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateLocalPeeringGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLocalPeeringGatewayResponse>{},
        body: await response.json(),
        bodyKey: "localPeeringGateway",
        bodyModel: "model.LocalPeeringGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified NAT gateway.
   *
   * @param UpdateNatGatewayRequest
   * @return UpdateNatGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateNatGateway.ts.html |here} to see how to use UpdateNatGateway API.
   */
  public async updateNatGateway(
    updateNatGatewayRequest: requests.UpdateNatGatewayRequest
  ): Promise<responses.UpdateNatGatewayResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateNatGateway.");
    const pathParams = {
      "{natGatewayId}": updateNatGatewayRequest.natGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateNatGatewayRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/natGateways/{natGatewayId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNatGatewayRequest.updateNatGatewayDetails,
        "UpdateNatGatewayDetails",
        models.UpdateNatGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateNatGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNatGatewayResponse>{},
        body: await response.json(),
        bodyKey: "natGateway",
        bodyModel: "model.NatGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified network security group.
* <p>
To add or remove an existing VNIC from the group, use
* {@link #updateVnic(UpdateVnicRequest) updateVnic}.
* <p>
To add a VNIC to the group *when you create the VNIC*, specify the NSG's OCID during creation.
* For example, see the `nsgIds` attribute in {@link #createVnicDetails(CreateVnicDetailsRequest) createVnicDetails}.
* <p>
To add or remove security rules from the group, use
* {@link #addNetworkSecurityGroupSecurityRules(AddNetworkSecurityGroupSecurityRulesRequest) addNetworkSecurityGroupSecurityRules}
* or
* {@link #removeNetworkSecurityGroupSecurityRules(RemoveNetworkSecurityGroupSecurityRulesRequest) removeNetworkSecurityGroupSecurityRules}.
* <p>
To edit the contents of existing security rules in the group, use
* {@link #updateNetworkSecurityGroupSecurityRules(UpdateNetworkSecurityGroupSecurityRulesRequest) updateNetworkSecurityGroupSecurityRules}.
* 
     * @param UpdateNetworkSecurityGroupRequest
     * @return UpdateNetworkSecurityGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateNetworkSecurityGroup.ts.html |here} to see how to use UpdateNetworkSecurityGroup API.
     */
  public async updateNetworkSecurityGroup(
    updateNetworkSecurityGroupRequest: requests.UpdateNetworkSecurityGroupRequest
  ): Promise<responses.UpdateNetworkSecurityGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateNetworkSecurityGroup.");
    const pathParams = {
      "{networkSecurityGroupId}": updateNetworkSecurityGroupRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateNetworkSecurityGroupRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNetworkSecurityGroupRequest.updateNetworkSecurityGroupDetails,
        "UpdateNetworkSecurityGroupDetails",
        models.UpdateNetworkSecurityGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateNetworkSecurityGroupRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNetworkSecurityGroupResponse>{},
        body: await response.json(),
        bodyKey: "networkSecurityGroup",
        bodyModel: "model.NetworkSecurityGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more security rules in the specified network security group.
   *
   * @param UpdateNetworkSecurityGroupSecurityRulesRequest
   * @return UpdateNetworkSecurityGroupSecurityRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use UpdateNetworkSecurityGroupSecurityRules API.
   */
  public async updateNetworkSecurityGroupSecurityRules(
    updateNetworkSecurityGroupSecurityRulesRequest: requests.UpdateNetworkSecurityGroupSecurityRulesRequest
  ): Promise<responses.UpdateNetworkSecurityGroupSecurityRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation VirtualNetworkClient#updateNetworkSecurityGroupSecurityRules."
      );
    const pathParams = {
      "{networkSecurityGroupId}":
        updateNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/updateSecurityRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateNetworkSecurityGroupSecurityRulesRequest.updateNetworkSecurityGroupSecurityRulesDetails,
        "UpdateNetworkSecurityGroupSecurityRulesDetails",
        models.UpdateNetworkSecurityGroupSecurityRulesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateNetworkSecurityGroupSecurityRulesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNetworkSecurityGroupSecurityRulesResponse>{},
        body: await response.json(),
        bodyKey: "updatedNetworkSecurityGroupSecurityRules",
        bodyModel: "model.UpdatedNetworkSecurityGroupSecurityRules",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified private IP. You must specify the object's OCID.
* Use this operation if you want to:
* <p>
  - Move a secondary private IP to a different VNIC in the same subnet.
*   - Change the display name for a secondary private IP.
*   - Change the hostname for a secondary private IP.
* <p>
This operation cannot be used with primary private IPs.
* To update the hostname for the primary IP on a VNIC, use
* {@link #updateVnic(UpdateVnicRequest) updateVnic}.
* 
     * @param UpdatePrivateIpRequest
     * @return UpdatePrivateIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdatePrivateIp.ts.html |here} to see how to use UpdatePrivateIp API.
     */
  public async updatePrivateIp(
    updatePrivateIpRequest: requests.UpdatePrivateIpRequest
  ): Promise<responses.UpdatePrivateIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updatePrivateIp.");
    const pathParams = {
      "{privateIpId}": updatePrivateIpRequest.privateIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updatePrivateIpRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/privateIps/{privateIpId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePrivateIpRequest.updatePrivateIpDetails,
        "UpdatePrivateIpDetails",
        models.UpdatePrivateIpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updatePrivateIpRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePrivateIpResponse>{},
        body: await response.json(),
        bodyKey: "privateIp",
        bodyModel: "model.PrivateIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified public IP. You must specify the object's OCID. Use this operation if you want to:
* <p>
* Assign a reserved public IP in your pool to a private IP.
* * Move a reserved public IP to a different private IP.
* * Unassign a reserved public IP from a private IP (which returns it to your pool
* of reserved public IPs).
* * Change the display name or tags for a public IP.
* <p>
Assigning, moving, and unassigning a reserved public IP are asynchronous
* operations. Poll the public IP's `lifecycleState` to determine if the operation
* succeeded.
* <p>
**Note:** When moving a reserved public IP, the target private IP
* must not already have a public IP with `lifecycleState` = ASSIGNING or ASSIGNED. If it
* does, an error is returned. Also, the initial unassignment from the original
* private IP always succeeds, but the assignment to the target private IP is asynchronous and
* could fail silently (for example, if the target private IP is deleted or has a different public IP
* assigned to it in the interim). If that occurs, the public IP remains unassigned and its
* `lifecycleState` switches to AVAILABLE (it is not reassigned to its original private IP).
* You must poll the public IP's `lifecycleState` to determine if the move succeeded.
* <p>
Regarding ephemeral public IPs:
* <p>
* If you want to assign an ephemeral public IP to a primary private IP, use
* {@link #createPublicIp(CreatePublicIpRequest) createPublicIp}.
* * You can't move an ephemeral public IP to a different private IP.
* * If you want to unassign an ephemeral public IP from its private IP, use
* {@link #deletePublicIp(DeletePublicIpRequest) deletePublicIp}, which
* unassigns and deletes the ephemeral public IP.
* <p>
**Note:** If a public IP is assigned to a secondary private
* IP (see {@link PrivateIp}), and you move that secondary
* private IP to another VNIC, the public IP moves with it.
* <p>
**Note:** There's a limit to the number of {@link PublicIp}
* a VNIC or instance can have. If you try to move a reserved public IP
* to a VNIC or instance that has already reached its public IP limit, an error is
* returned. For information about the public IP limits, see
* [Public IP Addresses](https://docs.cloud.oracle.com/Content/Network/Tasks/managingpublicIPs.htm).
* 
     * @param UpdatePublicIpRequest
     * @return UpdatePublicIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdatePublicIp.ts.html |here} to see how to use UpdatePublicIp API.
     */
  public async updatePublicIp(
    updatePublicIpRequest: requests.UpdatePublicIpRequest
  ): Promise<responses.UpdatePublicIpResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updatePublicIp.");
    const pathParams = {
      "{publicIpId}": updatePublicIpRequest.publicIpId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updatePublicIpRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIps/{publicIpId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePublicIpRequest.updatePublicIpDetails,
        "UpdatePublicIpDetails",
        models.UpdatePublicIpDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updatePublicIpRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePublicIpResponse>{},
        body: await response.json(),
        bodyKey: "publicIp",
        bodyModel: "model.PublicIp",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Public Ip Pool.
   *
   * @param UpdatePublicIpPoolRequest
   * @return UpdatePublicIpPoolResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdatePublicIpPool.ts.html |here} to see how to use UpdatePublicIpPool API.
   */
  public async updatePublicIpPool(
    updatePublicIpPoolRequest: requests.UpdatePublicIpPoolRequest
  ): Promise<responses.UpdatePublicIpPoolResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updatePublicIpPool.");
    const pathParams = {
      "{publicIpPoolId}": updatePublicIpPoolRequest.publicIpPoolId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updatePublicIpPoolRequest.opcRequestId,
      "if-match": updatePublicIpPoolRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/publicIpPools/{publicIpPoolId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updatePublicIpPoolRequest.updatePublicIpPoolDetails,
        "UpdatePublicIpPoolDetails",
        models.UpdatePublicIpPoolDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updatePublicIpPoolRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePublicIpPoolResponse>{},
        body: await response.json(),
        bodyKey: "publicIpPool",
        bodyModel: "model.PublicIpPool",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified remote peering connection (RPC).
   *
   * @param UpdateRemotePeeringConnectionRequest
   * @return UpdateRemotePeeringConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateRemotePeeringConnection.ts.html |here} to see how to use UpdateRemotePeeringConnection API.
   */
  public async updateRemotePeeringConnection(
    updateRemotePeeringConnectionRequest: requests.UpdateRemotePeeringConnectionRequest
  ): Promise<responses.UpdateRemotePeeringConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateRemotePeeringConnection.");
    const pathParams = {
      "{remotePeeringConnectionId}": updateRemotePeeringConnectionRequest.remotePeeringConnectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRemotePeeringConnectionRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/remotePeeringConnections/{remotePeeringConnectionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRemotePeeringConnectionRequest.updateRemotePeeringConnectionDetails,
        "UpdateRemotePeeringConnectionDetails",
        models.UpdateRemotePeeringConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateRemotePeeringConnectionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRemotePeeringConnectionResponse>{},
        body: await response.json(),
        bodyKey: "remotePeeringConnection",
        bodyModel: "model.RemotePeeringConnection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified route table's display name or route rules.
* Avoid entering confidential information.
* <p>
Note that the `routeRules` object you provide replaces the entire existing set of rules.
* 
     * @param UpdateRouteTableRequest
     * @return UpdateRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateRouteTable.ts.html |here} to see how to use UpdateRouteTable API.
     */
  public async updateRouteTable(
    updateRouteTableRequest: requests.UpdateRouteTableRequest
  ): Promise<responses.UpdateRouteTableResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateRouteTable.");
    const pathParams = {
      "{rtId}": updateRouteTableRequest.rtId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRouteTableRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/routeTables/{rtId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRouteTableRequest.updateRouteTableDetails,
        "UpdateRouteTableDetails",
        models.UpdateRouteTableDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateRouteTableRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRouteTableResponse>{},
        body: await response.json(),
        bodyKey: "routeTable",
        bodyModel: "model.RouteTable",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified security list's display name or rules.
* Avoid entering confidential information.
* <p>
Note that the `egressSecurityRules` or `ingressSecurityRules` objects you provide replace the entire
* existing objects.
* 
     * @param UpdateSecurityListRequest
     * @return UpdateSecurityListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateSecurityList.ts.html |here} to see how to use UpdateSecurityList API.
     */
  public async updateSecurityList(
    updateSecurityListRequest: requests.UpdateSecurityListRequest
  ): Promise<responses.UpdateSecurityListResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateSecurityList.");
    const pathParams = {
      "{securityListId}": updateSecurityListRequest.securityListId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSecurityListRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/securityLists/{securityListId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSecurityListRequest.updateSecurityListDetails,
        "UpdateSecurityListDetails",
        models.UpdateSecurityListDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateSecurityListRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSecurityListResponse>{},
        body: await response.json(),
        bodyKey: "securityList",
        bodyModel: "model.SecurityList",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified service gateway. The information you provide overwrites the existing
   * attributes of the gateway.
   *
   * @param UpdateServiceGatewayRequest
   * @return UpdateServiceGatewayResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateServiceGateway.ts.html |here} to see how to use UpdateServiceGateway API.
   */
  public async updateServiceGateway(
    updateServiceGatewayRequest: requests.UpdateServiceGatewayRequest
  ): Promise<responses.UpdateServiceGatewayResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateServiceGateway.");
    const pathParams = {
      "{serviceGatewayId}": updateServiceGatewayRequest.serviceGatewayId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateServiceGatewayRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/serviceGateways/{serviceGatewayId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateServiceGatewayRequest.updateServiceGatewayDetails,
        "UpdateServiceGatewayDetails",
        models.UpdateServiceGatewayDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateServiceGatewayRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateServiceGatewayResponse>{},
        body: await response.json(),
        bodyKey: "serviceGateway",
        bodyModel: "model.ServiceGateway",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified subnet.
   *
   * @param UpdateSubnetRequest
   * @return UpdateSubnetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateSubnet.ts.html |here} to see how to use UpdateSubnet API.
   */
  public async updateSubnet(
    updateSubnetRequest: requests.UpdateSubnetRequest
  ): Promise<responses.UpdateSubnetResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateSubnet.");
    const pathParams = {
      "{subnetId}": updateSubnetRequest.subnetId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSubnetRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/subnets/{subnetId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSubnetRequest.updateSubnetDetails,
        "UpdateSubnetDetails",
        models.UpdateSubnetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateSubnetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSubnetResponse>{},
        body: await response.json(),
        bodyKey: "subnet",
        bodyModel: "model.Subnet",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates or updates the set of CPE configuration answers for the specified tunnel.
   * The answers correlate to the questions that are specific to the CPE device type (see the
   * `parameters` attribute of {@link CpeDeviceShapeDetail}).
   *
   * @param UpdateTunnelCpeDeviceConfigRequest
   * @return UpdateTunnelCpeDeviceConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateTunnelCpeDeviceConfig.ts.html |here} to see how to use UpdateTunnelCpeDeviceConfig API.
   */
  public async updateTunnelCpeDeviceConfig(
    updateTunnelCpeDeviceConfigRequest: requests.UpdateTunnelCpeDeviceConfigRequest
  ): Promise<responses.UpdateTunnelCpeDeviceConfigResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateTunnelCpeDeviceConfig.");
    const pathParams = {
      "{ipscId}": updateTunnelCpeDeviceConfigRequest.ipscId,
      "{tunnelId}": updateTunnelCpeDeviceConfigRequest.tunnelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTunnelCpeDeviceConfigRequest.ifMatch,
      "opc-retry-token": updateTunnelCpeDeviceConfigRequest.opcRetryToken,
      "opc-request-id": updateTunnelCpeDeviceConfigRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/tunnelDeviceConfig",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTunnelCpeDeviceConfigRequest.updateTunnelCpeDeviceConfigDetails,
        "UpdateTunnelCpeDeviceConfigDetails",
        models.UpdateTunnelCpeDeviceConfigDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateTunnelCpeDeviceConfigRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTunnelCpeDeviceConfigResponse>{},
        body: await response.json(),
        bodyKey: "tunnelCpeDeviceConfig",
        bodyModel: "model.TunnelCpeDeviceConfig",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified VCN.
   *
   * @param UpdateVcnRequest
   * @return UpdateVcnResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVcn.ts.html |here} to see how to use UpdateVcn API.
   */
  public async updateVcn(
    updateVcnRequest: requests.UpdateVcnRequest
  ): Promise<responses.UpdateVcnResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateVcn.");
    const pathParams = {
      "{vcnId}": updateVcnRequest.vcnId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVcnRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vcns/{vcnId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVcnRequest.updateVcnDetails,
        "UpdateVcnDetails",
        models.UpdateVcnDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateVcnRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVcnResponse>{},
        body: await response.json(),
        bodyKey: "vcn",
        bodyModel: "model.Vcn",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified virtual circuit. This can be called by
* either the customer who owns the virtual circuit, or the
* provider (when provisioning or de-provisioning the virtual
* circuit from their end). The documentation for
* {@link #updateVirtualCircuitDetails(UpdateVirtualCircuitDetailsRequest) updateVirtualCircuitDetails}
* indicates who can update each property of the virtual circuit.
* <p>
**Important:** If the virtual circuit is working and in the
* PROVISIONED state, updating any of the network-related properties
* (such as the DRG being used, the BGP ASN, and so on) will cause the virtual
* circuit's state to switch to PROVISIONING and the related BGP
* session to go down. After Oracle re-provisions the virtual circuit,
* its state will return to PROVISIONED. Make sure you confirm that
* the associated BGP session is back up. For more information
* about the various states and how to test connectivity, see
* [FastConnect Overview](https://docs.cloud.oracle.com/Content/Network/Concepts/fastconnect.htm).
* <p>
To change the list of public IP prefixes for a public virtual circuit,
* use {@link #bulkAddVirtualCircuitPublicPrefixes(BulkAddVirtualCircuitPublicPrefixesRequest) bulkAddVirtualCircuitPublicPrefixes}
* and
* {@link #bulkDeleteVirtualCircuitPublicPrefixes(BulkDeleteVirtualCircuitPublicPrefixesRequest) bulkDeleteVirtualCircuitPublicPrefixes}.
* Updating the list of prefixes does NOT cause the BGP session to go down. However,
* Oracle must verify the customer's ownership of each added prefix before
* traffic for that prefix will flow across the virtual circuit.
* 
     * @param UpdateVirtualCircuitRequest
     * @return UpdateVirtualCircuitResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVirtualCircuit.ts.html |here} to see how to use UpdateVirtualCircuit API.
     */
  public async updateVirtualCircuit(
    updateVirtualCircuitRequest: requests.UpdateVirtualCircuitRequest
  ): Promise<responses.UpdateVirtualCircuitResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#updateVirtualCircuit.");
    const pathParams = {
      "{virtualCircuitId}": updateVirtualCircuitRequest.virtualCircuitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVirtualCircuitRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/virtualCircuits/{virtualCircuitId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVirtualCircuitRequest.updateVirtualCircuitDetails,
        "UpdateVirtualCircuitDetails",
        models.UpdateVirtualCircuitDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateVirtualCircuitRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVirtualCircuitResponse>{},
        body: await response.json(),
        bodyKey: "virtualCircuit",
        bodyModel: "model.VirtualCircuit",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified VLAN. This could result in changes to all
   * the VNICs in the VLAN, which can take time. During that transition
   * period, the VLAN will be in the UPDATING state.
   *
   * @param UpdateVlanRequest
   * @return UpdateVlanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVlan.ts.html |here} to see how to use UpdateVlan API.
   */
  public async updateVlan(
    updateVlanRequest: requests.UpdateVlanRequest
  ): Promise<responses.UpdateVlanResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateVlan.");
    const pathParams = {
      "{vlanId}": updateVlanRequest.vlanId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVlanRequest.ifMatch,
      "opc-request-id": updateVlanRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vlans/{vlanId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVlanRequest.updateVlanDetails,
        "UpdateVlanDetails",
        models.UpdateVlanDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateVlanRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVlanResponse>{},
        body: await response.json(),
        bodyKey: "vlan",
        bodyModel: "model.Vlan",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified VNIC.
   *
   * @param UpdateVnicRequest
   * @return UpdateVnicResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/UpdateVnic.ts.html |here} to see how to use UpdateVnic API.
   */
  public async updateVnic(
    updateVnicRequest: requests.UpdateVnicRequest
  ): Promise<responses.UpdateVnicResponse> {
    if (this.logger) this.logger.debug("Calling operation VirtualNetworkClient#updateVnic.");
    const pathParams = {
      "{vnicId}": updateVnicRequest.vnicId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVnicRequest.ifMatch
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vnics/{vnicId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVnicRequest.updateVnicDetails,
        "UpdateVnicDetails",
        models.UpdateVnicDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateVnicRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVnicResponse>{},
        body: await response.json(),
        bodyKey: "vnic",
        bodyModel: "model.Vnic",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * submit the Byoip Range for validation. This presumes the user has
   * updated their IP registry record in accordance to validation requirements
   *
   * @param ValidateByoipRangeRequest
   * @return ValidateByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/ValidateByoipRange.ts.html |here} to see how to use ValidateByoipRange API.
   */
  public async validateByoipRange(
    validateByoipRangeRequest: requests.ValidateByoipRangeRequest
  ): Promise<responses.ValidateByoipRangeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#validateByoipRange.");
    const pathParams = {
      "{byoipRangeId}": validateByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": validateByoipRangeRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}/actions/validate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      validateByoipRangeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateByoipRangeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * stop route advertisements for the Byoip Range prefix.
   *
   * @param WithdrawByoipRangeRequest
   * @return WithdrawByoipRangeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/core/WithdrawByoipRange.ts.html |here} to see how to use WithdrawByoipRange API.
   */
  public async withdrawByoipRange(
    withdrawByoipRangeRequest: requests.WithdrawByoipRangeRequest
  ): Promise<responses.WithdrawByoipRangeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation VirtualNetworkClient#withdrawByoipRange.");
    const pathParams = {
      "{byoipRangeId}": withdrawByoipRangeRequest.byoipRangeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": withdrawByoipRangeRequest.opcRequestId
    };

    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/byoipRanges/{byoipRangeId}/actions/withdraw",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      withdrawByoipRangeRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.WithdrawByoipRangeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

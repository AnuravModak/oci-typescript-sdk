/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Phase 2 Configuration Details
 */
export interface PhaseTwoConfigDetails {
  /**
   * Indicates whether custom phase two configuration is enabled.
   */
  "isCustomPhaseTwoConfig"?: boolean;
  /**
   * Phase two authentication algorithm supported during tunnel negotiation.
   *
   */
  "authenticationAlgorithm"?: PhaseTwoConfigDetails.AuthenticationAlgorithm;
  /**
   * Phase two encryption algorithm supported during tunnel negotiation.
   *
   */
  "encryptionAlgorithm"?: PhaseTwoConfigDetails.EncryptionAlgorithm;
  /**
   * Lifetime in seconds for IPSec phase two. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "lifetimeInSeconds"?: number;
  /**
   * Indicates whether perfect forward secrecy (PFS) is enabled.
   */
  "isPfsEnabled"?: boolean;
  /**
   * Diffie-Hellman group used for PFS.
   */
  "pfsDhGroup"?: PhaseTwoConfigDetails.PfsDhGroup;
}

export namespace PhaseTwoConfigDetails {
  export enum AuthenticationAlgorithm {
    HmacSha2256128 = "HMAC_SHA2_256_128",
    HmacSha1128 = "HMAC_SHA1_128"
  }

  export enum EncryptionAlgorithm {
    Aes256Gcm = "AES_256_GCM",
    Aes192Gcm = "AES_192_GCM",
    Aes128Gcm = "AES_128_GCM",
    Aes256Cbc = "AES_256_CBC",
    Aes192Cbc = "AES_192_CBC",
    Aes128Cbc = "AES_128_CBC"
  }

  export enum PfsDhGroup {
    Group2 = "GROUP2",
    Group5 = "GROUP5",
    Group14 = "GROUP14",
    Group19 = "GROUP19",
    Group20 = "GROUP20",
    Group24 = "GROUP24"
  }

  export function getJsonObj(obj: PhaseTwoConfigDetails): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: PhaseTwoConfigDetails): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}

/**
 * Data Integration API
 * Use the Data Integration Service APIs to perform common extract, load, and transform (ETL) tasks.
 * OpenAPI spec version: 20200430
 * Contact: di_dis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The `TypedObject` class is a base class for any model object that has a type.
 */
export interface TypedObject {
  /**
   * The key of the object.
   */
  "key"?: string;
  /**
   * The model version of an object.
   */
  "modelVersion"?: string;
  "parentRef"?: model.ParentReference;
  "configValues"?: model.ConfigValues;
  /**
   * The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
   */
  "objectStatus"?: number;
  /**
   * Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
   */
  "name"?: string;
  /**
   * Detailed description for the object.
   */
  "description"?: string;

  "modelType": string;
}

export namespace TypedObject {
  export function getJsonObj(obj: TypedObject): object {
    const jsonObj = {
      ...obj,
      ...{
        "parentRef": obj.parentRef ? model.ParentReference.getJsonObj(obj.parentRef) : undefined,
        "configValues": obj.configValues
          ? model.ConfigValues.getJsonObj(obj.configValues)
          : undefined
      }
    };

    if ("modelType" in obj && obj.modelType) {
      switch (obj.modelType) {
        case "OUTPUT_PORT":
          return model.OutputPort.getJsonObj(<model.OutputPort>(<object>jsonObj), true);
        case "DYNAMIC_INPUT_FIELD":
          return model.DynamicInputField.getJsonObj(
            <model.DynamicInputField>(<object>jsonObj),
            true
          );
        case "FIELD":
          return model.AbstractField.getJsonObj(<model.AbstractField>(<object>jsonObj), true);
        case "INPUT_FIELD":
          return model.InputField.getJsonObj(<model.InputField>(<object>jsonObj), true);
        case "SHAPE":
          return model.Shape.getJsonObj(<model.Shape>(<object>jsonObj), true);
        case "INPUT_PORT":
          return model.InputPort.getJsonObj(<model.InputPort>(<object>jsonObj), true);
        case "PROXY_FIELD":
          return model.ProxyField.getJsonObj(<model.ProxyField>(<object>jsonObj), true);
        case "DYNAMIC_PROXY_FIELD":
          return model.DynamicProxyField.getJsonObj(
            <model.DynamicProxyField>(<object>jsonObj),
            true
          );
        case "SHAPE_FIELD":
          return model.ShapeField.getJsonObj(<model.ShapeField>(<object>jsonObj), true);
        case "PARAMETER":
          return model.Parameter.getJsonObj(<model.Parameter>(<object>jsonObj), true);
        case "OUTPUT_FIELD":
          return model.OutputField.getJsonObj(<model.OutputField>(<object>jsonObj), true);
        case "MACRO_FIELD":
          return model.MacroField.getJsonObj(<model.MacroField>(<object>jsonObj), true);
        case "DERIVED_FIELD":
          return model.DerivedField.getJsonObj(<model.DerivedField>(<object>jsonObj), true);
        case "FLOW_PORT":
          return model.FlowPort.getJsonObj(<model.FlowPort>(<object>jsonObj), true);
        default:
          throw Error("Unknown value for: " + obj.modelType);
      }
    }
    return jsonObj;
  }
}

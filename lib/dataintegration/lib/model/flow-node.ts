/**
 * Data Integration API
 * Use the Data Integration Service APIs to perform common extract, load, and transform (ETL) tasks.
 * OpenAPI spec version: 20200430
 * Contact: di_dis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The flow node can be connected to other nodes in a data flow with input and output links and is bound to an opertor which defines the semantics of the node.
 */
export interface FlowNode {
  /**
   * The key of the object.
   */
  "key"?: string;
  /**
   * The type of the object.
   */
  "modelType"?: string;
  /**
   * The model version of an object.
   */
  "modelVersion"?: string;
  "parentRef"?: model.ParentReference;
  /**
   * Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
   */
  "name"?: string;
  /**
   * Detailed description for the object.
   */
  "description"?: string;
  /**
   * An array of input links.
   */
  "inputLinks"?: Array<model.InputLink>;
  /**
   * An array of output links.
   */
  "outputLinks"?: Array<model.OutputLink>;
  "operator"?:
    | model.Target
    | model.Joiner
    | model.Distinct
    | model.Filter
    | model.Aggregator
    | model.SortOper
    | model.Projection
    | model.Source;
  "uiProperties"?: model.UIProperties;
  "configProviderDelegate"?: model.ConfigProvider;
  /**
   * The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
   */
  "objectStatus"?: number;
}

export namespace FlowNode {
  export function getJsonObj(obj: FlowNode): object {
    const jsonObj = {
      ...obj,
      ...{
        "parentRef": obj.parentRef ? model.ParentReference.getJsonObj(obj.parentRef) : undefined,

        "inputLinks": obj.inputLinks
          ? obj.inputLinks.map(item => {
              return model.InputLink.getJsonObj(item);
            })
          : undefined,
        "outputLinks": obj.outputLinks
          ? obj.outputLinks.map(item => {
              return model.OutputLink.getJsonObj(item);
            })
          : undefined,
        "operator": obj.operator ? model.Operator.getJsonObj(obj.operator) : undefined,
        "uiProperties": obj.uiProperties
          ? model.UIProperties.getJsonObj(obj.uiProperties)
          : undefined,
        "configProviderDelegate": obj.configProviderDelegate
          ? model.ConfigProvider.getJsonObj(obj.configProviderDelegate)
          : undefined
      }
    };

    return jsonObj;
  }
}

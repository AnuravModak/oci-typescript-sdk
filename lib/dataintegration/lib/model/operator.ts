/**
 * Data Integration API
 * Use the Data Integration Service APIs to perform common extract, load, and transform (ETL) tasks.
 * OpenAPI spec version: 20200430
 * Contact: di_dis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * An operator defines some data integration semantics in a data flow. It may be reading/writing data or transforming the data.
 */
export interface Operator {
  /**
   * The key of the object.
   */
  "key"?: string;
  /**
   * The model version of an object.
   */
  "modelVersion"?: string;
  "parentRef"?: model.ParentReference;
  /**
   * Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
   */
  "name"?: string;
  /**
   * Details about the operator.
   */
  "description"?: string;
  /**
   * The version of the object that is used to track changes in the object instance.
   */
  "objectVersion"?: number;
  /**
   * An array of input ports.
   */
  "inputPorts"?: Array<model.InputPort>;
  /**
   * An array of output ports.
   */
  "outputPorts"?: Array<model.OutputPort>;
  /**
   * The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
   */
  "objectStatus"?: number;
  /**
   * Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
   */
  "identifier"?: string;
  /**
   * An array of parameters used in the data flow.
   */
  "parameters"?: Array<model.Parameter>;
  "opConfigValues"?: model.ConfigValues;

  "modelType": string;
}

export namespace Operator {
  export function getJsonObj(obj: Operator): object {
    const jsonObj = {
      ...obj,
      ...{
        "parentRef": obj.parentRef ? model.ParentReference.getJsonObj(obj.parentRef) : undefined,

        "inputPorts": obj.inputPorts
          ? obj.inputPorts.map(item => {
              return model.InputPort.getJsonObj(item);
            })
          : undefined,
        "outputPorts": obj.outputPorts
          ? obj.outputPorts.map(item => {
              return model.OutputPort.getJsonObj(item);
            })
          : undefined,

        "parameters": obj.parameters
          ? obj.parameters.map(item => {
              return model.Parameter.getJsonObj(item);
            })
          : undefined,
        "opConfigValues": obj.opConfigValues
          ? model.ConfigValues.getJsonObj(obj.opConfigValues)
          : undefined
      }
    };

    if ("modelType" in obj && obj.modelType) {
      switch (obj.modelType) {
        case "TARGET_OPERATOR":
          return model.Target.getJsonObj(<model.Target>(<object>jsonObj), true);
        case "JOINER_OPERATOR":
          return model.Joiner.getJsonObj(<model.Joiner>(<object>jsonObj), true);
        case "DISTINCT_OPERATOR":
          return model.Distinct.getJsonObj(<model.Distinct>(<object>jsonObj), true);
        case "FILTER_OPERATOR":
          return model.Filter.getJsonObj(<model.Filter>(<object>jsonObj), true);
        case "AGGREGATOR_OPERATOR":
          return model.Aggregator.getJsonObj(<model.Aggregator>(<object>jsonObj), true);
        case "SORT_OPERATOR":
          return model.SortOper.getJsonObj(<model.SortOper>(<object>jsonObj), true);
        case "PROJECTION_OPERATOR":
          return model.Projection.getJsonObj(<model.Projection>(<object>jsonObj), true);
        case "SOURCE_OPERATOR":
          return model.Source.getJsonObj(<model.Source>(<object>jsonObj), true);
        default:
          throw Error("Unknown value for: " + obj.modelType);
      }
    }
    return jsonObj;
  }
}

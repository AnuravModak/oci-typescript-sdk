/**
 * PGSQL Control Plane API
 * A description of the PGSQL Control Plane API
 * OpenAPI spec version: 20220915
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * DbInstance information.
 */
export interface DbInstance {
  /**
   * Unique identifier that is immutable on creation.
   */
  "id": string;
  /**
   * Display name of the DbInstance.
   */
  "displayName"?: string;
  /**
   * Description of the DbInstance.
   */
  "description"?: string;
  /**
   * The availability domain in which the DbInstance is placed.
   */
  "availabilityDomain": string;
  /**
   * The current state of the DbInstance.
   */
  "lifecycleState": DbInstance.LifecycleState;
  /**
   * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
   */
  "lifecycleDetails"?: string;
  /**
   * The time the the DbInstance was created. An RFC3339 formatted datetime string.
   */
  "timeCreated": Date;
  /**
   * The time the DbInstance was updated. An RFC3339 formatted datetime string.
   */
  "timeUpdated"?: Date;
}

export namespace DbInstance {
  export enum LifecycleState {
    Creating = "CREATING",
    Updating = "UPDATING",
    Active = "ACTIVE",
    Inactive = "INACTIVE",
    Deleting = "DELETING",
    Deleted = "DELETED",
    Failed = "FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: DbInstance): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DbInstance): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}

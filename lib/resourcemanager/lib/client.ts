/**
 * Resource Manager API
 * API for the Resource Manager service.
Use this API to install, configure, and manage resources via the "infrastructure-as-code" model.
For more information, see
[Overview of Resource Manager](/iaas/Content/ResourceManager/Concepts/resourcemanager.htm).

 * OpenAPI spec version: 20180917
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { ResourceManagerWaiter } from "./resourcemanager-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ResourceManagerApiKeys {}

export class ResourceManagerClient {
  protected static serviceEndpointTemplate = "https://resourcemanager.{region}.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ResourceManagerWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    if (!this._circuitBreaker && common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!)) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20180917";
    if (this.logger) this.logger.info(`ResourceManagerClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ResourceManagerClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ResourceManagerClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new ResourceManagerWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ResourceManagerWaiter {
    this._waiters = new ResourceManagerWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ResourceManagerWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Indicates the intention to cancel the specified job.
   * Cancellation of the job is not immediate, and may be delayed,
   * or may not happen at all.
   *
   * @param CancelJobRequest
   * @return CancelJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/CancelJob.ts.html |here} to see how to use CancelJob API.
   */
  public async cancelJob(
    cancelJobRequest: requests.CancelJobRequest
  ): Promise<responses.CancelJobResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#cancelJob.");
    const pathParams = {
      "{jobId}": cancelJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": cancelJobRequest.opcRequestId,
      "if-match": cancelJobRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      cancelJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a configuration source provider into a different compartment within the same tenancy.
   * For information about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeConfigurationSourceProviderCompartmentRequest
   * @return ChangeConfigurationSourceProviderCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ChangeConfigurationSourceProviderCompartment.ts.html |here} to see how to use ChangeConfigurationSourceProviderCompartment API.
   */
  public async changeConfigurationSourceProviderCompartment(
    changeConfigurationSourceProviderCompartmentRequest: requests.ChangeConfigurationSourceProviderCompartmentRequest
  ): Promise<responses.ChangeConfigurationSourceProviderCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ResourceManagerClient#changeConfigurationSourceProviderCompartment."
      );
    const pathParams = {
      "{configurationSourceProviderId}":
        changeConfigurationSourceProviderCompartmentRequest.configurationSourceProviderId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeConfigurationSourceProviderCompartmentRequest.ifMatch,
      "opc-request-id": changeConfigurationSourceProviderCompartmentRequest.opcRequestId,
      "opc-retry-token": changeConfigurationSourceProviderCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeConfigurationSourceProviderCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/configurationSourceProviders/{configurationSourceProviderId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeConfigurationSourceProviderCompartmentRequest.changeConfigurationSourceProviderCompartmentDetails,
        "ChangeConfigurationSourceProviderCompartmentDetails",
        model.ChangeConfigurationSourceProviderCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeConfigurationSourceProviderCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Stack and it's associated Jobs into a different compartment.
   * @param ChangeStackCompartmentRequest
   * @return ChangeStackCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ChangeStackCompartment.ts.html |here} to see how to use ChangeStackCompartment API.
   */
  public async changeStackCompartment(
    changeStackCompartmentRequest: requests.ChangeStackCompartmentRequest
  ): Promise<responses.ChangeStackCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ResourceManagerClient#changeStackCompartment.");
    const pathParams = {
      "{stackId}": changeStackCompartmentRequest.stackId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeStackCompartmentRequest.ifMatch,
      "opc-request-id": changeStackCompartmentRequest.opcRequestId,
      "opc-retry-token": changeStackCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeStackCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/stacks/{stackId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeStackCompartmentRequest.changeStackCompartmentDetails,
        "ChangeStackCompartmentDetails",
        model.ChangeStackCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeStackCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a template into a different compartment within the same tenancy.
   * For information about moving resources between compartments, see
   * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeTemplateCompartmentRequest
   * @return ChangeTemplateCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ChangeTemplateCompartment.ts.html |here} to see how to use ChangeTemplateCompartment API.
   */
  public async changeTemplateCompartment(
    changeTemplateCompartmentRequest: requests.ChangeTemplateCompartmentRequest
  ): Promise<responses.ChangeTemplateCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ResourceManagerClient#changeTemplateCompartment.");
    const pathParams = {
      "{templateId}": changeTemplateCompartmentRequest.templateId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeTemplateCompartmentRequest.ifMatch,
      "opc-request-id": changeTemplateCompartmentRequest.opcRequestId,
      "opc-retry-token": changeTemplateCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeTemplateCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/templates/{templateId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeTemplateCompartmentRequest.changeTemplateCompartmentDetails,
        "ChangeTemplateCompartmentDetails",
        model.ChangeTemplateCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeTemplateCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a configuration source provider in the specified compartment.
   * For more information, see
   * [To create a configuration source provider](https://docs.cloud.oracle.com/iaas/Content/ResourceManager/Tasks/managingstacksandjobs.htm#CreateConfigurationSourceProvider).
   *
   * @param CreateConfigurationSourceProviderRequest
   * @return CreateConfigurationSourceProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/CreateConfigurationSourceProvider.ts.html |here} to see how to use CreateConfigurationSourceProvider API.
   */
  public async createConfigurationSourceProvider(
    createConfigurationSourceProviderRequest: requests.CreateConfigurationSourceProviderRequest
  ): Promise<responses.CreateConfigurationSourceProviderResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ResourceManagerClient#createConfigurationSourceProvider."
      );
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createConfigurationSourceProviderRequest.opcRequestId,
      "opc-retry-token": createConfigurationSourceProviderRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createConfigurationSourceProviderRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configurationSourceProviders",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createConfigurationSourceProviderRequest.createConfigurationSourceProviderDetails,
        "CreateConfigurationSourceProviderDetails",
        model.CreateConfigurationSourceProviderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateConfigurationSourceProviderResponse>{},
        body: await response.json(),
        bodyKey: "configurationSourceProvider",
        bodyModel: model.ConfigurationSourceProvider,
        type: "model.ConfigurationSourceProvider",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a job.
   * @param CreateJobRequest
   * @return CreateJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/CreateJob.ts.html |here} to see how to use CreateJob API.
   */
  public async createJob(
    createJobRequest: requests.CreateJobRequest
  ): Promise<responses.CreateJobResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#createJob.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createJobRequest.opcRequestId,
      "opc-retry-token": createJobRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createJobRequest.createJobDetails,
        "CreateJobDetails",
        model.CreateJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a stack in the specified compartment.
   * You can create a stack from a Terraform configuration.
   * The Terraform configuration can be directly uploaded or referenced from a source code control system.
   * You can also create a stack from an existing compartment.
   * You can also upload the Terraform configuration from an Object Storage bucket.
   * For more information, see
   * [To create a stack](https://docs.cloud.oracle.com/iaas/Content/ResourceManager/Tasks/managingstacksandjobs.htm#CreateStack).
   *
   * @param CreateStackRequest
   * @return CreateStackResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/CreateStack.ts.html |here} to see how to use CreateStack API.
   */
  public async createStack(
    createStackRequest: requests.CreateStackRequest
  ): Promise<responses.CreateStackResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#createStack.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createStackRequest.opcRequestId,
      "opc-retry-token": createStackRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createStackRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/stacks",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createStackRequest.createStackDetails,
        "CreateStackDetails",
        model.CreateStackDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateStackResponse>{},
        body: await response.json(),
        bodyKey: "stack",
        bodyModel: model.Stack,
        type: "model.Stack",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a custom template in the specified compartment.
   *
   * @param CreateTemplateRequest
   * @return CreateTemplateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/CreateTemplate.ts.html |here} to see how to use CreateTemplate API.
   */
  public async createTemplate(
    createTemplateRequest: requests.CreateTemplateRequest
  ): Promise<responses.CreateTemplateResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#createTemplate.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createTemplateRequest.opcRequestId,
      "opc-retry-token": createTemplateRequest.opcRetryToken,
      "oci-splat-generated-ocids": createTemplateRequest.ociSplatGeneratedOcids
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createTemplateRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/templates",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTemplateRequest.createTemplateDetails,
        "CreateTemplateDetails",
        model.CreateTemplateDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTemplateResponse>{},
        body: await response.json(),
        bodyKey: "template",
        bodyModel: model.Template,
        type: "model.Template",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified configuration source provider.
   * @param DeleteConfigurationSourceProviderRequest
   * @return DeleteConfigurationSourceProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/DeleteConfigurationSourceProvider.ts.html |here} to see how to use DeleteConfigurationSourceProvider API.
   */
  public async deleteConfigurationSourceProvider(
    deleteConfigurationSourceProviderRequest: requests.DeleteConfigurationSourceProviderRequest
  ): Promise<responses.DeleteConfigurationSourceProviderResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ResourceManagerClient#deleteConfigurationSourceProvider."
      );
    const pathParams = {
      "{configurationSourceProviderId}":
        deleteConfigurationSourceProviderRequest.configurationSourceProviderId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteConfigurationSourceProviderRequest.opcRequestId,
      "if-match": deleteConfigurationSourceProviderRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteConfigurationSourceProviderRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configurationSourceProviders/{configurationSourceProviderId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteConfigurationSourceProviderResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified stack object.
   * @param DeleteStackRequest
   * @return DeleteStackResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/DeleteStack.ts.html |here} to see how to use DeleteStack API.
   */
  public async deleteStack(
    deleteStackRequest: requests.DeleteStackRequest
  ): Promise<responses.DeleteStackResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#deleteStack.");
    const pathParams = {
      "{stackId}": deleteStackRequest.stackId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteStackRequest.opcRequestId,
      "if-match": deleteStackRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteStackRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/stacks/{stackId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteStackResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified template.
   * @param DeleteTemplateRequest
   * @return DeleteTemplateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/DeleteTemplate.ts.html |here} to see how to use DeleteTemplate API.
   */
  public async deleteTemplate(
    deleteTemplateRequest: requests.DeleteTemplateRequest
  ): Promise<responses.DeleteTemplateResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#deleteTemplate.");
    const pathParams = {
      "{templateId}": deleteTemplateRequest.templateId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteTemplateRequest.opcRequestId,
      "if-match": deleteTemplateRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteTemplateRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/templates/{templateId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTemplateResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Checks drift status for the specified stack.
   * @param DetectStackDriftRequest
   * @return DetectStackDriftResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/DetectStackDrift.ts.html |here} to see how to use DetectStackDrift API.
   */
  public async detectStackDrift(
    detectStackDriftRequest: requests.DetectStackDriftRequest
  ): Promise<responses.DetectStackDriftResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#detectStackDrift.");
    const pathParams = {
      "{stackId}": detectStackDriftRequest.stackId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": detectStackDriftRequest.ifMatch,
      "opc-request-id": detectStackDriftRequest.opcRequestId,
      "opc-retry-token": detectStackDriftRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      detectStackDriftRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/stacks/{stackId}/actions/detectDrift",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detectStackDriftRequest.detectStackDriftDetails,
        "DetectStackDriftDetails",
        model.DetectStackDriftDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DetectStackDriftResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the properties of the specified configuration source provider.
   * @param GetConfigurationSourceProviderRequest
   * @return GetConfigurationSourceProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetConfigurationSourceProvider.ts.html |here} to see how to use GetConfigurationSourceProvider API.
   */
  public async getConfigurationSourceProvider(
    getConfigurationSourceProviderRequest: requests.GetConfigurationSourceProviderRequest
  ): Promise<responses.GetConfigurationSourceProviderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ResourceManagerClient#getConfigurationSourceProvider.");
    const pathParams = {
      "{configurationSourceProviderId}":
        getConfigurationSourceProviderRequest.configurationSourceProviderId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConfigurationSourceProviderRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getConfigurationSourceProviderRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configurationSourceProviders/{configurationSourceProviderId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConfigurationSourceProviderResponse>{},
        body: await response.json(),
        bodyKey: "configurationSourceProvider",
        bodyModel: model.ConfigurationSourceProvider,
        type: "model.ConfigurationSourceProvider",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the specified job along with the job details.
   * @param GetJobRequest
   * @return GetJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetJob.ts.html |here} to see how to use GetJob API.
   */
  public async getJob(getJobRequest: requests.GetJobRequest): Promise<responses.GetJobResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#getJob.");
    const pathParams = {
      "{jobId}": getJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns log entries for the specified job in JSON format.
   *
   * @param GetJobLogsRequest
   * @return GetJobLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetJobLogs.ts.html |here} to see how to use GetJobLogs API.
   */
  public async getJobLogs(
    getJobLogsRequest: requests.GetJobLogsRequest
  ): Promise<responses.GetJobLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#getJobLogs.");
    const pathParams = {
      "{jobId}": getJobLogsRequest.jobId
    };

    const queryParams = {
      "type": getJobLogsRequest.type,
      "levelGreaterThanOrEqualTo": getJobLogsRequest.levelGreaterThanOrEqualTo,
      "sortOrder": getJobLogsRequest.sortOrder,
      "limit": getJobLogsRequest.limit,
      "page": getJobLogsRequest.page,
      "timestampGreaterThanOrEqualTo": getJobLogsRequest.timestampGreaterThanOrEqualTo,
      "timestampLessThanOrEqualTo": getJobLogsRequest.timestampLessThanOrEqualTo
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobLogsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getJobLogsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.LogEntry,
        type: "Array<model.LogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.LogEntry objects
   * contained in responses from the getJobLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllJobLogs(request: requests.GetJobLogsRequest): AsyncIterableIterator<model.LogEntry> {
    return paginateRecords(request, req => this.getJobLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the getJobLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllJobLogsResponses(
    request: requests.GetJobLogsRequest
  ): AsyncIterableIterator<responses.GetJobLogsResponse> {
    return paginateResponses(request, req => this.getJobLogs(req));
  }

  /**
   * Returns raw log file for the specified job in text format.
   * Returns a maximum of 100,000 log entries.
   *
   * @param GetJobLogsContentRequest
   * @return GetJobLogsContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetJobLogsContent.ts.html |here} to see how to use GetJobLogsContent API.
   */
  public async getJobLogsContent(
    getJobLogsContentRequest: requests.GetJobLogsContentRequest
  ): Promise<responses.GetJobLogsContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ResourceManagerClient#getJobLogsContent.");
    const pathParams = {
      "{jobId}": getJobLogsContentRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobLogsContentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getJobLogsContentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/logs/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobLogsContentResponse>{},

        body: await response.text(),
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the Terraform configuration file for the specified job in .zip format.
   * Returns an error if no zip file is found.
   *
   * @param GetJobTfConfigRequest
   * @return GetJobTfConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetJobTfConfig.ts.html |here} to see how to use GetJobTfConfig API.
   */
  public async getJobTfConfig(
    getJobTfConfigRequest: requests.GetJobTfConfigRequest
  ): Promise<responses.GetJobTfConfigResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#getJobTfConfig.");
    const pathParams = {
      "{jobId}": getJobTfConfigRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobTfConfigRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getJobTfConfigRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/tfConfig",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobTfConfigResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the Terraform state for the specified job.
   * @param GetJobTfStateRequest
   * @return GetJobTfStateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetJobTfState.ts.html |here} to see how to use GetJobTfState API.
   */
  public async getJobTfState(
    getJobTfStateRequest: requests.GetJobTfStateRequest
  ): Promise<responses.GetJobTfStateResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#getJobTfState.");
    const pathParams = {
      "{jobId}": getJobTfStateRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobTfStateRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getJobTfStateRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/tfState",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobTfStateResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a stack using the stack ID.
   * @param GetStackRequest
   * @return GetStackResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetStack.ts.html |here} to see how to use GetStack API.
   */
  public async getStack(
    getStackRequest: requests.GetStackRequest
  ): Promise<responses.GetStackResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#getStack.");
    const pathParams = {
      "{stackId}": getStackRequest.stackId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getStackRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getStackRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/stacks/{stackId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetStackResponse>{},
        body: await response.json(),
        bodyKey: "stack",
        bodyModel: model.Stack,
        type: "model.Stack",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the Terraform configuration file in .zip format for the specified stack.
   * Returns an error if no zip file is found.
   *
   * @param GetStackTfConfigRequest
   * @return GetStackTfConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetStackTfConfig.ts.html |here} to see how to use GetStackTfConfig API.
   */
  public async getStackTfConfig(
    getStackTfConfigRequest: requests.GetStackTfConfigRequest
  ): Promise<responses.GetStackTfConfigResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#getStackTfConfig.");
    const pathParams = {
      "{stackId}": getStackTfConfigRequest.stackId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getStackTfConfigRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getStackTfConfigRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/stacks/{stackId}/tfConfig",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetStackTfConfigResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the Terraform state for the specified stack.
   * @param GetStackTfStateRequest
   * @return GetStackTfStateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetStackTfState.ts.html |here} to see how to use GetStackTfState API.
   */
  public async getStackTfState(
    getStackTfStateRequest: requests.GetStackTfStateRequest
  ): Promise<responses.GetStackTfStateResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#getStackTfState.");
    const pathParams = {
      "{stackId}": getStackTfStateRequest.stackId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getStackTfStateRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getStackTfStateRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/stacks/{stackId}/tfState",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetStackTfStateResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified template.
   * @param GetTemplateRequest
   * @return GetTemplateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetTemplate.ts.html |here} to see how to use GetTemplate API.
   */
  public async getTemplate(
    getTemplateRequest: requests.GetTemplateRequest
  ): Promise<responses.GetTemplateResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#getTemplate.");
    const pathParams = {
      "{templateId}": getTemplateRequest.templateId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTemplateRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTemplateRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/templates/{templateId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTemplateResponse>{},
        body: await response.json(),
        bodyKey: "template",
        bodyModel: model.Template,
        type: "model.Template",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the Terraform logo file in .logo format for the specified template.
   * Returns an error if no logo file is found.
   *
   * @param GetTemplateLogoRequest
   * @return GetTemplateLogoResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetTemplateLogo.ts.html |here} to see how to use GetTemplateLogo API.
   */
  public async getTemplateLogo(
    getTemplateLogoRequest: requests.GetTemplateLogoRequest
  ): Promise<responses.GetTemplateLogoResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#getTemplateLogo.");
    const pathParams = {
      "{templateId}": getTemplateLogoRequest.templateId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTemplateLogoRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTemplateLogoRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/templates/{templateId}/logo",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTemplateLogoResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the Terraform configuration file in .zip format for the specified template.
   * Returns an error if no zip file is found.
   *
   * @param GetTemplateTfConfigRequest
   * @return GetTemplateTfConfigResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetTemplateTfConfig.ts.html |here} to see how to use GetTemplateTfConfig API.
   */
  public async getTemplateTfConfig(
    getTemplateTfConfigRequest: requests.GetTemplateTfConfigRequest
  ): Promise<responses.GetTemplateTfConfigResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ResourceManagerClient#getTemplateTfConfig.");
    const pathParams = {
      "{templateId}": getTemplateTfConfigRequest.templateId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTemplateTfConfigRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTemplateTfConfigRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/templates/{templateId}/tfConfig",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTemplateTfConfigResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return the given work request.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#getWorkRequest.");
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getWorkRequestRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists configuration source providers according to the specified filter.
   * - For `compartmentId`, lists all configuration source providers in the matching compartment.
   * - For `configurationSourceProviderId`, lists the matching configuration source provider.
   *
   * @param ListConfigurationSourceProvidersRequest
   * @return ListConfigurationSourceProvidersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ListConfigurationSourceProviders.ts.html |here} to see how to use ListConfigurationSourceProviders API.
   */
  public async listConfigurationSourceProviders(
    listConfigurationSourceProvidersRequest: requests.ListConfigurationSourceProvidersRequest
  ): Promise<responses.ListConfigurationSourceProvidersResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ResourceManagerClient#listConfigurationSourceProviders."
      );
    const pathParams = {};

    const queryParams = {
      "compartmentId": listConfigurationSourceProvidersRequest.compartmentId,
      "configurationSourceProviderId":
        listConfigurationSourceProvidersRequest.configurationSourceProviderId,
      "displayName": listConfigurationSourceProvidersRequest.displayName,
      "sortBy": listConfigurationSourceProvidersRequest.sortBy,
      "sortOrder": listConfigurationSourceProvidersRequest.sortOrder,
      "limit": listConfigurationSourceProvidersRequest.limit,
      "page": listConfigurationSourceProvidersRequest.page,
      "configSourceProviderType": listConfigurationSourceProvidersRequest.configSourceProviderType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listConfigurationSourceProvidersRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listConfigurationSourceProvidersRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configurationSourceProviders",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConfigurationSourceProvidersResponse>{},
        body: await response.json(),
        bodyKey: "configurationSourceProviderCollection",
        bodyModel: model.ConfigurationSourceProviderCollection,
        type: "model.ConfigurationSourceProviderCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a list of jobs in a stack or compartment, ordered by time created.
* <p>
- To list all jobs in a stack, provide the stack [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* - To list all jobs in a compartment, provide the compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* - To return a specific job, provide the job [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
* 
     * @param ListJobsRequest
     * @return ListJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ListJobs.ts.html |here} to see how to use ListJobs API.
     */
  public async listJobs(
    listJobsRequest: requests.ListJobsRequest
  ): Promise<responses.ListJobsResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#listJobs.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJobsRequest.compartmentId,
      "stackId": listJobsRequest.stackId,
      "id": listJobsRequest.id,
      "lifecycleState": listJobsRequest.lifecycleState,
      "displayName": listJobsRequest.displayName,
      "sortBy": listJobsRequest.sortBy,
      "sortOrder": listJobsRequest.sortOrder,
      "limit": listJobsRequest.limit,
      "page": listJobsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listJobsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.JobSummary,
        type: "Array<model.JobSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.JobSummary objects
   * contained in responses from the listJobs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllJobs(request: requests.ListJobsRequest): AsyncIterableIterator<model.JobSummary> {
    return paginateRecords(request, req => this.listJobs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listJobs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllJobsResponses(
    request: requests.ListJobsRequest
  ): AsyncIterableIterator<responses.ListJobsResponse> {
    return paginateResponses(request, req => this.listJobs(req));
  }

  /**
   * Returns a list of supported services for Resource Discovery. For reference on service names, see the [Terraform provider documentation](https://www.terraform.io/docs/providers/oci/guides/resource_discovery.html#services).
   *
   * @param ListResourceDiscoveryServicesRequest
   * @return ListResourceDiscoveryServicesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ListResourceDiscoveryServices.ts.html |here} to see how to use ListResourceDiscoveryServices API.
   */
  public async listResourceDiscoveryServices(
    listResourceDiscoveryServicesRequest: requests.ListResourceDiscoveryServicesRequest
  ): Promise<responses.ListResourceDiscoveryServicesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ResourceManagerClient#listResourceDiscoveryServices.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listResourceDiscoveryServicesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResourceDiscoveryServicesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listResourceDiscoveryServicesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resourceDiscoveryServices",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResourceDiscoveryServicesResponse>{},
        body: await response.json(),
        bodyKey: "resourceDiscoveryServiceCollection",
        bodyModel: model.ResourceDiscoveryServiceCollection,
        type: "model.ResourceDiscoveryServiceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists drift status details for each resource defined in the specified stack.
   * The drift status details for a given resource indicate differences, if any, between the actual state
   * and the expected (defined) state for that resource.
   * The drift status details correspond to the specified work request (`workRequestId`).
   * If no work request is specified, then the drift status details correspond to the latest completed work request for the stack.
   *
   * @param ListStackResourceDriftDetailsRequest
   * @return ListStackResourceDriftDetailsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ListStackResourceDriftDetails.ts.html |here} to see how to use ListStackResourceDriftDetails API.
   */
  public async listStackResourceDriftDetails(
    listStackResourceDriftDetailsRequest: requests.ListStackResourceDriftDetailsRequest
  ): Promise<responses.ListStackResourceDriftDetailsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ResourceManagerClient#listStackResourceDriftDetails.");
    const pathParams = {
      "{stackId}": listStackResourceDriftDetailsRequest.stackId
    };

    const queryParams = {
      "workRequestId": listStackResourceDriftDetailsRequest.workRequestId,
      "resourceDriftStatus": listStackResourceDriftDetailsRequest.resourceDriftStatus,
      "limit": listStackResourceDriftDetailsRequest.limit,
      "page": listStackResourceDriftDetailsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listStackResourceDriftDetailsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listStackResourceDriftDetailsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/stacks/{stackId}/actions/listResourceDriftDetails",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListStackResourceDriftDetailsResponse>{},
        body: await response.json(),
        bodyKey: "stackResourceDriftCollection",
        bodyModel: model.StackResourceDriftCollection,
        type: "model.StackResourceDriftCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of stacks.
   * - If called using the compartment ID, returns all stacks in the specified compartment.
   * - If called using the stack ID, returns the specified stack.
   *
   * @param ListStacksRequest
   * @return ListStacksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ListStacks.ts.html |here} to see how to use ListStacks API.
   */
  public async listStacks(
    listStacksRequest: requests.ListStacksRequest
  ): Promise<responses.ListStacksResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#listStacks.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listStacksRequest.compartmentId,
      "id": listStacksRequest.id,
      "lifecycleState": listStacksRequest.lifecycleState,
      "displayName": listStacksRequest.displayName,
      "sortBy": listStacksRequest.sortBy,
      "sortOrder": listStacksRequest.sortOrder,
      "limit": listStacksRequest.limit,
      "page": listStacksRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listStacksRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listStacksRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/stacks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListStacksResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.StackSummary,
        type: "Array<model.StackSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.StackSummary objects
   * contained in responses from the listStacks operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllStacks(
    request: requests.ListStacksRequest
  ): AsyncIterableIterator<model.StackSummary> {
    return paginateRecords(request, req => this.listStacks(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listStacks operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllStacksResponses(
    request: requests.ListStacksRequest
  ): AsyncIterableIterator<responses.ListStacksResponse> {
    return paginateResponses(request, req => this.listStacks(req));
  }

  /**
   * Lists template categories.
   *
   * @param ListTemplateCategoriesRequest
   * @return ListTemplateCategoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ListTemplateCategories.ts.html |here} to see how to use ListTemplateCategories API.
   */
  public async listTemplateCategories(
    listTemplateCategoriesRequest: requests.ListTemplateCategoriesRequest
  ): Promise<responses.ListTemplateCategoriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ResourceManagerClient#listTemplateCategories.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTemplateCategoriesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listTemplateCategoriesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/templateCategories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTemplateCategoriesResponse>{},
        body: await response.json(),
        bodyKey: "templateCategorySummaryCollection",
        bodyModel: model.TemplateCategorySummaryCollection,
        type: "model.TemplateCategorySummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists templates according to the specified filter.
   *
   * @param ListTemplatesRequest
   * @return ListTemplatesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ListTemplates.ts.html |here} to see how to use ListTemplates API.
   */
  public async listTemplates(
    listTemplatesRequest: requests.ListTemplatesRequest
  ): Promise<responses.ListTemplatesResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#listTemplates.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listTemplatesRequest.compartmentId,
      "templateCategoryId": listTemplatesRequest.templateCategoryId,
      "templateId": listTemplatesRequest.templateId,
      "displayName": listTemplatesRequest.displayName,
      "sortBy": listTemplatesRequest.sortBy,
      "sortOrder": listTemplatesRequest.sortOrder,
      "limit": listTemplatesRequest.limit,
      "page": listTemplatesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTemplatesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listTemplatesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/templates",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTemplatesResponse>{},
        body: await response.json(),
        bodyKey: "templateSummaryCollection",
        bodyModel: model.TemplateSummaryCollection,
        type: "model.TemplateSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of supported Terraform versions for use with stacks.
   *
   * @param ListTerraformVersionsRequest
   * @return ListTerraformVersionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ListTerraformVersions.ts.html |here} to see how to use ListTerraformVersions API.
   */
  public async listTerraformVersions(
    listTerraformVersionsRequest: requests.ListTerraformVersionsRequest
  ): Promise<responses.ListTerraformVersionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ResourceManagerClient#listTerraformVersions.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listTerraformVersionsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTerraformVersionsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listTerraformVersionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/terraformVersions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTerraformVersionsResponse>{},
        body: await response.json(),
        bodyKey: "terraformVersionCollection",
        bodyModel: model.TerraformVersionCollection,
        type: "model.TerraformVersionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of errors for a given work request.
   *
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ResourceManagerClient#listWorkRequestErrors.");
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "compartmentId": listWorkRequestErrorsRequest.compartmentId,
      "limit": listWorkRequestErrorsRequest.limit,
      "page": listWorkRequestErrorsRequest.page,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestErrorsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Return a (paginated) list of logs for a given work request.
   *
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ResourceManagerClient#listWorkRequestLogs.");
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "compartmentId": listWorkRequestLogsRequest.compartmentId,
      "limit": listWorkRequestLogsRequest.limit,
      "page": listWorkRequestLogsRequest.page,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestLogsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Lists the work requests in a given compartment or for a given resource.
   *
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#listWorkRequests.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "resourceId": listWorkRequestsRequest.resourceId,
      "limit": listWorkRequestsRequest.limit,
      "page": listWorkRequestsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestSummary,
        type: "Array<model.WorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Updates the properties of the specified configuration source provider.
   * For more information, see
   * [To update a configuration source provider](https://docs.cloud.oracle.com/iaas/Content/ResourceManager/Tasks/managingstacksandjobs.htm#UpdateConfigurationSourceProvider).
   *
   * @param UpdateConfigurationSourceProviderRequest
   * @return UpdateConfigurationSourceProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/UpdateConfigurationSourceProvider.ts.html |here} to see how to use UpdateConfigurationSourceProvider API.
   */
  public async updateConfigurationSourceProvider(
    updateConfigurationSourceProviderRequest: requests.UpdateConfigurationSourceProviderRequest
  ): Promise<responses.UpdateConfigurationSourceProviderResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ResourceManagerClient#updateConfigurationSourceProvider."
      );
    const pathParams = {
      "{configurationSourceProviderId}":
        updateConfigurationSourceProviderRequest.configurationSourceProviderId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateConfigurationSourceProviderRequest.opcRequestId,
      "if-match": updateConfigurationSourceProviderRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateConfigurationSourceProviderRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/configurationSourceProviders/{configurationSourceProviderId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConfigurationSourceProviderRequest.updateConfigurationSourceProviderDetails,
        "UpdateConfigurationSourceProviderDetails",
        model.UpdateConfigurationSourceProviderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConfigurationSourceProviderResponse>{},
        body: await response.json(),
        bodyKey: "configurationSourceProvider",
        bodyModel: model.ConfigurationSourceProvider,
        type: "model.ConfigurationSourceProvider",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified job.
   * @param UpdateJobRequest
   * @return UpdateJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/UpdateJob.ts.html |here} to see how to use UpdateJob API.
   */
  public async updateJob(
    updateJobRequest: requests.UpdateJobRequest
  ): Promise<responses.UpdateJobResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#updateJob.");
    const pathParams = {
      "{jobId}": updateJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateJobRequest.opcRequestId,
      "if-match": updateJobRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateJobRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateJobRequest.updateJobDetails,
        "UpdateJobDetails",
        model.UpdateJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified stack object.
   * Use `UpdateStack` when you update your Terraform configuration
   * and want your changes to be reflected in the execution plan.
   * For more information, see
   * [To update a stack](https://docs.cloud.oracle.com/iaas/Content/ResourceManager/Tasks/managingstacksandjobs.htm#UpdateStack) and
   * [To edit a stack](https://docs.cloud.oracle.com/iaas/Content/ResourceManager/Tasks/managingstacksandjobs.htm#EditStack).
   *
   * @param UpdateStackRequest
   * @return UpdateStackResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/UpdateStack.ts.html |here} to see how to use UpdateStack API.
   */
  public async updateStack(
    updateStackRequest: requests.UpdateStackRequest
  ): Promise<responses.UpdateStackResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#updateStack.");
    const pathParams = {
      "{stackId}": updateStackRequest.stackId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateStackRequest.opcRequestId,
      "if-match": updateStackRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateStackRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/stacks/{stackId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateStackRequest.updateStackDetails,
        "UpdateStackDetails",
        model.UpdateStackDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateStackResponse>{},
        body: await response.json(),
        bodyKey: "stack",
        bodyModel: model.Stack,
        type: "model.Stack",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified template.
   *
   * @param UpdateTemplateRequest
   * @return UpdateTemplateResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcemanager/UpdateTemplate.ts.html |here} to see how to use UpdateTemplate API.
   */
  public async updateTemplate(
    updateTemplateRequest: requests.UpdateTemplateRequest
  ): Promise<responses.UpdateTemplateResponse> {
    if (this.logger) this.logger.debug("Calling operation ResourceManagerClient#updateTemplate.");
    const pathParams = {
      "{templateId}": updateTemplateRequest.templateId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateTemplateRequest.opcRequestId,
      "if-match": updateTemplateRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateTemplateRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/templates/{templateId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTemplateRequest.updateTemplateDetails,
        "UpdateTemplateDetails",
        model.UpdateTemplateDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTemplateResponse>{},
        body: await response.json(),
        bodyKey: "template",
        bodyModel: model.Template,
        type: "model.Template",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

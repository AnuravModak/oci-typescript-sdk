/**
 * OS Management Hub API
 * Use the OS Management Hub API to manage and monitor updates and patches for the operating system environments in your private data centers through a single management console. For more information, see [Overview of OS Management Hub](https://docs.cloud.oracle.com/iaas/osmh/doc/overview.htm).
Use the table of contents and search tool to explore the  OS Management Hub API.

 * OpenAPI spec version: 20220901
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Summary of the ManagedInstance.
 */
export interface ManagedInstanceSummary {
  /**
   * The OCID for the managed instance.
   */
  "id": string;
  /**
   * Managed instance identifier.
   */
  "displayName": string;
  /**
   * Information specified by the user about the managed instance.
   */
  "description"?: string;
  /**
   * The OCID for the tenancy this managed instance resides in.
   */
  "tenancyId": string;
  /**
   * The OCID for the compartment this managed instance resides in.
   */
  "compartmentId": string;
  /**
   * Location of the managed instance.
   */
  "location"?: model.ManagedInstanceLocation;
  /**
   * The CPU architecture type of the managed instance.
   */
  "architecture"?: model.ArchType;
  /**
   * The Operating System type of the managed instance.
   */
  "osFamily"?: model.OsFamily;
  /**
   * status of the managed instance.
   */
  "status": model.ManagedInstanceStatus;
  "managedInstanceGroup"?: model.Id;
  "lifecycleEnvironment"?: model.Id;
  "lifecycleStage"?: model.Id;
  /**
   * Indicates whether a reboot is required to complete installation of updates.
   */
  "isRebootRequired"?: boolean;
  /**
   * Number of updates available to be installed. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "updatesAvailable"?: number;
  /**
   * Whether this managed instance is acting as an on-premise management station.
   */
  "isManagementStation"?: boolean;
}

export namespace ManagedInstanceSummary {
  export function getJsonObj(obj: ManagedInstanceSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "managedInstanceGroup": obj.managedInstanceGroup
          ? model.Id.getJsonObj(obj.managedInstanceGroup)
          : undefined,
        "lifecycleEnvironment": obj.lifecycleEnvironment
          ? model.Id.getJsonObj(obj.lifecycleEnvironment)
          : undefined,
        "lifecycleStage": obj.lifecycleStage ? model.Id.getJsonObj(obj.lifecycleStage) : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ManagedInstanceSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "managedInstanceGroup": obj.managedInstanceGroup
          ? model.Id.getDeserializedJsonObj(obj.managedInstanceGroup)
          : undefined,
        "lifecycleEnvironment": obj.lifecycleEnvironment
          ? model.Id.getDeserializedJsonObj(obj.lifecycleEnvironment)
          : undefined,
        "lifecycleStage": obj.lifecycleStage
          ? model.Id.getDeserializedJsonObj(obj.lifecycleStage)
          : undefined
      }
    };

    return jsonObj;
  }
}

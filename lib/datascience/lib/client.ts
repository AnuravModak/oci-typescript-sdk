/**
 * Data Science API
 * Use the Data Science APIs to organize your data science work, access data and computing resources, and build, train, deploy, and manage models on Oracle Cloud.

 * OpenAPI spec version: 20190101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { DataScienceWaiter } from "./datascience-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DataScienceApiKeys {}

export class DataScienceClient {
  protected static serviceEndpointTemplate = "https://datascience.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DataScienceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20190101";
    if (this.logger) this.logger.info(`DataScienceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DataScienceClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DataScienceClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new DataScienceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DataScienceWaiter {
    this._waiters = new DataScienceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DataScienceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Activates the model.
   * @param ActivateModelRequest
   * @return ActivateModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ActivateModel.ts.html |here} to see how to use ActivateModel API.
   */
  public async activateModel(
    activateModelRequest: requests.ActivateModelRequest
  ): Promise<responses.ActivateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#activateModel.");
    const pathParams = {
      "{modelId}": activateModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": activateModelRequest.ifMatch,
      "opc-request-id": activateModelRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      activateModelRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/actions/activate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ActivateModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Activates the model deployment.
   * @param ActivateModelDeploymentRequest
   * @return ActivateModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ActivateModelDeployment.ts.html |here} to see how to use ActivateModelDeployment API.
   */
  public async activateModelDeployment(
    activateModelDeploymentRequest: requests.ActivateModelDeploymentRequest
  ): Promise<responses.ActivateModelDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#activateModelDeployment.");
    const pathParams = {
      "{modelDeploymentId}": activateModelDeploymentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": activateModelDeploymentRequest.ifMatch,
      "opc-request-id": activateModelDeploymentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      activateModelDeploymentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}/actions/activate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ActivateModelDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Activates the notebook session.
   * @param ActivateNotebookSessionRequest
   * @return ActivateNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ActivateNotebookSession.ts.html |here} to see how to use ActivateNotebookSession API.
   */
  public async activateNotebookSession(
    activateNotebookSessionRequest: requests.ActivateNotebookSessionRequest
  ): Promise<responses.ActivateNotebookSessionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#activateNotebookSession.");
    const pathParams = {
      "{notebookSessionId}": activateNotebookSessionRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": activateNotebookSessionRequest.ifMatch,
      "opc-request-id": activateNotebookSessionRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      activateNotebookSessionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}/actions/activate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ActivateNotebookSessionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancels a work request that has not started.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#cancelWorkRequest.");
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelWorkRequestRequest.ifMatch,
      "opc-request-id": cancelWorkRequestRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      cancelWorkRequestRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a model resource into a different compartment.
   * @param ChangeModelCompartmentRequest
   * @return ChangeModelCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeModelCompartment.ts.html |here} to see how to use ChangeModelCompartment API.
   */
  public async changeModelCompartment(
    changeModelCompartmentRequest: requests.ChangeModelCompartmentRequest
  ): Promise<responses.ChangeModelCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#changeModelCompartment.");
    const pathParams = {
      "{modelId}": changeModelCompartmentRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeModelCompartmentRequest.ifMatch,
      "opc-request-id": changeModelCompartmentRequest.opcRequestId,
      "opc-retry-token": changeModelCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeModelCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeModelCompartmentRequest.changeModelCompartmentDetails,
        "ChangeModelCompartmentDetails",
        model.ChangeModelCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeModelCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a model deployment into a different compartment. When provided, If-Match is checked against ETag values of the resource.
   * @param ChangeModelDeploymentCompartmentRequest
   * @return ChangeModelDeploymentCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeModelDeploymentCompartment.ts.html |here} to see how to use ChangeModelDeploymentCompartment API.
   */
  public async changeModelDeploymentCompartment(
    changeModelDeploymentCompartmentRequest: requests.ChangeModelDeploymentCompartmentRequest
  ): Promise<responses.ChangeModelDeploymentCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#changeModelDeploymentCompartment.");
    const pathParams = {
      "{modelDeploymentId}": changeModelDeploymentCompartmentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeModelDeploymentCompartmentRequest.ifMatch,
      "opc-request-id": changeModelDeploymentCompartmentRequest.opcRequestId,
      "opc-retry-token": changeModelDeploymentCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeModelDeploymentCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeModelDeploymentCompartmentRequest.changeModelDeploymentCompartmentDetails,
        "ChangeModelDeploymentCompartmentDetails",
        model.ChangeModelDeploymentCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeModelDeploymentCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a notebook session resource into a different compartment.
   * @param ChangeNotebookSessionCompartmentRequest
   * @return ChangeNotebookSessionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeNotebookSessionCompartment.ts.html |here} to see how to use ChangeNotebookSessionCompartment API.
   */
  public async changeNotebookSessionCompartment(
    changeNotebookSessionCompartmentRequest: requests.ChangeNotebookSessionCompartmentRequest
  ): Promise<responses.ChangeNotebookSessionCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#changeNotebookSessionCompartment.");
    const pathParams = {
      "{notebookSessionId}": changeNotebookSessionCompartmentRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeNotebookSessionCompartmentRequest.ifMatch,
      "opc-request-id": changeNotebookSessionCompartmentRequest.opcRequestId,
      "opc-retry-token": changeNotebookSessionCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeNotebookSessionCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeNotebookSessionCompartmentRequest.changeNotebookSessionCompartmentDetails,
        "ChangeNotebookSessionCompartmentDetails",
        model.ChangeNotebookSessionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeNotebookSessionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a project resource into a different compartment.
   * @param ChangeProjectCompartmentRequest
   * @return ChangeProjectCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeProjectCompartment.ts.html |here} to see how to use ChangeProjectCompartment API.
   */
  public async changeProjectCompartment(
    changeProjectCompartmentRequest: requests.ChangeProjectCompartmentRequest
  ): Promise<responses.ChangeProjectCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#changeProjectCompartment.");
    const pathParams = {
      "{projectId}": changeProjectCompartmentRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeProjectCompartmentRequest.ifMatch,
      "opc-request-id": changeProjectCompartmentRequest.opcRequestId,
      "opc-retry-token": changeProjectCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeProjectCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeProjectCompartmentRequest.changeProjectCompartmentDetails,
        "ChangeProjectCompartmentDetails",
        model.ChangeProjectCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeProjectCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new model.
   * @param CreateModelRequest
   * @return CreateModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModel.ts.html |here} to see how to use CreateModel API.
   */
  public async createModel(
    createModelRequest: requests.CreateModelRequest
  ): Promise<responses.CreateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#createModel.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createModelRequest.opcRequestId,
      "opc-retry-token": createModelRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createModelRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createModelRequest.createModelDetails,
        "CreateModelDetails",
        model.CreateModelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates model artifact for specified model.
   * @param CreateModelArtifactRequest
   * @return CreateModelArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelArtifact.ts.html |here} to see how to use CreateModelArtifact API.
   */
  public async createModelArtifact(
    createModelArtifactRequest: requests.CreateModelArtifactRequest
  ): Promise<responses.CreateModelArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#createModelArtifact.");
    const pathParams = {
      "{modelId}": createModelArtifactRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createModelArtifactRequest.opcRequestId,
      "opc-retry-token": createModelArtifactRequest.opcRetryToken,
      "content-length": createModelArtifactRequest.contentLength,
      "content-disposition": createModelArtifactRequest.contentDisposition
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createModelArtifactRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/artifact",
      method: "POST",
      bodyContent: createModelArtifactRequest.modelArtifact,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request, true);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateModelArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new model deployment.
   * @param CreateModelDeploymentRequest
   * @return CreateModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelDeployment.ts.html |here} to see how to use CreateModelDeployment API.
   */
  public async createModelDeployment(
    createModelDeploymentRequest: requests.CreateModelDeploymentRequest
  ): Promise<responses.CreateModelDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#createModelDeployment.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createModelDeploymentRequest.opcRequestId,
      "opc-retry-token": createModelDeploymentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createModelDeploymentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createModelDeploymentRequest.createModelDeploymentDetails,
        "CreateModelDeploymentDetails",
        model.CreateModelDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateModelDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "modelDeployment",
        bodyModel: model.ModelDeployment,
        type: "model.ModelDeployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates provenance information for the specified model.
   * @param CreateModelProvenanceRequest
   * @return CreateModelProvenanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelProvenance.ts.html |here} to see how to use CreateModelProvenance API.
   */
  public async createModelProvenance(
    createModelProvenanceRequest: requests.CreateModelProvenanceRequest
  ): Promise<responses.CreateModelProvenanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#createModelProvenance.");
    const pathParams = {
      "{modelId}": createModelProvenanceRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createModelProvenanceRequest.opcRequestId,
      "opc-retry-token": createModelProvenanceRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createModelProvenanceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/provenance",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createModelProvenanceRequest.createModelProvenanceDetails,
        "CreateModelProvenanceDetails",
        model.CreateModelProvenanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateModelProvenanceResponse>{},
        body: await response.json(),
        bodyKey: "modelProvenance",
        bodyModel: model.ModelProvenance,
        type: "model.ModelProvenance",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new notebook session.
   * @param CreateNotebookSessionRequest
   * @return CreateNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateNotebookSession.ts.html |here} to see how to use CreateNotebookSession API.
   */
  public async createNotebookSession(
    createNotebookSessionRequest: requests.CreateNotebookSessionRequest
  ): Promise<responses.CreateNotebookSessionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#createNotebookSession.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createNotebookSessionRequest.opcRequestId,
      "opc-retry-token": createNotebookSessionRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createNotebookSessionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createNotebookSessionRequest.createNotebookSessionDetails,
        "CreateNotebookSessionDetails",
        model.CreateNotebookSessionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateNotebookSessionResponse>{},
        body: await response.json(),
        bodyKey: "notebookSession",
        bodyModel: model.NotebookSession,
        type: "model.NotebookSession",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new project.
   * @param CreateProjectRequest
   * @return CreateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateProject.ts.html |here} to see how to use CreateProject API.
   */
  public async createProject(
    createProjectRequest: requests.CreateProjectRequest
  ): Promise<responses.CreateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#createProject.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createProjectRequest.opcRequestId,
      "opc-retry-token": createProjectRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createProjectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProjectRequest.createProjectDetails,
        "CreateProjectDetails",
        model.CreateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deactivates the model.
   * @param DeactivateModelRequest
   * @return DeactivateModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeactivateModel.ts.html |here} to see how to use DeactivateModel API.
   */
  public async deactivateModel(
    deactivateModelRequest: requests.DeactivateModelRequest
  ): Promise<responses.DeactivateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#deactivateModel.");
    const pathParams = {
      "{modelId}": deactivateModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deactivateModelRequest.ifMatch,
      "opc-request-id": deactivateModelRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deactivateModelRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/actions/deactivate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeactivateModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deactivates the model deployment.
   * @param DeactivateModelDeploymentRequest
   * @return DeactivateModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeactivateModelDeployment.ts.html |here} to see how to use DeactivateModelDeployment API.
   */
  public async deactivateModelDeployment(
    deactivateModelDeploymentRequest: requests.DeactivateModelDeploymentRequest
  ): Promise<responses.DeactivateModelDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#deactivateModelDeployment.");
    const pathParams = {
      "{modelDeploymentId}": deactivateModelDeploymentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deactivateModelDeploymentRequest.ifMatch,
      "opc-request-id": deactivateModelDeploymentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deactivateModelDeploymentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}/actions/deactivate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeactivateModelDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deactivates the notebook session.
   * @param DeactivateNotebookSessionRequest
   * @return DeactivateNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeactivateNotebookSession.ts.html |here} to see how to use DeactivateNotebookSession API.
   */
  public async deactivateNotebookSession(
    deactivateNotebookSessionRequest: requests.DeactivateNotebookSessionRequest
  ): Promise<responses.DeactivateNotebookSessionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#deactivateNotebookSession.");
    const pathParams = {
      "{notebookSessionId}": deactivateNotebookSessionRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deactivateNotebookSessionRequest.ifMatch,
      "opc-request-id": deactivateNotebookSessionRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deactivateNotebookSessionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}/actions/deactivate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeactivateNotebookSessionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified model.
   * @param DeleteModelRequest
   * @return DeleteModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteModel.ts.html |here} to see how to use DeleteModel API.
   */
  public async deleteModel(
    deleteModelRequest: requests.DeleteModelRequest
  ): Promise<responses.DeleteModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#deleteModel.");
    const pathParams = {
      "{modelId}": deleteModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteModelRequest.ifMatch,
      "opc-request-id": deleteModelRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteModelRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteModelResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified model deployment. Any unsaved work in this model deployment is lost.
   * @param DeleteModelDeploymentRequest
   * @return DeleteModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteModelDeployment.ts.html |here} to see how to use DeleteModelDeployment API.
   */
  public async deleteModelDeployment(
    deleteModelDeploymentRequest: requests.DeleteModelDeploymentRequest
  ): Promise<responses.DeleteModelDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#deleteModelDeployment.");
    const pathParams = {
      "{modelDeploymentId}": deleteModelDeploymentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteModelDeploymentRequest.ifMatch,
      "opc-request-id": deleteModelDeploymentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteModelDeploymentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteModelDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified notebook session. Any unsaved work in this notebook session are lost.
   * @param DeleteNotebookSessionRequest
   * @return DeleteNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteNotebookSession.ts.html |here} to see how to use DeleteNotebookSession API.
   */
  public async deleteNotebookSession(
    deleteNotebookSessionRequest: requests.DeleteNotebookSessionRequest
  ): Promise<responses.DeleteNotebookSessionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#deleteNotebookSession.");
    const pathParams = {
      "{notebookSessionId}": deleteNotebookSessionRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteNotebookSessionRequest.ifMatch,
      "opc-request-id": deleteNotebookSessionRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteNotebookSessionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNotebookSessionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified project. This operation fails unless all associated resources (notebook sessions or models) are in a DELETED state. You must delete all associated resources before deleting a project.
   * @param DeleteProjectRequest
   * @return DeleteProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteProject.ts.html |here} to see how to use DeleteProject API.
   */
  public async deleteProject(
    deleteProjectRequest: requests.DeleteProjectRequest
  ): Promise<responses.DeleteProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#deleteProject.");
    const pathParams = {
      "{projectId}": deleteProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProjectRequest.ifMatch,
      "opc-request-id": deleteProjectRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteProjectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified model's information.
   * @param GetModelRequest
   * @return GetModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModel.ts.html |here} to see how to use GetModel API.
   */
  public async getModel(
    getModelRequest: requests.GetModelRequest
  ): Promise<responses.GetModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getModel.");
    const pathParams = {
      "{modelId}": getModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModelRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getModelRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads model artifact content for specified model.
   * @param GetModelArtifactContentRequest
   * @return GetModelArtifactContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelArtifactContent.ts.html |here} to see how to use GetModelArtifactContent API.
   */
  public async getModelArtifactContent(
    getModelArtifactContentRequest: requests.GetModelArtifactContentRequest
  ): Promise<responses.GetModelArtifactContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#getModelArtifactContent.");
    const pathParams = {
      "{modelId}": getModelArtifactContentRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModelArtifactContentRequest.opcRequestId,
      "range": getModelArtifactContentRequest.range
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getModelArtifactContentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/artifact/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModelArtifactContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-disposition"),
            key: "contentDisposition",
            dataType: "string"
          },
          {
            value: response.headers.get("content-md5"),
            key: "contentMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the model deployment for the specified `modelDeploymentId`.
   * @param GetModelDeploymentRequest
   * @return GetModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelDeployment.ts.html |here} to see how to use GetModelDeployment API.
   */
  public async getModelDeployment(
    getModelDeploymentRequest: requests.GetModelDeploymentRequest
  ): Promise<responses.GetModelDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getModelDeployment.");
    const pathParams = {
      "{modelDeploymentId}": getModelDeploymentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModelDeploymentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getModelDeploymentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModelDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "modelDeployment",
        bodyModel: model.ModelDeployment,
        type: "model.ModelDeployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets provenance information for specified model.
   * @param GetModelProvenanceRequest
   * @return GetModelProvenanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelProvenance.ts.html |here} to see how to use GetModelProvenance API.
   */
  public async getModelProvenance(
    getModelProvenanceRequest: requests.GetModelProvenanceRequest
  ): Promise<responses.GetModelProvenanceResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getModelProvenance.");
    const pathParams = {
      "{modelId}": getModelProvenanceRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModelProvenanceRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getModelProvenanceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/provenance",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModelProvenanceResponse>{},
        body: await response.json(),
        bodyKey: "modelProvenance",
        bodyModel: model.ModelProvenance,
        type: "model.ModelProvenance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified notebook session's information.
   * @param GetNotebookSessionRequest
   * @return GetNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetNotebookSession.ts.html |here} to see how to use GetNotebookSession API.
   */
  public async getNotebookSession(
    getNotebookSessionRequest: requests.GetNotebookSessionRequest
  ): Promise<responses.GetNotebookSessionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getNotebookSession.");
    const pathParams = {
      "{notebookSessionId}": getNotebookSessionRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNotebookSessionRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getNotebookSessionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNotebookSessionResponse>{},
        body: await response.json(),
        bodyKey: "notebookSession",
        bodyModel: model.NotebookSession,
        type: "model.NotebookSession",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified project's information.
   * @param GetProjectRequest
   * @return GetProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetProject.ts.html |here} to see how to use GetProject API.
   */
  public async getProject(
    getProjectRequest: requests.GetProjectRequest
  ): Promise<responses.GetProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getProject.");
    const pathParams = {
      "{projectId}": getProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProjectRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getProjectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified work request's information.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getWorkRequest.");
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getWorkRequestRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets model artifact metadata for specified model.
   * @param HeadModelArtifactRequest
   * @return HeadModelArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/HeadModelArtifact.ts.html |here} to see how to use HeadModelArtifact API.
   */
  public async headModelArtifact(
    headModelArtifactRequest: requests.HeadModelArtifactRequest
  ): Promise<responses.HeadModelArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#headModelArtifact.");
    const pathParams = {
      "{modelId}": headModelArtifactRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": headModelArtifactRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      headModelArtifactRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/artifact/content",
      method: "HEAD",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.HeadModelArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-disposition"),
            key: "contentDisposition",
            dataType: "string"
          },
          {
            value: response.headers.get("content-md5"),
            key: "contentMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the valid model deployment shapes.
   * @param ListModelDeploymentShapesRequest
   * @return ListModelDeploymentShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListModelDeploymentShapes.ts.html |here} to see how to use ListModelDeploymentShapes API.
   */
  public async listModelDeploymentShapes(
    listModelDeploymentShapesRequest: requests.ListModelDeploymentShapesRequest
  ): Promise<responses.ListModelDeploymentShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#listModelDeploymentShapes.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listModelDeploymentShapesRequest.compartmentId,
      "limit": listModelDeploymentShapesRequest.limit,
      "page": listModelDeploymentShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listModelDeploymentShapesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listModelDeploymentShapesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeploymentShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListModelDeploymentShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ModelDeploymentShapeSummary,
        type: "Array<model.ModelDeploymentShapeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ModelDeploymentShapeSummary objects
   * contained in responses from the listModelDeploymentShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModelDeploymentShapes(
    request: requests.ListModelDeploymentShapesRequest
  ): AsyncIterableIterator<model.ModelDeploymentShapeSummary> {
    return paginateRecords(request, req => this.listModelDeploymentShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listModelDeploymentShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModelDeploymentShapesResponses(
    request: requests.ListModelDeploymentShapesRequest
  ): AsyncIterableIterator<responses.ListModelDeploymentShapesResponse> {
    return paginateResponses(request, req => this.listModelDeploymentShapes(req));
  }

  /**
   * Lists all model deployments in the specified compartment. Only one parameter other than compartmentId may also be included in a query. The query must include compartmentId. If the query does not include compartmentId, or includes compartmentId but two or more other parameters an error is returned.
   *
   * @param ListModelDeploymentsRequest
   * @return ListModelDeploymentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListModelDeployments.ts.html |here} to see how to use ListModelDeployments API.
   */
  public async listModelDeployments(
    listModelDeploymentsRequest: requests.ListModelDeploymentsRequest
  ): Promise<responses.ListModelDeploymentsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listModelDeployments.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listModelDeploymentsRequest.compartmentId,
      "id": listModelDeploymentsRequest.id,
      "projectId": listModelDeploymentsRequest.projectId,
      "displayName": listModelDeploymentsRequest.displayName,
      "lifecycleState": listModelDeploymentsRequest.lifecycleState,
      "createdBy": listModelDeploymentsRequest.createdBy,
      "limit": listModelDeploymentsRequest.limit,
      "page": listModelDeploymentsRequest.page,
      "sortOrder": listModelDeploymentsRequest.sortOrder,
      "sortBy": listModelDeploymentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listModelDeploymentsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listModelDeploymentsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListModelDeploymentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ModelDeploymentSummary,
        type: "Array<model.ModelDeploymentSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ModelDeploymentSummary objects
   * contained in responses from the listModelDeployments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModelDeployments(
    request: requests.ListModelDeploymentsRequest
  ): AsyncIterableIterator<model.ModelDeploymentSummary> {
    return paginateRecords(request, req => this.listModelDeployments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listModelDeployments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModelDeploymentsResponses(
    request: requests.ListModelDeploymentsRequest
  ): AsyncIterableIterator<responses.ListModelDeploymentsResponse> {
    return paginateResponses(request, req => this.listModelDeployments(req));
  }

  /**
   * Lists models in the specified compartment.
   * @param ListModelsRequest
   * @return ListModelsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListModels.ts.html |here} to see how to use ListModels API.
   */
  public async listModels(
    listModelsRequest: requests.ListModelsRequest
  ): Promise<responses.ListModelsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listModels.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listModelsRequest.compartmentId,
      "id": listModelsRequest.id,
      "projectId": listModelsRequest.projectId,
      "displayName": listModelsRequest.displayName,
      "lifecycleState": listModelsRequest.lifecycleState,
      "createdBy": listModelsRequest.createdBy,
      "limit": listModelsRequest.limit,
      "page": listModelsRequest.page,
      "sortOrder": listModelsRequest.sortOrder,
      "sortBy": listModelsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listModelsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listModelsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListModelsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ModelSummary,
        type: "Array<model.ModelSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ModelSummary objects
   * contained in responses from the listModels operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModels(
    request: requests.ListModelsRequest
  ): AsyncIterableIterator<model.ModelSummary> {
    return paginateRecords(request, req => this.listModels(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listModels operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModelsResponses(
    request: requests.ListModelsRequest
  ): AsyncIterableIterator<responses.ListModelsResponse> {
    return paginateResponses(request, req => this.listModels(req));
  }

  /**
   * Lists the valid notebook session shapes.
   * @param ListNotebookSessionShapesRequest
   * @return ListNotebookSessionShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListNotebookSessionShapes.ts.html |here} to see how to use ListNotebookSessionShapes API.
   */
  public async listNotebookSessionShapes(
    listNotebookSessionShapesRequest: requests.ListNotebookSessionShapesRequest
  ): Promise<responses.ListNotebookSessionShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#listNotebookSessionShapes.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNotebookSessionShapesRequest.compartmentId,
      "limit": listNotebookSessionShapesRequest.limit,
      "page": listNotebookSessionShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNotebookSessionShapesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listNotebookSessionShapesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessionShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNotebookSessionShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.NotebookSessionShapeSummary,
        type: "Array<model.NotebookSessionShapeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.NotebookSessionShapeSummary objects
   * contained in responses from the listNotebookSessionShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNotebookSessionShapes(
    request: requests.ListNotebookSessionShapesRequest
  ): AsyncIterableIterator<model.NotebookSessionShapeSummary> {
    return paginateRecords(request, req => this.listNotebookSessionShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNotebookSessionShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNotebookSessionShapesResponses(
    request: requests.ListNotebookSessionShapesRequest
  ): AsyncIterableIterator<responses.ListNotebookSessionShapesResponse> {
    return paginateResponses(request, req => this.listNotebookSessionShapes(req));
  }

  /**
   * Lists the notebook sessions in the specified compartment.
   * @param ListNotebookSessionsRequest
   * @return ListNotebookSessionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListNotebookSessions.ts.html |here} to see how to use ListNotebookSessions API.
   */
  public async listNotebookSessions(
    listNotebookSessionsRequest: requests.ListNotebookSessionsRequest
  ): Promise<responses.ListNotebookSessionsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listNotebookSessions.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNotebookSessionsRequest.compartmentId,
      "id": listNotebookSessionsRequest.id,
      "projectId": listNotebookSessionsRequest.projectId,
      "displayName": listNotebookSessionsRequest.displayName,
      "lifecycleState": listNotebookSessionsRequest.lifecycleState,
      "createdBy": listNotebookSessionsRequest.createdBy,
      "limit": listNotebookSessionsRequest.limit,
      "page": listNotebookSessionsRequest.page,
      "sortOrder": listNotebookSessionsRequest.sortOrder,
      "sortBy": listNotebookSessionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNotebookSessionsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listNotebookSessionsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNotebookSessionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.NotebookSessionSummary,
        type: "Array<model.NotebookSessionSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.NotebookSessionSummary objects
   * contained in responses from the listNotebookSessions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNotebookSessions(
    request: requests.ListNotebookSessionsRequest
  ): AsyncIterableIterator<model.NotebookSessionSummary> {
    return paginateRecords(request, req => this.listNotebookSessions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNotebookSessions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNotebookSessionsResponses(
    request: requests.ListNotebookSessionsRequest
  ): AsyncIterableIterator<responses.ListNotebookSessionsResponse> {
    return paginateResponses(request, req => this.listNotebookSessions(req));
  }

  /**
   * Lists projects in the specified compartment.
   * @param ListProjectsRequest
   * @return ListProjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListProjects.ts.html |here} to see how to use ListProjects API.
   */
  public async listProjects(
    listProjectsRequest: requests.ListProjectsRequest
  ): Promise<responses.ListProjectsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listProjects.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listProjectsRequest.compartmentId,
      "id": listProjectsRequest.id,
      "displayName": listProjectsRequest.displayName,
      "lifecycleState": listProjectsRequest.lifecycleState,
      "createdBy": listProjectsRequest.createdBy,
      "limit": listProjectsRequest.limit,
      "page": listProjectsRequest.page,
      "sortOrder": listProjectsRequest.sortOrder,
      "sortBy": listProjectsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProjectsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listProjectsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProjectsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ProjectSummary,
        type: "Array<model.ProjectSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.ProjectSummary objects
   * contained in responses from the listProjects operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProjects(
    request: requests.ListProjectsRequest
  ): AsyncIterableIterator<model.ProjectSummary> {
    return paginateRecords(request, req => this.listProjects(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listProjects operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProjectsResponses(
    request: requests.ListProjectsRequest
  ): AsyncIterableIterator<responses.ListProjectsResponse> {
    return paginateResponses(request, req => this.listProjects(req));
  }

  /**
   * Lists work request errors for the specified work request.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#listWorkRequestErrors.");
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestErrorsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists work request logs for the specified work request.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listWorkRequestLogs.");
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestLogsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists work requests in the specified compartment.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listWorkRequests.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "id": listWorkRequestsRequest.id,
      "operationType": listWorkRequestsRequest.operationType,
      "status": listWorkRequestsRequest.status,
      "limit": listWorkRequestsRequest.limit,
      "page": listWorkRequestsRequest.page,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestSummary,
        type: "Array<model.WorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Updates the properties of a model. You can update the `displayName`, `description`, `freeformTags`, and `definedTags` properties.
   * @param UpdateModelRequest
   * @return UpdateModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModel.ts.html |here} to see how to use UpdateModel API.
   */
  public async updateModel(
    updateModelRequest: requests.UpdateModelRequest
  ): Promise<responses.UpdateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#updateModel.");
    const pathParams = {
      "{modelId}": updateModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateModelRequest.ifMatch,
      "opc-request-id": updateModelRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateModelRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateModelRequest.updateModelDetails,
        "UpdateModelDetails",
        model.UpdateModelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the properties of a model deployment. Some of the properties of `modelDeploymentConfigurationDetails` or `CategoryLogDetails` can also be updated with zero down time
   * when the model deployment\u2019s lifecycle state is ACTIVE or NEEDS_ATTENTION i.e `instanceShapeName`, `instanceCount` and `modelId`, separately `loadBalancerShape` or `CategoryLogDetails`
   * can also be updated independently. All of the fields can be updated when the deployment is in the INACTIVE lifecycle state. Changes will take effect the next time the model
   * deployment is activated.
   *
   * @param UpdateModelDeploymentRequest
   * @return UpdateModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModelDeployment.ts.html |here} to see how to use UpdateModelDeployment API.
   */
  public async updateModelDeployment(
    updateModelDeploymentRequest: requests.UpdateModelDeploymentRequest
  ): Promise<responses.UpdateModelDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#updateModelDeployment.");
    const pathParams = {
      "{modelDeploymentId}": updateModelDeploymentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateModelDeploymentRequest.ifMatch,
      "opc-request-id": updateModelDeploymentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateModelDeploymentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateModelDeploymentRequest.updateModelDeploymentDetails,
        "UpdateModelDeploymentDetails",
        model.UpdateModelDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateModelDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the provenance information for the specified model.
   * @param UpdateModelProvenanceRequest
   * @return UpdateModelProvenanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModelProvenance.ts.html |here} to see how to use UpdateModelProvenance API.
   */
  public async updateModelProvenance(
    updateModelProvenanceRequest: requests.UpdateModelProvenanceRequest
  ): Promise<responses.UpdateModelProvenanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#updateModelProvenance.");
    const pathParams = {
      "{modelId}": updateModelProvenanceRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateModelProvenanceRequest.opcRequestId,
      "if-match": updateModelProvenanceRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateModelProvenanceRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/provenance",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateModelProvenanceRequest.updateModelProvenanceDetails,
        "UpdateModelProvenanceDetails",
        model.UpdateModelProvenanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateModelProvenanceResponse>{},
        body: await response.json(),
        bodyKey: "modelProvenance",
        bodyModel: model.ModelProvenance,
        type: "model.ModelProvenance",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the properties of a notebook session. You can update the `displayName`, `freeformTags`, and `definedTags` properties.
   * When the notebook session is in the INACTIVE lifecycle state, you can update `notebookSessionConfigurationDetails` and change `shape`, `subnetId`, and `blockStorageSizeInGBs`.
   * Changes to the `notebookSessionConfigurationDetails` take effect the next time the `ActivateNotebookSession` action is invoked on the notebook session resource.
   *
   * @param UpdateNotebookSessionRequest
   * @return UpdateNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateNotebookSession.ts.html |here} to see how to use UpdateNotebookSession API.
   */
  public async updateNotebookSession(
    updateNotebookSessionRequest: requests.UpdateNotebookSessionRequest
  ): Promise<responses.UpdateNotebookSessionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#updateNotebookSession.");
    const pathParams = {
      "{notebookSessionId}": updateNotebookSessionRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateNotebookSessionRequest.ifMatch,
      "opc-request-id": updateNotebookSessionRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateNotebookSessionRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNotebookSessionRequest.updateNotebookSessionDetails,
        "UpdateNotebookSessionDetails",
        model.UpdateNotebookSessionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNotebookSessionResponse>{},
        body: await response.json(),
        bodyKey: "notebookSession",
        bodyModel: model.NotebookSession,
        type: "model.NotebookSession",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the properties of a project. You can update the `displayName`, `description`, `freeformTags`, and `definedTags` properties.
   * @param UpdateProjectRequest
   * @return UpdateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateProject.ts.html |here} to see how to use UpdateProject API.
   */
  public async updateProject(
    updateProjectRequest: requests.UpdateProjectRequest
  ): Promise<responses.UpdateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#updateProject.");
    const pathParams = {
      "{projectId}": updateProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateProjectRequest.ifMatch,
      "opc-request-id": updateProjectRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateProjectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProjectRequest.updateProjectDetails,
        "UpdateProjectDetails",
        model.UpdateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

/**
 * Identity Domains API
 * Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm). This REST API is SCIM compliant.
Use the table of contents and search tool to explore the Identity Domains API.
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum IdentityDomainsApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class IdentityDomainsClient {
  protected static serviceEndpointTemplate = "https://identity.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_realmSpecificEndpointTemplateEnabled": boolean = false;
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  protected _bodyDuplexMode: any = undefined;
  public targetService = "IdentityDomains";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
      this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
        ? clientConfiguration.bodyDuplexMode
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(
        requestSigner,
        this._circuitBreaker,
        this._httpOptions,
        this._bodyDuplexMode
      );
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "";
    if (this.logger) this.logger.info(`IdentityDomainsClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Determines whether realm specific endpoint should be used or not.
   * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
   * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
   */
  public set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean) {
    this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
    if (this.logger)
      this.logger.info(
        `realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`
      );
  }

  /**
   * Create a user's API key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateApiKeyRequest
   * @return CreateApiKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateApiKey.ts.html |here} to see how to use CreateApiKey API.
   */
  public async createApiKey(
    createApiKeyRequest: requests.CreateApiKeyRequest
  ): Promise<responses.CreateApiKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#createApiKey.");
    const operationName = "createApiKey";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createApiKeyRequest.attributes,
      "attributeSets": createApiKeyRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createApiKeyRequest.authorization,
      "resource_type_schema_version": createApiKeyRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createApiKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createApiKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/ApiKeys",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createApiKeyRequest.apiKey,
        "ApiKey",
        model.ApiKey.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateApiKeyResponse>{},
        body: await response.json(),
        bodyKey: "apiKey",
        bodyModel: model.ApiKey,
        type: "model.ApiKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create an App
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateAppRequest
   * @return CreateAppResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateApp.ts.html |here} to see how to use CreateApp API.
   */
  public async createApp(
    createAppRequest: requests.CreateAppRequest
  ): Promise<responses.CreateAppResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#createApp.");
    const operationName = "createApp";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createAppRequest.attributes,
      "attributeSets": createAppRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createAppRequest.authorization,
      "resource_type_schema_version": createAppRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createAppRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAppRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Apps",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAppRequest.app,
        "App",
        model.App.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAppResponse>{},
        body: await response.json(),
        bodyKey: "app",
        bodyModel: model.App,
        type: "model.App",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create an AppRole
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateAppRoleRequest
   * @return CreateAppRoleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateAppRole.ts.html |here} to see how to use CreateAppRole API.
   */
  public async createAppRole(
    createAppRoleRequest: requests.CreateAppRoleRequest
  ): Promise<responses.CreateAppRoleResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#createAppRole.");
    const operationName = "createAppRole";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createAppRoleRequest.attributes,
      "attributeSets": createAppRoleRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createAppRoleRequest.authorization,
      "resource_type_schema_version": createAppRoleRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createAppRoleRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAppRoleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AppRoles",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAppRoleRequest.appRole,
        "AppRole",
        model.AppRole.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAppRoleResponse>{},
        body: await response.json(),
        bodyKey: "appRole",
        bodyModel: model.AppRole,
        type: "model.AppRole",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a user's Auth token.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateAuthTokenRequest
   * @return CreateAuthTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateAuthToken.ts.html |here} to see how to use CreateAuthToken API.
   */
  public async createAuthToken(
    createAuthTokenRequest: requests.CreateAuthTokenRequest
  ): Promise<responses.CreateAuthTokenResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#createAuthToken.");
    const operationName = "createAuthToken";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createAuthTokenRequest.attributes,
      "attributeSets": createAuthTokenRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createAuthTokenRequest.authorization,
      "resource_type_schema_version": createAuthTokenRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createAuthTokenRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAuthTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AuthTokens",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAuthTokenRequest.authToken,
        "AuthToken",
        model.AuthToken.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAuthTokenResponse>{},
        body: await response.json(),
        bodyKey: "authToken",
        bodyModel: model.AuthToken,
        type: "model.AuthToken",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove All Authentication Factor Channels for a User
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateAuthenticationFactorsRemoverRequest
   * @return CreateAuthenticationFactorsRemoverResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateAuthenticationFactorsRemover.ts.html |here} to see how to use CreateAuthenticationFactorsRemover API.
   */
  public async createAuthenticationFactorsRemover(
    createAuthenticationFactorsRemoverRequest: requests.CreateAuthenticationFactorsRemoverRequest
  ): Promise<responses.CreateAuthenticationFactorsRemoverResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation IdentityDomainsClient#createAuthenticationFactorsRemover."
      );
    const operationName = "createAuthenticationFactorsRemover";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createAuthenticationFactorsRemoverRequest.authorization,
      "resource_type_schema_version":
        createAuthenticationFactorsRemoverRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createAuthenticationFactorsRemoverRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAuthenticationFactorsRemoverRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AuthenticationFactorsRemover",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAuthenticationFactorsRemoverRequest.authenticationFactorsRemover,
        "AuthenticationFactorsRemover",
        model.AuthenticationFactorsRemover.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAuthenticationFactorsRemoverResponse>{},
        body: await response.json(),
        bodyKey: "authenticationFactorsRemover",
        bodyModel: model.AuthenticationFactorsRemover,
        type: "model.AuthenticationFactorsRemover",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a user's customer secret key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateCustomerSecretKeyRequest
   * @return CreateCustomerSecretKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateCustomerSecretKey.ts.html |here} to see how to use CreateCustomerSecretKey API.
   */
  public async createCustomerSecretKey(
    createCustomerSecretKeyRequest: requests.CreateCustomerSecretKeyRequest
  ): Promise<responses.CreateCustomerSecretKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createCustomerSecretKey.");
    const operationName = "createCustomerSecretKey";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createCustomerSecretKeyRequest.attributes,
      "attributeSets": createCustomerSecretKeyRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createCustomerSecretKeyRequest.authorization,
      "resource_type_schema_version": createCustomerSecretKeyRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createCustomerSecretKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createCustomerSecretKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/CustomerSecretKeys",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createCustomerSecretKeyRequest.customerSecretKey,
        "CustomerSecretKey",
        model.CustomerSecretKey.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateCustomerSecretKeyResponse>{},
        body: await response.json(),
        bodyKey: "customerSecretKey",
        bodyModel: model.CustomerSecretKey,
        type: "model.CustomerSecretKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a Dynamic Resource Group.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDynamicResourceGroupRequest
   * @return CreateDynamicResourceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateDynamicResourceGroup.ts.html |here} to see how to use CreateDynamicResourceGroup API.
   */
  public async createDynamicResourceGroup(
    createDynamicResourceGroupRequest: requests.CreateDynamicResourceGroupRequest
  ): Promise<responses.CreateDynamicResourceGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createDynamicResourceGroup.");
    const operationName = "createDynamicResourceGroup";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createDynamicResourceGroupRequest.attributes,
      "attributeSets": createDynamicResourceGroupRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createDynamicResourceGroupRequest.authorization,
      "resource_type_schema_version": createDynamicResourceGroupRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createDynamicResourceGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDynamicResourceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/DynamicResourceGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDynamicResourceGroupRequest.dynamicResourceGroup,
        "DynamicResourceGroup",
        model.DynamicResourceGroup.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDynamicResourceGroupResponse>{},
        body: await response.json(),
        bodyKey: "dynamicResourceGroup",
        bodyModel: model.DynamicResourceGroup,
        type: "model.DynamicResourceGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add a Grantee to an AppRole
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateGrantRequest
   * @return CreateGrantResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateGrant.ts.html |here} to see how to use CreateGrant API.
   */
  public async createGrant(
    createGrantRequest: requests.CreateGrantRequest
  ): Promise<responses.CreateGrantResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#createGrant.");
    const operationName = "createGrant";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createGrantRequest.attributes,
      "attributeSets": createGrantRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createGrantRequest.authorization,
      "resource_type_schema_version": createGrantRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createGrantRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createGrantRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Grants",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createGrantRequest.grant,
        "Grant",
        model.Grant.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateGrantResponse>{},
        body: await response.json(),
        bodyKey: "grant",
        bodyModel: model.Grant,
        type: "model.Grant",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a group.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateGroupRequest
   * @return CreateGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateGroup.ts.html |here} to see how to use CreateGroup API.
   */
  public async createGroup(
    createGroupRequest: requests.CreateGroupRequest
  ): Promise<responses.CreateGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#createGroup.");
    const operationName = "createGroup";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createGroupRequest.attributes,
      "attributeSets": createGroupRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createGroupRequest.authorization,
      "resource_type_schema_version": createGroupRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Groups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createGroupRequest.group,
        "Group",
        model.Group.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateGroupResponse>{},
        body: await response.json(),
        bodyKey: "group",
        bodyModel: model.Group,
        type: "model.Group",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create an Identity Provider
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateIdentityProviderRequest
   * @return CreateIdentityProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateIdentityProvider.ts.html |here} to see how to use CreateIdentityProvider API.
   */
  public async createIdentityProvider(
    createIdentityProviderRequest: requests.CreateIdentityProviderRequest
  ): Promise<responses.CreateIdentityProviderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createIdentityProvider.");
    const operationName = "createIdentityProvider";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createIdentityProviderRequest.attributes,
      "attributeSets": createIdentityProviderRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createIdentityProviderRequest.authorization,
      "resource_type_schema_version": createIdentityProviderRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createIdentityProviderRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createIdentityProviderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentityProviders",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createIdentityProviderRequest.identityProvider,
        "IdentityProvider",
        model.IdentityProvider.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateIdentityProviderResponse>{},
        body: await response.json(),
        bodyKey: "identityProvider",
        bodyModel: model.IdentityProvider,
        type: "model.IdentityProvider",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Self register a user.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMeRequest
   * @return CreateMeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMe.ts.html |here} to see how to use CreateMe API.
   */
  public async createMe(
    createMeRequest: requests.CreateMeRequest
  ): Promise<responses.CreateMeResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#createMe.");
    const operationName = "createMe";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createMeRequest.attributes,
      "attributeSets": createMeRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMeRequest.authorization,
      "resource_type_schema_version": createMeRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Me",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(createMeRequest.me, "Me", model.Me.getJsonObj),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMeResponse>{},
        body: await response.json(),
        bodyKey: "me",
        bodyModel: model.Me,
        type: "model.Me",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add a user's own API key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMyApiKeyRequest
   * @return CreateMyApiKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMyApiKey.ts.html |here} to see how to use CreateMyApiKey API.
   */
  public async createMyApiKey(
    createMyApiKeyRequest: requests.CreateMyApiKeyRequest
  ): Promise<responses.CreateMyApiKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#createMyApiKey.");
    const operationName = "createMyApiKey";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMyApiKeyRequest.authorization,
      "resource_type_schema_version": createMyApiKeyRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMyApiKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMyApiKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyApiKeys",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMyApiKeyRequest.myApiKey,
        "MyApiKey",
        model.MyApiKey.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMyApiKeyResponse>{},
        body: await response.json(),
        bodyKey: "myApiKey",
        bodyModel: model.MyApiKey,
        type: "model.MyApiKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a user's own Auth token.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMyAuthTokenRequest
   * @return CreateMyAuthTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMyAuthToken.ts.html |here} to see how to use CreateMyAuthToken API.
   */
  public async createMyAuthToken(
    createMyAuthTokenRequest: requests.CreateMyAuthTokenRequest
  ): Promise<responses.CreateMyAuthTokenResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createMyAuthToken.");
    const operationName = "createMyAuthToken";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMyAuthTokenRequest.authorization,
      "resource_type_schema_version": createMyAuthTokenRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMyAuthTokenRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMyAuthTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyAuthTokens",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMyAuthTokenRequest.myAuthToken,
        "MyAuthToken",
        model.MyAuthToken.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMyAuthTokenResponse>{},
        body: await response.json(),
        bodyKey: "myAuthToken",
        bodyModel: model.MyAuthToken,
        type: "model.MyAuthToken",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Initiate Self Service Enrollment using the Requested MFA Factor
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMyAuthenticationFactorInitiatorRequest
   * @return CreateMyAuthenticationFactorInitiatorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMyAuthenticationFactorInitiator.ts.html |here} to see how to use CreateMyAuthenticationFactorInitiator API.
   */
  public async createMyAuthenticationFactorInitiator(
    createMyAuthenticationFactorInitiatorRequest: requests.CreateMyAuthenticationFactorInitiatorRequest
  ): Promise<responses.CreateMyAuthenticationFactorInitiatorResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation IdentityDomainsClient#createMyAuthenticationFactorInitiator."
      );
    const operationName = "createMyAuthenticationFactorInitiator";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMyAuthenticationFactorInitiatorRequest.authorization,
      "resource_type_schema_version":
        createMyAuthenticationFactorInitiatorRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMyAuthenticationFactorInitiatorRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMyAuthenticationFactorInitiatorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyAuthenticationFactorInitiator",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMyAuthenticationFactorInitiatorRequest.myAuthenticationFactorInitiator,
        "MyAuthenticationFactorInitiator",
        model.MyAuthenticationFactorInitiator.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMyAuthenticationFactorInitiatorResponse>{},
        body: await response.json(),
        bodyKey: "myAuthenticationFactorInitiator",
        bodyModel: model.MyAuthenticationFactorInitiator,
        type: "model.MyAuthenticationFactorInitiator",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Validate Self Service Enrollment using the Requested MFA Factor
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMyAuthenticationFactorValidatorRequest
   * @return CreateMyAuthenticationFactorValidatorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMyAuthenticationFactorValidator.ts.html |here} to see how to use CreateMyAuthenticationFactorValidator API.
   */
  public async createMyAuthenticationFactorValidator(
    createMyAuthenticationFactorValidatorRequest: requests.CreateMyAuthenticationFactorValidatorRequest
  ): Promise<responses.CreateMyAuthenticationFactorValidatorResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation IdentityDomainsClient#createMyAuthenticationFactorValidator."
      );
    const operationName = "createMyAuthenticationFactorValidator";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMyAuthenticationFactorValidatorRequest.authorization,
      "resource_type_schema_version":
        createMyAuthenticationFactorValidatorRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMyAuthenticationFactorValidatorRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMyAuthenticationFactorValidatorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyAuthenticationFactorValidator",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMyAuthenticationFactorValidatorRequest.myAuthenticationFactorValidator,
        "MyAuthenticationFactorValidator",
        model.MyAuthenticationFactorValidator.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMyAuthenticationFactorValidatorResponse>{},
        body: await response.json(),
        bodyKey: "myAuthenticationFactorValidator",
        bodyModel: model.MyAuthenticationFactorValidator,
        type: "model.MyAuthenticationFactorValidator",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove All Authentication Factor Channels for a User
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMyAuthenticationFactorsRemoverRequest
   * @return CreateMyAuthenticationFactorsRemoverResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMyAuthenticationFactorsRemover.ts.html |here} to see how to use CreateMyAuthenticationFactorsRemover API.
   */
  public async createMyAuthenticationFactorsRemover(
    createMyAuthenticationFactorsRemoverRequest: requests.CreateMyAuthenticationFactorsRemoverRequest
  ): Promise<responses.CreateMyAuthenticationFactorsRemoverResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation IdentityDomainsClient#createMyAuthenticationFactorsRemover."
      );
    const operationName = "createMyAuthenticationFactorsRemover";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMyAuthenticationFactorsRemoverRequest.authorization,
      "resource_type_schema_version":
        createMyAuthenticationFactorsRemoverRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMyAuthenticationFactorsRemoverRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMyAuthenticationFactorsRemoverRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyAuthenticationFactorsRemover",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMyAuthenticationFactorsRemoverRequest.myAuthenticationFactorsRemover,
        "MyAuthenticationFactorsRemover",
        model.MyAuthenticationFactorsRemover.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMyAuthenticationFactorsRemoverResponse>{},
        body: await response.json(),
        bodyKey: "myAuthenticationFactorsRemover",
        bodyModel: model.MyAuthenticationFactorsRemover,
        type: "model.MyAuthenticationFactorsRemover",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add a user's own customer secret key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMyCustomerSecretKeyRequest
   * @return CreateMyCustomerSecretKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMyCustomerSecretKey.ts.html |here} to see how to use CreateMyCustomerSecretKey API.
   */
  public async createMyCustomerSecretKey(
    createMyCustomerSecretKeyRequest: requests.CreateMyCustomerSecretKeyRequest
  ): Promise<responses.CreateMyCustomerSecretKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createMyCustomerSecretKey.");
    const operationName = "createMyCustomerSecretKey";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMyCustomerSecretKeyRequest.authorization,
      "resource_type_schema_version": createMyCustomerSecretKeyRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMyCustomerSecretKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMyCustomerSecretKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyCustomerSecretKeys",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMyCustomerSecretKeyRequest.myCustomerSecretKey,
        "MyCustomerSecretKey",
        model.MyCustomerSecretKey.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMyCustomerSecretKeyResponse>{},
        body: await response.json(),
        bodyKey: "myCustomerSecretKey",
        bodyModel: model.MyCustomerSecretKey,
        type: "model.MyCustomerSecretKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a user's own OAuth2 client credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMyOAuth2ClientCredentialRequest
   * @return CreateMyOAuth2ClientCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMyOAuth2ClientCredential.ts.html |here} to see how to use CreateMyOAuth2ClientCredential API.
   */
  public async createMyOAuth2ClientCredential(
    createMyOAuth2ClientCredentialRequest: requests.CreateMyOAuth2ClientCredentialRequest
  ): Promise<responses.CreateMyOAuth2ClientCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createMyOAuth2ClientCredential.");
    const operationName = "createMyOAuth2ClientCredential";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMyOAuth2ClientCredentialRequest.authorization,
      "resource_type_schema_version":
        createMyOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMyOAuth2ClientCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMyOAuth2ClientCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyOAuth2ClientCredentials",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMyOAuth2ClientCredentialRequest.myOAuth2ClientCredential,
        "MyOAuth2ClientCredential",
        model.MyOAuth2ClientCredential.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMyOAuth2ClientCredentialResponse>{},
        body: await response.json(),
        bodyKey: "myOAuth2ClientCredential",
        bodyModel: model.MyOAuth2ClientCredential,
        type: "model.MyOAuth2ClientCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a Request
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMyRequestRequest
   * @return CreateMyRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMyRequest.ts.html |here} to see how to use CreateMyRequest API.
   */
  public async createMyRequest(
    createMyRequestRequest: requests.CreateMyRequestRequest
  ): Promise<responses.CreateMyRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#createMyRequest.");
    const operationName = "createMyRequest";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createMyRequestRequest.attributes,
      "attributeSets": createMyRequestRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMyRequestRequest.authorization,
      "resource_type_schema_version": createMyRequestRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMyRequestRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMyRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyRequests",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMyRequestRequest.myRequest,
        "MyRequest",
        model.MyRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMyRequestResponse>{},
        body: await response.json(),
        bodyKey: "myRequest",
        bodyModel: model.MyRequest,
        type: "model.MyRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a user's own SMTP credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMySmtpCredentialRequest
   * @return CreateMySmtpCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMySmtpCredential.ts.html |here} to see how to use CreateMySmtpCredential API.
   */
  public async createMySmtpCredential(
    createMySmtpCredentialRequest: requests.CreateMySmtpCredentialRequest
  ): Promise<responses.CreateMySmtpCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createMySmtpCredential.");
    const operationName = "createMySmtpCredential";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMySmtpCredentialRequest.authorization,
      "resource_type_schema_version": createMySmtpCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMySmtpCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMySmtpCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MySmtpCredentials",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMySmtpCredentialRequest.mySmtpCredential,
        "MySmtpCredential",
        model.MySmtpCredential.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMySmtpCredentialResponse>{},
        body: await response.json(),
        bodyKey: "mySmtpCredential",
        bodyModel: model.MySmtpCredential,
        type: "model.MySmtpCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a user's own support account.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMySupportAccountRequest
   * @return CreateMySupportAccountResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMySupportAccount.ts.html |here} to see how to use CreateMySupportAccount API.
   */
  public async createMySupportAccount(
    createMySupportAccountRequest: requests.CreateMySupportAccountRequest
  ): Promise<responses.CreateMySupportAccountResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createMySupportAccount.");
    const operationName = "createMySupportAccount";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMySupportAccountRequest.authorization,
      "resource_type_schema_version": createMySupportAccountRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMySupportAccountRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMySupportAccountRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MySupportAccounts",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMySupportAccountRequest.mySupportAccount,
        "MySupportAccount",
        model.MySupportAccount.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMySupportAccountResponse>{},
        body: await response.json(),
        bodyKey: "mySupportAccount",
        bodyModel: model.MySupportAccount,
        type: "model.MySupportAccount",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a user's own database (DB) credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateMyUserDbCredentialRequest
   * @return CreateMyUserDbCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateMyUserDbCredential.ts.html |here} to see how to use CreateMyUserDbCredential API.
   */
  public async createMyUserDbCredential(
    createMyUserDbCredentialRequest: requests.CreateMyUserDbCredentialRequest
  ): Promise<responses.CreateMyUserDbCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createMyUserDbCredential.");
    const operationName = "createMyUserDbCredential";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createMyUserDbCredentialRequest.authorization,
      "resource_type_schema_version": createMyUserDbCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createMyUserDbCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createMyUserDbCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyUserDbCredentials",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createMyUserDbCredentialRequest.myUserDbCredential,
        "MyUserDbCredential",
        model.MyUserDbCredential.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateMyUserDbCredentialResponse>{},
        body: await response.json(),
        bodyKey: "myUserDbCredential",
        bodyModel: model.MyUserDbCredential,
        type: "model.MyUserDbCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add a user's OAuth2 client credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateOAuth2ClientCredentialRequest
   * @return CreateOAuth2ClientCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateOAuth2ClientCredential.ts.html |here} to see how to use CreateOAuth2ClientCredential API.
   */
  public async createOAuth2ClientCredential(
    createOAuth2ClientCredentialRequest: requests.CreateOAuth2ClientCredentialRequest
  ): Promise<responses.CreateOAuth2ClientCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createOAuth2ClientCredential.");
    const operationName = "createOAuth2ClientCredential";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createOAuth2ClientCredentialRequest.attributes,
      "attributeSets": createOAuth2ClientCredentialRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createOAuth2ClientCredentialRequest.authorization,
      "resource_type_schema_version": createOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createOAuth2ClientCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOAuth2ClientCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/OAuth2ClientCredentials",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOAuth2ClientCredentialRequest.oAuth2ClientCredential,
        "OAuth2ClientCredential",
        model.OAuth2ClientCredential.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOAuth2ClientCredentialResponse>{},
        body: await response.json(),
        bodyKey: "oAuth2ClientCredential",
        bodyModel: model.OAuth2ClientCredential,
        type: "model.OAuth2ClientCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a password policy.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreatePasswordPolicyRequest
   * @return CreatePasswordPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreatePasswordPolicy.ts.html |here} to see how to use CreatePasswordPolicy API.
   */
  public async createPasswordPolicy(
    createPasswordPolicyRequest: requests.CreatePasswordPolicyRequest
  ): Promise<responses.CreatePasswordPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createPasswordPolicy.");
    const operationName = "createPasswordPolicy";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createPasswordPolicyRequest.attributes,
      "attributeSets": createPasswordPolicyRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createPasswordPolicyRequest.authorization,
      "resource_type_schema_version": createPasswordPolicyRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createPasswordPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createPasswordPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/PasswordPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createPasswordPolicyRequest.passwordPolicy,
        "PasswordPolicy",
        model.PasswordPolicy.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreatePasswordPolicyResponse>{},
        body: await response.json(),
        bodyKey: "passwordPolicy",
        bodyModel: model.PasswordPolicy,
        type: "model.PasswordPolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a security question.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateSecurityQuestionRequest
   * @return CreateSecurityQuestionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateSecurityQuestion.ts.html |here} to see how to use CreateSecurityQuestion API.
   */
  public async createSecurityQuestion(
    createSecurityQuestionRequest: requests.CreateSecurityQuestionRequest
  ): Promise<responses.CreateSecurityQuestionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createSecurityQuestion.");
    const operationName = "createSecurityQuestion";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createSecurityQuestionRequest.attributes,
      "attributeSets": createSecurityQuestionRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createSecurityQuestionRequest.authorization,
      "resource_type_schema_version": createSecurityQuestionRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createSecurityQuestionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSecurityQuestionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SecurityQuestions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSecurityQuestionRequest.securityQuestion,
        "SecurityQuestion",
        model.SecurityQuestion.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSecurityQuestionResponse>{},
        body: await response.json(),
        bodyKey: "securityQuestion",
        bodyModel: model.SecurityQuestion,
        type: "model.SecurityQuestion",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a user's SMTP credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateSmtpCredentialRequest
   * @return CreateSmtpCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateSmtpCredential.ts.html |here} to see how to use CreateSmtpCredential API.
   */
  public async createSmtpCredential(
    createSmtpCredentialRequest: requests.CreateSmtpCredentialRequest
  ): Promise<responses.CreateSmtpCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createSmtpCredential.");
    const operationName = "createSmtpCredential";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createSmtpCredentialRequest.attributes,
      "attributeSets": createSmtpCredentialRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createSmtpCredentialRequest.authorization,
      "resource_type_schema_version": createSmtpCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createSmtpCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSmtpCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SmtpCredentials",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSmtpCredentialRequest.smtpCredential,
        "SmtpCredential",
        model.SmtpCredential.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSmtpCredentialResponse>{},
        body: await response.json(),
        bodyKey: "smtpCredential",
        bodyModel: model.SmtpCredential,
        type: "model.SmtpCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a user.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateUserRequest
   * @return CreateUserResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateUser.ts.html |here} to see how to use CreateUser API.
   */
  public async createUser(
    createUserRequest: requests.CreateUserRequest
  ): Promise<responses.CreateUserResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#createUser.");
    const operationName = "createUser";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createUserRequest.attributes,
      "attributeSets": createUserRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createUserRequest.authorization,
      "resource_type_schema_version": createUserRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createUserRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createUserRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Users",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createUserRequest.user,
        "User",
        model.User.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateUserResponse>{},
        body: await response.json(),
        bodyKey: "user",
        bodyModel: model.User,
        type: "model.User",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a user's database (DB) credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateUserDbCredentialRequest
   * @return CreateUserDbCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/CreateUserDbCredential.ts.html |here} to see how to use CreateUserDbCredential API.
   */
  public async createUserDbCredential(
    createUserDbCredentialRequest: requests.CreateUserDbCredentialRequest
  ): Promise<responses.CreateUserDbCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#createUserDbCredential.");
    const operationName = "createUserDbCredential";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": createUserDbCredentialRequest.attributes,
      "attributeSets": createUserDbCredentialRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": createUserDbCredentialRequest.authorization,
      "resource_type_schema_version": createUserDbCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": createUserDbCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createUserDbCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserDbCredentials",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createUserDbCredentialRequest.userDbCredential,
        "UserDbCredential",
        model.UserDbCredential.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateUserDbCredentialResponse>{},
        body: await response.json(),
        bodyKey: "userDbCredential",
        bodyModel: model.UserDbCredential,
        type: "model.UserDbCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's API key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteApiKeyRequest
   * @return DeleteApiKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteApiKey.ts.html |here} to see how to use DeleteApiKey API.
   */
  public async deleteApiKey(
    deleteApiKeyRequest: requests.DeleteApiKeyRequest
  ): Promise<responses.DeleteApiKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#deleteApiKey.");
    const operationName = "deleteApiKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{apiKeyId}": deleteApiKeyRequest.apiKeyId
    };

    const queryParams = {
      "forceDelete": deleteApiKeyRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteApiKeyRequest.authorization,
      "resource_type_schema_version": deleteApiKeyRequest.resourceTypeSchemaVersion,
      "if-match": deleteApiKeyRequest.ifMatch,
      "opc-retry-token": deleteApiKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteApiKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/ApiKeys/{apiKeyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteApiKeyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete an App
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteAppRequest
   * @return DeleteAppResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteApp.ts.html |here} to see how to use DeleteApp API.
   */
  public async deleteApp(
    deleteAppRequest: requests.DeleteAppRequest
  ): Promise<responses.DeleteAppResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#deleteApp.");
    const operationName = "deleteApp";
    const apiReferenceLink = "";
    const pathParams = {
      "{appId}": deleteAppRequest.appId
    };

    const queryParams = {
      "forceDelete": deleteAppRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteAppRequest.authorization,
      "resource_type_schema_version": deleteAppRequest.resourceTypeSchemaVersion,
      "if-match": deleteAppRequest.ifMatch,
      "opc-retry-token": deleteAppRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAppRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Apps/{appId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAppResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete an AppRole
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteAppRoleRequest
   * @return DeleteAppRoleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteAppRole.ts.html |here} to see how to use DeleteAppRole API.
   */
  public async deleteAppRole(
    deleteAppRoleRequest: requests.DeleteAppRoleRequest
  ): Promise<responses.DeleteAppRoleResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#deleteAppRole.");
    const operationName = "deleteAppRole";
    const apiReferenceLink = "";
    const pathParams = {
      "{appRoleId}": deleteAppRoleRequest.appRoleId
    };

    const queryParams = {
      "forceDelete": deleteAppRoleRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteAppRoleRequest.authorization,
      "resource_type_schema_version": deleteAppRoleRequest.resourceTypeSchemaVersion,
      "if-match": deleteAppRoleRequest.ifMatch,
      "opc-retry-token": deleteAppRoleRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAppRoleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AppRoles/{appRoleId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAppRoleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's Auth token.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteAuthTokenRequest
   * @return DeleteAuthTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteAuthToken.ts.html |here} to see how to use DeleteAuthToken API.
   */
  public async deleteAuthToken(
    deleteAuthTokenRequest: requests.DeleteAuthTokenRequest
  ): Promise<responses.DeleteAuthTokenResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#deleteAuthToken.");
    const operationName = "deleteAuthToken";
    const apiReferenceLink = "";
    const pathParams = {
      "{authTokenId}": deleteAuthTokenRequest.authTokenId
    };

    const queryParams = {
      "forceDelete": deleteAuthTokenRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteAuthTokenRequest.authorization,
      "resource_type_schema_version": deleteAuthTokenRequest.resourceTypeSchemaVersion,
      "if-match": deleteAuthTokenRequest.ifMatch,
      "opc-retry-token": deleteAuthTokenRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAuthTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AuthTokens/{authTokenId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAuthTokenResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's customer secret key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteCustomerSecretKeyRequest
   * @return DeleteCustomerSecretKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteCustomerSecretKey.ts.html |here} to see how to use DeleteCustomerSecretKey API.
   */
  public async deleteCustomerSecretKey(
    deleteCustomerSecretKeyRequest: requests.DeleteCustomerSecretKeyRequest
  ): Promise<responses.DeleteCustomerSecretKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteCustomerSecretKey.");
    const operationName = "deleteCustomerSecretKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{customerSecretKeyId}": deleteCustomerSecretKeyRequest.customerSecretKeyId
    };

    const queryParams = {
      "forceDelete": deleteCustomerSecretKeyRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteCustomerSecretKeyRequest.authorization,
      "resource_type_schema_version": deleteCustomerSecretKeyRequest.resourceTypeSchemaVersion,
      "if-match": deleteCustomerSecretKeyRequest.ifMatch,
      "opc-retry-token": deleteCustomerSecretKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteCustomerSecretKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/CustomerSecretKeys/{customerSecretKeyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteCustomerSecretKeyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a Dynamic Resource Group.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDynamicResourceGroupRequest
   * @return DeleteDynamicResourceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteDynamicResourceGroup.ts.html |here} to see how to use DeleteDynamicResourceGroup API.
   */
  public async deleteDynamicResourceGroup(
    deleteDynamicResourceGroupRequest: requests.DeleteDynamicResourceGroupRequest
  ): Promise<responses.DeleteDynamicResourceGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteDynamicResourceGroup.");
    const operationName = "deleteDynamicResourceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{dynamicResourceGroupId}": deleteDynamicResourceGroupRequest.dynamicResourceGroupId
    };

    const queryParams = {
      "forceDelete": deleteDynamicResourceGroupRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteDynamicResourceGroupRequest.authorization,
      "resource_type_schema_version": deleteDynamicResourceGroupRequest.resourceTypeSchemaVersion,
      "if-match": deleteDynamicResourceGroupRequest.ifMatch,
      "opc-retry-token": deleteDynamicResourceGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDynamicResourceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/DynamicResourceGroups/{dynamicResourceGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDynamicResourceGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove a Grantee from an AppRole
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteGrantRequest
   * @return DeleteGrantResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteGrant.ts.html |here} to see how to use DeleteGrant API.
   */
  public async deleteGrant(
    deleteGrantRequest: requests.DeleteGrantRequest
  ): Promise<responses.DeleteGrantResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#deleteGrant.");
    const operationName = "deleteGrant";
    const apiReferenceLink = "";
    const pathParams = {
      "{grantId}": deleteGrantRequest.grantId
    };

    const queryParams = {
      "forceDelete": deleteGrantRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteGrantRequest.authorization,
      "resource_type_schema_version": deleteGrantRequest.resourceTypeSchemaVersion,
      "if-match": deleteGrantRequest.ifMatch,
      "opc-retry-token": deleteGrantRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteGrantRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Grants/{grantId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteGrantResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a group.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteGroupRequest
   * @return DeleteGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteGroup.ts.html |here} to see how to use DeleteGroup API.
   */
  public async deleteGroup(
    deleteGroupRequest: requests.DeleteGroupRequest
  ): Promise<responses.DeleteGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#deleteGroup.");
    const operationName = "deleteGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{groupId}": deleteGroupRequest.groupId
    };

    const queryParams = {
      "forceDelete": deleteGroupRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteGroupRequest.authorization,
      "resource_type_schema_version": deleteGroupRequest.resourceTypeSchemaVersion,
      "if-match": deleteGroupRequest.ifMatch,
      "opc-retry-token": deleteGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Groups/{groupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete an Identity Provider
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteIdentityProviderRequest
   * @return DeleteIdentityProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteIdentityProvider.ts.html |here} to see how to use DeleteIdentityProvider API.
   */
  public async deleteIdentityProvider(
    deleteIdentityProviderRequest: requests.DeleteIdentityProviderRequest
  ): Promise<responses.DeleteIdentityProviderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteIdentityProvider.");
    const operationName = "deleteIdentityProvider";
    const apiReferenceLink = "";
    const pathParams = {
      "{identityProviderId}": deleteIdentityProviderRequest.identityProviderId
    };

    const queryParams = {
      "forceDelete": deleteIdentityProviderRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteIdentityProviderRequest.authorization,
      "resource_type_schema_version": deleteIdentityProviderRequest.resourceTypeSchemaVersion,
      "if-match": deleteIdentityProviderRequest.ifMatch,
      "opc-retry-token": deleteIdentityProviderRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteIdentityProviderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentityProviders/{identityProviderId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteIdentityProviderResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's own API key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMyApiKeyRequest
   * @return DeleteMyApiKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteMyApiKey.ts.html |here} to see how to use DeleteMyApiKey API.
   */
  public async deleteMyApiKey(
    deleteMyApiKeyRequest: requests.DeleteMyApiKeyRequest
  ): Promise<responses.DeleteMyApiKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#deleteMyApiKey.");
    const operationName = "deleteMyApiKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{myApiKeyId}": deleteMyApiKeyRequest.myApiKeyId
    };

    const queryParams = {
      "forceDelete": deleteMyApiKeyRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteMyApiKeyRequest.authorization,
      "resource_type_schema_version": deleteMyApiKeyRequest.resourceTypeSchemaVersion,
      "if-match": deleteMyApiKeyRequest.ifMatch,
      "opc-retry-token": deleteMyApiKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMyApiKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyApiKeys/{myApiKeyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMyApiKeyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's own Auth token.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMyAuthTokenRequest
   * @return DeleteMyAuthTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteMyAuthToken.ts.html |here} to see how to use DeleteMyAuthToken API.
   */
  public async deleteMyAuthToken(
    deleteMyAuthTokenRequest: requests.DeleteMyAuthTokenRequest
  ): Promise<responses.DeleteMyAuthTokenResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteMyAuthToken.");
    const operationName = "deleteMyAuthToken";
    const apiReferenceLink = "";
    const pathParams = {
      "{myAuthTokenId}": deleteMyAuthTokenRequest.myAuthTokenId
    };

    const queryParams = {
      "forceDelete": deleteMyAuthTokenRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteMyAuthTokenRequest.authorization,
      "resource_type_schema_version": deleteMyAuthTokenRequest.resourceTypeSchemaVersion,
      "if-match": deleteMyAuthTokenRequest.ifMatch,
      "opc-retry-token": deleteMyAuthTokenRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMyAuthTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyAuthTokens/{myAuthTokenId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMyAuthTokenResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's own customer secret key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMyCustomerSecretKeyRequest
   * @return DeleteMyCustomerSecretKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteMyCustomerSecretKey.ts.html |here} to see how to use DeleteMyCustomerSecretKey API.
   */
  public async deleteMyCustomerSecretKey(
    deleteMyCustomerSecretKeyRequest: requests.DeleteMyCustomerSecretKeyRequest
  ): Promise<responses.DeleteMyCustomerSecretKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteMyCustomerSecretKey.");
    const operationName = "deleteMyCustomerSecretKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{myCustomerSecretKeyId}": deleteMyCustomerSecretKeyRequest.myCustomerSecretKeyId
    };

    const queryParams = {
      "forceDelete": deleteMyCustomerSecretKeyRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteMyCustomerSecretKeyRequest.authorization,
      "resource_type_schema_version": deleteMyCustomerSecretKeyRequest.resourceTypeSchemaVersion,
      "if-match": deleteMyCustomerSecretKeyRequest.ifMatch,
      "opc-retry-token": deleteMyCustomerSecretKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMyCustomerSecretKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyCustomerSecretKeys/{myCustomerSecretKeyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMyCustomerSecretKeyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a Device
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMyDeviceRequest
   * @return DeleteMyDeviceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteMyDevice.ts.html |here} to see how to use DeleteMyDevice API.
   */
  public async deleteMyDevice(
    deleteMyDeviceRequest: requests.DeleteMyDeviceRequest
  ): Promise<responses.DeleteMyDeviceResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#deleteMyDevice.");
    const operationName = "deleteMyDevice";
    const apiReferenceLink = "";
    const pathParams = {
      "{myDeviceId}": deleteMyDeviceRequest.myDeviceId
    };

    const queryParams = {
      "forceDelete": deleteMyDeviceRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteMyDeviceRequest.authorization,
      "resource_type_schema_version": deleteMyDeviceRequest.resourceTypeSchemaVersion,
      "if-match": deleteMyDeviceRequest.ifMatch,
      "opc-retry-token": deleteMyDeviceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMyDeviceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyDevices/{myDeviceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMyDeviceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's own OAuth2 client credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMyOAuth2ClientCredentialRequest
   * @return DeleteMyOAuth2ClientCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteMyOAuth2ClientCredential.ts.html |here} to see how to use DeleteMyOAuth2ClientCredential API.
   */
  public async deleteMyOAuth2ClientCredential(
    deleteMyOAuth2ClientCredentialRequest: requests.DeleteMyOAuth2ClientCredentialRequest
  ): Promise<responses.DeleteMyOAuth2ClientCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteMyOAuth2ClientCredential.");
    const operationName = "deleteMyOAuth2ClientCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{myOAuth2ClientCredentialId}":
        deleteMyOAuth2ClientCredentialRequest.myOAuth2ClientCredentialId
    };

    const queryParams = {
      "forceDelete": deleteMyOAuth2ClientCredentialRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteMyOAuth2ClientCredentialRequest.authorization,
      "resource_type_schema_version":
        deleteMyOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
      "if-match": deleteMyOAuth2ClientCredentialRequest.ifMatch,
      "opc-retry-token": deleteMyOAuth2ClientCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMyOAuth2ClientCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyOAuth2ClientCredentials/{myOAuth2ClientCredentialId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMyOAuth2ClientCredentialResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's own SMTP credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMySmtpCredentialRequest
   * @return DeleteMySmtpCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteMySmtpCredential.ts.html |here} to see how to use DeleteMySmtpCredential API.
   */
  public async deleteMySmtpCredential(
    deleteMySmtpCredentialRequest: requests.DeleteMySmtpCredentialRequest
  ): Promise<responses.DeleteMySmtpCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteMySmtpCredential.");
    const operationName = "deleteMySmtpCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{mySmtpCredentialId}": deleteMySmtpCredentialRequest.mySmtpCredentialId
    };

    const queryParams = {
      "forceDelete": deleteMySmtpCredentialRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteMySmtpCredentialRequest.authorization,
      "resource_type_schema_version": deleteMySmtpCredentialRequest.resourceTypeSchemaVersion,
      "if-match": deleteMySmtpCredentialRequest.ifMatch,
      "opc-retry-token": deleteMySmtpCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMySmtpCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MySmtpCredentials/{mySmtpCredentialId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMySmtpCredentialResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's own support account.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMySupportAccountRequest
   * @return DeleteMySupportAccountResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteMySupportAccount.ts.html |here} to see how to use DeleteMySupportAccount API.
   */
  public async deleteMySupportAccount(
    deleteMySupportAccountRequest: requests.DeleteMySupportAccountRequest
  ): Promise<responses.DeleteMySupportAccountResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteMySupportAccount.");
    const operationName = "deleteMySupportAccount";
    const apiReferenceLink = "";
    const pathParams = {
      "{mySupportAccountId}": deleteMySupportAccountRequest.mySupportAccountId
    };

    const queryParams = {
      "forceDelete": deleteMySupportAccountRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteMySupportAccountRequest.authorization,
      "resource_type_schema_version": deleteMySupportAccountRequest.resourceTypeSchemaVersion,
      "if-match": deleteMySupportAccountRequest.ifMatch,
      "opc-retry-token": deleteMySupportAccountRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMySupportAccountRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MySupportAccounts/{mySupportAccountId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMySupportAccountResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a Trusted User Agent
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMyTrustedUserAgentRequest
   * @return DeleteMyTrustedUserAgentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteMyTrustedUserAgent.ts.html |here} to see how to use DeleteMyTrustedUserAgent API.
   */
  public async deleteMyTrustedUserAgent(
    deleteMyTrustedUserAgentRequest: requests.DeleteMyTrustedUserAgentRequest
  ): Promise<responses.DeleteMyTrustedUserAgentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteMyTrustedUserAgent.");
    const operationName = "deleteMyTrustedUserAgent";
    const apiReferenceLink = "";
    const pathParams = {
      "{myTrustedUserAgentId}": deleteMyTrustedUserAgentRequest.myTrustedUserAgentId
    };

    const queryParams = {
      "forceDelete": deleteMyTrustedUserAgentRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteMyTrustedUserAgentRequest.authorization,
      "resource_type_schema_version": deleteMyTrustedUserAgentRequest.resourceTypeSchemaVersion,
      "if-match": deleteMyTrustedUserAgentRequest.ifMatch,
      "opc-retry-token": deleteMyTrustedUserAgentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMyTrustedUserAgentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyTrustedUserAgents/{myTrustedUserAgentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMyTrustedUserAgentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's own database (DB) credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteMyUserDbCredentialRequest
   * @return DeleteMyUserDbCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteMyUserDbCredential.ts.html |here} to see how to use DeleteMyUserDbCredential API.
   */
  public async deleteMyUserDbCredential(
    deleteMyUserDbCredentialRequest: requests.DeleteMyUserDbCredentialRequest
  ): Promise<responses.DeleteMyUserDbCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteMyUserDbCredential.");
    const operationName = "deleteMyUserDbCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{myUserDbCredentialId}": deleteMyUserDbCredentialRequest.myUserDbCredentialId
    };

    const queryParams = {
      "forceDelete": deleteMyUserDbCredentialRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteMyUserDbCredentialRequest.authorization,
      "resource_type_schema_version": deleteMyUserDbCredentialRequest.resourceTypeSchemaVersion,
      "if-match": deleteMyUserDbCredentialRequest.ifMatch,
      "opc-retry-token": deleteMyUserDbCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteMyUserDbCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyUserDbCredentials/{myUserDbCredentialId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteMyUserDbCredentialResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's OAuth2 client credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteOAuth2ClientCredentialRequest
   * @return DeleteOAuth2ClientCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteOAuth2ClientCredential.ts.html |here} to see how to use DeleteOAuth2ClientCredential API.
   */
  public async deleteOAuth2ClientCredential(
    deleteOAuth2ClientCredentialRequest: requests.DeleteOAuth2ClientCredentialRequest
  ): Promise<responses.DeleteOAuth2ClientCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteOAuth2ClientCredential.");
    const operationName = "deleteOAuth2ClientCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{oAuth2ClientCredentialId}": deleteOAuth2ClientCredentialRequest.oAuth2ClientCredentialId
    };

    const queryParams = {
      "forceDelete": deleteOAuth2ClientCredentialRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteOAuth2ClientCredentialRequest.authorization,
      "resource_type_schema_version": deleteOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
      "if-match": deleteOAuth2ClientCredentialRequest.ifMatch,
      "opc-retry-token": deleteOAuth2ClientCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOAuth2ClientCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/OAuth2ClientCredentials/{oAuth2ClientCredentialId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOAuth2ClientCredentialResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a password policy.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeletePasswordPolicyRequest
   * @return DeletePasswordPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeletePasswordPolicy.ts.html |here} to see how to use DeletePasswordPolicy API.
   */
  public async deletePasswordPolicy(
    deletePasswordPolicyRequest: requests.DeletePasswordPolicyRequest
  ): Promise<responses.DeletePasswordPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deletePasswordPolicy.");
    const operationName = "deletePasswordPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{passwordPolicyId}": deletePasswordPolicyRequest.passwordPolicyId
    };

    const queryParams = {
      "forceDelete": deletePasswordPolicyRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deletePasswordPolicyRequest.authorization,
      "resource_type_schema_version": deletePasswordPolicyRequest.resourceTypeSchemaVersion,
      "if-match": deletePasswordPolicyRequest.ifMatch,
      "opc-retry-token": deletePasswordPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deletePasswordPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/PasswordPolicies/{passwordPolicyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeletePasswordPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a security question.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteSecurityQuestionRequest
   * @return DeleteSecurityQuestionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteSecurityQuestion.ts.html |here} to see how to use DeleteSecurityQuestion API.
   */
  public async deleteSecurityQuestion(
    deleteSecurityQuestionRequest: requests.DeleteSecurityQuestionRequest
  ): Promise<responses.DeleteSecurityQuestionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteSecurityQuestion.");
    const operationName = "deleteSecurityQuestion";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityQuestionId}": deleteSecurityQuestionRequest.securityQuestionId
    };

    const queryParams = {
      "forceDelete": deleteSecurityQuestionRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteSecurityQuestionRequest.authorization,
      "resource_type_schema_version": deleteSecurityQuestionRequest.resourceTypeSchemaVersion,
      "if-match": deleteSecurityQuestionRequest.ifMatch,
      "opc-retry-token": deleteSecurityQuestionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSecurityQuestionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SecurityQuestions/{securityQuestionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSecurityQuestionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's SMTP credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteSmtpCredentialRequest
   * @return DeleteSmtpCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteSmtpCredential.ts.html |here} to see how to use DeleteSmtpCredential API.
   */
  public async deleteSmtpCredential(
    deleteSmtpCredentialRequest: requests.DeleteSmtpCredentialRequest
  ): Promise<responses.DeleteSmtpCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteSmtpCredential.");
    const operationName = "deleteSmtpCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{smtpCredentialId}": deleteSmtpCredentialRequest.smtpCredentialId
    };

    const queryParams = {
      "forceDelete": deleteSmtpCredentialRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteSmtpCredentialRequest.authorization,
      "resource_type_schema_version": deleteSmtpCredentialRequest.resourceTypeSchemaVersion,
      "if-match": deleteSmtpCredentialRequest.ifMatch,
      "opc-retry-token": deleteSmtpCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSmtpCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SmtpCredentials/{smtpCredentialId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSmtpCredentialResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteUserRequest
   * @return DeleteUserResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteUser.ts.html |here} to see how to use DeleteUser API.
   */
  public async deleteUser(
    deleteUserRequest: requests.DeleteUserRequest
  ): Promise<responses.DeleteUserResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#deleteUser.");
    const operationName = "deleteUser";
    const apiReferenceLink = "";
    const pathParams = {
      "{userId}": deleteUserRequest.userId
    };

    const queryParams = {
      "forceDelete": deleteUserRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteUserRequest.authorization,
      "resource_type_schema_version": deleteUserRequest.resourceTypeSchemaVersion,
      "if-match": deleteUserRequest.ifMatch,
      "opc-retry-token": deleteUserRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteUserRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Users/{userId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUserResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete a user's database (DB) credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteUserDbCredentialRequest
   * @return DeleteUserDbCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/DeleteUserDbCredential.ts.html |here} to see how to use DeleteUserDbCredential API.
   */
  public async deleteUserDbCredential(
    deleteUserDbCredentialRequest: requests.DeleteUserDbCredentialRequest
  ): Promise<responses.DeleteUserDbCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#deleteUserDbCredential.");
    const operationName = "deleteUserDbCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{userDbCredentialId}": deleteUserDbCredentialRequest.userDbCredentialId
    };

    const queryParams = {
      "forceDelete": deleteUserDbCredentialRequest.forceDelete
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": deleteUserDbCredentialRequest.authorization,
      "resource_type_schema_version": deleteUserDbCredentialRequest.resourceTypeSchemaVersion,
      "if-match": deleteUserDbCredentialRequest.ifMatch,
      "opc-retry-token": deleteUserDbCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteUserDbCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserDbCredentials/{userDbCredentialId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUserDbCredentialResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Account Mgmt Info
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAccountMgmtInfoRequest
   * @return GetAccountMgmtInfoResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetAccountMgmtInfo.ts.html |here} to see how to use GetAccountMgmtInfo API.
   */
  public async getAccountMgmtInfo(
    getAccountMgmtInfoRequest: requests.GetAccountMgmtInfoRequest
  ): Promise<responses.GetAccountMgmtInfoResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getAccountMgmtInfo.");
    const operationName = "getAccountMgmtInfo";
    const apiReferenceLink = "";
    const pathParams = {
      "{accountMgmtInfoId}": getAccountMgmtInfoRequest.accountMgmtInfoId
    };

    const queryParams = {
      "attributes": getAccountMgmtInfoRequest.attributes,
      "attributeSets": getAccountMgmtInfoRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getAccountMgmtInfoRequest.authorization,
      "resource_type_schema_version": getAccountMgmtInfoRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getAccountMgmtInfoRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAccountMgmtInfoRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AccountMgmtInfos/{accountMgmtInfoId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAccountMgmtInfoResponse>{},
        body: await response.json(),
        bodyKey: "accountMgmtInfo",
        bodyModel: model.AccountMgmtInfo,
        type: "model.AccountMgmtInfo",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get an account recovery setting.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAccountRecoverySettingRequest
   * @return GetAccountRecoverySettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetAccountRecoverySetting.ts.html |here} to see how to use GetAccountRecoverySetting API.
   */
  public async getAccountRecoverySetting(
    getAccountRecoverySettingRequest: requests.GetAccountRecoverySettingRequest
  ): Promise<responses.GetAccountRecoverySettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getAccountRecoverySetting.");
    const operationName = "getAccountRecoverySetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{accountRecoverySettingId}": getAccountRecoverySettingRequest.accountRecoverySettingId
    };

    const queryParams = {
      "attributes": getAccountRecoverySettingRequest.attributes,
      "attributeSets": getAccountRecoverySettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getAccountRecoverySettingRequest.authorization,
      "resource_type_schema_version": getAccountRecoverySettingRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getAccountRecoverySettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAccountRecoverySettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AccountRecoverySettings/{accountRecoverySettingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAccountRecoverySettingResponse>{},
        body: await response.json(),
        bodyKey: "accountRecoverySetting",
        bodyModel: model.AccountRecoverySetting,
        type: "model.AccountRecoverySetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's API key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetApiKeyRequest
   * @return GetApiKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetApiKey.ts.html |here} to see how to use GetApiKey API.
   */
  public async getApiKey(
    getApiKeyRequest: requests.GetApiKeyRequest
  ): Promise<responses.GetApiKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getApiKey.");
    const operationName = "getApiKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{apiKeyId}": getApiKeyRequest.apiKeyId
    };

    const queryParams = {
      "attributes": getApiKeyRequest.attributes,
      "attributeSets": getApiKeyRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getApiKeyRequest.authorization,
      "resource_type_schema_version": getApiKeyRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getApiKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getApiKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/ApiKeys/{apiKeyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetApiKeyResponse>{},
        body: await response.json(),
        bodyKey: "apiKey",
        bodyModel: model.ApiKey,
        type: "model.ApiKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get an App
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAppRequest
   * @return GetAppResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetApp.ts.html |here} to see how to use GetApp API.
   */
  public async getApp(getAppRequest: requests.GetAppRequest): Promise<responses.GetAppResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getApp.");
    const operationName = "getApp";
    const apiReferenceLink = "";
    const pathParams = {
      "{appId}": getAppRequest.appId
    };

    const queryParams = {
      "attributes": getAppRequest.attributes,
      "attributeSets": getAppRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getAppRequest.authorization,
      "resource_type_schema_version": getAppRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getAppRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAppRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Apps/{appId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAppResponse>{},
        body: await response.json(),
        bodyKey: "app",
        bodyModel: model.App,
        type: "model.App",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get an AppRole
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAppRoleRequest
   * @return GetAppRoleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetAppRole.ts.html |here} to see how to use GetAppRole API.
   */
  public async getAppRole(
    getAppRoleRequest: requests.GetAppRoleRequest
  ): Promise<responses.GetAppRoleResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getAppRole.");
    const operationName = "getAppRole";
    const apiReferenceLink = "";
    const pathParams = {
      "{appRoleId}": getAppRoleRequest.appRoleId
    };

    const queryParams = {
      "attributes": getAppRoleRequest.attributes,
      "attributeSets": getAppRoleRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getAppRoleRequest.authorization,
      "resource_type_schema_version": getAppRoleRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getAppRoleRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAppRoleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AppRoles/{appRoleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAppRoleResponse>{},
        body: await response.json(),
        bodyKey: "appRole",
        bodyModel: model.AppRole,
        type: "model.AppRole",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's Auth token.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAuthTokenRequest
   * @return GetAuthTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetAuthToken.ts.html |here} to see how to use GetAuthToken API.
   */
  public async getAuthToken(
    getAuthTokenRequest: requests.GetAuthTokenRequest
  ): Promise<responses.GetAuthTokenResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getAuthToken.");
    const operationName = "getAuthToken";
    const apiReferenceLink = "";
    const pathParams = {
      "{authTokenId}": getAuthTokenRequest.authTokenId
    };

    const queryParams = {
      "attributes": getAuthTokenRequest.attributes,
      "attributeSets": getAuthTokenRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getAuthTokenRequest.authorization,
      "resource_type_schema_version": getAuthTokenRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getAuthTokenRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAuthTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AuthTokens/{authTokenId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAuthTokenResponse>{},
        body: await response.json(),
        bodyKey: "authToken",
        bodyModel: model.AuthToken,
        type: "model.AuthToken",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get Authentication Factor Settings
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAuthenticationFactorSettingRequest
   * @return GetAuthenticationFactorSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetAuthenticationFactorSetting.ts.html |here} to see how to use GetAuthenticationFactorSetting API.
   */
  public async getAuthenticationFactorSetting(
    getAuthenticationFactorSettingRequest: requests.GetAuthenticationFactorSettingRequest
  ): Promise<responses.GetAuthenticationFactorSettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getAuthenticationFactorSetting.");
    const operationName = "getAuthenticationFactorSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{authenticationFactorSettingId}":
        getAuthenticationFactorSettingRequest.authenticationFactorSettingId
    };

    const queryParams = {
      "attributes": getAuthenticationFactorSettingRequest.attributes,
      "attributeSets": getAuthenticationFactorSettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getAuthenticationFactorSettingRequest.authorization,
      "resource_type_schema_version":
        getAuthenticationFactorSettingRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getAuthenticationFactorSettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAuthenticationFactorSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AuthenticationFactorSettings/{authenticationFactorSettingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAuthenticationFactorSettingResponse>{},
        body: await response.json(),
        bodyKey: "authenticationFactorSetting",
        bodyModel: model.AuthenticationFactorSetting,
        type: "model.AuthenticationFactorSetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's customer secret key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetCustomerSecretKeyRequest
   * @return GetCustomerSecretKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetCustomerSecretKey.ts.html |here} to see how to use GetCustomerSecretKey API.
   */
  public async getCustomerSecretKey(
    getCustomerSecretKeyRequest: requests.GetCustomerSecretKeyRequest
  ): Promise<responses.GetCustomerSecretKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getCustomerSecretKey.");
    const operationName = "getCustomerSecretKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{customerSecretKeyId}": getCustomerSecretKeyRequest.customerSecretKeyId
    };

    const queryParams = {
      "attributes": getCustomerSecretKeyRequest.attributes,
      "attributeSets": getCustomerSecretKeyRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getCustomerSecretKeyRequest.authorization,
      "resource_type_schema_version": getCustomerSecretKeyRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getCustomerSecretKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCustomerSecretKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/CustomerSecretKeys/{customerSecretKeyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCustomerSecretKeyResponse>{},
        body: await response.json(),
        bodyKey: "customerSecretKey",
        bodyModel: model.CustomerSecretKey,
        type: "model.CustomerSecretKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a Dynamic Resource Group.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDynamicResourceGroupRequest
   * @return GetDynamicResourceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetDynamicResourceGroup.ts.html |here} to see how to use GetDynamicResourceGroup API.
   */
  public async getDynamicResourceGroup(
    getDynamicResourceGroupRequest: requests.GetDynamicResourceGroupRequest
  ): Promise<responses.GetDynamicResourceGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getDynamicResourceGroup.");
    const operationName = "getDynamicResourceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{dynamicResourceGroupId}": getDynamicResourceGroupRequest.dynamicResourceGroupId
    };

    const queryParams = {
      "attributes": getDynamicResourceGroupRequest.attributes,
      "attributeSets": getDynamicResourceGroupRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getDynamicResourceGroupRequest.authorization,
      "resource_type_schema_version": getDynamicResourceGroupRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getDynamicResourceGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDynamicResourceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/DynamicResourceGroups/{dynamicResourceGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDynamicResourceGroupResponse>{},
        body: await response.json(),
        bodyKey: "dynamicResourceGroup",
        bodyModel: model.DynamicResourceGroup,
        type: "model.DynamicResourceGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a Grant
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetGrantRequest
   * @return GetGrantResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetGrant.ts.html |here} to see how to use GetGrant API.
   */
  public async getGrant(
    getGrantRequest: requests.GetGrantRequest
  ): Promise<responses.GetGrantResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getGrant.");
    const operationName = "getGrant";
    const apiReferenceLink = "";
    const pathParams = {
      "{grantId}": getGrantRequest.grantId
    };

    const queryParams = {
      "attributes": getGrantRequest.attributes,
      "attributeSets": getGrantRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getGrantRequest.authorization,
      "resource_type_schema_version": getGrantRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getGrantRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getGrantRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Grants/{grantId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetGrantResponse>{},
        body: await response.json(),
        bodyKey: "grant",
        bodyModel: model.Grant,
        type: "model.Grant",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a group. <b>Important:</b> The Group SEARCH and GET operations on users and members will throw an exception if the response has more than 10,000 members. To avoid the exception, use the pagination filter to GET or SEARCH group members.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetGroupRequest
   * @return GetGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetGroup.ts.html |here} to see how to use GetGroup API.
   */
  public async getGroup(
    getGroupRequest: requests.GetGroupRequest
  ): Promise<responses.GetGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getGroup.");
    const operationName = "getGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{groupId}": getGroupRequest.groupId
    };

    const queryParams = {
      "attributes": getGroupRequest.attributes,
      "attributeSets": getGroupRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getGroupRequest.authorization,
      "resource_type_schema_version": getGroupRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Groups/{groupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetGroupResponse>{},
        body: await response.json(),
        bodyKey: "group",
        bodyModel: model.Group,
        type: "model.Group",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get an Identity Provider
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetIdentityProviderRequest
   * @return GetIdentityProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetIdentityProvider.ts.html |here} to see how to use GetIdentityProvider API.
   */
  public async getIdentityProvider(
    getIdentityProviderRequest: requests.GetIdentityProviderRequest
  ): Promise<responses.GetIdentityProviderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getIdentityProvider.");
    const operationName = "getIdentityProvider";
    const apiReferenceLink = "";
    const pathParams = {
      "{identityProviderId}": getIdentityProviderRequest.identityProviderId
    };

    const queryParams = {
      "attributes": getIdentityProviderRequest.attributes,
      "attributeSets": getIdentityProviderRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getIdentityProviderRequest.authorization,
      "resource_type_schema_version": getIdentityProviderRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getIdentityProviderRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getIdentityProviderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentityProviders/{identityProviderId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIdentityProviderResponse>{},
        body: await response.json(),
        bodyKey: "identityProvider",
        bodyModel: model.IdentityProvider,
        type: "model.IdentityProvider",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get an Identity setting.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetIdentitySettingRequest
   * @return GetIdentitySettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetIdentitySetting.ts.html |here} to see how to use GetIdentitySetting API.
   */
  public async getIdentitySetting(
    getIdentitySettingRequest: requests.GetIdentitySettingRequest
  ): Promise<responses.GetIdentitySettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getIdentitySetting.");
    const operationName = "getIdentitySetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{identitySettingId}": getIdentitySettingRequest.identitySettingId
    };

    const queryParams = {
      "attributes": getIdentitySettingRequest.attributes,
      "attributeSets": getIdentitySettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getIdentitySettingRequest.authorization,
      "resource_type_schema_version": getIdentitySettingRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getIdentitySettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getIdentitySettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentitySettings/{identitySettingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetIdentitySettingResponse>{},
        body: await response.json(),
        bodyKey: "identitySetting",
        bodyModel: model.IdentitySetting,
        type: "model.IdentitySetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get KmsiSettings
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetKmsiSettingRequest
   * @return GetKmsiSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetKmsiSetting.ts.html |here} to see how to use GetKmsiSetting API.
   */
  public async getKmsiSetting(
    getKmsiSettingRequest: requests.GetKmsiSettingRequest
  ): Promise<responses.GetKmsiSettingResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getKmsiSetting.");
    const operationName = "getKmsiSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{kmsiSettingId}": getKmsiSettingRequest.kmsiSettingId
    };

    const queryParams = {
      "attributes": getKmsiSettingRequest.attributes,
      "attributeSets": getKmsiSettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getKmsiSettingRequest.authorization,
      "resource_type_schema_version": getKmsiSettingRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getKmsiSettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getKmsiSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/KmsiSettings/{kmsiSettingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetKmsiSettingResponse>{},
        body: await response.json(),
        bodyKey: "kmsiSetting",
        bodyModel: model.KmsiSetting,
        type: "model.KmsiSetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's own information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMeRequest
   * @return GetMeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetMe.ts.html |here} to see how to use GetMe API.
   */
  public async getMe(getMeRequest: requests.GetMeRequest): Promise<responses.GetMeResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getMe.");
    const operationName = "getMe";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": getMeRequest.attributes,
      "attributeSets": getMeRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getMeRequest.authorization,
      "resource_type_schema_version": getMeRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getMeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Me",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMeResponse>{},
        body: await response.json(),
        bodyKey: "me",
        bodyModel: model.Me,
        type: "model.Me",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's own API key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMyApiKeyRequest
   * @return GetMyApiKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetMyApiKey.ts.html |here} to see how to use GetMyApiKey API.
   */
  public async getMyApiKey(
    getMyApiKeyRequest: requests.GetMyApiKeyRequest
  ): Promise<responses.GetMyApiKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getMyApiKey.");
    const operationName = "getMyApiKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{myApiKeyId}": getMyApiKeyRequest.myApiKeyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getMyApiKeyRequest.authorization,
      "resource_type_schema_version": getMyApiKeyRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getMyApiKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMyApiKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyApiKeys/{myApiKeyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMyApiKeyResponse>{},
        body: await response.json(),
        bodyKey: "myApiKey",
        bodyModel: model.MyApiKey,
        type: "model.MyApiKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's own Auth token.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMyAuthTokenRequest
   * @return GetMyAuthTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetMyAuthToken.ts.html |here} to see how to use GetMyAuthToken API.
   */
  public async getMyAuthToken(
    getMyAuthTokenRequest: requests.GetMyAuthTokenRequest
  ): Promise<responses.GetMyAuthTokenResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getMyAuthToken.");
    const operationName = "getMyAuthToken";
    const apiReferenceLink = "";
    const pathParams = {
      "{myAuthTokenId}": getMyAuthTokenRequest.myAuthTokenId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getMyAuthTokenRequest.authorization,
      "resource_type_schema_version": getMyAuthTokenRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getMyAuthTokenRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMyAuthTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyAuthTokens/{myAuthTokenId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMyAuthTokenResponse>{},
        body: await response.json(),
        bodyKey: "myAuthToken",
        bodyModel: model.MyAuthToken,
        type: "model.MyAuthToken",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's own customer secret key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMyCustomerSecretKeyRequest
   * @return GetMyCustomerSecretKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetMyCustomerSecretKey.ts.html |here} to see how to use GetMyCustomerSecretKey API.
   */
  public async getMyCustomerSecretKey(
    getMyCustomerSecretKeyRequest: requests.GetMyCustomerSecretKeyRequest
  ): Promise<responses.GetMyCustomerSecretKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getMyCustomerSecretKey.");
    const operationName = "getMyCustomerSecretKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{myCustomerSecretKeyId}": getMyCustomerSecretKeyRequest.myCustomerSecretKeyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getMyCustomerSecretKeyRequest.authorization,
      "resource_type_schema_version": getMyCustomerSecretKeyRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getMyCustomerSecretKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMyCustomerSecretKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyCustomerSecretKeys/{myCustomerSecretKeyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMyCustomerSecretKeyResponse>{},
        body: await response.json(),
        bodyKey: "myCustomerSecretKey",
        bodyModel: model.MyCustomerSecretKey,
        type: "model.MyCustomerSecretKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a Device
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMyDeviceRequest
   * @return GetMyDeviceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetMyDevice.ts.html |here} to see how to use GetMyDevice API.
   */
  public async getMyDevice(
    getMyDeviceRequest: requests.GetMyDeviceRequest
  ): Promise<responses.GetMyDeviceResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getMyDevice.");
    const operationName = "getMyDevice";
    const apiReferenceLink = "";
    const pathParams = {
      "{myDeviceId}": getMyDeviceRequest.myDeviceId
    };

    const queryParams = {
      "attributes": getMyDeviceRequest.attributes,
      "attributeSets": getMyDeviceRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getMyDeviceRequest.authorization,
      "resource_type_schema_version": getMyDeviceRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getMyDeviceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMyDeviceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyDevices/{myDeviceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMyDeviceResponse>{},
        body: await response.json(),
        bodyKey: "myDevice",
        bodyModel: model.MyDevice,
        type: "model.MyDevice",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's own OAuth2 client credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMyOAuth2ClientCredentialRequest
   * @return GetMyOAuth2ClientCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetMyOAuth2ClientCredential.ts.html |here} to see how to use GetMyOAuth2ClientCredential API.
   */
  public async getMyOAuth2ClientCredential(
    getMyOAuth2ClientCredentialRequest: requests.GetMyOAuth2ClientCredentialRequest
  ): Promise<responses.GetMyOAuth2ClientCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getMyOAuth2ClientCredential.");
    const operationName = "getMyOAuth2ClientCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{myOAuth2ClientCredentialId}": getMyOAuth2ClientCredentialRequest.myOAuth2ClientCredentialId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getMyOAuth2ClientCredentialRequest.authorization,
      "resource_type_schema_version": getMyOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getMyOAuth2ClientCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMyOAuth2ClientCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyOAuth2ClientCredentials/{myOAuth2ClientCredentialId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMyOAuth2ClientCredentialResponse>{},
        body: await response.json(),
        bodyKey: "myOAuth2ClientCredential",
        bodyModel: model.MyOAuth2ClientCredential,
        type: "model.MyOAuth2ClientCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's own SMTP credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMySmtpCredentialRequest
   * @return GetMySmtpCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetMySmtpCredential.ts.html |here} to see how to use GetMySmtpCredential API.
   */
  public async getMySmtpCredential(
    getMySmtpCredentialRequest: requests.GetMySmtpCredentialRequest
  ): Promise<responses.GetMySmtpCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getMySmtpCredential.");
    const operationName = "getMySmtpCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{mySmtpCredentialId}": getMySmtpCredentialRequest.mySmtpCredentialId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getMySmtpCredentialRequest.authorization,
      "resource_type_schema_version": getMySmtpCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getMySmtpCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMySmtpCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MySmtpCredentials/{mySmtpCredentialId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMySmtpCredentialResponse>{},
        body: await response.json(),
        bodyKey: "mySmtpCredential",
        bodyModel: model.MySmtpCredential,
        type: "model.MySmtpCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's own support account.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMySupportAccountRequest
   * @return GetMySupportAccountResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetMySupportAccount.ts.html |here} to see how to use GetMySupportAccount API.
   */
  public async getMySupportAccount(
    getMySupportAccountRequest: requests.GetMySupportAccountRequest
  ): Promise<responses.GetMySupportAccountResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getMySupportAccount.");
    const operationName = "getMySupportAccount";
    const apiReferenceLink = "";
    const pathParams = {
      "{mySupportAccountId}": getMySupportAccountRequest.mySupportAccountId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getMySupportAccountRequest.authorization,
      "resource_type_schema_version": getMySupportAccountRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getMySupportAccountRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMySupportAccountRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MySupportAccounts/{mySupportAccountId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMySupportAccountResponse>{},
        body: await response.json(),
        bodyKey: "mySupportAccount",
        bodyModel: model.MySupportAccount,
        type: "model.MySupportAccount",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a Trusted User Agent
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMyTrustedUserAgentRequest
   * @return GetMyTrustedUserAgentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetMyTrustedUserAgent.ts.html |here} to see how to use GetMyTrustedUserAgent API.
   */
  public async getMyTrustedUserAgent(
    getMyTrustedUserAgentRequest: requests.GetMyTrustedUserAgentRequest
  ): Promise<responses.GetMyTrustedUserAgentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getMyTrustedUserAgent.");
    const operationName = "getMyTrustedUserAgent";
    const apiReferenceLink = "";
    const pathParams = {
      "{myTrustedUserAgentId}": getMyTrustedUserAgentRequest.myTrustedUserAgentId
    };

    const queryParams = {
      "attributes": getMyTrustedUserAgentRequest.attributes,
      "attributeSets": getMyTrustedUserAgentRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getMyTrustedUserAgentRequest.authorization,
      "resource_type_schema_version": getMyTrustedUserAgentRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getMyTrustedUserAgentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMyTrustedUserAgentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyTrustedUserAgents/{myTrustedUserAgentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMyTrustedUserAgentResponse>{},
        body: await response.json(),
        bodyKey: "myTrustedUserAgent",
        bodyModel: model.MyTrustedUserAgent,
        type: "model.MyTrustedUserAgent",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's own database (DB) credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetMyUserDbCredentialRequest
   * @return GetMyUserDbCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetMyUserDbCredential.ts.html |here} to see how to use GetMyUserDbCredential API.
   */
  public async getMyUserDbCredential(
    getMyUserDbCredentialRequest: requests.GetMyUserDbCredentialRequest
  ): Promise<responses.GetMyUserDbCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getMyUserDbCredential.");
    const operationName = "getMyUserDbCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{myUserDbCredentialId}": getMyUserDbCredentialRequest.myUserDbCredentialId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getMyUserDbCredentialRequest.authorization,
      "resource_type_schema_version": getMyUserDbCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getMyUserDbCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMyUserDbCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyUserDbCredentials/{myUserDbCredentialId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMyUserDbCredentialResponse>{},
        body: await response.json(),
        bodyKey: "myUserDbCredential",
        bodyModel: model.MyUserDbCredential,
        type: "model.MyUserDbCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's OAuth2 client credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetOAuth2ClientCredentialRequest
   * @return GetOAuth2ClientCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetOAuth2ClientCredential.ts.html |here} to see how to use GetOAuth2ClientCredential API.
   */
  public async getOAuth2ClientCredential(
    getOAuth2ClientCredentialRequest: requests.GetOAuth2ClientCredentialRequest
  ): Promise<responses.GetOAuth2ClientCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getOAuth2ClientCredential.");
    const operationName = "getOAuth2ClientCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{oAuth2ClientCredentialId}": getOAuth2ClientCredentialRequest.oAuth2ClientCredentialId
    };

    const queryParams = {
      "attributes": getOAuth2ClientCredentialRequest.attributes,
      "attributeSets": getOAuth2ClientCredentialRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getOAuth2ClientCredentialRequest.authorization,
      "resource_type_schema_version": getOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getOAuth2ClientCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOAuth2ClientCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/OAuth2ClientCredentials/{oAuth2ClientCredentialId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOAuth2ClientCredentialResponse>{},
        body: await response.json(),
        bodyKey: "oAuth2ClientCredential",
        bodyModel: model.OAuth2ClientCredential,
        type: "model.OAuth2ClientCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a password policy.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPasswordPolicyRequest
   * @return GetPasswordPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetPasswordPolicy.ts.html |here} to see how to use GetPasswordPolicy API.
   */
  public async getPasswordPolicy(
    getPasswordPolicyRequest: requests.GetPasswordPolicyRequest
  ): Promise<responses.GetPasswordPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getPasswordPolicy.");
    const operationName = "getPasswordPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{passwordPolicyId}": getPasswordPolicyRequest.passwordPolicyId
    };

    const queryParams = {
      "attributes": getPasswordPolicyRequest.attributes,
      "attributeSets": getPasswordPolicyRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getPasswordPolicyRequest.authorization,
      "resource_type_schema_version": getPasswordPolicyRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getPasswordPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPasswordPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/PasswordPolicies/{passwordPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPasswordPolicyResponse>{},
        body: await response.json(),
        bodyKey: "passwordPolicy",
        bodyModel: model.PasswordPolicy,
        type: "model.PasswordPolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a security question.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSecurityQuestionRequest
   * @return GetSecurityQuestionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetSecurityQuestion.ts.html |here} to see how to use GetSecurityQuestion API.
   */
  public async getSecurityQuestion(
    getSecurityQuestionRequest: requests.GetSecurityQuestionRequest
  ): Promise<responses.GetSecurityQuestionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getSecurityQuestion.");
    const operationName = "getSecurityQuestion";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityQuestionId}": getSecurityQuestionRequest.securityQuestionId
    };

    const queryParams = {
      "attributes": getSecurityQuestionRequest.attributes,
      "attributeSets": getSecurityQuestionRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getSecurityQuestionRequest.authorization,
      "resource_type_schema_version": getSecurityQuestionRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getSecurityQuestionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityQuestionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SecurityQuestions/{securityQuestionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityQuestionResponse>{},
        body: await response.json(),
        bodyKey: "securityQuestion",
        bodyModel: model.SecurityQuestion,
        type: "model.SecurityQuestion",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a security question setting.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSecurityQuestionSettingRequest
   * @return GetSecurityQuestionSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetSecurityQuestionSetting.ts.html |here} to see how to use GetSecurityQuestionSetting API.
   */
  public async getSecurityQuestionSetting(
    getSecurityQuestionSettingRequest: requests.GetSecurityQuestionSettingRequest
  ): Promise<responses.GetSecurityQuestionSettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getSecurityQuestionSetting.");
    const operationName = "getSecurityQuestionSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityQuestionSettingId}": getSecurityQuestionSettingRequest.securityQuestionSettingId
    };

    const queryParams = {
      "attributes": getSecurityQuestionSettingRequest.attributes,
      "attributeSets": getSecurityQuestionSettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getSecurityQuestionSettingRequest.authorization,
      "resource_type_schema_version": getSecurityQuestionSettingRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getSecurityQuestionSettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSecurityQuestionSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SecurityQuestionSettings/{securityQuestionSettingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSecurityQuestionSettingResponse>{},
        body: await response.json(),
        bodyKey: "securityQuestionSetting",
        bodyModel: model.SecurityQuestionSetting,
        type: "model.SecurityQuestionSetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's SMTP credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSmtpCredentialRequest
   * @return GetSmtpCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetSmtpCredential.ts.html |here} to see how to use GetSmtpCredential API.
   */
  public async getSmtpCredential(
    getSmtpCredentialRequest: requests.GetSmtpCredentialRequest
  ): Promise<responses.GetSmtpCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getSmtpCredential.");
    const operationName = "getSmtpCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{smtpCredentialId}": getSmtpCredentialRequest.smtpCredentialId
    };

    const queryParams = {
      "attributes": getSmtpCredentialRequest.attributes,
      "attributeSets": getSmtpCredentialRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getSmtpCredentialRequest.authorization,
      "resource_type_schema_version": getSmtpCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getSmtpCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSmtpCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SmtpCredentials/{smtpCredentialId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSmtpCredentialResponse>{},
        body: await response.json(),
        bodyKey: "smtpCredential",
        bodyModel: model.SmtpCredential,
        type: "model.SmtpCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUserRequest
   * @return GetUserResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetUser.ts.html |here} to see how to use GetUser API.
   */
  public async getUser(
    getUserRequest: requests.GetUserRequest
  ): Promise<responses.GetUserResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#getUser.");
    const operationName = "getUser";
    const apiReferenceLink = "";
    const pathParams = {
      "{userId}": getUserRequest.userId
    };

    const queryParams = {
      "attributes": getUserRequest.attributes,
      "attributeSets": getUserRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getUserRequest.authorization,
      "resource_type_schema_version": getUserRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getUserRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUserRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Users/{userId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUserResponse>{},
        body: await response.json(),
        bodyKey: "user",
        bodyModel: model.User,
        type: "model.User",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get User Schema Attribute Settings
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUserAttributesSettingRequest
   * @return GetUserAttributesSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetUserAttributesSetting.ts.html |here} to see how to use GetUserAttributesSetting API.
   */
  public async getUserAttributesSetting(
    getUserAttributesSettingRequest: requests.GetUserAttributesSettingRequest
  ): Promise<responses.GetUserAttributesSettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getUserAttributesSetting.");
    const operationName = "getUserAttributesSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{userAttributesSettingId}": getUserAttributesSettingRequest.userAttributesSettingId
    };

    const queryParams = {
      "attributes": getUserAttributesSettingRequest.attributes,
      "attributeSets": getUserAttributesSettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getUserAttributesSettingRequest.authorization,
      "resource_type_schema_version": getUserAttributesSettingRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getUserAttributesSettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUserAttributesSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserAttributesSettings/{userAttributesSettingId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUserAttributesSettingResponse>{},
        body: await response.json(),
        bodyKey: "userAttributesSetting",
        bodyModel: model.UserAttributesSetting,
        type: "model.UserAttributesSetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get a user's database (DB) credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUserDbCredentialRequest
   * @return GetUserDbCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/GetUserDbCredential.ts.html |here} to see how to use GetUserDbCredential API.
   */
  public async getUserDbCredential(
    getUserDbCredentialRequest: requests.GetUserDbCredentialRequest
  ): Promise<responses.GetUserDbCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#getUserDbCredential.");
    const operationName = "getUserDbCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{userDbCredentialId}": getUserDbCredentialRequest.userDbCredentialId
    };

    const queryParams = {
      "attributes": getUserDbCredentialRequest.attributes,
      "attributeSets": getUserDbCredentialRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": getUserDbCredentialRequest.authorization,
      "resource_type_schema_version": getUserDbCredentialRequest.resourceTypeSchemaVersion,
      "opc-retry-token": getUserDbCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUserDbCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserDbCredentials/{userDbCredentialId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUserDbCredentialResponse>{},
        body: await response.json(),
        bodyKey: "userDbCredential",
        bodyModel: model.UserDbCredential,
        type: "model.UserDbCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Account Mgmt Info
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAccountMgmtInfosRequest
   * @return ListAccountMgmtInfosResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListAccountMgmtInfos.ts.html |here} to see how to use ListAccountMgmtInfos API.
   */
  public async listAccountMgmtInfos(
    listAccountMgmtInfosRequest: requests.ListAccountMgmtInfosRequest
  ): Promise<responses.ListAccountMgmtInfosResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listAccountMgmtInfos.");
    const operationName = "listAccountMgmtInfos";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listAccountMgmtInfosRequest.filter,
      "sortBy": listAccountMgmtInfosRequest.sortBy,
      "sortOrder": listAccountMgmtInfosRequest.sortOrder,
      "startIndex": listAccountMgmtInfosRequest.startIndex,
      "count": listAccountMgmtInfosRequest.count,
      "attributes": listAccountMgmtInfosRequest.attributes,
      "attributeSets": listAccountMgmtInfosRequest.attributeSets,
      "page": listAccountMgmtInfosRequest.page,
      "limit": listAccountMgmtInfosRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listAccountMgmtInfosRequest.authorization,
      "resource_type_schema_version": listAccountMgmtInfosRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listAccountMgmtInfosRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAccountMgmtInfosRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AccountMgmtInfos",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAccountMgmtInfosResponse>{},
        body: await response.json(),
        bodyKey: "accountMgmtInfos",
        bodyModel: model.AccountMgmtInfos,
        type: "model.AccountMgmtInfos",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for account recovery settings.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAccountRecoverySettingsRequest
   * @return ListAccountRecoverySettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListAccountRecoverySettings.ts.html |here} to see how to use ListAccountRecoverySettings API.
   */
  public async listAccountRecoverySettings(
    listAccountRecoverySettingsRequest: requests.ListAccountRecoverySettingsRequest
  ): Promise<responses.ListAccountRecoverySettingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listAccountRecoverySettings.");
    const operationName = "listAccountRecoverySettings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": listAccountRecoverySettingsRequest.attributes,
      "attributeSets": listAccountRecoverySettingsRequest.attributeSets,
      "page": listAccountRecoverySettingsRequest.page,
      "limit": listAccountRecoverySettingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listAccountRecoverySettingsRequest.authorization,
      "resource_type_schema_version": listAccountRecoverySettingsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listAccountRecoverySettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAccountRecoverySettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AccountRecoverySettings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAccountRecoverySettingsResponse>{},
        body: await response.json(),
        bodyKey: "accountRecoverySettings",
        bodyModel: model.AccountRecoverySettings,
        type: "model.AccountRecoverySettings",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search API keys.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListApiKeysRequest
   * @return ListApiKeysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListApiKeys.ts.html |here} to see how to use ListApiKeys API.
   */
  public async listApiKeys(
    listApiKeysRequest: requests.ListApiKeysRequest
  ): Promise<responses.ListApiKeysResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listApiKeys.");
    const operationName = "listApiKeys";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listApiKeysRequest.filter,
      "sortBy": listApiKeysRequest.sortBy,
      "sortOrder": listApiKeysRequest.sortOrder,
      "startIndex": listApiKeysRequest.startIndex,
      "count": listApiKeysRequest.count,
      "attributes": listApiKeysRequest.attributes,
      "attributeSets": listApiKeysRequest.attributeSets,
      "page": listApiKeysRequest.page,
      "limit": listApiKeysRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listApiKeysRequest.authorization,
      "resource_type_schema_version": listApiKeysRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listApiKeysRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listApiKeysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/ApiKeys",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListApiKeysResponse>{},
        body: await response.json(),
        bodyKey: "apiKeys",
        bodyModel: model.ApiKeys,
        type: "model.ApiKeys",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search AppRoles
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAppRolesRequest
   * @return ListAppRolesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListAppRoles.ts.html |here} to see how to use ListAppRoles API.
   */
  public async listAppRoles(
    listAppRolesRequest: requests.ListAppRolesRequest
  ): Promise<responses.ListAppRolesResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listAppRoles.");
    const operationName = "listAppRoles";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listAppRolesRequest.filter,
      "sortBy": listAppRolesRequest.sortBy,
      "sortOrder": listAppRolesRequest.sortOrder,
      "startIndex": listAppRolesRequest.startIndex,
      "count": listAppRolesRequest.count,
      "attributes": listAppRolesRequest.attributes,
      "attributeSets": listAppRolesRequest.attributeSets,
      "page": listAppRolesRequest.page,
      "limit": listAppRolesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listAppRolesRequest.authorization,
      "resource_type_schema_version": listAppRolesRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listAppRolesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAppRolesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AppRoles",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAppRolesResponse>{},
        body: await response.json(),
        bodyKey: "appRoles",
        bodyModel: model.AppRoles,
        type: "model.AppRoles",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Apps
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAppsRequest
   * @return ListAppsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListApps.ts.html |here} to see how to use ListApps API.
   */
  public async listApps(
    listAppsRequest: requests.ListAppsRequest
  ): Promise<responses.ListAppsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listApps.");
    const operationName = "listApps";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listAppsRequest.filter,
      "sortBy": listAppsRequest.sortBy,
      "sortOrder": listAppsRequest.sortOrder,
      "startIndex": listAppsRequest.startIndex,
      "count": listAppsRequest.count,
      "attributes": listAppsRequest.attributes,
      "attributeSets": listAppsRequest.attributeSets,
      "page": listAppsRequest.page,
      "limit": listAppsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listAppsRequest.authorization,
      "resource_type_schema_version": listAppsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listAppsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAppsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Apps",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAppsResponse>{},
        body: await response.json(),
        bodyKey: "apps",
        bodyModel: model.Apps,
        type: "model.Apps",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for Auth tokens.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAuthTokensRequest
   * @return ListAuthTokensResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListAuthTokens.ts.html |here} to see how to use ListAuthTokens API.
   */
  public async listAuthTokens(
    listAuthTokensRequest: requests.ListAuthTokensRequest
  ): Promise<responses.ListAuthTokensResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listAuthTokens.");
    const operationName = "listAuthTokens";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listAuthTokensRequest.filter,
      "sortBy": listAuthTokensRequest.sortBy,
      "sortOrder": listAuthTokensRequest.sortOrder,
      "startIndex": listAuthTokensRequest.startIndex,
      "count": listAuthTokensRequest.count,
      "attributes": listAuthTokensRequest.attributes,
      "attributeSets": listAuthTokensRequest.attributeSets,
      "page": listAuthTokensRequest.page,
      "limit": listAuthTokensRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listAuthTokensRequest.authorization,
      "resource_type_schema_version": listAuthTokensRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listAuthTokensRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuthTokensRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AuthTokens",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuthTokensResponse>{},
        body: await response.json(),
        bodyKey: "authTokens",
        bodyModel: model.AuthTokens,
        type: "model.AuthTokens",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Authentication Factor Settings
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAuthenticationFactorSettingsRequest
   * @return ListAuthenticationFactorSettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListAuthenticationFactorSettings.ts.html |here} to see how to use ListAuthenticationFactorSettings API.
   */
  public async listAuthenticationFactorSettings(
    listAuthenticationFactorSettingsRequest: requests.ListAuthenticationFactorSettingsRequest
  ): Promise<responses.ListAuthenticationFactorSettingsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation IdentityDomainsClient#listAuthenticationFactorSettings."
      );
    const operationName = "listAuthenticationFactorSettings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": listAuthenticationFactorSettingsRequest.attributes,
      "attributeSets": listAuthenticationFactorSettingsRequest.attributeSets,
      "page": listAuthenticationFactorSettingsRequest.page,
      "limit": listAuthenticationFactorSettingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listAuthenticationFactorSettingsRequest.authorization,
      "resource_type_schema_version":
        listAuthenticationFactorSettingsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listAuthenticationFactorSettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuthenticationFactorSettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AuthenticationFactorSettings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuthenticationFactorSettingsResponse>{},
        body: await response.json(),
        bodyKey: "authenticationFactorSettings",
        bodyModel: model.AuthenticationFactorSettings,
        type: "model.AuthenticationFactorSettings",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for a user's customer secret keys.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListCustomerSecretKeysRequest
   * @return ListCustomerSecretKeysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListCustomerSecretKeys.ts.html |here} to see how to use ListCustomerSecretKeys API.
   */
  public async listCustomerSecretKeys(
    listCustomerSecretKeysRequest: requests.ListCustomerSecretKeysRequest
  ): Promise<responses.ListCustomerSecretKeysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listCustomerSecretKeys.");
    const operationName = "listCustomerSecretKeys";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listCustomerSecretKeysRequest.filter,
      "sortBy": listCustomerSecretKeysRequest.sortBy,
      "sortOrder": listCustomerSecretKeysRequest.sortOrder,
      "startIndex": listCustomerSecretKeysRequest.startIndex,
      "count": listCustomerSecretKeysRequest.count,
      "attributes": listCustomerSecretKeysRequest.attributes,
      "attributeSets": listCustomerSecretKeysRequest.attributeSets,
      "page": listCustomerSecretKeysRequest.page,
      "limit": listCustomerSecretKeysRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listCustomerSecretKeysRequest.authorization,
      "resource_type_schema_version": listCustomerSecretKeysRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listCustomerSecretKeysRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCustomerSecretKeysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/CustomerSecretKeys",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCustomerSecretKeysResponse>{},
        body: await response.json(),
        bodyKey: "customerSecretKeys",
        bodyModel: model.CustomerSecretKeys,
        type: "model.CustomerSecretKeys",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for Dynamic Resource Groups.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListDynamicResourceGroupsRequest
   * @return ListDynamicResourceGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListDynamicResourceGroups.ts.html |here} to see how to use ListDynamicResourceGroups API.
   */
  public async listDynamicResourceGroups(
    listDynamicResourceGroupsRequest: requests.ListDynamicResourceGroupsRequest
  ): Promise<responses.ListDynamicResourceGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listDynamicResourceGroups.");
    const operationName = "listDynamicResourceGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listDynamicResourceGroupsRequest.filter,
      "sortBy": listDynamicResourceGroupsRequest.sortBy,
      "sortOrder": listDynamicResourceGroupsRequest.sortOrder,
      "startIndex": listDynamicResourceGroupsRequest.startIndex,
      "count": listDynamicResourceGroupsRequest.count,
      "attributes": listDynamicResourceGroupsRequest.attributes,
      "attributeSets": listDynamicResourceGroupsRequest.attributeSets,
      "page": listDynamicResourceGroupsRequest.page,
      "limit": listDynamicResourceGroupsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listDynamicResourceGroupsRequest.authorization,
      "resource_type_schema_version": listDynamicResourceGroupsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listDynamicResourceGroupsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDynamicResourceGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/DynamicResourceGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDynamicResourceGroupsResponse>{},
        body: await response.json(),
        bodyKey: "dynamicResourceGroups",
        bodyModel: model.DynamicResourceGroups,
        type: "model.DynamicResourceGroups",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Grants
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListGrantsRequest
   * @return ListGrantsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListGrants.ts.html |here} to see how to use ListGrants API.
   */
  public async listGrants(
    listGrantsRequest: requests.ListGrantsRequest
  ): Promise<responses.ListGrantsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listGrants.");
    const operationName = "listGrants";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listGrantsRequest.filter,
      "sortBy": listGrantsRequest.sortBy,
      "sortOrder": listGrantsRequest.sortOrder,
      "startIndex": listGrantsRequest.startIndex,
      "count": listGrantsRequest.count,
      "attributes": listGrantsRequest.attributes,
      "attributeSets": listGrantsRequest.attributeSets,
      "page": listGrantsRequest.page,
      "limit": listGrantsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listGrantsRequest.authorization,
      "resource_type_schema_version": listGrantsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listGrantsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listGrantsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Grants",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListGrantsResponse>{},
        body: await response.json(),
        bodyKey: "grants",
        bodyModel: model.Grants,
        type: "model.Grants",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for groups. <b>Important:</b> The Group SEARCH and GET operations on users and members will throw an exception if the response has more than 10,000 members. To avoid the exception, use the pagination filter to GET or SEARCH group members.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListGroupsRequest
   * @return ListGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListGroups.ts.html |here} to see how to use ListGroups API.
   */
  public async listGroups(
    listGroupsRequest: requests.ListGroupsRequest
  ): Promise<responses.ListGroupsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listGroups.");
    const operationName = "listGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listGroupsRequest.filter,
      "sortBy": listGroupsRequest.sortBy,
      "sortOrder": listGroupsRequest.sortOrder,
      "startIndex": listGroupsRequest.startIndex,
      "count": listGroupsRequest.count,
      "attributes": listGroupsRequest.attributes,
      "attributeSets": listGroupsRequest.attributeSets,
      "page": listGroupsRequest.page,
      "limit": listGroupsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listGroupsRequest.authorization,
      "resource_type_schema_version": listGroupsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listGroupsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Groups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListGroupsResponse>{},
        body: await response.json(),
        bodyKey: "groups",
        bodyModel: model.Groups,
        type: "model.Groups",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Identity Providers
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListIdentityProvidersRequest
   * @return ListIdentityProvidersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListIdentityProviders.ts.html |here} to see how to use ListIdentityProviders API.
   */
  public async listIdentityProviders(
    listIdentityProvidersRequest: requests.ListIdentityProvidersRequest
  ): Promise<responses.ListIdentityProvidersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listIdentityProviders.");
    const operationName = "listIdentityProviders";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listIdentityProvidersRequest.filter,
      "sortBy": listIdentityProvidersRequest.sortBy,
      "sortOrder": listIdentityProvidersRequest.sortOrder,
      "startIndex": listIdentityProvidersRequest.startIndex,
      "count": listIdentityProvidersRequest.count,
      "attributes": listIdentityProvidersRequest.attributes,
      "attributeSets": listIdentityProvidersRequest.attributeSets,
      "page": listIdentityProvidersRequest.page,
      "limit": listIdentityProvidersRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listIdentityProvidersRequest.authorization,
      "resource_type_schema_version": listIdentityProvidersRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listIdentityProvidersRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listIdentityProvidersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentityProviders",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListIdentityProvidersResponse>{},
        body: await response.json(),
        bodyKey: "identityProviders",
        bodyModel: model.IdentityProviders,
        type: "model.IdentityProviders",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for Identity settings.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListIdentitySettingsRequest
   * @return ListIdentitySettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListIdentitySettings.ts.html |here} to see how to use ListIdentitySettings API.
   */
  public async listIdentitySettings(
    listIdentitySettingsRequest: requests.ListIdentitySettingsRequest
  ): Promise<responses.ListIdentitySettingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listIdentitySettings.");
    const operationName = "listIdentitySettings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": listIdentitySettingsRequest.attributes,
      "attributeSets": listIdentitySettingsRequest.attributeSets,
      "page": listIdentitySettingsRequest.page,
      "limit": listIdentitySettingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listIdentitySettingsRequest.authorization,
      "resource_type_schema_version": listIdentitySettingsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listIdentitySettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listIdentitySettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentitySettings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListIdentitySettingsResponse>{},
        body: await response.json(),
        bodyKey: "identitySettings",
        bodyModel: model.IdentitySettings,
        type: "model.IdentitySettings",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search KmsiSettings
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListKmsiSettingsRequest
   * @return ListKmsiSettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListKmsiSettings.ts.html |here} to see how to use ListKmsiSettings API.
   */
  public async listKmsiSettings(
    listKmsiSettingsRequest: requests.ListKmsiSettingsRequest
  ): Promise<responses.ListKmsiSettingsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listKmsiSettings.");
    const operationName = "listKmsiSettings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": listKmsiSettingsRequest.attributes,
      "attributeSets": listKmsiSettingsRequest.attributeSets,
      "page": listKmsiSettingsRequest.page,
      "limit": listKmsiSettingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listKmsiSettingsRequest.authorization,
      "resource_type_schema_version": listKmsiSettingsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listKmsiSettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listKmsiSettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/KmsiSettings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListKmsiSettingsResponse>{},
        body: await response.json(),
        bodyKey: "kmsiSettings",
        bodyModel: model.KmsiSettings,
        type: "model.KmsiSettings",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for a user's own API key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMyApiKeysRequest
   * @return ListMyApiKeysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMyApiKeys.ts.html |here} to see how to use ListMyApiKeys API.
   */
  public async listMyApiKeys(
    listMyApiKeysRequest: requests.ListMyApiKeysRequest
  ): Promise<responses.ListMyApiKeysResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listMyApiKeys.");
    const operationName = "listMyApiKeys";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMyApiKeysRequest.filter,
      "sortBy": listMyApiKeysRequest.sortBy,
      "sortOrder": listMyApiKeysRequest.sortOrder,
      "startIndex": listMyApiKeysRequest.startIndex,
      "count": listMyApiKeysRequest.count,
      "page": listMyApiKeysRequest.page,
      "limit": listMyApiKeysRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMyApiKeysRequest.authorization,
      "resource_type_schema_version": listMyApiKeysRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMyApiKeysRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMyApiKeysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyApiKeys",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMyApiKeysResponse>{},
        body: await response.json(),
        bodyKey: "myApiKeys",
        bodyModel: model.MyApiKeys,
        type: "model.MyApiKeys",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search My Apps
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMyAppsRequest
   * @return ListMyAppsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMyApps.ts.html |here} to see how to use ListMyApps API.
   */
  public async listMyApps(
    listMyAppsRequest: requests.ListMyAppsRequest
  ): Promise<responses.ListMyAppsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listMyApps.");
    const operationName = "listMyApps";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMyAppsRequest.filter,
      "sortBy": listMyAppsRequest.sortBy,
      "sortOrder": listMyAppsRequest.sortOrder,
      "startIndex": listMyAppsRequest.startIndex,
      "count": listMyAppsRequest.count,
      "page": listMyAppsRequest.page,
      "limit": listMyAppsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMyAppsRequest.authorization,
      "resource_type_schema_version": listMyAppsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMyAppsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMyAppsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyApps",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMyAppsResponse>{},
        body: await response.json(),
        bodyKey: "myApps",
        bodyModel: model.MyApps,
        type: "model.MyApps",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for a user's own Auth token.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMyAuthTokensRequest
   * @return ListMyAuthTokensResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMyAuthTokens.ts.html |here} to see how to use ListMyAuthTokens API.
   */
  public async listMyAuthTokens(
    listMyAuthTokensRequest: requests.ListMyAuthTokensRequest
  ): Promise<responses.ListMyAuthTokensResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listMyAuthTokens.");
    const operationName = "listMyAuthTokens";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMyAuthTokensRequest.filter,
      "sortBy": listMyAuthTokensRequest.sortBy,
      "sortOrder": listMyAuthTokensRequest.sortOrder,
      "startIndex": listMyAuthTokensRequest.startIndex,
      "count": listMyAuthTokensRequest.count,
      "page": listMyAuthTokensRequest.page,
      "limit": listMyAuthTokensRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMyAuthTokensRequest.authorization,
      "resource_type_schema_version": listMyAuthTokensRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMyAuthTokensRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMyAuthTokensRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyAuthTokens",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMyAuthTokensResponse>{},
        body: await response.json(),
        bodyKey: "myAuthTokens",
        bodyModel: model.MyAuthTokens,
        type: "model.MyAuthTokens",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for a user's own customer secret key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMyCustomerSecretKeysRequest
   * @return ListMyCustomerSecretKeysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMyCustomerSecretKeys.ts.html |here} to see how to use ListMyCustomerSecretKeys API.
   */
  public async listMyCustomerSecretKeys(
    listMyCustomerSecretKeysRequest: requests.ListMyCustomerSecretKeysRequest
  ): Promise<responses.ListMyCustomerSecretKeysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listMyCustomerSecretKeys.");
    const operationName = "listMyCustomerSecretKeys";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMyCustomerSecretKeysRequest.filter,
      "sortBy": listMyCustomerSecretKeysRequest.sortBy,
      "sortOrder": listMyCustomerSecretKeysRequest.sortOrder,
      "startIndex": listMyCustomerSecretKeysRequest.startIndex,
      "count": listMyCustomerSecretKeysRequest.count,
      "page": listMyCustomerSecretKeysRequest.page,
      "limit": listMyCustomerSecretKeysRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMyCustomerSecretKeysRequest.authorization,
      "resource_type_schema_version": listMyCustomerSecretKeysRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMyCustomerSecretKeysRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMyCustomerSecretKeysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyCustomerSecretKeys",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMyCustomerSecretKeysResponse>{},
        body: await response.json(),
        bodyKey: "myCustomerSecretKeys",
        bodyModel: model.MyCustomerSecretKeys,
        type: "model.MyCustomerSecretKeys",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Devices
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMyDevicesRequest
   * @return ListMyDevicesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMyDevices.ts.html |here} to see how to use ListMyDevices API.
   */
  public async listMyDevices(
    listMyDevicesRequest: requests.ListMyDevicesRequest
  ): Promise<responses.ListMyDevicesResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listMyDevices.");
    const operationName = "listMyDevices";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMyDevicesRequest.filter,
      "sortBy": listMyDevicesRequest.sortBy,
      "sortOrder": listMyDevicesRequest.sortOrder,
      "startIndex": listMyDevicesRequest.startIndex,
      "count": listMyDevicesRequest.count,
      "attributes": listMyDevicesRequest.attributes,
      "attributeSets": listMyDevicesRequest.attributeSets,
      "page": listMyDevicesRequest.page,
      "limit": listMyDevicesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMyDevicesRequest.authorization,
      "resource_type_schema_version": listMyDevicesRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMyDevicesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMyDevicesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyDevices",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMyDevicesResponse>{},
        body: await response.json(),
        bodyKey: "myDevices",
        bodyModel: model.MyDevices,
        type: "model.MyDevices",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for 'My Groups'.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMyGroupsRequest
   * @return ListMyGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMyGroups.ts.html |here} to see how to use ListMyGroups API.
   */
  public async listMyGroups(
    listMyGroupsRequest: requests.ListMyGroupsRequest
  ): Promise<responses.ListMyGroupsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listMyGroups.");
    const operationName = "listMyGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMyGroupsRequest.filter,
      "sortBy": listMyGroupsRequest.sortBy,
      "sortOrder": listMyGroupsRequest.sortOrder,
      "startIndex": listMyGroupsRequest.startIndex,
      "count": listMyGroupsRequest.count,
      "attributes": listMyGroupsRequest.attributes,
      "attributeSets": listMyGroupsRequest.attributeSets,
      "page": listMyGroupsRequest.page,
      "limit": listMyGroupsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMyGroupsRequest.authorization,
      "resource_type_schema_version": listMyGroupsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMyGroupsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMyGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMyGroupsResponse>{},
        body: await response.json(),
        bodyKey: "myGroups",
        bodyModel: model.MyGroups,
        type: "model.MyGroups",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for a user's own OAuth2 client credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMyOAuth2ClientCredentialsRequest
   * @return ListMyOAuth2ClientCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMyOAuth2ClientCredentials.ts.html |here} to see how to use ListMyOAuth2ClientCredentials API.
   */
  public async listMyOAuth2ClientCredentials(
    listMyOAuth2ClientCredentialsRequest: requests.ListMyOAuth2ClientCredentialsRequest
  ): Promise<responses.ListMyOAuth2ClientCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listMyOAuth2ClientCredentials.");
    const operationName = "listMyOAuth2ClientCredentials";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMyOAuth2ClientCredentialsRequest.filter,
      "sortBy": listMyOAuth2ClientCredentialsRequest.sortBy,
      "sortOrder": listMyOAuth2ClientCredentialsRequest.sortOrder,
      "startIndex": listMyOAuth2ClientCredentialsRequest.startIndex,
      "count": listMyOAuth2ClientCredentialsRequest.count,
      "page": listMyOAuth2ClientCredentialsRequest.page,
      "limit": listMyOAuth2ClientCredentialsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMyOAuth2ClientCredentialsRequest.authorization,
      "resource_type_schema_version":
        listMyOAuth2ClientCredentialsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMyOAuth2ClientCredentialsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMyOAuth2ClientCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyOAuth2ClientCredentials",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMyOAuth2ClientCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "myOAuth2ClientCredentials",
        bodyModel: model.MyOAuth2ClientCredentials,
        type: "model.MyOAuth2ClientCredentials",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search My Requestable Groups
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMyRequestableGroupsRequest
   * @return ListMyRequestableGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMyRequestableGroups.ts.html |here} to see how to use ListMyRequestableGroups API.
   */
  public async listMyRequestableGroups(
    listMyRequestableGroupsRequest: requests.ListMyRequestableGroupsRequest
  ): Promise<responses.ListMyRequestableGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listMyRequestableGroups.");
    const operationName = "listMyRequestableGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMyRequestableGroupsRequest.filter,
      "sortBy": listMyRequestableGroupsRequest.sortBy,
      "sortOrder": listMyRequestableGroupsRequest.sortOrder,
      "startIndex": listMyRequestableGroupsRequest.startIndex,
      "count": listMyRequestableGroupsRequest.count,
      "page": listMyRequestableGroupsRequest.page,
      "limit": listMyRequestableGroupsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMyRequestableGroupsRequest.authorization,
      "resource_type_schema_version": listMyRequestableGroupsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMyRequestableGroupsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMyRequestableGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyRequestableGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMyRequestableGroupsResponse>{},
        body: await response.json(),
        bodyKey: "myRequestableGroups",
        bodyModel: model.MyRequestableGroups,
        type: "model.MyRequestableGroups",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search My Requests
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMyRequestsRequest
   * @return ListMyRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMyRequests.ts.html |here} to see how to use ListMyRequests API.
   */
  public async listMyRequests(
    listMyRequestsRequest: requests.ListMyRequestsRequest
  ): Promise<responses.ListMyRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listMyRequests.");
    const operationName = "listMyRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMyRequestsRequest.filter,
      "sortBy": listMyRequestsRequest.sortBy,
      "sortOrder": listMyRequestsRequest.sortOrder,
      "startIndex": listMyRequestsRequest.startIndex,
      "count": listMyRequestsRequest.count,
      "attributes": listMyRequestsRequest.attributes,
      "attributeSets": listMyRequestsRequest.attributeSets,
      "page": listMyRequestsRequest.page,
      "limit": listMyRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMyRequestsRequest.authorization,
      "resource_type_schema_version": listMyRequestsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMyRequestsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMyRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMyRequestsResponse>{},
        body: await response.json(),
        bodyKey: "myRequests",
        bodyModel: model.MyRequests,
        type: "model.MyRequests",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for a user's own SMTP credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMySmtpCredentialsRequest
   * @return ListMySmtpCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMySmtpCredentials.ts.html |here} to see how to use ListMySmtpCredentials API.
   */
  public async listMySmtpCredentials(
    listMySmtpCredentialsRequest: requests.ListMySmtpCredentialsRequest
  ): Promise<responses.ListMySmtpCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listMySmtpCredentials.");
    const operationName = "listMySmtpCredentials";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMySmtpCredentialsRequest.filter,
      "sortBy": listMySmtpCredentialsRequest.sortBy,
      "sortOrder": listMySmtpCredentialsRequest.sortOrder,
      "startIndex": listMySmtpCredentialsRequest.startIndex,
      "count": listMySmtpCredentialsRequest.count,
      "page": listMySmtpCredentialsRequest.page,
      "limit": listMySmtpCredentialsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMySmtpCredentialsRequest.authorization,
      "resource_type_schema_version": listMySmtpCredentialsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMySmtpCredentialsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMySmtpCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MySmtpCredentials",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMySmtpCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "mySmtpCredentials",
        bodyModel: model.MySmtpCredentials,
        type: "model.MySmtpCredentials",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for a user's own support account.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMySupportAccountsRequest
   * @return ListMySupportAccountsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMySupportAccounts.ts.html |here} to see how to use ListMySupportAccounts API.
   */
  public async listMySupportAccounts(
    listMySupportAccountsRequest: requests.ListMySupportAccountsRequest
  ): Promise<responses.ListMySupportAccountsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listMySupportAccounts.");
    const operationName = "listMySupportAccounts";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMySupportAccountsRequest.filter,
      "sortBy": listMySupportAccountsRequest.sortBy,
      "sortOrder": listMySupportAccountsRequest.sortOrder,
      "startIndex": listMySupportAccountsRequest.startIndex,
      "count": listMySupportAccountsRequest.count,
      "page": listMySupportAccountsRequest.page,
      "limit": listMySupportAccountsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMySupportAccountsRequest.authorization,
      "resource_type_schema_version": listMySupportAccountsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMySupportAccountsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMySupportAccountsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MySupportAccounts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMySupportAccountsResponse>{},
        body: await response.json(),
        bodyKey: "mySupportAccounts",
        bodyModel: model.MySupportAccounts,
        type: "model.MySupportAccounts",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Trusted User Agents
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMyTrustedUserAgentsRequest
   * @return ListMyTrustedUserAgentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMyTrustedUserAgents.ts.html |here} to see how to use ListMyTrustedUserAgents API.
   */
  public async listMyTrustedUserAgents(
    listMyTrustedUserAgentsRequest: requests.ListMyTrustedUserAgentsRequest
  ): Promise<responses.ListMyTrustedUserAgentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listMyTrustedUserAgents.");
    const operationName = "listMyTrustedUserAgents";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMyTrustedUserAgentsRequest.filter,
      "sortBy": listMyTrustedUserAgentsRequest.sortBy,
      "sortOrder": listMyTrustedUserAgentsRequest.sortOrder,
      "startIndex": listMyTrustedUserAgentsRequest.startIndex,
      "count": listMyTrustedUserAgentsRequest.count,
      "attributes": listMyTrustedUserAgentsRequest.attributes,
      "attributeSets": listMyTrustedUserAgentsRequest.attributeSets,
      "page": listMyTrustedUserAgentsRequest.page,
      "limit": listMyTrustedUserAgentsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMyTrustedUserAgentsRequest.authorization,
      "resource_type_schema_version": listMyTrustedUserAgentsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMyTrustedUserAgentsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMyTrustedUserAgentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyTrustedUserAgents",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMyTrustedUserAgentsResponse>{},
        body: await response.json(),
        bodyKey: "myTrustedUserAgents",
        bodyModel: model.MyTrustedUserAgents,
        type: "model.MyTrustedUserAgents",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for a user's own database (DB) credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMyUserDbCredentialsRequest
   * @return ListMyUserDbCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListMyUserDbCredentials.ts.html |here} to see how to use ListMyUserDbCredentials API.
   */
  public async listMyUserDbCredentials(
    listMyUserDbCredentialsRequest: requests.ListMyUserDbCredentialsRequest
  ): Promise<responses.ListMyUserDbCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listMyUserDbCredentials.");
    const operationName = "listMyUserDbCredentials";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listMyUserDbCredentialsRequest.filter,
      "sortBy": listMyUserDbCredentialsRequest.sortBy,
      "sortOrder": listMyUserDbCredentialsRequest.sortOrder,
      "startIndex": listMyUserDbCredentialsRequest.startIndex,
      "count": listMyUserDbCredentialsRequest.count,
      "page": listMyUserDbCredentialsRequest.page,
      "limit": listMyUserDbCredentialsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listMyUserDbCredentialsRequest.authorization,
      "resource_type_schema_version": listMyUserDbCredentialsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listMyUserDbCredentialsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMyUserDbCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyUserDbCredentials",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMyUserDbCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "myUserDbCredentials",
        bodyModel: model.MyUserDbCredentials,
        type: "model.MyUserDbCredentials",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for a user's OAuth2 client credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListOAuth2ClientCredentialsRequest
   * @return ListOAuth2ClientCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListOAuth2ClientCredentials.ts.html |here} to see how to use ListOAuth2ClientCredentials API.
   */
  public async listOAuth2ClientCredentials(
    listOAuth2ClientCredentialsRequest: requests.ListOAuth2ClientCredentialsRequest
  ): Promise<responses.ListOAuth2ClientCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listOAuth2ClientCredentials.");
    const operationName = "listOAuth2ClientCredentials";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listOAuth2ClientCredentialsRequest.filter,
      "sortBy": listOAuth2ClientCredentialsRequest.sortBy,
      "sortOrder": listOAuth2ClientCredentialsRequest.sortOrder,
      "startIndex": listOAuth2ClientCredentialsRequest.startIndex,
      "count": listOAuth2ClientCredentialsRequest.count,
      "attributes": listOAuth2ClientCredentialsRequest.attributes,
      "attributeSets": listOAuth2ClientCredentialsRequest.attributeSets,
      "page": listOAuth2ClientCredentialsRequest.page,
      "limit": listOAuth2ClientCredentialsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listOAuth2ClientCredentialsRequest.authorization,
      "resource_type_schema_version": listOAuth2ClientCredentialsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listOAuth2ClientCredentialsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOAuth2ClientCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/OAuth2ClientCredentials",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOAuth2ClientCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "oAuth2ClientCredentials",
        bodyModel: model.OAuth2ClientCredentials,
        type: "model.OAuth2ClientCredentials",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for password policies.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPasswordPoliciesRequest
   * @return ListPasswordPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListPasswordPolicies.ts.html |here} to see how to use ListPasswordPolicies API.
   */
  public async listPasswordPolicies(
    listPasswordPoliciesRequest: requests.ListPasswordPoliciesRequest
  ): Promise<responses.ListPasswordPoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listPasswordPolicies.");
    const operationName = "listPasswordPolicies";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listPasswordPoliciesRequest.filter,
      "sortBy": listPasswordPoliciesRequest.sortBy,
      "sortOrder": listPasswordPoliciesRequest.sortOrder,
      "startIndex": listPasswordPoliciesRequest.startIndex,
      "count": listPasswordPoliciesRequest.count,
      "attributes": listPasswordPoliciesRequest.attributes,
      "attributeSets": listPasswordPoliciesRequest.attributeSets,
      "page": listPasswordPoliciesRequest.page,
      "limit": listPasswordPoliciesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listPasswordPoliciesRequest.authorization,
      "resource_type_schema_version": listPasswordPoliciesRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listPasswordPoliciesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPasswordPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/PasswordPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPasswordPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "passwordPolicies",
        bodyModel: model.PasswordPolicies,
        type: "model.PasswordPolicies",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Resource Type Schema Attributes
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListResourceTypeSchemaAttributesRequest
   * @return ListResourceTypeSchemaAttributesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListResourceTypeSchemaAttributes.ts.html |here} to see how to use ListResourceTypeSchemaAttributes API.
   */
  public async listResourceTypeSchemaAttributes(
    listResourceTypeSchemaAttributesRequest: requests.ListResourceTypeSchemaAttributesRequest
  ): Promise<responses.ListResourceTypeSchemaAttributesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation IdentityDomainsClient#listResourceTypeSchemaAttributes."
      );
    const operationName = "listResourceTypeSchemaAttributes";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listResourceTypeSchemaAttributesRequest.filter,
      "sortBy": listResourceTypeSchemaAttributesRequest.sortBy,
      "sortOrder": listResourceTypeSchemaAttributesRequest.sortOrder,
      "startIndex": listResourceTypeSchemaAttributesRequest.startIndex,
      "count": listResourceTypeSchemaAttributesRequest.count,
      "attributes": listResourceTypeSchemaAttributesRequest.attributes,
      "attributeSets": listResourceTypeSchemaAttributesRequest.attributeSets,
      "page": listResourceTypeSchemaAttributesRequest.page,
      "limit": listResourceTypeSchemaAttributesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listResourceTypeSchemaAttributesRequest.authorization,
      "resource_type_schema_version":
        listResourceTypeSchemaAttributesRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listResourceTypeSchemaAttributesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResourceTypeSchemaAttributesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/ResourceTypeSchemaAttributes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResourceTypeSchemaAttributesResponse>{},
        body: await response.json(),
        bodyKey: "resourceTypeSchemaAttributes",
        bodyModel: model.ResourceTypeSchemaAttributes,
        type: "model.ResourceTypeSchemaAttributes",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for security question settings.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSecurityQuestionSettingsRequest
   * @return ListSecurityQuestionSettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListSecurityQuestionSettings.ts.html |here} to see how to use ListSecurityQuestionSettings API.
   */
  public async listSecurityQuestionSettings(
    listSecurityQuestionSettingsRequest: requests.ListSecurityQuestionSettingsRequest
  ): Promise<responses.ListSecurityQuestionSettingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listSecurityQuestionSettings.");
    const operationName = "listSecurityQuestionSettings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": listSecurityQuestionSettingsRequest.attributes,
      "attributeSets": listSecurityQuestionSettingsRequest.attributeSets,
      "page": listSecurityQuestionSettingsRequest.page,
      "limit": listSecurityQuestionSettingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listSecurityQuestionSettingsRequest.authorization,
      "resource_type_schema_version": listSecurityQuestionSettingsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listSecurityQuestionSettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityQuestionSettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SecurityQuestionSettings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityQuestionSettingsResponse>{},
        body: await response.json(),
        bodyKey: "securityQuestionSettings",
        bodyModel: model.SecurityQuestionSettings,
        type: "model.SecurityQuestionSettings",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for security questions.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSecurityQuestionsRequest
   * @return ListSecurityQuestionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListSecurityQuestions.ts.html |here} to see how to use ListSecurityQuestions API.
   */
  public async listSecurityQuestions(
    listSecurityQuestionsRequest: requests.ListSecurityQuestionsRequest
  ): Promise<responses.ListSecurityQuestionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listSecurityQuestions.");
    const operationName = "listSecurityQuestions";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listSecurityQuestionsRequest.filter,
      "sortBy": listSecurityQuestionsRequest.sortBy,
      "sortOrder": listSecurityQuestionsRequest.sortOrder,
      "startIndex": listSecurityQuestionsRequest.startIndex,
      "count": listSecurityQuestionsRequest.count,
      "attributes": listSecurityQuestionsRequest.attributes,
      "attributeSets": listSecurityQuestionsRequest.attributeSets,
      "page": listSecurityQuestionsRequest.page,
      "limit": listSecurityQuestionsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listSecurityQuestionsRequest.authorization,
      "resource_type_schema_version": listSecurityQuestionsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listSecurityQuestionsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSecurityQuestionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SecurityQuestions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSecurityQuestionsResponse>{},
        body: await response.json(),
        bodyKey: "securityQuestions",
        bodyModel: model.SecurityQuestions,
        type: "model.SecurityQuestions",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for SMTP credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSmtpCredentialsRequest
   * @return ListSmtpCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListSmtpCredentials.ts.html |here} to see how to use ListSmtpCredentials API.
   */
  public async listSmtpCredentials(
    listSmtpCredentialsRequest: requests.ListSmtpCredentialsRequest
  ): Promise<responses.ListSmtpCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listSmtpCredentials.");
    const operationName = "listSmtpCredentials";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listSmtpCredentialsRequest.filter,
      "sortBy": listSmtpCredentialsRequest.sortBy,
      "sortOrder": listSmtpCredentialsRequest.sortOrder,
      "startIndex": listSmtpCredentialsRequest.startIndex,
      "count": listSmtpCredentialsRequest.count,
      "attributes": listSmtpCredentialsRequest.attributes,
      "attributeSets": listSmtpCredentialsRequest.attributeSets,
      "page": listSmtpCredentialsRequest.page,
      "limit": listSmtpCredentialsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listSmtpCredentialsRequest.authorization,
      "resource_type_schema_version": listSmtpCredentialsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listSmtpCredentialsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSmtpCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SmtpCredentials",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSmtpCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "smtpCredentials",
        bodyModel: model.SmtpCredentials,
        type: "model.SmtpCredentials",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search User Schema Attribute Settings
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListUserAttributesSettingsRequest
   * @return ListUserAttributesSettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListUserAttributesSettings.ts.html |here} to see how to use ListUserAttributesSettings API.
   */
  public async listUserAttributesSettings(
    listUserAttributesSettingsRequest: requests.ListUserAttributesSettingsRequest
  ): Promise<responses.ListUserAttributesSettingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listUserAttributesSettings.");
    const operationName = "listUserAttributesSettings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": listUserAttributesSettingsRequest.attributes,
      "attributeSets": listUserAttributesSettingsRequest.attributeSets,
      "page": listUserAttributesSettingsRequest.page,
      "limit": listUserAttributesSettingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listUserAttributesSettingsRequest.authorization,
      "resource_type_schema_version": listUserAttributesSettingsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listUserAttributesSettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUserAttributesSettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserAttributesSettings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUserAttributesSettingsResponse>{},
        body: await response.json(),
        bodyKey: "userAttributesSettings",
        bodyModel: model.UserAttributesSettings,
        type: "model.UserAttributesSettings",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for a user's database (DB) credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListUserDbCredentialsRequest
   * @return ListUserDbCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListUserDbCredentials.ts.html |here} to see how to use ListUserDbCredentials API.
   */
  public async listUserDbCredentials(
    listUserDbCredentialsRequest: requests.ListUserDbCredentialsRequest
  ): Promise<responses.ListUserDbCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#listUserDbCredentials.");
    const operationName = "listUserDbCredentials";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listUserDbCredentialsRequest.filter,
      "sortBy": listUserDbCredentialsRequest.sortBy,
      "sortOrder": listUserDbCredentialsRequest.sortOrder,
      "startIndex": listUserDbCredentialsRequest.startIndex,
      "count": listUserDbCredentialsRequest.count,
      "attributes": listUserDbCredentialsRequest.attributes,
      "attributeSets": listUserDbCredentialsRequest.attributeSets,
      "page": listUserDbCredentialsRequest.page,
      "limit": listUserDbCredentialsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listUserDbCredentialsRequest.authorization,
      "resource_type_schema_version": listUserDbCredentialsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listUserDbCredentialsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUserDbCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserDbCredentials",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUserDbCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "userDbCredentials",
        bodyModel: model.UserDbCredentials,
        type: "model.UserDbCredentials",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for users.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListUsersRequest
   * @return ListUsersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/ListUsers.ts.html |here} to see how to use ListUsers API.
   */
  public async listUsers(
    listUsersRequest: requests.ListUsersRequest
  ): Promise<responses.ListUsersResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#listUsers.");
    const operationName = "listUsers";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "filter": listUsersRequest.filter,
      "sortBy": listUsersRequest.sortBy,
      "sortOrder": listUsersRequest.sortOrder,
      "startIndex": listUsersRequest.startIndex,
      "count": listUsersRequest.count,
      "attributes": listUsersRequest.attributes,
      "attributeSets": listUsersRequest.attributeSets,
      "page": listUsersRequest.page,
      "limit": listUsersRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": listUsersRequest.authorization,
      "resource_type_schema_version": listUsersRequest.resourceTypeSchemaVersion,
      "opc-retry-token": listUsersRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUsersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Users",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUsersResponse>{},
        body: await response.json(),
        bodyKey: "users",
        bodyModel: model.Users,
        type: "model.Users",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update an account recovery setting.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchAccountRecoverySettingRequest
   * @return PatchAccountRecoverySettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchAccountRecoverySetting.ts.html |here} to see how to use PatchAccountRecoverySetting API.
   */
  public async patchAccountRecoverySetting(
    patchAccountRecoverySettingRequest: requests.PatchAccountRecoverySettingRequest
  ): Promise<responses.PatchAccountRecoverySettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchAccountRecoverySetting.");
    const operationName = "patchAccountRecoverySetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{accountRecoverySettingId}": patchAccountRecoverySettingRequest.accountRecoverySettingId
    };

    const queryParams = {
      "attributes": patchAccountRecoverySettingRequest.attributes,
      "attributeSets": patchAccountRecoverySettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchAccountRecoverySettingRequest.authorization,
      "resource_type_schema_version": patchAccountRecoverySettingRequest.resourceTypeSchemaVersion,
      "if-match": patchAccountRecoverySettingRequest.ifMatch,
      "opc-retry-token": patchAccountRecoverySettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchAccountRecoverySettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AccountRecoverySettings/{accountRecoverySettingId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchAccountRecoverySettingRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchAccountRecoverySettingResponse>{},
        body: await response.json(),
        bodyKey: "accountRecoverySetting",
        bodyModel: model.AccountRecoverySetting,
        type: "model.AccountRecoverySetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's API key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchApiKeyRequest
   * @return PatchApiKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchApiKey.ts.html |here} to see how to use PatchApiKey API.
   */
  public async patchApiKey(
    patchApiKeyRequest: requests.PatchApiKeyRequest
  ): Promise<responses.PatchApiKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchApiKey.");
    const operationName = "patchApiKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{apiKeyId}": patchApiKeyRequest.apiKeyId
    };

    const queryParams = {
      "attributes": patchApiKeyRequest.attributes,
      "attributeSets": patchApiKeyRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchApiKeyRequest.authorization,
      "resource_type_schema_version": patchApiKeyRequest.resourceTypeSchemaVersion,
      "if-match": patchApiKeyRequest.ifMatch,
      "opc-retry-token": patchApiKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchApiKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/ApiKeys/{apiKeyId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchApiKeyRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchApiKeyResponse>{},
        body: await response.json(),
        bodyKey: "apiKey",
        bodyModel: model.ApiKey,
        type: "model.ApiKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update an App
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchAppRequest
   * @return PatchAppResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchApp.ts.html |here} to see how to use PatchApp API.
   */
  public async patchApp(
    patchAppRequest: requests.PatchAppRequest
  ): Promise<responses.PatchAppResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchApp.");
    const operationName = "patchApp";
    const apiReferenceLink = "";
    const pathParams = {
      "{appId}": patchAppRequest.appId
    };

    const queryParams = {
      "attributes": patchAppRequest.attributes,
      "attributeSets": patchAppRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchAppRequest.authorization,
      "resource_type_schema_version": patchAppRequest.resourceTypeSchemaVersion,
      "if-match": patchAppRequest.ifMatch,
      "opc-retry-token": patchAppRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchAppRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Apps/{appId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchAppRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchAppResponse>{},
        body: await response.json(),
        bodyKey: "app",
        bodyModel: model.App,
        type: "model.App",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update an AppRole
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchAppRoleRequest
   * @return PatchAppRoleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchAppRole.ts.html |here} to see how to use PatchAppRole API.
   */
  public async patchAppRole(
    patchAppRoleRequest: requests.PatchAppRoleRequest
  ): Promise<responses.PatchAppRoleResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchAppRole.");
    const operationName = "patchAppRole";
    const apiReferenceLink = "";
    const pathParams = {
      "{appRoleId}": patchAppRoleRequest.appRoleId
    };

    const queryParams = {
      "attributes": patchAppRoleRequest.attributes,
      "attributeSets": patchAppRoleRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchAppRoleRequest.authorization,
      "resource_type_schema_version": patchAppRoleRequest.resourceTypeSchemaVersion,
      "if-match": patchAppRoleRequest.ifMatch,
      "opc-retry-token": patchAppRoleRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchAppRoleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AppRoles/{appRoleId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchAppRoleRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchAppRoleResponse>{},
        body: await response.json(),
        bodyKey: "appRole",
        bodyModel: model.AppRole,
        type: "model.AppRole",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's Auth token.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchAuthTokenRequest
   * @return PatchAuthTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchAuthToken.ts.html |here} to see how to use PatchAuthToken API.
   */
  public async patchAuthToken(
    patchAuthTokenRequest: requests.PatchAuthTokenRequest
  ): Promise<responses.PatchAuthTokenResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchAuthToken.");
    const operationName = "patchAuthToken";
    const apiReferenceLink = "";
    const pathParams = {
      "{authTokenId}": patchAuthTokenRequest.authTokenId
    };

    const queryParams = {
      "attributes": patchAuthTokenRequest.attributes,
      "attributeSets": patchAuthTokenRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchAuthTokenRequest.authorization,
      "resource_type_schema_version": patchAuthTokenRequest.resourceTypeSchemaVersion,
      "if-match": patchAuthTokenRequest.ifMatch,
      "opc-retry-token": patchAuthTokenRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchAuthTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AuthTokens/{authTokenId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchAuthTokenRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchAuthTokenResponse>{},
        body: await response.json(),
        bodyKey: "authToken",
        bodyModel: model.AuthToken,
        type: "model.AuthToken",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's customer secret key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchCustomerSecretKeyRequest
   * @return PatchCustomerSecretKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchCustomerSecretKey.ts.html |here} to see how to use PatchCustomerSecretKey API.
   */
  public async patchCustomerSecretKey(
    patchCustomerSecretKeyRequest: requests.PatchCustomerSecretKeyRequest
  ): Promise<responses.PatchCustomerSecretKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchCustomerSecretKey.");
    const operationName = "patchCustomerSecretKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{customerSecretKeyId}": patchCustomerSecretKeyRequest.customerSecretKeyId
    };

    const queryParams = {
      "attributes": patchCustomerSecretKeyRequest.attributes,
      "attributeSets": patchCustomerSecretKeyRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchCustomerSecretKeyRequest.authorization,
      "resource_type_schema_version": patchCustomerSecretKeyRequest.resourceTypeSchemaVersion,
      "if-match": patchCustomerSecretKeyRequest.ifMatch,
      "opc-retry-token": patchCustomerSecretKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchCustomerSecretKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/CustomerSecretKeys/{customerSecretKeyId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchCustomerSecretKeyRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchCustomerSecretKeyResponse>{},
        body: await response.json(),
        bodyKey: "customerSecretKey",
        bodyModel: model.CustomerSecretKey,
        type: "model.CustomerSecretKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a Dynamic Resource Group.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchDynamicResourceGroupRequest
   * @return PatchDynamicResourceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchDynamicResourceGroup.ts.html |here} to see how to use PatchDynamicResourceGroup API.
   */
  public async patchDynamicResourceGroup(
    patchDynamicResourceGroupRequest: requests.PatchDynamicResourceGroupRequest
  ): Promise<responses.PatchDynamicResourceGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchDynamicResourceGroup.");
    const operationName = "patchDynamicResourceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{dynamicResourceGroupId}": patchDynamicResourceGroupRequest.dynamicResourceGroupId
    };

    const queryParams = {
      "attributes": patchDynamicResourceGroupRequest.attributes,
      "attributeSets": patchDynamicResourceGroupRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchDynamicResourceGroupRequest.authorization,
      "resource_type_schema_version": patchDynamicResourceGroupRequest.resourceTypeSchemaVersion,
      "if-match": patchDynamicResourceGroupRequest.ifMatch,
      "opc-retry-token": patchDynamicResourceGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchDynamicResourceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/DynamicResourceGroups/{dynamicResourceGroupId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchDynamicResourceGroupRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchDynamicResourceGroupResponse>{},
        body: await response.json(),
        bodyKey: "dynamicResourceGroup",
        bodyModel: model.DynamicResourceGroup,
        type: "model.DynamicResourceGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a Grant
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchGrantRequest
   * @return PatchGrantResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchGrant.ts.html |here} to see how to use PatchGrant API.
   */
  public async patchGrant(
    patchGrantRequest: requests.PatchGrantRequest
  ): Promise<responses.PatchGrantResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchGrant.");
    const operationName = "patchGrant";
    const apiReferenceLink = "";
    const pathParams = {
      "{grantId}": patchGrantRequest.grantId
    };

    const queryParams = {
      "attributes": patchGrantRequest.attributes,
      "attributeSets": patchGrantRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchGrantRequest.authorization,
      "resource_type_schema_version": patchGrantRequest.resourceTypeSchemaVersion,
      "if-match": patchGrantRequest.ifMatch,
      "opc-retry-token": patchGrantRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchGrantRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Grants/{grantId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchGrantRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchGrantResponse>{},
        body: await response.json(),
        bodyKey: "grant",
        bodyModel: model.Grant,
        type: "model.Grant",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a group.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchGroupRequest
   * @return PatchGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchGroup.ts.html |here} to see how to use PatchGroup API.
   */
  public async patchGroup(
    patchGroupRequest: requests.PatchGroupRequest
  ): Promise<responses.PatchGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchGroup.");
    const operationName = "patchGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{groupId}": patchGroupRequest.groupId
    };

    const queryParams = {
      "attributes": patchGroupRequest.attributes,
      "attributeSets": patchGroupRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchGroupRequest.authorization,
      "resource_type_schema_version": patchGroupRequest.resourceTypeSchemaVersion,
      "if-match": patchGroupRequest.ifMatch,
      "opc-retry-token": patchGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Groups/{groupId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchGroupRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchGroupResponse>{},
        body: await response.json(),
        bodyKey: "group",
        bodyModel: model.Group,
        type: "model.Group",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update an Identity Provider
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchIdentityProviderRequest
   * @return PatchIdentityProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchIdentityProvider.ts.html |here} to see how to use PatchIdentityProvider API.
   */
  public async patchIdentityProvider(
    patchIdentityProviderRequest: requests.PatchIdentityProviderRequest
  ): Promise<responses.PatchIdentityProviderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchIdentityProvider.");
    const operationName = "patchIdentityProvider";
    const apiReferenceLink = "";
    const pathParams = {
      "{identityProviderId}": patchIdentityProviderRequest.identityProviderId
    };

    const queryParams = {
      "attributes": patchIdentityProviderRequest.attributes,
      "attributeSets": patchIdentityProviderRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchIdentityProviderRequest.authorization,
      "resource_type_schema_version": patchIdentityProviderRequest.resourceTypeSchemaVersion,
      "if-match": patchIdentityProviderRequest.ifMatch,
      "opc-retry-token": patchIdentityProviderRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchIdentityProviderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentityProviders/{identityProviderId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchIdentityProviderRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchIdentityProviderResponse>{},
        body: await response.json(),
        bodyKey: "identityProvider",
        bodyModel: model.IdentityProvider,
        type: "model.IdentityProvider",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update an Identity setting.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchIdentitySettingRequest
   * @return PatchIdentitySettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchIdentitySetting.ts.html |here} to see how to use PatchIdentitySetting API.
   */
  public async patchIdentitySetting(
    patchIdentitySettingRequest: requests.PatchIdentitySettingRequest
  ): Promise<responses.PatchIdentitySettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchIdentitySetting.");
    const operationName = "patchIdentitySetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{identitySettingId}": patchIdentitySettingRequest.identitySettingId
    };

    const queryParams = {
      "attributes": patchIdentitySettingRequest.attributes,
      "attributeSets": patchIdentitySettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchIdentitySettingRequest.authorization,
      "resource_type_schema_version": patchIdentitySettingRequest.resourceTypeSchemaVersion,
      "if-match": patchIdentitySettingRequest.ifMatch,
      "opc-retry-token": patchIdentitySettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchIdentitySettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentitySettings/{identitySettingId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchIdentitySettingRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchIdentitySettingResponse>{},
        body: await response.json(),
        bodyKey: "identitySetting",
        bodyModel: model.IdentitySetting,
        type: "model.IdentitySetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a Setting
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchKmsiSettingRequest
   * @return PatchKmsiSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchKmsiSetting.ts.html |here} to see how to use PatchKmsiSetting API.
   */
  public async patchKmsiSetting(
    patchKmsiSettingRequest: requests.PatchKmsiSettingRequest
  ): Promise<responses.PatchKmsiSettingResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchKmsiSetting.");
    const operationName = "patchKmsiSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{kmsiSettingId}": patchKmsiSettingRequest.kmsiSettingId
    };

    const queryParams = {
      "attributes": patchKmsiSettingRequest.attributes,
      "attributeSets": patchKmsiSettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchKmsiSettingRequest.authorization,
      "resource_type_schema_version": patchKmsiSettingRequest.resourceTypeSchemaVersion,
      "if-match": patchKmsiSettingRequest.ifMatch,
      "opc-retry-token": patchKmsiSettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchKmsiSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/KmsiSettings/{kmsiSettingId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchKmsiSettingRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchKmsiSettingResponse>{},
        body: await response.json(),
        bodyKey: "kmsiSetting",
        bodyModel: model.KmsiSetting,
        type: "model.KmsiSetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's own information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchMeRequest
   * @return PatchMeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchMe.ts.html |here} to see how to use PatchMe API.
   */
  public async patchMe(
    patchMeRequest: requests.PatchMeRequest
  ): Promise<responses.PatchMeResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchMe.");
    const operationName = "patchMe";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": patchMeRequest.attributes,
      "attributeSets": patchMeRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchMeRequest.authorization,
      "resource_type_schema_version": patchMeRequest.resourceTypeSchemaVersion,
      "if-match": patchMeRequest.ifMatch,
      "opc-retry-token": patchMeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchMeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Me",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchMeRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchMeResponse>{},
        body: await response.json(),
        bodyKey: "me",
        bodyModel: model.Me,
        type: "model.Me",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's own API key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchMyApiKeyRequest
   * @return PatchMyApiKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchMyApiKey.ts.html |here} to see how to use PatchMyApiKey API.
   */
  public async patchMyApiKey(
    patchMyApiKeyRequest: requests.PatchMyApiKeyRequest
  ): Promise<responses.PatchMyApiKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchMyApiKey.");
    const operationName = "patchMyApiKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{myApiKeyId}": patchMyApiKeyRequest.myApiKeyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchMyApiKeyRequest.authorization,
      "resource_type_schema_version": patchMyApiKeyRequest.resourceTypeSchemaVersion,
      "if-match": patchMyApiKeyRequest.ifMatch,
      "opc-retry-token": patchMyApiKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchMyApiKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyApiKeys/{myApiKeyId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchMyApiKeyRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchMyApiKeyResponse>{},
        body: await response.json(),
        bodyKey: "myApiKey",
        bodyModel: model.MyApiKey,
        type: "model.MyApiKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's own Auth token.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchMyAuthTokenRequest
   * @return PatchMyAuthTokenResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchMyAuthToken.ts.html |here} to see how to use PatchMyAuthToken API.
   */
  public async patchMyAuthToken(
    patchMyAuthTokenRequest: requests.PatchMyAuthTokenRequest
  ): Promise<responses.PatchMyAuthTokenResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchMyAuthToken.");
    const operationName = "patchMyAuthToken";
    const apiReferenceLink = "";
    const pathParams = {
      "{myAuthTokenId}": patchMyAuthTokenRequest.myAuthTokenId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchMyAuthTokenRequest.authorization,
      "resource_type_schema_version": patchMyAuthTokenRequest.resourceTypeSchemaVersion,
      "if-match": patchMyAuthTokenRequest.ifMatch,
      "opc-retry-token": patchMyAuthTokenRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchMyAuthTokenRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyAuthTokens/{myAuthTokenId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchMyAuthTokenRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchMyAuthTokenResponse>{},
        body: await response.json(),
        bodyKey: "myAuthToken",
        bodyModel: model.MyAuthToken,
        type: "model.MyAuthToken",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's own customer secret key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchMyCustomerSecretKeyRequest
   * @return PatchMyCustomerSecretKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchMyCustomerSecretKey.ts.html |here} to see how to use PatchMyCustomerSecretKey API.
   */
  public async patchMyCustomerSecretKey(
    patchMyCustomerSecretKeyRequest: requests.PatchMyCustomerSecretKeyRequest
  ): Promise<responses.PatchMyCustomerSecretKeyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchMyCustomerSecretKey.");
    const operationName = "patchMyCustomerSecretKey";
    const apiReferenceLink = "";
    const pathParams = {
      "{myCustomerSecretKeyId}": patchMyCustomerSecretKeyRequest.myCustomerSecretKeyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchMyCustomerSecretKeyRequest.authorization,
      "resource_type_schema_version": patchMyCustomerSecretKeyRequest.resourceTypeSchemaVersion,
      "if-match": patchMyCustomerSecretKeyRequest.ifMatch,
      "opc-retry-token": patchMyCustomerSecretKeyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchMyCustomerSecretKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyCustomerSecretKeys/{myCustomerSecretKeyId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchMyCustomerSecretKeyRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchMyCustomerSecretKeyResponse>{},
        body: await response.json(),
        bodyKey: "myCustomerSecretKey",
        bodyModel: model.MyCustomerSecretKey,
        type: "model.MyCustomerSecretKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a Device
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchMyDeviceRequest
   * @return PatchMyDeviceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchMyDevice.ts.html |here} to see how to use PatchMyDevice API.
   */
  public async patchMyDevice(
    patchMyDeviceRequest: requests.PatchMyDeviceRequest
  ): Promise<responses.PatchMyDeviceResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchMyDevice.");
    const operationName = "patchMyDevice";
    const apiReferenceLink = "";
    const pathParams = {
      "{myDeviceId}": patchMyDeviceRequest.myDeviceId
    };

    const queryParams = {
      "attributes": patchMyDeviceRequest.attributes,
      "attributeSets": patchMyDeviceRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchMyDeviceRequest.authorization,
      "resource_type_schema_version": patchMyDeviceRequest.resourceTypeSchemaVersion,
      "if-match": patchMyDeviceRequest.ifMatch,
      "opc-retry-token": patchMyDeviceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchMyDeviceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyDevices/{myDeviceId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchMyDeviceRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchMyDeviceResponse>{},
        body: await response.json(),
        bodyKey: "myDevice",
        bodyModel: model.MyDevice,
        type: "model.MyDevice",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's own OAuth2 client credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchMyOAuth2ClientCredentialRequest
   * @return PatchMyOAuth2ClientCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchMyOAuth2ClientCredential.ts.html |here} to see how to use PatchMyOAuth2ClientCredential API.
   */
  public async patchMyOAuth2ClientCredential(
    patchMyOAuth2ClientCredentialRequest: requests.PatchMyOAuth2ClientCredentialRequest
  ): Promise<responses.PatchMyOAuth2ClientCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchMyOAuth2ClientCredential.");
    const operationName = "patchMyOAuth2ClientCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{myOAuth2ClientCredentialId}":
        patchMyOAuth2ClientCredentialRequest.myOAuth2ClientCredentialId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchMyOAuth2ClientCredentialRequest.authorization,
      "resource_type_schema_version":
        patchMyOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
      "if-match": patchMyOAuth2ClientCredentialRequest.ifMatch,
      "opc-retry-token": patchMyOAuth2ClientCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchMyOAuth2ClientCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyOAuth2ClientCredentials/{myOAuth2ClientCredentialId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchMyOAuth2ClientCredentialRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchMyOAuth2ClientCredentialResponse>{},
        body: await response.json(),
        bodyKey: "myOAuth2ClientCredential",
        bodyModel: model.MyOAuth2ClientCredential,
        type: "model.MyOAuth2ClientCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's own SMTP credential.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchMySmtpCredentialRequest
   * @return PatchMySmtpCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchMySmtpCredential.ts.html |here} to see how to use PatchMySmtpCredential API.
   */
  public async patchMySmtpCredential(
    patchMySmtpCredentialRequest: requests.PatchMySmtpCredentialRequest
  ): Promise<responses.PatchMySmtpCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchMySmtpCredential.");
    const operationName = "patchMySmtpCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{mySmtpCredentialId}": patchMySmtpCredentialRequest.mySmtpCredentialId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchMySmtpCredentialRequest.authorization,
      "resource_type_schema_version": patchMySmtpCredentialRequest.resourceTypeSchemaVersion,
      "if-match": patchMySmtpCredentialRequest.ifMatch,
      "opc-retry-token": patchMySmtpCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchMySmtpCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MySmtpCredentials/{mySmtpCredentialId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchMySmtpCredentialRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchMySmtpCredentialResponse>{},
        body: await response.json(),
        bodyKey: "mySmtpCredential",
        bodyModel: model.MySmtpCredential,
        type: "model.MySmtpCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's OAuth2 client credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchOAuth2ClientCredentialRequest
   * @return PatchOAuth2ClientCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchOAuth2ClientCredential.ts.html |here} to see how to use PatchOAuth2ClientCredential API.
   */
  public async patchOAuth2ClientCredential(
    patchOAuth2ClientCredentialRequest: requests.PatchOAuth2ClientCredentialRequest
  ): Promise<responses.PatchOAuth2ClientCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchOAuth2ClientCredential.");
    const operationName = "patchOAuth2ClientCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{oAuth2ClientCredentialId}": patchOAuth2ClientCredentialRequest.oAuth2ClientCredentialId
    };

    const queryParams = {
      "attributes": patchOAuth2ClientCredentialRequest.attributes,
      "attributeSets": patchOAuth2ClientCredentialRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchOAuth2ClientCredentialRequest.authorization,
      "resource_type_schema_version": patchOAuth2ClientCredentialRequest.resourceTypeSchemaVersion,
      "if-match": patchOAuth2ClientCredentialRequest.ifMatch,
      "opc-retry-token": patchOAuth2ClientCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchOAuth2ClientCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/OAuth2ClientCredentials/{oAuth2ClientCredentialId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchOAuth2ClientCredentialRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchOAuth2ClientCredentialResponse>{},
        body: await response.json(),
        bodyKey: "oAuth2ClientCredential",
        bodyModel: model.OAuth2ClientCredential,
        type: "model.OAuth2ClientCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a password policy.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchPasswordPolicyRequest
   * @return PatchPasswordPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchPasswordPolicy.ts.html |here} to see how to use PatchPasswordPolicy API.
   */
  public async patchPasswordPolicy(
    patchPasswordPolicyRequest: requests.PatchPasswordPolicyRequest
  ): Promise<responses.PatchPasswordPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchPasswordPolicy.");
    const operationName = "patchPasswordPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{passwordPolicyId}": patchPasswordPolicyRequest.passwordPolicyId
    };

    const queryParams = {
      "attributes": patchPasswordPolicyRequest.attributes,
      "attributeSets": patchPasswordPolicyRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchPasswordPolicyRequest.authorization,
      "resource_type_schema_version": patchPasswordPolicyRequest.resourceTypeSchemaVersion,
      "if-match": patchPasswordPolicyRequest.ifMatch,
      "opc-retry-token": patchPasswordPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchPasswordPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/PasswordPolicies/{passwordPolicyId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchPasswordPolicyRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchPasswordPolicyResponse>{},
        body: await response.json(),
        bodyKey: "passwordPolicy",
        bodyModel: model.PasswordPolicy,
        type: "model.PasswordPolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a security question.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchSecurityQuestionRequest
   * @return PatchSecurityQuestionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchSecurityQuestion.ts.html |here} to see how to use PatchSecurityQuestion API.
   */
  public async patchSecurityQuestion(
    patchSecurityQuestionRequest: requests.PatchSecurityQuestionRequest
  ): Promise<responses.PatchSecurityQuestionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchSecurityQuestion.");
    const operationName = "patchSecurityQuestion";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityQuestionId}": patchSecurityQuestionRequest.securityQuestionId
    };

    const queryParams = {
      "attributes": patchSecurityQuestionRequest.attributes,
      "attributeSets": patchSecurityQuestionRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchSecurityQuestionRequest.authorization,
      "resource_type_schema_version": patchSecurityQuestionRequest.resourceTypeSchemaVersion,
      "if-match": patchSecurityQuestionRequest.ifMatch,
      "opc-retry-token": patchSecurityQuestionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchSecurityQuestionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SecurityQuestions/{securityQuestionId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchSecurityQuestionRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchSecurityQuestionResponse>{},
        body: await response.json(),
        bodyKey: "securityQuestion",
        bodyModel: model.SecurityQuestion,
        type: "model.SecurityQuestion",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a security question setting.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchSecurityQuestionSettingRequest
   * @return PatchSecurityQuestionSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchSecurityQuestionSetting.ts.html |here} to see how to use PatchSecurityQuestionSetting API.
   */
  public async patchSecurityQuestionSetting(
    patchSecurityQuestionSettingRequest: requests.PatchSecurityQuestionSettingRequest
  ): Promise<responses.PatchSecurityQuestionSettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchSecurityQuestionSetting.");
    const operationName = "patchSecurityQuestionSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityQuestionSettingId}": patchSecurityQuestionSettingRequest.securityQuestionSettingId
    };

    const queryParams = {
      "attributes": patchSecurityQuestionSettingRequest.attributes,
      "attributeSets": patchSecurityQuestionSettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchSecurityQuestionSettingRequest.authorization,
      "resource_type_schema_version": patchSecurityQuestionSettingRequest.resourceTypeSchemaVersion,
      "if-match": patchSecurityQuestionSettingRequest.ifMatch,
      "opc-retry-token": patchSecurityQuestionSettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchSecurityQuestionSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SecurityQuestionSettings/{securityQuestionSettingId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchSecurityQuestionSettingRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchSecurityQuestionSettingResponse>{},
        body: await response.json(),
        bodyKey: "securityQuestionSetting",
        bodyModel: model.SecurityQuestionSetting,
        type: "model.SecurityQuestionSetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's SMTP credentials.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchSmtpCredentialRequest
   * @return PatchSmtpCredentialResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchSmtpCredential.ts.html |here} to see how to use PatchSmtpCredential API.
   */
  public async patchSmtpCredential(
    patchSmtpCredentialRequest: requests.PatchSmtpCredentialRequest
  ): Promise<responses.PatchSmtpCredentialResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchSmtpCredential.");
    const operationName = "patchSmtpCredential";
    const apiReferenceLink = "";
    const pathParams = {
      "{smtpCredentialId}": patchSmtpCredentialRequest.smtpCredentialId
    };

    const queryParams = {
      "attributes": patchSmtpCredentialRequest.attributes,
      "attributeSets": patchSmtpCredentialRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchSmtpCredentialRequest.authorization,
      "resource_type_schema_version": patchSmtpCredentialRequest.resourceTypeSchemaVersion,
      "if-match": patchSmtpCredentialRequest.ifMatch,
      "opc-retry-token": patchSmtpCredentialRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchSmtpCredentialRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SmtpCredentials/{smtpCredentialId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchSmtpCredentialRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchSmtpCredentialResponse>{},
        body: await response.json(),
        bodyKey: "smtpCredential",
        bodyModel: model.SmtpCredential,
        type: "model.SmtpCredential",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchUserRequest
   * @return PatchUserResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchUser.ts.html |here} to see how to use PatchUser API.
   */
  public async patchUser(
    patchUserRequest: requests.PatchUserRequest
  ): Promise<responses.PatchUserResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#patchUser.");
    const operationName = "patchUser";
    const apiReferenceLink = "";
    const pathParams = {
      "{userId}": patchUserRequest.userId
    };

    const queryParams = {
      "attributes": patchUserRequest.attributes,
      "attributeSets": patchUserRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchUserRequest.authorization,
      "resource_type_schema_version": patchUserRequest.resourceTypeSchemaVersion,
      "if-match": patchUserRequest.ifMatch,
      "opc-retry-token": patchUserRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchUserRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Users/{userId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchUserRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchUserResponse>{},
        body: await response.json(),
        bodyKey: "user",
        bodyModel: model.User,
        type: "model.User",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update User Schema Attribute Settings
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PatchUserAttributesSettingRequest
   * @return PatchUserAttributesSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PatchUserAttributesSetting.ts.html |here} to see how to use PatchUserAttributesSetting API.
   */
  public async patchUserAttributesSetting(
    patchUserAttributesSettingRequest: requests.PatchUserAttributesSettingRequest
  ): Promise<responses.PatchUserAttributesSettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#patchUserAttributesSetting.");
    const operationName = "patchUserAttributesSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{userAttributesSettingId}": patchUserAttributesSettingRequest.userAttributesSettingId
    };

    const queryParams = {
      "attributes": patchUserAttributesSettingRequest.attributes,
      "attributeSets": patchUserAttributesSettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": patchUserAttributesSettingRequest.authorization,
      "resource_type_schema_version": patchUserAttributesSettingRequest.resourceTypeSchemaVersion,
      "if-match": patchUserAttributesSettingRequest.ifMatch,
      "opc-retry-token": patchUserAttributesSettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      patchUserAttributesSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserAttributesSettings/{userAttributesSettingId}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchUserAttributesSettingRequest.patchOp,
        "PatchOp",
        model.PatchOp.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchUserAttributesSettingResponse>{},
        body: await response.json(),
        bodyKey: "userAttributesSetting",
        bodyModel: model.UserAttributesSetting,
        type: "model.UserAttributesSetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace an account recovery setting.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutAccountRecoverySettingRequest
   * @return PutAccountRecoverySettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutAccountRecoverySetting.ts.html |here} to see how to use PutAccountRecoverySetting API.
   */
  public async putAccountRecoverySetting(
    putAccountRecoverySettingRequest: requests.PutAccountRecoverySettingRequest
  ): Promise<responses.PutAccountRecoverySettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putAccountRecoverySetting.");
    const operationName = "putAccountRecoverySetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{accountRecoverySettingId}": putAccountRecoverySettingRequest.accountRecoverySettingId
    };

    const queryParams = {
      "attributes": putAccountRecoverySettingRequest.attributes,
      "attributeSets": putAccountRecoverySettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putAccountRecoverySettingRequest.authorization,
      "resource_type_schema_version": putAccountRecoverySettingRequest.resourceTypeSchemaVersion,
      "if-match": putAccountRecoverySettingRequest.ifMatch,
      "opc-retry-token": putAccountRecoverySettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putAccountRecoverySettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AccountRecoverySettings/{accountRecoverySettingId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putAccountRecoverySettingRequest.accountRecoverySetting,
        "AccountRecoverySetting",
        model.AccountRecoverySetting.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutAccountRecoverySettingResponse>{},
        body: await response.json(),
        bodyKey: "accountRecoverySetting",
        bodyModel: model.AccountRecoverySetting,
        type: "model.AccountRecoverySetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace an App
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutAppRequest
   * @return PutAppResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutApp.ts.html |here} to see how to use PutApp API.
   */
  public async putApp(putAppRequest: requests.PutAppRequest): Promise<responses.PutAppResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#putApp.");
    const operationName = "putApp";
    const apiReferenceLink = "";
    const pathParams = {
      "{appId}": putAppRequest.appId
    };

    const queryParams = {
      "attributes": putAppRequest.attributes,
      "attributeSets": putAppRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putAppRequest.authorization,
      "resource_type_schema_version": putAppRequest.resourceTypeSchemaVersion,
      "if-match": putAppRequest.ifMatch,
      "opc-retry-token": putAppRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putAppRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Apps/{appId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putAppRequest.app,
        "App",
        model.App.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutAppResponse>{},
        body: await response.json(),
        bodyKey: "app",
        bodyModel: model.App,
        type: "model.App",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Activate/Deactivate an App
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutAppStatusChangerRequest
   * @return PutAppStatusChangerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutAppStatusChanger.ts.html |here} to see how to use PutAppStatusChanger API.
   */
  public async putAppStatusChanger(
    putAppStatusChangerRequest: requests.PutAppStatusChangerRequest
  ): Promise<responses.PutAppStatusChangerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putAppStatusChanger.");
    const operationName = "putAppStatusChanger";
    const apiReferenceLink = "";
    const pathParams = {
      "{appStatusChangerId}": putAppStatusChangerRequest.appStatusChangerId
    };

    const queryParams = {
      "attributes": putAppStatusChangerRequest.attributes,
      "attributeSets": putAppStatusChangerRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putAppStatusChangerRequest.authorization,
      "resource_type_schema_version": putAppStatusChangerRequest.resourceTypeSchemaVersion,
      "if-match": putAppStatusChangerRequest.ifMatch,
      "opc-retry-token": putAppStatusChangerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putAppStatusChangerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AppStatusChanger/{appStatusChangerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putAppStatusChangerRequest.appStatusChanger,
        "AppStatusChanger",
        model.AppStatusChanger.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutAppStatusChangerResponse>{},
        body: await response.json(),
        bodyKey: "appStatusChanger",
        bodyModel: model.AppStatusChanger,
        type: "model.AppStatusChanger",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace Authentication Factor Settings
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutAuthenticationFactorSettingRequest
   * @return PutAuthenticationFactorSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutAuthenticationFactorSetting.ts.html |here} to see how to use PutAuthenticationFactorSetting API.
   */
  public async putAuthenticationFactorSetting(
    putAuthenticationFactorSettingRequest: requests.PutAuthenticationFactorSettingRequest
  ): Promise<responses.PutAuthenticationFactorSettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putAuthenticationFactorSetting.");
    const operationName = "putAuthenticationFactorSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{authenticationFactorSettingId}":
        putAuthenticationFactorSettingRequest.authenticationFactorSettingId
    };

    const queryParams = {
      "attributes": putAuthenticationFactorSettingRequest.attributes,
      "attributeSets": putAuthenticationFactorSettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putAuthenticationFactorSettingRequest.authorization,
      "resource_type_schema_version":
        putAuthenticationFactorSettingRequest.resourceTypeSchemaVersion,
      "if-match": putAuthenticationFactorSettingRequest.ifMatch,
      "opc-retry-token": putAuthenticationFactorSettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putAuthenticationFactorSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AuthenticationFactorSettings/{authenticationFactorSettingId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putAuthenticationFactorSettingRequest.authenticationFactorSetting,
        "AuthenticationFactorSetting",
        model.AuthenticationFactorSetting.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutAuthenticationFactorSettingResponse>{},
        body: await response.json(),
        bodyKey: "authenticationFactorSetting",
        bodyModel: model.AuthenticationFactorSetting,
        type: "model.AuthenticationFactorSetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace a Dynamic Resource Group.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutDynamicResourceGroupRequest
   * @return PutDynamicResourceGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutDynamicResourceGroup.ts.html |here} to see how to use PutDynamicResourceGroup API.
   */
  public async putDynamicResourceGroup(
    putDynamicResourceGroupRequest: requests.PutDynamicResourceGroupRequest
  ): Promise<responses.PutDynamicResourceGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putDynamicResourceGroup.");
    const operationName = "putDynamicResourceGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{dynamicResourceGroupId}": putDynamicResourceGroupRequest.dynamicResourceGroupId
    };

    const queryParams = {
      "attributes": putDynamicResourceGroupRequest.attributes,
      "attributeSets": putDynamicResourceGroupRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putDynamicResourceGroupRequest.authorization,
      "resource_type_schema_version": putDynamicResourceGroupRequest.resourceTypeSchemaVersion,
      "if-match": putDynamicResourceGroupRequest.ifMatch,
      "opc-retry-token": putDynamicResourceGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putDynamicResourceGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/DynamicResourceGroups/{dynamicResourceGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putDynamicResourceGroupRequest.dynamicResourceGroup,
        "DynamicResourceGroup",
        model.DynamicResourceGroup.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutDynamicResourceGroupResponse>{},
        body: await response.json(),
        bodyKey: "dynamicResourceGroup",
        bodyModel: model.DynamicResourceGroup,
        type: "model.DynamicResourceGroup",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace a group.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutGroupRequest
   * @return PutGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutGroup.ts.html |here} to see how to use PutGroup API.
   */
  public async putGroup(
    putGroupRequest: requests.PutGroupRequest
  ): Promise<responses.PutGroupResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#putGroup.");
    const operationName = "putGroup";
    const apiReferenceLink = "";
    const pathParams = {
      "{groupId}": putGroupRequest.groupId
    };

    const queryParams = {
      "attributes": putGroupRequest.attributes,
      "attributeSets": putGroupRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putGroupRequest.authorization,
      "resource_type_schema_version": putGroupRequest.resourceTypeSchemaVersion,
      "if-match": putGroupRequest.ifMatch,
      "opc-retry-token": putGroupRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Groups/{groupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putGroupRequest.group,
        "Group",
        model.Group.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutGroupResponse>{},
        body: await response.json(),
        bodyKey: "group",
        bodyModel: model.Group,
        type: "model.Group",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace an Identity Provider
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutIdentityProviderRequest
   * @return PutIdentityProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutIdentityProvider.ts.html |here} to see how to use PutIdentityProvider API.
   */
  public async putIdentityProvider(
    putIdentityProviderRequest: requests.PutIdentityProviderRequest
  ): Promise<responses.PutIdentityProviderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putIdentityProvider.");
    const operationName = "putIdentityProvider";
    const apiReferenceLink = "";
    const pathParams = {
      "{identityProviderId}": putIdentityProviderRequest.identityProviderId
    };

    const queryParams = {
      "attributes": putIdentityProviderRequest.attributes,
      "attributeSets": putIdentityProviderRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putIdentityProviderRequest.authorization,
      "resource_type_schema_version": putIdentityProviderRequest.resourceTypeSchemaVersion,
      "if-match": putIdentityProviderRequest.ifMatch,
      "opc-retry-token": putIdentityProviderRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putIdentityProviderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentityProviders/{identityProviderId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putIdentityProviderRequest.identityProvider,
        "IdentityProvider",
        model.IdentityProvider.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutIdentityProviderResponse>{},
        body: await response.json(),
        bodyKey: "identityProvider",
        bodyModel: model.IdentityProvider,
        type: "model.IdentityProvider",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace an Identity setting.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutIdentitySettingRequest
   * @return PutIdentitySettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutIdentitySetting.ts.html |here} to see how to use PutIdentitySetting API.
   */
  public async putIdentitySetting(
    putIdentitySettingRequest: requests.PutIdentitySettingRequest
  ): Promise<responses.PutIdentitySettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putIdentitySetting.");
    const operationName = "putIdentitySetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{identitySettingId}": putIdentitySettingRequest.identitySettingId
    };

    const queryParams = {
      "attributes": putIdentitySettingRequest.attributes,
      "attributeSets": putIdentitySettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putIdentitySettingRequest.authorization,
      "resource_type_schema_version": putIdentitySettingRequest.resourceTypeSchemaVersion,
      "if-match": putIdentitySettingRequest.ifMatch,
      "opc-retry-token": putIdentitySettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putIdentitySettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentitySettings/{identitySettingId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putIdentitySettingRequest.identitySetting,
        "IdentitySetting",
        model.IdentitySetting.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutIdentitySettingResponse>{},
        body: await response.json(),
        bodyKey: "identitySetting",
        bodyModel: model.IdentitySetting,
        type: "model.IdentitySetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace KmsiSettings
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutKmsiSettingRequest
   * @return PutKmsiSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutKmsiSetting.ts.html |here} to see how to use PutKmsiSetting API.
   */
  public async putKmsiSetting(
    putKmsiSettingRequest: requests.PutKmsiSettingRequest
  ): Promise<responses.PutKmsiSettingResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#putKmsiSetting.");
    const operationName = "putKmsiSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{kmsiSettingId}": putKmsiSettingRequest.kmsiSettingId
    };

    const queryParams = {
      "attributes": putKmsiSettingRequest.attributes,
      "attributeSets": putKmsiSettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putKmsiSettingRequest.authorization,
      "resource_type_schema_version": putKmsiSettingRequest.resourceTypeSchemaVersion,
      "if-match": putKmsiSettingRequest.ifMatch,
      "opc-retry-token": putKmsiSettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putKmsiSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/KmsiSettings/{kmsiSettingId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putKmsiSettingRequest.kmsiSetting,
        "KmsiSetting",
        model.KmsiSetting.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutKmsiSettingResponse>{},
        body: await response.json(),
        bodyKey: "kmsiSetting",
        bodyModel: model.KmsiSetting,
        type: "model.KmsiSetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace a user's own information.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutMeRequest
   * @return PutMeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutMe.ts.html |here} to see how to use PutMe API.
   */
  public async putMe(putMeRequest: requests.PutMeRequest): Promise<responses.PutMeResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#putMe.");
    const operationName = "putMe";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "attributes": putMeRequest.attributes,
      "attributeSets": putMeRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putMeRequest.authorization,
      "resource_type_schema_version": putMeRequest.resourceTypeSchemaVersion,
      "if-match": putMeRequest.ifMatch,
      "opc-retry-token": putMeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putMeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Me",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(putMeRequest.me, "Me", model.Me.getJsonObj),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutMeResponse>{},
        body: await response.json(),
        bodyKey: "me",
        bodyModel: model.Me,
        type: "model.Me",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update a user's own password.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutMePasswordChangerRequest
   * @return PutMePasswordChangerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutMePasswordChanger.ts.html |here} to see how to use PutMePasswordChanger API.
   */
  public async putMePasswordChanger(
    putMePasswordChangerRequest: requests.PutMePasswordChangerRequest
  ): Promise<responses.PutMePasswordChangerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putMePasswordChanger.");
    const operationName = "putMePasswordChanger";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putMePasswordChangerRequest.authorization,
      "resource_type_schema_version": putMePasswordChangerRequest.resourceTypeSchemaVersion,
      "if-match": putMePasswordChangerRequest.ifMatch,
      "opc-retry-token": putMePasswordChangerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putMePasswordChangerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MePasswordChanger",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putMePasswordChangerRequest.mePasswordChanger,
        "MePasswordChanger",
        model.MePasswordChanger.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutMePasswordChangerResponse>{},
        body: await response.json(),
        bodyKey: "mePasswordChanger",
        bodyModel: model.MePasswordChanger,
        type: "model.MePasswordChanger",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace a password policy.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutPasswordPolicyRequest
   * @return PutPasswordPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutPasswordPolicy.ts.html |here} to see how to use PutPasswordPolicy API.
   */
  public async putPasswordPolicy(
    putPasswordPolicyRequest: requests.PutPasswordPolicyRequest
  ): Promise<responses.PutPasswordPolicyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putPasswordPolicy.");
    const operationName = "putPasswordPolicy";
    const apiReferenceLink = "";
    const pathParams = {
      "{passwordPolicyId}": putPasswordPolicyRequest.passwordPolicyId
    };

    const queryParams = {
      "attributes": putPasswordPolicyRequest.attributes,
      "attributeSets": putPasswordPolicyRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putPasswordPolicyRequest.authorization,
      "resource_type_schema_version": putPasswordPolicyRequest.resourceTypeSchemaVersion,
      "if-match": putPasswordPolicyRequest.ifMatch,
      "opc-retry-token": putPasswordPolicyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putPasswordPolicyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/PasswordPolicies/{passwordPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putPasswordPolicyRequest.passwordPolicy,
        "PasswordPolicy",
        model.PasswordPolicy.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutPasswordPolicyResponse>{},
        body: await response.json(),
        bodyKey: "passwordPolicy",
        bodyModel: model.PasswordPolicy,
        type: "model.PasswordPolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace a security question setting.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutSecurityQuestionSettingRequest
   * @return PutSecurityQuestionSettingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutSecurityQuestionSetting.ts.html |here} to see how to use PutSecurityQuestionSetting API.
   */
  public async putSecurityQuestionSetting(
    putSecurityQuestionSettingRequest: requests.PutSecurityQuestionSettingRequest
  ): Promise<responses.PutSecurityQuestionSettingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putSecurityQuestionSetting.");
    const operationName = "putSecurityQuestionSetting";
    const apiReferenceLink = "";
    const pathParams = {
      "{securityQuestionSettingId}": putSecurityQuestionSettingRequest.securityQuestionSettingId
    };

    const queryParams = {
      "attributes": putSecurityQuestionSettingRequest.attributes,
      "attributeSets": putSecurityQuestionSettingRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putSecurityQuestionSettingRequest.authorization,
      "resource_type_schema_version": putSecurityQuestionSettingRequest.resourceTypeSchemaVersion,
      "if-match": putSecurityQuestionSettingRequest.ifMatch,
      "opc-retry-token": putSecurityQuestionSettingRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putSecurityQuestionSettingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SecurityQuestionSettings/{securityQuestionSettingId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putSecurityQuestionSettingRequest.securityQuestionSetting,
        "SecurityQuestionSetting",
        model.SecurityQuestionSetting.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutSecurityQuestionSettingResponse>{},
        body: await response.json(),
        bodyKey: "securityQuestionSetting",
        bodyModel: model.SecurityQuestionSetting,
        type: "model.SecurityQuestionSetting",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replace a user.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutUserRequest
   * @return PutUserResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutUser.ts.html |here} to see how to use PutUser API.
   */
  public async putUser(
    putUserRequest: requests.PutUserRequest
  ): Promise<responses.PutUserResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#putUser.");
    const operationName = "putUser";
    const apiReferenceLink = "";
    const pathParams = {
      "{userId}": putUserRequest.userId
    };

    const queryParams = {
      "attributes": putUserRequest.attributes,
      "attributeSets": putUserRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putUserRequest.authorization,
      "resource_type_schema_version": putUserRequest.resourceTypeSchemaVersion,
      "if-match": putUserRequest.ifMatch,
      "opc-retry-token": putUserRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putUserRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Users/{userId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putUserRequest.user,
        "User",
        model.User.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutUserResponse>{},
        body: await response.json(),
        bodyKey: "user",
        bodyModel: model.User,
        type: "model.User",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Change a user's capabilities.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutUserCapabilitiesChangerRequest
   * @return PutUserCapabilitiesChangerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutUserCapabilitiesChanger.ts.html |here} to see how to use PutUserCapabilitiesChanger API.
   */
  public async putUserCapabilitiesChanger(
    putUserCapabilitiesChangerRequest: requests.PutUserCapabilitiesChangerRequest
  ): Promise<responses.PutUserCapabilitiesChangerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putUserCapabilitiesChanger.");
    const operationName = "putUserCapabilitiesChanger";
    const apiReferenceLink = "";
    const pathParams = {
      "{userCapabilitiesChangerId}": putUserCapabilitiesChangerRequest.userCapabilitiesChangerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putUserCapabilitiesChangerRequest.authorization,
      "resource_type_schema_version": putUserCapabilitiesChangerRequest.resourceTypeSchemaVersion,
      "if-match": putUserCapabilitiesChangerRequest.ifMatch,
      "opc-retry-token": putUserCapabilitiesChangerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putUserCapabilitiesChangerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserCapabilitiesChanger/{userCapabilitiesChangerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putUserCapabilitiesChangerRequest.userCapabilitiesChanger,
        "UserCapabilitiesChanger",
        model.UserCapabilitiesChanger.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutUserCapabilitiesChangerResponse>{},
        body: await response.json(),
        bodyKey: "userCapabilitiesChanger",
        bodyModel: model.UserCapabilitiesChanger,
        type: "model.UserCapabilitiesChanger",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Change a user's password to a known value.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutUserPasswordChangerRequest
   * @return PutUserPasswordChangerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutUserPasswordChanger.ts.html |here} to see how to use PutUserPasswordChanger API.
   */
  public async putUserPasswordChanger(
    putUserPasswordChangerRequest: requests.PutUserPasswordChangerRequest
  ): Promise<responses.PutUserPasswordChangerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putUserPasswordChanger.");
    const operationName = "putUserPasswordChanger";
    const apiReferenceLink = "";
    const pathParams = {
      "{userPasswordChangerId}": putUserPasswordChangerRequest.userPasswordChangerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putUserPasswordChangerRequest.authorization,
      "resource_type_schema_version": putUserPasswordChangerRequest.resourceTypeSchemaVersion,
      "if-match": putUserPasswordChangerRequest.ifMatch,
      "opc-retry-token": putUserPasswordChangerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putUserPasswordChangerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserPasswordChanger/{userPasswordChangerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putUserPasswordChangerRequest.userPasswordChanger,
        "UserPasswordChanger",
        model.UserPasswordChanger.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutUserPasswordChangerResponse>{},
        body: await response.json(),
        bodyKey: "userPasswordChanger",
        bodyModel: model.UserPasswordChanger,
        type: "model.UserPasswordChanger",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Reset a user's password to a randomly-generated value.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutUserPasswordResetterRequest
   * @return PutUserPasswordResetterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutUserPasswordResetter.ts.html |here} to see how to use PutUserPasswordResetter API.
   */
  public async putUserPasswordResetter(
    putUserPasswordResetterRequest: requests.PutUserPasswordResetterRequest
  ): Promise<responses.PutUserPasswordResetterResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putUserPasswordResetter.");
    const operationName = "putUserPasswordResetter";
    const apiReferenceLink = "";
    const pathParams = {
      "{userPasswordResetterId}": putUserPasswordResetterRequest.userPasswordResetterId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putUserPasswordResetterRequest.authorization,
      "resource_type_schema_version": putUserPasswordResetterRequest.resourceTypeSchemaVersion,
      "if-match": putUserPasswordResetterRequest.ifMatch,
      "opc-retry-token": putUserPasswordResetterRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putUserPasswordResetterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserPasswordResetter/{userPasswordResetterId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putUserPasswordResetterRequest.userPasswordResetter,
        "UserPasswordResetter",
        model.UserPasswordResetter.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutUserPasswordResetterResponse>{},
        body: await response.json(),
        bodyKey: "userPasswordResetter",
        bodyModel: model.UserPasswordResetter,
        type: "model.UserPasswordResetter",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Change a user's status.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutUserStatusChangerRequest
   * @return PutUserStatusChangerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/PutUserStatusChanger.ts.html |here} to see how to use PutUserStatusChanger API.
   */
  public async putUserStatusChanger(
    putUserStatusChangerRequest: requests.PutUserStatusChangerRequest
  ): Promise<responses.PutUserStatusChangerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#putUserStatusChanger.");
    const operationName = "putUserStatusChanger";
    const apiReferenceLink = "";
    const pathParams = {
      "{userStatusChangerId}": putUserStatusChangerRequest.userStatusChangerId
    };

    const queryParams = {
      "attributes": putUserStatusChangerRequest.attributes,
      "attributeSets": putUserStatusChangerRequest.attributeSets
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": putUserStatusChangerRequest.authorization,
      "resource_type_schema_version": putUserStatusChangerRequest.resourceTypeSchemaVersion,
      "if-match": putUserStatusChangerRequest.ifMatch,
      "opc-retry-token": putUserStatusChangerRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putUserStatusChangerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserStatusChanger/{userStatusChangerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putUserStatusChangerRequest.userStatusChanger,
        "UserStatusChanger",
        model.UserStatusChanger.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutUserStatusChangerResponse>{},
        body: await response.json(),
        bodyKey: "userStatusChanger",
        bodyModel: model.UserStatusChanger,
        type: "model.UserStatusChanger",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Account Mgmt Info Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchAccountMgmtInfosRequest
   * @return SearchAccountMgmtInfosResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchAccountMgmtInfos.ts.html |here} to see how to use SearchAccountMgmtInfos API.
   */
  public async searchAccountMgmtInfos(
    searchAccountMgmtInfosRequest: requests.SearchAccountMgmtInfosRequest
  ): Promise<responses.SearchAccountMgmtInfosResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchAccountMgmtInfos.");
    const operationName = "searchAccountMgmtInfos";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchAccountMgmtInfosRequest.page,
      "limit": searchAccountMgmtInfosRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchAccountMgmtInfosRequest.authorization,
      "resource_type_schema_version": searchAccountMgmtInfosRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchAccountMgmtInfosRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchAccountMgmtInfosRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AccountMgmtInfos/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchAccountMgmtInfosRequest.accountMgmtInfoSearchRequest,
        "AccountMgmtInfoSearchRequest",
        model.AccountMgmtInfoSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchAccountMgmtInfosResponse>{},
        body: await response.json(),
        bodyKey: "accountMgmtInfos",
        bodyModel: model.AccountMgmtInfos,
        type: "model.AccountMgmtInfos",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search ApiKeys Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchApiKeysRequest
   * @return SearchApiKeysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchApiKeys.ts.html |here} to see how to use SearchApiKeys API.
   */
  public async searchApiKeys(
    searchApiKeysRequest: requests.SearchApiKeysRequest
  ): Promise<responses.SearchApiKeysResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#searchApiKeys.");
    const operationName = "searchApiKeys";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchApiKeysRequest.page,
      "limit": searchApiKeysRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchApiKeysRequest.authorization,
      "resource_type_schema_version": searchApiKeysRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchApiKeysRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchApiKeysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/ApiKeys/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchApiKeysRequest.apiKeySearchRequest,
        "ApiKeySearchRequest",
        model.ApiKeySearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchApiKeysResponse>{},
        body: await response.json(),
        bodyKey: "apiKeys",
        bodyModel: model.ApiKeys,
        type: "model.ApiKeys",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search AppRoles Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchAppRolesRequest
   * @return SearchAppRolesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchAppRoles.ts.html |here} to see how to use SearchAppRoles API.
   */
  public async searchAppRoles(
    searchAppRolesRequest: requests.SearchAppRolesRequest
  ): Promise<responses.SearchAppRolesResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#searchAppRoles.");
    const operationName = "searchAppRoles";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchAppRolesRequest.page,
      "limit": searchAppRolesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchAppRolesRequest.authorization,
      "resource_type_schema_version": searchAppRolesRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchAppRolesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchAppRolesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AppRoles/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchAppRolesRequest.appRoleSearchRequest,
        "AppRoleSearchRequest",
        model.AppRoleSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchAppRolesResponse>{},
        body: await response.json(),
        bodyKey: "appRoles",
        bodyModel: model.AppRoles,
        type: "model.AppRoles",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Apps Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchAppsRequest
   * @return SearchAppsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchApps.ts.html |here} to see how to use SearchApps API.
   */
  public async searchApps(
    searchAppsRequest: requests.SearchAppsRequest
  ): Promise<responses.SearchAppsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#searchApps.");
    const operationName = "searchApps";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchAppsRequest.page,
      "limit": searchAppsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchAppsRequest.authorization,
      "resource_type_schema_version": searchAppsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchAppsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchAppsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Apps/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchAppsRequest.appSearchRequest,
        "AppSearchRequest",
        model.AppSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchAppsResponse>{},
        body: await response.json(),
        bodyKey: "apps",
        bodyModel: model.Apps,
        type: "model.Apps",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for Auth tokens using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchAuthTokensRequest
   * @return SearchAuthTokensResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchAuthTokens.ts.html |here} to see how to use SearchAuthTokens API.
   */
  public async searchAuthTokens(
    searchAuthTokensRequest: requests.SearchAuthTokensRequest
  ): Promise<responses.SearchAuthTokensResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#searchAuthTokens.");
    const operationName = "searchAuthTokens";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchAuthTokensRequest.page,
      "limit": searchAuthTokensRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchAuthTokensRequest.authorization,
      "resource_type_schema_version": searchAuthTokensRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchAuthTokensRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchAuthTokensRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AuthTokens/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchAuthTokensRequest.authTokenSearchRequest,
        "AuthTokenSearchRequest",
        model.AuthTokenSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchAuthTokensResponse>{},
        body: await response.json(),
        bodyKey: "authTokens",
        bodyModel: model.AuthTokens,
        type: "model.AuthTokens",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Authentication Factor Settings Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchAuthenticationFactorSettingsRequest
   * @return SearchAuthenticationFactorSettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchAuthenticationFactorSettings.ts.html |here} to see how to use SearchAuthenticationFactorSettings API.
   */
  public async searchAuthenticationFactorSettings(
    searchAuthenticationFactorSettingsRequest: requests.SearchAuthenticationFactorSettingsRequest
  ): Promise<responses.SearchAuthenticationFactorSettingsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation IdentityDomainsClient#searchAuthenticationFactorSettings."
      );
    const operationName = "searchAuthenticationFactorSettings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchAuthenticationFactorSettingsRequest.page,
      "limit": searchAuthenticationFactorSettingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchAuthenticationFactorSettingsRequest.authorization,
      "resource_type_schema_version":
        searchAuthenticationFactorSettingsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchAuthenticationFactorSettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchAuthenticationFactorSettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/AuthenticationFactorSettings/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchAuthenticationFactorSettingsRequest.authenticationFactorSettingsSearchRequest,
        "AuthenticationFactorSettingsSearchRequest",
        model.AuthenticationFactorSettingsSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchAuthenticationFactorSettingsResponse>{},
        body: await response.json(),
        bodyKey: "authenticationFactorSettings",
        bodyModel: model.AuthenticationFactorSettings,
        type: "model.AuthenticationFactorSettings",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for customer secret keys using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchCustomerSecretKeysRequest
   * @return SearchCustomerSecretKeysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchCustomerSecretKeys.ts.html |here} to see how to use SearchCustomerSecretKeys API.
   */
  public async searchCustomerSecretKeys(
    searchCustomerSecretKeysRequest: requests.SearchCustomerSecretKeysRequest
  ): Promise<responses.SearchCustomerSecretKeysResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchCustomerSecretKeys.");
    const operationName = "searchCustomerSecretKeys";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchCustomerSecretKeysRequest.page,
      "limit": searchCustomerSecretKeysRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchCustomerSecretKeysRequest.authorization,
      "resource_type_schema_version": searchCustomerSecretKeysRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchCustomerSecretKeysRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchCustomerSecretKeysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/CustomerSecretKeys/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchCustomerSecretKeysRequest.customerSecretKeySearchRequest,
        "CustomerSecretKeySearchRequest",
        model.CustomerSecretKeySearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchCustomerSecretKeysResponse>{},
        body: await response.json(),
        bodyKey: "customerSecretKeys",
        bodyModel: model.CustomerSecretKeys,
        type: "model.CustomerSecretKeys",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for Dynamic Resource Groups using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchDynamicResourceGroupsRequest
   * @return SearchDynamicResourceGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchDynamicResourceGroups.ts.html |here} to see how to use SearchDynamicResourceGroups API.
   */
  public async searchDynamicResourceGroups(
    searchDynamicResourceGroupsRequest: requests.SearchDynamicResourceGroupsRequest
  ): Promise<responses.SearchDynamicResourceGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchDynamicResourceGroups.");
    const operationName = "searchDynamicResourceGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchDynamicResourceGroupsRequest.page,
      "limit": searchDynamicResourceGroupsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchDynamicResourceGroupsRequest.authorization,
      "resource_type_schema_version": searchDynamicResourceGroupsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchDynamicResourceGroupsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchDynamicResourceGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/DynamicResourceGroups/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchDynamicResourceGroupsRequest.dynamicResourceGroupSearchRequest,
        "DynamicResourceGroupSearchRequest",
        model.DynamicResourceGroupSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchDynamicResourceGroupsResponse>{},
        body: await response.json(),
        bodyKey: "dynamicResourceGroups",
        bodyModel: model.DynamicResourceGroups,
        type: "model.DynamicResourceGroups",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Grants Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchGrantsRequest
   * @return SearchGrantsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchGrants.ts.html |here} to see how to use SearchGrants API.
   */
  public async searchGrants(
    searchGrantsRequest: requests.SearchGrantsRequest
  ): Promise<responses.SearchGrantsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#searchGrants.");
    const operationName = "searchGrants";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchGrantsRequest.page,
      "limit": searchGrantsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchGrantsRequest.authorization,
      "resource_type_schema_version": searchGrantsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchGrantsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchGrantsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Grants/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchGrantsRequest.grantSearchRequest,
        "GrantSearchRequest",
        model.GrantSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchGrantsResponse>{},
        body: await response.json(),
        bodyKey: "grants",
        bodyModel: model.Grants,
        type: "model.Grants",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for groups using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchGroupsRequest
   * @return SearchGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchGroups.ts.html |here} to see how to use SearchGroups API.
   */
  public async searchGroups(
    searchGroupsRequest: requests.SearchGroupsRequest
  ): Promise<responses.SearchGroupsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#searchGroups.");
    const operationName = "searchGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchGroupsRequest.page,
      "limit": searchGroupsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchGroupsRequest.authorization,
      "resource_type_schema_version": searchGroupsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchGroupsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Groups/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchGroupsRequest.groupSearchRequest,
        "GroupSearchRequest",
        model.GroupSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchGroupsResponse>{},
        body: await response.json(),
        bodyKey: "groups",
        bodyModel: model.Groups,
        type: "model.Groups",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Identity Providers Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchIdentityProvidersRequest
   * @return SearchIdentityProvidersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchIdentityProviders.ts.html |here} to see how to use SearchIdentityProviders API.
   */
  public async searchIdentityProviders(
    searchIdentityProvidersRequest: requests.SearchIdentityProvidersRequest
  ): Promise<responses.SearchIdentityProvidersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchIdentityProviders.");
    const operationName = "searchIdentityProviders";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchIdentityProvidersRequest.page,
      "limit": searchIdentityProvidersRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchIdentityProvidersRequest.authorization,
      "resource_type_schema_version": searchIdentityProvidersRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchIdentityProvidersRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchIdentityProvidersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentityProviders/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchIdentityProvidersRequest.identityProviderSearchRequest,
        "IdentityProviderSearchRequest",
        model.IdentityProviderSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchIdentityProvidersResponse>{},
        body: await response.json(),
        bodyKey: "identityProviders",
        bodyModel: model.IdentityProviders,
        type: "model.IdentityProviders",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for Identity settings using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchIdentitySettingsRequest
   * @return SearchIdentitySettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchIdentitySettings.ts.html |here} to see how to use SearchIdentitySettings API.
   */
  public async searchIdentitySettings(
    searchIdentitySettingsRequest: requests.SearchIdentitySettingsRequest
  ): Promise<responses.SearchIdentitySettingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchIdentitySettings.");
    const operationName = "searchIdentitySettings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchIdentitySettingsRequest.page,
      "limit": searchIdentitySettingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchIdentitySettingsRequest.authorization,
      "resource_type_schema_version": searchIdentitySettingsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchIdentitySettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchIdentitySettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/IdentitySettings/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchIdentitySettingsRequest.identitySettingsSearchRequest,
        "IdentitySettingsSearchRequest",
        model.IdentitySettingsSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchIdentitySettingsResponse>{},
        body: await response.json(),
        bodyKey: "identitySettings",
        bodyModel: model.IdentitySettings,
        type: "model.IdentitySettings",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search KmsiSettings Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchKmsiSettingsRequest
   * @return SearchKmsiSettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchKmsiSettings.ts.html |here} to see how to use SearchKmsiSettings API.
   */
  public async searchKmsiSettings(
    searchKmsiSettingsRequest: requests.SearchKmsiSettingsRequest
  ): Promise<responses.SearchKmsiSettingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchKmsiSettings.");
    const operationName = "searchKmsiSettings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchKmsiSettingsRequest.page,
      "limit": searchKmsiSettingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchKmsiSettingsRequest.authorization,
      "resource_type_schema_version": searchKmsiSettingsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchKmsiSettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchKmsiSettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/KmsiSettings/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchKmsiSettingsRequest.kmsiSettingsSearchRequest,
        "KmsiSettingsSearchRequest",
        model.KmsiSettingsSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchKmsiSettingsResponse>{},
        body: await response.json(),
        bodyKey: "kmsiSettings",
        bodyModel: model.KmsiSettings,
        type: "model.KmsiSettings",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search My Apps Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchMyAppsRequest
   * @return SearchMyAppsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchMyApps.ts.html |here} to see how to use SearchMyApps API.
   */
  public async searchMyApps(
    searchMyAppsRequest: requests.SearchMyAppsRequest
  ): Promise<responses.SearchMyAppsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#searchMyApps.");
    const operationName = "searchMyApps";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchMyAppsRequest.page,
      "limit": searchMyAppsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchMyAppsRequest.authorization,
      "resource_type_schema_version": searchMyAppsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchMyAppsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchMyAppsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyApps/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchMyAppsRequest.myAppSearchRequest,
        "MyAppSearchRequest",
        model.MyAppSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchMyAppsResponse>{},
        body: await response.json(),
        bodyKey: "myApps",
        bodyModel: model.MyApps,
        type: "model.MyApps",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for 'My Groups' using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchMyGroupsRequest
   * @return SearchMyGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchMyGroups.ts.html |here} to see how to use SearchMyGroups API.
   */
  public async searchMyGroups(
    searchMyGroupsRequest: requests.SearchMyGroupsRequest
  ): Promise<responses.SearchMyGroupsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#searchMyGroups.");
    const operationName = "searchMyGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchMyGroupsRequest.page,
      "limit": searchMyGroupsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchMyGroupsRequest.authorization,
      "resource_type_schema_version": searchMyGroupsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchMyGroupsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchMyGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyGroups/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchMyGroupsRequest.myGroupSearchRequest,
        "MyGroupSearchRequest",
        model.MyGroupSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchMyGroupsResponse>{},
        body: await response.json(),
        bodyKey: "myGroups",
        bodyModel: model.MyGroups,
        type: "model.MyGroups",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search My Requestable Groups Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchMyRequestableGroupsRequest
   * @return SearchMyRequestableGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchMyRequestableGroups.ts.html |here} to see how to use SearchMyRequestableGroups API.
   */
  public async searchMyRequestableGroups(
    searchMyRequestableGroupsRequest: requests.SearchMyRequestableGroupsRequest
  ): Promise<responses.SearchMyRequestableGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchMyRequestableGroups.");
    const operationName = "searchMyRequestableGroups";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchMyRequestableGroupsRequest.page,
      "limit": searchMyRequestableGroupsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchMyRequestableGroupsRequest.authorization,
      "resource_type_schema_version": searchMyRequestableGroupsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchMyRequestableGroupsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchMyRequestableGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyRequestableGroups/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchMyRequestableGroupsRequest.myRequestableGroupSearchRequest,
        "MyRequestableGroupSearchRequest",
        model.MyRequestableGroupSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchMyRequestableGroupsResponse>{},
        body: await response.json(),
        bodyKey: "myRequestableGroups",
        bodyModel: model.MyRequestableGroups,
        type: "model.MyRequestableGroups",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search My Requests Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchMyRequestsRequest
   * @return SearchMyRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchMyRequests.ts.html |here} to see how to use SearchMyRequests API.
   */
  public async searchMyRequests(
    searchMyRequestsRequest: requests.SearchMyRequestsRequest
  ): Promise<responses.SearchMyRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#searchMyRequests.");
    const operationName = "searchMyRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchMyRequestsRequest.page,
      "limit": searchMyRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchMyRequestsRequest.authorization,
      "resource_type_schema_version": searchMyRequestsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchMyRequestsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchMyRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/MyRequests/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchMyRequestsRequest.myRequestSearchRequest,
        "MyRequestSearchRequest",
        model.MyRequestSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchMyRequestsResponse>{},
        body: await response.json(),
        bodyKey: "myRequests",
        bodyModel: model.MyRequests,
        type: "model.MyRequests",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for OAuth2 client credentials using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchOAuth2ClientCredentialsRequest
   * @return SearchOAuth2ClientCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchOAuth2ClientCredentials.ts.html |here} to see how to use SearchOAuth2ClientCredentials API.
   */
  public async searchOAuth2ClientCredentials(
    searchOAuth2ClientCredentialsRequest: requests.SearchOAuth2ClientCredentialsRequest
  ): Promise<responses.SearchOAuth2ClientCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchOAuth2ClientCredentials.");
    const operationName = "searchOAuth2ClientCredentials";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchOAuth2ClientCredentialsRequest.page,
      "limit": searchOAuth2ClientCredentialsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchOAuth2ClientCredentialsRequest.authorization,
      "resource_type_schema_version":
        searchOAuth2ClientCredentialsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchOAuth2ClientCredentialsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchOAuth2ClientCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/OAuth2ClientCredentials/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchOAuth2ClientCredentialsRequest.oAuth2ClientCredentialSearchRequest,
        "OAuth2ClientCredentialSearchRequest",
        model.OAuth2ClientCredentialSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchOAuth2ClientCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "oAuth2ClientCredentials",
        bodyModel: model.OAuth2ClientCredentials,
        type: "model.OAuth2ClientCredentials",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for password policies using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchPasswordPoliciesRequest
   * @return SearchPasswordPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchPasswordPolicies.ts.html |here} to see how to use SearchPasswordPolicies API.
   */
  public async searchPasswordPolicies(
    searchPasswordPoliciesRequest: requests.SearchPasswordPoliciesRequest
  ): Promise<responses.SearchPasswordPoliciesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchPasswordPolicies.");
    const operationName = "searchPasswordPolicies";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchPasswordPoliciesRequest.page,
      "limit": searchPasswordPoliciesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchPasswordPoliciesRequest.authorization,
      "resource_type_schema_version": searchPasswordPoliciesRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchPasswordPoliciesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchPasswordPoliciesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/PasswordPolicies/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchPasswordPoliciesRequest.passwordPolicySearchRequest,
        "PasswordPolicySearchRequest",
        model.PasswordPolicySearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchPasswordPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "passwordPolicies",
        bodyModel: model.PasswordPolicies,
        type: "model.PasswordPolicies",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search Resource Type Schema Attributes Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchResourceTypeSchemaAttributesRequest
   * @return SearchResourceTypeSchemaAttributesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchResourceTypeSchemaAttributes.ts.html |here} to see how to use SearchResourceTypeSchemaAttributes API.
   */
  public async searchResourceTypeSchemaAttributes(
    searchResourceTypeSchemaAttributesRequest: requests.SearchResourceTypeSchemaAttributesRequest
  ): Promise<responses.SearchResourceTypeSchemaAttributesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation IdentityDomainsClient#searchResourceTypeSchemaAttributes."
      );
    const operationName = "searchResourceTypeSchemaAttributes";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchResourceTypeSchemaAttributesRequest.page,
      "limit": searchResourceTypeSchemaAttributesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchResourceTypeSchemaAttributesRequest.authorization,
      "resource_type_schema_version":
        searchResourceTypeSchemaAttributesRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchResourceTypeSchemaAttributesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchResourceTypeSchemaAttributesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/ResourceTypeSchemaAttributes/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchResourceTypeSchemaAttributesRequest.resourceTypeSchemaAttributeSearchRequest,
        "ResourceTypeSchemaAttributeSearchRequest",
        model.ResourceTypeSchemaAttributeSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchResourceTypeSchemaAttributesResponse>{},
        body: await response.json(),
        bodyKey: "resourceTypeSchemaAttributes",
        bodyModel: model.ResourceTypeSchemaAttributes,
        type: "model.ResourceTypeSchemaAttributes",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for security question settings using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchSecurityQuestionSettingsRequest
   * @return SearchSecurityQuestionSettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchSecurityQuestionSettings.ts.html |here} to see how to use SearchSecurityQuestionSettings API.
   */
  public async searchSecurityQuestionSettings(
    searchSecurityQuestionSettingsRequest: requests.SearchSecurityQuestionSettingsRequest
  ): Promise<responses.SearchSecurityQuestionSettingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchSecurityQuestionSettings.");
    const operationName = "searchSecurityQuestionSettings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchSecurityQuestionSettingsRequest.page,
      "limit": searchSecurityQuestionSettingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchSecurityQuestionSettingsRequest.authorization,
      "resource_type_schema_version":
        searchSecurityQuestionSettingsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchSecurityQuestionSettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchSecurityQuestionSettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SecurityQuestionSettings/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchSecurityQuestionSettingsRequest.securityQuestionSettingsSearchRequest,
        "SecurityQuestionSettingsSearchRequest",
        model.SecurityQuestionSettingsSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchSecurityQuestionSettingsResponse>{},
        body: await response.json(),
        bodyKey: "securityQuestionSettings",
        bodyModel: model.SecurityQuestionSettings,
        type: "model.SecurityQuestionSettings",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for security questions using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchSecurityQuestionsRequest
   * @return SearchSecurityQuestionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchSecurityQuestions.ts.html |here} to see how to use SearchSecurityQuestions API.
   */
  public async searchSecurityQuestions(
    searchSecurityQuestionsRequest: requests.SearchSecurityQuestionsRequest
  ): Promise<responses.SearchSecurityQuestionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchSecurityQuestions.");
    const operationName = "searchSecurityQuestions";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchSecurityQuestionsRequest.page,
      "limit": searchSecurityQuestionsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchSecurityQuestionsRequest.authorization,
      "resource_type_schema_version": searchSecurityQuestionsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchSecurityQuestionsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchSecurityQuestionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SecurityQuestions/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchSecurityQuestionsRequest.securityQuestionSearchRequest,
        "SecurityQuestionSearchRequest",
        model.SecurityQuestionSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchSecurityQuestionsResponse>{},
        body: await response.json(),
        bodyKey: "securityQuestions",
        bodyModel: model.SecurityQuestions,
        type: "model.SecurityQuestions",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for SMTP credentials using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchSmtpCredentialsRequest
   * @return SearchSmtpCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchSmtpCredentials.ts.html |here} to see how to use SearchSmtpCredentials API.
   */
  public async searchSmtpCredentials(
    searchSmtpCredentialsRequest: requests.SearchSmtpCredentialsRequest
  ): Promise<responses.SearchSmtpCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchSmtpCredentials.");
    const operationName = "searchSmtpCredentials";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchSmtpCredentialsRequest.page,
      "limit": searchSmtpCredentialsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchSmtpCredentialsRequest.authorization,
      "resource_type_schema_version": searchSmtpCredentialsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchSmtpCredentialsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchSmtpCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/SmtpCredentials/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchSmtpCredentialsRequest.smtpCredentialSearchRequest,
        "SmtpCredentialSearchRequest",
        model.SmtpCredentialSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchSmtpCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "smtpCredentials",
        bodyModel: model.SmtpCredentials,
        type: "model.SmtpCredentials",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search User Schema Attribute Settings Using POST
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchUserAttributesSettingsRequest
   * @return SearchUserAttributesSettingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchUserAttributesSettings.ts.html |here} to see how to use SearchUserAttributesSettings API.
   */
  public async searchUserAttributesSettings(
    searchUserAttributesSettingsRequest: requests.SearchUserAttributesSettingsRequest
  ): Promise<responses.SearchUserAttributesSettingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchUserAttributesSettings.");
    const operationName = "searchUserAttributesSettings";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchUserAttributesSettingsRequest.page,
      "limit": searchUserAttributesSettingsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchUserAttributesSettingsRequest.authorization,
      "resource_type_schema_version": searchUserAttributesSettingsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchUserAttributesSettingsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchUserAttributesSettingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserAttributesSettings/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchUserAttributesSettingsRequest.userAttributesSettingsSearchRequest,
        "UserAttributesSettingsSearchRequest",
        model.UserAttributesSettingsSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchUserAttributesSettingsResponse>{},
        body: await response.json(),
        bodyKey: "userAttributesSettings",
        bodyModel: model.UserAttributesSettings,
        type: "model.UserAttributesSettings",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for a user's database (DB) credentials using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchUserDbCredentialsRequest
   * @return SearchUserDbCredentialsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchUserDbCredentials.ts.html |here} to see how to use SearchUserDbCredentials API.
   */
  public async searchUserDbCredentials(
    searchUserDbCredentialsRequest: requests.SearchUserDbCredentialsRequest
  ): Promise<responses.SearchUserDbCredentialsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation IdentityDomainsClient#searchUserDbCredentials.");
    const operationName = "searchUserDbCredentials";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchUserDbCredentialsRequest.page,
      "limit": searchUserDbCredentialsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchUserDbCredentialsRequest.authorization,
      "resource_type_schema_version": searchUserDbCredentialsRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchUserDbCredentialsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchUserDbCredentialsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/UserDbCredentials/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchUserDbCredentialsRequest.userDbCredentialsSearchRequest,
        "UserDbCredentialsSearchRequest",
        model.UserDbCredentialsSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchUserDbCredentialsResponse>{},
        body: await response.json(),
        bodyKey: "userDbCredentials",
        bodyModel: model.UserDbCredentials,
        type: "model.UserDbCredentials",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Search for users using POST.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SearchUsersRequest
   * @return SearchUsersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/identitydomains/SearchUsers.ts.html |here} to see how to use SearchUsers API.
   */
  public async searchUsers(
    searchUsersRequest: requests.SearchUsersRequest
  ): Promise<responses.SearchUsersResponse> {
    if (this.logger) this.logger.debug("Calling operation IdentityDomainsClient#searchUsers.");
    const operationName = "searchUsers";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "page": searchUsersRequest.page,
      "limit": searchUsersRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "authorization": searchUsersRequest.authorization,
      "resource_type_schema_version": searchUsersRequest.resourceTypeSchemaVersion,
      "opc-retry-token": searchUsersRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      searchUsersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/admin/v1/Users/.search",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        searchUsersRequest.userSearchRequest,
        "UserSearchRequest",
        model.UserSearchRequest.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SearchUsersResponse>{},
        body: await response.json(),
        bodyKey: "users",
        bodyModel: model.Users,
        type: "model.Users",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

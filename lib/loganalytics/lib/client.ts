/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { LogAnalyticsWaiter } from "./loganalytics-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum LogAnalyticsApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class LogAnalyticsClient {
  protected static serviceEndpointTemplate =
    "https://loganalytics.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": LogAnalyticsWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200601";
    if (this.logger) this.logger.info(`LogAnalyticsClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      LogAnalyticsClient.serviceEndpointTemplate,
      region,
      LogAnalyticsClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      LogAnalyticsClient.serviceEndpointTemplate,
      regionId,
      LogAnalyticsClient.endpointServiceName
    );
  }

  /**
   * Creates a new LogAnalyticsWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): LogAnalyticsWaiter {
    this._waiters = new LogAnalyticsWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): LogAnalyticsWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Adds association between input source log analytics entity and one or more existing destination entities.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddEntityAssociationRequest
   * @return AddEntityAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/AddEntityAssociation.ts.html |here} to see how to use AddEntityAssociation API.
   */
  public async addEntityAssociation(
    addEntityAssociationRequest: requests.AddEntityAssociationRequest
  ): Promise<responses.AddEntityAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#addEntityAssociation.");
    const pathParams = {
      "{namespaceName}": addEntityAssociationRequest.namespaceName,
      "{logAnalyticsEntityId}": addEntityAssociationRequest.logAnalyticsEntityId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addEntityAssociationRequest.opcRequestId,
      "opc-retry-token": addEntityAssociationRequest.opcRetryToken,
      "if-match": addEntityAssociationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addEntityAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}/actions/addEntityAssociations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addEntityAssociationRequest.addEntityAssociationDetails,
        "AddEntityAssociationDetails",
        model.AddEntityAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AddEntityAssociationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add one or more event types to a source. An event type and version can be enabled only on one source.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddSourceEventTypesRequest
   * @return AddSourceEventTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/AddSourceEventTypes.ts.html |here} to see how to use AddSourceEventTypes API.
   */
  public async addSourceEventTypes(
    addSourceEventTypesRequest: requests.AddSourceEventTypesRequest
  ): Promise<responses.AddSourceEventTypesResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#addSourceEventTypes.");
    const pathParams = {
      "{namespaceName}": addSourceEventTypesRequest.namespaceName,
      "{sourceName}": addSourceEventTypesRequest.sourceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": addSourceEventTypesRequest.opcRetryToken,
      "opc-request-id": addSourceEventTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addSourceEventTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/addEventTypes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addSourceEventTypesRequest.addEventTypeDetails,
        "EventTypeDetails",
        model.EventTypeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AddSourceEventTypesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Appends data to the lookup content. The csv file containing the content to be appended is passed in as binary data in the request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AppendLookupDataRequest
   * @return AppendLookupDataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/AppendLookupData.ts.html |here} to see how to use AppendLookupData API.
   */
  public async appendLookupData(
    appendLookupDataRequest: requests.AppendLookupDataRequest
  ): Promise<responses.AppendLookupDataResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#appendLookupData.");
    const pathParams = {
      "{namespaceName}": appendLookupDataRequest.namespaceName,
      "{lookupName}": appendLookupDataRequest.lookupName
    };

    const queryParams = {
      "isForce": appendLookupDataRequest.isForce,
      "charEncoding": appendLookupDataRequest.charEncoding
    };

    let headerParams = {
      "opc-retry-token": appendLookupDataRequest.opcRetryToken,
      "opc-request-id": appendLookupDataRequest.opcRequestId,
      "if-match": appendLookupDataRequest.ifMatch,
      "expect": appendLookupDataRequest.expect
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      appendLookupDataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/lookups/{lookupName}/actions/appendData",
      method: "POST",
      bodyContent: appendLookupDataRequest.appendLookupFileBody,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.AppendLookupDataResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists basic information about a specified set of labels in batch.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BatchGetBasicInfoRequest
   * @return BatchGetBasicInfoResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/BatchGetBasicInfo.ts.html |here} to see how to use BatchGetBasicInfo API.
   */
  public async batchGetBasicInfo(
    batchGetBasicInfoRequest: requests.BatchGetBasicInfoRequest
  ): Promise<responses.BatchGetBasicInfoResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#batchGetBasicInfo.");
    const pathParams = {
      "{namespaceName}": batchGetBasicInfoRequest.namespaceName
    };

    const queryParams = {
      "isIncludeDeleted": batchGetBasicInfoRequest.isIncludeDeleted,
      "limit": batchGetBasicInfoRequest.limit,
      "page": batchGetBasicInfoRequest.page,
      "sortOrder": batchGetBasicInfoRequest.sortOrder,
      "basicLabelSortBy": batchGetBasicInfoRequest.basicLabelSortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": batchGetBasicInfoRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      batchGetBasicInfoRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/labels/actions/basicInfo",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        batchGetBasicInfoRequest.basicDetails,
        "LabelNames",
        model.LabelNames.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.BatchGetBasicInfoResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLabelCollection",
        bodyModel: model.LogAnalyticsLabelCollection,
        type: "model.LogAnalyticsLabelCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancel/Remove query job work request.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CancelQueryWorkRequestRequest
   * @return CancelQueryWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/CancelQueryWorkRequest.ts.html |here} to see how to use CancelQueryWorkRequest API.
   */
  public async cancelQueryWorkRequest(
    cancelQueryWorkRequestRequest: requests.CancelQueryWorkRequestRequest
  ): Promise<responses.CancelQueryWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#cancelQueryWorkRequest.");
    const pathParams = {
      "{namespaceName}": cancelQueryWorkRequestRequest.namespaceName,
      "{workRequestId}": cancelQueryWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": cancelQueryWorkRequestRequest.opcRequestId,
      "if-match": cancelQueryWorkRequestRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelQueryWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/queryWorkRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelQueryWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the compartment of the log analytics enterprise manager bridge with the given id.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeLogAnalyticsEmBridgeCompartmentRequest
   * @return ChangeLogAnalyticsEmBridgeCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ChangeLogAnalyticsEmBridgeCompartment.ts.html |here} to see how to use ChangeLogAnalyticsEmBridgeCompartment API.
   */
  public async changeLogAnalyticsEmBridgeCompartment(
    changeLogAnalyticsEmBridgeCompartmentRequest: requests.ChangeLogAnalyticsEmBridgeCompartmentRequest
  ): Promise<responses.ChangeLogAnalyticsEmBridgeCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LogAnalyticsClient#changeLogAnalyticsEmBridgeCompartment."
      );
    const pathParams = {
      "{namespaceName}": changeLogAnalyticsEmBridgeCompartmentRequest.namespaceName,
      "{logAnalyticsEmBridgeId}":
        changeLogAnalyticsEmBridgeCompartmentRequest.logAnalyticsEmBridgeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeLogAnalyticsEmBridgeCompartmentRequest.ifMatch,
      "opc-request-id": changeLogAnalyticsEmBridgeCompartmentRequest.opcRequestId,
      "opc-retry-token": changeLogAnalyticsEmBridgeCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeLogAnalyticsEmBridgeCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/logAnalyticsEmBridges/{logAnalyticsEmBridgeId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLogAnalyticsEmBridgeCompartmentRequest.changeLogAnalyticsEmBridgeCompartmentDetails,
        "ChangeLogAnalyticsEmBridgeCompartmentDetails",
        model.ChangeLogAnalyticsEmBridgeCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLogAnalyticsEmBridgeCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the compartment of the log analytics entity with the given id.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeLogAnalyticsEntityCompartmentRequest
   * @return ChangeLogAnalyticsEntityCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ChangeLogAnalyticsEntityCompartment.ts.html |here} to see how to use ChangeLogAnalyticsEntityCompartment API.
   */
  public async changeLogAnalyticsEntityCompartment(
    changeLogAnalyticsEntityCompartmentRequest: requests.ChangeLogAnalyticsEntityCompartmentRequest
  ): Promise<responses.ChangeLogAnalyticsEntityCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LogAnalyticsClient#changeLogAnalyticsEntityCompartment."
      );
    const pathParams = {
      "{namespaceName}": changeLogAnalyticsEntityCompartmentRequest.namespaceName,
      "{logAnalyticsEntityId}": changeLogAnalyticsEntityCompartmentRequest.logAnalyticsEntityId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeLogAnalyticsEntityCompartmentRequest.ifMatch,
      "opc-request-id": changeLogAnalyticsEntityCompartmentRequest.opcRequestId,
      "opc-retry-token": changeLogAnalyticsEntityCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeLogAnalyticsEntityCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLogAnalyticsEntityCompartmentRequest.changeLogAnalyticsEntityCompartmentDetails,
        "ChangeLogAnalyticsEntityCompartmentDetails",
        model.ChangeLogAnalyticsEntityCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLogAnalyticsEntityCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves the specified log group to a different compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeLogAnalyticsLogGroupCompartmentRequest
   * @return ChangeLogAnalyticsLogGroupCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ChangeLogAnalyticsLogGroupCompartment.ts.html |here} to see how to use ChangeLogAnalyticsLogGroupCompartment API.
   */
  public async changeLogAnalyticsLogGroupCompartment(
    changeLogAnalyticsLogGroupCompartmentRequest: requests.ChangeLogAnalyticsLogGroupCompartmentRequest
  ): Promise<responses.ChangeLogAnalyticsLogGroupCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LogAnalyticsClient#changeLogAnalyticsLogGroupCompartment."
      );
    const pathParams = {
      "{namespaceName}": changeLogAnalyticsLogGroupCompartmentRequest.namespaceName,
      "{logAnalyticsLogGroupId}":
        changeLogAnalyticsLogGroupCompartmentRequest.logAnalyticsLogGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeLogAnalyticsLogGroupCompartmentRequest.ifMatch,
      "opc-request-id": changeLogAnalyticsLogGroupCompartmentRequest.opcRequestId,
      "opc-retry-token": changeLogAnalyticsLogGroupCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeLogAnalyticsLogGroupCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/logAnalyticsLogGroups/{logAnalyticsLogGroupId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLogAnalyticsLogGroupCompartmentRequest.changeLogAnalyticsLogGroupCompartmentDetails,
        "ChangeLogAnalyticsLogGroupCompartmentDetails",
        model.ChangeLogAnalyticsLogGroupCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLogAnalyticsLogGroupCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move the rule from it's current compartment to the given compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeLogAnalyticsObjectCollectionRuleCompartmentRequest
   * @return ChangeLogAnalyticsObjectCollectionRuleCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ChangeLogAnalyticsObjectCollectionRuleCompartment.ts.html |here} to see how to use ChangeLogAnalyticsObjectCollectionRuleCompartment API.
   */
  public async changeLogAnalyticsObjectCollectionRuleCompartment(
    changeLogAnalyticsObjectCollectionRuleCompartmentRequest: requests.ChangeLogAnalyticsObjectCollectionRuleCompartmentRequest
  ): Promise<responses.ChangeLogAnalyticsObjectCollectionRuleCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LogAnalyticsClient#changeLogAnalyticsObjectCollectionRuleCompartment."
      );
    const pathParams = {
      "{namespaceName}": changeLogAnalyticsObjectCollectionRuleCompartmentRequest.namespaceName,
      "{logAnalyticsObjectCollectionRuleId}":
        changeLogAnalyticsObjectCollectionRuleCompartmentRequest.logAnalyticsObjectCollectionRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeLogAnalyticsObjectCollectionRuleCompartmentRequest.ifMatch,
      "opc-request-id": changeLogAnalyticsObjectCollectionRuleCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeLogAnalyticsObjectCollectionRuleCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules/{logAnalyticsObjectCollectionRuleId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeLogAnalyticsObjectCollectionRuleCompartmentRequest.changeLogAnalyticsObjectCollectionRuleCompartmentDetails,
        "ChangeLogAnalyticsObjectCollectionRuleCompartmentDetails",
        model.ChangeLogAnalyticsObjectCollectionRuleCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeLogAnalyticsObjectCollectionRuleCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Move the scheduled task into a different compartment within the same tenancy.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeScheduledTaskCompartmentRequest
   * @return ChangeScheduledTaskCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ChangeScheduledTaskCompartment.ts.html |here} to see how to use ChangeScheduledTaskCompartment API.
   */
  public async changeScheduledTaskCompartment(
    changeScheduledTaskCompartmentRequest: requests.ChangeScheduledTaskCompartmentRequest
  ): Promise<responses.ChangeScheduledTaskCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#changeScheduledTaskCompartment.");
    const pathParams = {
      "{namespaceName}": changeScheduledTaskCompartmentRequest.namespaceName,
      "{scheduledTaskId}": changeScheduledTaskCompartmentRequest.scheduledTaskId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeScheduledTaskCompartmentRequest.ifMatch,
      "opc-request-id": changeScheduledTaskCompartmentRequest.opcRequestId,
      "opc-retry-token": changeScheduledTaskCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeScheduledTaskCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeScheduledTaskCompartmentRequest.changeScheduledTaskCompartmentDetails,
        "ChangeScheduledTaskCompartmentDetails",
        model.ChangeScheduledTaskCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeScheduledTaskCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Clean accumulated acceleration data stored for the accelerated saved search.
   * The ScheduledTask taskType must be ACCELERATION.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CleanRequest
   * @return CleanResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/Clean.ts.html |here} to see how to use Clean API.
   */
  public async clean(cleanRequest: requests.CleanRequest): Promise<responses.CleanResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#clean.");
    const pathParams = {
      "{namespaceName}": cleanRequest.namespaceName,
      "{scheduledTaskId}": cleanRequest.scheduledTaskId
    };

    const queryParams = {
      "timeStart": cleanRequest.timeStart,
      "timeEnd": cleanRequest.timeEnd
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": cleanRequest.opcRequestId,
      "opc-retry-token": cleanRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cleanRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}/actions/clean",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CleanResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the difference between the two input payloads, including intraline differences.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CompareContentRequest
   * @return CompareContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/CompareContent.ts.html |here} to see how to use CompareContent API.
   */
  public async compareContent(
    compareContentRequest: requests.CompareContentRequest
  ): Promise<responses.CompareContentResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#compareContent.");
    const pathParams = {
      "{namespaceName}": compareContentRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": compareContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      compareContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/search/actions/compareContent",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        compareContentRequest.compareContentDetails,
        "CompareContentDetails",
        model.CompareContentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CompareContentResponse>{},
        body: await response.json(),
        bodyKey: "compareContentResult",
        bodyModel: model.CompareContentResult,
        type: "model.CompareContentResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add configuration for enterprise manager bridge. Enterprise manager bridge is used to automatically add selected entities from enterprise manager cloud control. A corresponding OCI bridge configuration is required in enterprise manager.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateLogAnalyticsEmBridgeRequest
   * @return CreateLogAnalyticsEmBridgeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/CreateLogAnalyticsEmBridge.ts.html |here} to see how to use CreateLogAnalyticsEmBridge API.
   */
  public async createLogAnalyticsEmBridge(
    createLogAnalyticsEmBridgeRequest: requests.CreateLogAnalyticsEmBridgeRequest
  ): Promise<responses.CreateLogAnalyticsEmBridgeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#createLogAnalyticsEmBridge.");
    const pathParams = {
      "{namespaceName}": createLogAnalyticsEmBridgeRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createLogAnalyticsEmBridgeRequest.opcRetryToken,
      "opc-request-id": createLogAnalyticsEmBridgeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createLogAnalyticsEmBridgeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEmBridges",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLogAnalyticsEmBridgeRequest.createLogAnalyticsEmBridgeDetails,
        "CreateLogAnalyticsEmBridgeDetails",
        model.CreateLogAnalyticsEmBridgeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLogAnalyticsEmBridgeResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEmBridge",
        bodyModel: model.LogAnalyticsEmBridge,
        type: "model.LogAnalyticsEmBridge",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create a new log analytics entity.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateLogAnalyticsEntityRequest
   * @return CreateLogAnalyticsEntityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/CreateLogAnalyticsEntity.ts.html |here} to see how to use CreateLogAnalyticsEntity API.
   */
  public async createLogAnalyticsEntity(
    createLogAnalyticsEntityRequest: requests.CreateLogAnalyticsEntityRequest
  ): Promise<responses.CreateLogAnalyticsEntityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#createLogAnalyticsEntity.");
    const pathParams = {
      "{namespaceName}": createLogAnalyticsEntityRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createLogAnalyticsEntityRequest.opcRetryToken,
      "opc-request-id": createLogAnalyticsEntityRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createLogAnalyticsEntityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEntities",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLogAnalyticsEntityRequest.createLogAnalyticsEntityDetails,
        "CreateLogAnalyticsEntityDetails",
        model.CreateLogAnalyticsEntityDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLogAnalyticsEntityResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEntity",
        bodyModel: model.LogAnalyticsEntity,
        type: "model.LogAnalyticsEntity",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add custom log analytics entity type.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateLogAnalyticsEntityTypeRequest
   * @return CreateLogAnalyticsEntityTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/CreateLogAnalyticsEntityType.ts.html |here} to see how to use CreateLogAnalyticsEntityType API.
   */
  public async createLogAnalyticsEntityType(
    createLogAnalyticsEntityTypeRequest: requests.CreateLogAnalyticsEntityTypeRequest
  ): Promise<responses.CreateLogAnalyticsEntityTypeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#createLogAnalyticsEntityType.");
    const pathParams = {
      "{namespaceName}": createLogAnalyticsEntityTypeRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createLogAnalyticsEntityTypeRequest.opcRequestId,
      "opc-retry-token": createLogAnalyticsEntityTypeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createLogAnalyticsEntityTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEntityTypes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLogAnalyticsEntityTypeRequest.createLogAnalyticsEntityTypeDetails,
        "CreateLogAnalyticsEntityTypeDetails",
        model.CreateLogAnalyticsEntityTypeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLogAnalyticsEntityTypeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new log group in the specified compartment with the input display name. You may also specify optional information such as description, defined tags, and free-form tags.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateLogAnalyticsLogGroupRequest
   * @return CreateLogAnalyticsLogGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/CreateLogAnalyticsLogGroup.ts.html |here} to see how to use CreateLogAnalyticsLogGroup API.
   */
  public async createLogAnalyticsLogGroup(
    createLogAnalyticsLogGroupRequest: requests.CreateLogAnalyticsLogGroupRequest
  ): Promise<responses.CreateLogAnalyticsLogGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#createLogAnalyticsLogGroup.");
    const pathParams = {
      "{namespaceName}": createLogAnalyticsLogGroupRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createLogAnalyticsLogGroupRequest.opcRetryToken,
      "opc-request-id": createLogAnalyticsLogGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createLogAnalyticsLogGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsLogGroups",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLogAnalyticsLogGroupRequest.createLogAnalyticsLogGroupDetails,
        "CreateLogAnalyticsLogGroupDetails",
        model.CreateLogAnalyticsLogGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLogAnalyticsLogGroupResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLogGroup",
        bodyModel: model.LogAnalyticsLogGroup,
        type: "model.LogAnalyticsLogGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a rule to collect logs from an object storage bucket.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateLogAnalyticsObjectCollectionRuleRequest
   * @return CreateLogAnalyticsObjectCollectionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/CreateLogAnalyticsObjectCollectionRule.ts.html |here} to see how to use CreateLogAnalyticsObjectCollectionRule API.
   */
  public async createLogAnalyticsObjectCollectionRule(
    createLogAnalyticsObjectCollectionRuleRequest: requests.CreateLogAnalyticsObjectCollectionRuleRequest
  ): Promise<responses.CreateLogAnalyticsObjectCollectionRuleResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LogAnalyticsClient#createLogAnalyticsObjectCollectionRule."
      );
    const pathParams = {
      "{namespaceName}": createLogAnalyticsObjectCollectionRuleRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createLogAnalyticsObjectCollectionRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createLogAnalyticsObjectCollectionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createLogAnalyticsObjectCollectionRuleRequest.createLogAnalyticsObjectCollectionRuleDetails,
        "CreateLogAnalyticsObjectCollectionRuleDetails",
        model.CreateLogAnalyticsObjectCollectionRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateLogAnalyticsObjectCollectionRuleResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsObjectCollectionRule",
        bodyModel: model.LogAnalyticsObjectCollectionRule,
        type: "model.LogAnalyticsObjectCollectionRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Schedule a task as specified and return task info.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateScheduledTaskRequest
   * @return CreateScheduledTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/CreateScheduledTask.ts.html |here} to see how to use CreateScheduledTask API.
   */
  public async createScheduledTask(
    createScheduledTaskRequest: requests.CreateScheduledTaskRequest
  ): Promise<responses.CreateScheduledTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#createScheduledTask.");
    const pathParams = {
      "{namespaceName}": createScheduledTaskRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createScheduledTaskRequest.opcRequestId,
      "opc-retry-token": createScheduledTaskRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createScheduledTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/scheduledTasks",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createScheduledTaskRequest.createScheduledTaskDetails,
        "CreateScheduledTaskDetails",
        model.CreateScheduledTaskDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateScheduledTaskResponse>{},
        body: await response.json(),
        bodyKey: "scheduledTask",
        bodyModel: model.ScheduledTask,
        type: "model.ScheduledTask",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the associations between the sources and entities specified.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteAssociationsRequest
   * @return DeleteAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteAssociations.ts.html |here} to see how to use DeleteAssociations API.
   */
  public async deleteAssociations(
    deleteAssociationsRequest: requests.DeleteAssociationsRequest
  ): Promise<responses.DeleteAssociationsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#deleteAssociations.");
    const pathParams = {
      "{namespaceName}": deleteAssociationsRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": deleteAssociationsRequest.opcRetryToken,
      "opc-request-id": deleteAssociationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/associations/actions/delete",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        deleteAssociationsRequest.deleteLogAnalyticsAssociationDetails,
        "DeleteLogAnalyticsAssociationDetails",
        model.DeleteLogAnalyticsAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAssociationsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes field with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteFieldRequest
   * @return DeleteFieldResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteField.ts.html |here} to see how to use DeleteField API.
   */
  public async deleteField(
    deleteFieldRequest: requests.DeleteFieldRequest
  ): Promise<responses.DeleteFieldResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#deleteField.");
    const pathParams = {
      "{namespaceName}": deleteFieldRequest.namespaceName,
      "{fieldName}": deleteFieldRequest.fieldName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": deleteFieldRequest.opcRetryToken,
      "opc-request-id": deleteFieldRequest.opcRequestId,
      "if-match": deleteFieldRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFieldRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/fields/{fieldName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFieldResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes label with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteLabelRequest
   * @return DeleteLabelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteLabel.ts.html |here} to see how to use DeleteLabel API.
   */
  public async deleteLabel(
    deleteLabelRequest: requests.DeleteLabelRequest
  ): Promise<responses.DeleteLabelResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#deleteLabel.");
    const pathParams = {
      "{namespaceName}": deleteLabelRequest.namespaceName,
      "{labelName}": deleteLabelRequest.labelName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": deleteLabelRequest.opcRetryToken,
      "opc-request-id": deleteLabelRequest.opcRequestId,
      "if-match": deleteLabelRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLabelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/labels/{labelName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLabelResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete log analytics enterprise manager bridge with the given id.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteLogAnalyticsEmBridgeRequest
   * @return DeleteLogAnalyticsEmBridgeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteLogAnalyticsEmBridge.ts.html |here} to see how to use DeleteLogAnalyticsEmBridge API.
   */
  public async deleteLogAnalyticsEmBridge(
    deleteLogAnalyticsEmBridgeRequest: requests.DeleteLogAnalyticsEmBridgeRequest
  ): Promise<responses.DeleteLogAnalyticsEmBridgeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#deleteLogAnalyticsEmBridge.");
    const pathParams = {
      "{namespaceName}": deleteLogAnalyticsEmBridgeRequest.namespaceName,
      "{logAnalyticsEmBridgeId}": deleteLogAnalyticsEmBridgeRequest.logAnalyticsEmBridgeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteLogAnalyticsEmBridgeRequest.ifMatch,
      "opc-request-id": deleteLogAnalyticsEmBridgeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLogAnalyticsEmBridgeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEmBridges/{logAnalyticsEmBridgeId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLogAnalyticsEmBridgeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete log analytics entity with the given id.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteLogAnalyticsEntityRequest
   * @return DeleteLogAnalyticsEntityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteLogAnalyticsEntity.ts.html |here} to see how to use DeleteLogAnalyticsEntity API.
   */
  public async deleteLogAnalyticsEntity(
    deleteLogAnalyticsEntityRequest: requests.DeleteLogAnalyticsEntityRequest
  ): Promise<responses.DeleteLogAnalyticsEntityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#deleteLogAnalyticsEntity.");
    const pathParams = {
      "{namespaceName}": deleteLogAnalyticsEntityRequest.namespaceName,
      "{logAnalyticsEntityId}": deleteLogAnalyticsEntityRequest.logAnalyticsEntityId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteLogAnalyticsEntityRequest.ifMatch,
      "opc-request-id": deleteLogAnalyticsEntityRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLogAnalyticsEntityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLogAnalyticsEntityResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete log analytics entity type with the given name.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteLogAnalyticsEntityTypeRequest
   * @return DeleteLogAnalyticsEntityTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteLogAnalyticsEntityType.ts.html |here} to see how to use DeleteLogAnalyticsEntityType API.
   */
  public async deleteLogAnalyticsEntityType(
    deleteLogAnalyticsEntityTypeRequest: requests.DeleteLogAnalyticsEntityTypeRequest
  ): Promise<responses.DeleteLogAnalyticsEntityTypeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#deleteLogAnalyticsEntityType.");
    const pathParams = {
      "{namespaceName}": deleteLogAnalyticsEntityTypeRequest.namespaceName,
      "{entityTypeName}": deleteLogAnalyticsEntityTypeRequest.entityTypeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteLogAnalyticsEntityTypeRequest.ifMatch,
      "opc-request-id": deleteLogAnalyticsEntityTypeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLogAnalyticsEntityTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEntityTypes/{entityTypeName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLogAnalyticsEntityTypeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified log group. The log group cannot be part of an active association or have an active upload.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteLogAnalyticsLogGroupRequest
   * @return DeleteLogAnalyticsLogGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteLogAnalyticsLogGroup.ts.html |here} to see how to use DeleteLogAnalyticsLogGroup API.
   */
  public async deleteLogAnalyticsLogGroup(
    deleteLogAnalyticsLogGroupRequest: requests.DeleteLogAnalyticsLogGroupRequest
  ): Promise<responses.DeleteLogAnalyticsLogGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#deleteLogAnalyticsLogGroup.");
    const pathParams = {
      "{namespaceName}": deleteLogAnalyticsLogGroupRequest.namespaceName,
      "{logAnalyticsLogGroupId}": deleteLogAnalyticsLogGroupRequest.logAnalyticsLogGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteLogAnalyticsLogGroupRequest.ifMatch,
      "opc-request-id": deleteLogAnalyticsLogGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLogAnalyticsLogGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsLogGroups/{logAnalyticsLogGroupId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLogAnalyticsLogGroupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the configured object storage bucket based collection rule and stop the log collection.
   * It will not delete the existing processed data associated with this bucket from logging analytics storage.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteLogAnalyticsObjectCollectionRuleRequest
   * @return DeleteLogAnalyticsObjectCollectionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteLogAnalyticsObjectCollectionRule.ts.html |here} to see how to use DeleteLogAnalyticsObjectCollectionRule API.
   */
  public async deleteLogAnalyticsObjectCollectionRule(
    deleteLogAnalyticsObjectCollectionRuleRequest: requests.DeleteLogAnalyticsObjectCollectionRuleRequest
  ): Promise<responses.DeleteLogAnalyticsObjectCollectionRuleResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LogAnalyticsClient#deleteLogAnalyticsObjectCollectionRule."
      );
    const pathParams = {
      "{namespaceName}": deleteLogAnalyticsObjectCollectionRuleRequest.namespaceName,
      "{logAnalyticsObjectCollectionRuleId}":
        deleteLogAnalyticsObjectCollectionRuleRequest.logAnalyticsObjectCollectionRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteLogAnalyticsObjectCollectionRuleRequest.opcRequestId,
      "if-match": deleteLogAnalyticsObjectCollectionRuleRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLogAnalyticsObjectCollectionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules/{logAnalyticsObjectCollectionRuleId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLogAnalyticsObjectCollectionRuleResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes lookup with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteLookupRequest
   * @return DeleteLookupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteLookup.ts.html |here} to see how to use DeleteLookup API.
   */
  public async deleteLookup(
    deleteLookupRequest: requests.DeleteLookupRequest
  ): Promise<responses.DeleteLookupResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#deleteLookup.");
    const pathParams = {
      "{namespaceName}": deleteLookupRequest.namespaceName,
      "{lookupName}": deleteLookupRequest.lookupName
    };

    const queryParams = {
      "isForce": deleteLookupRequest.isForce
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": deleteLookupRequest.opcRetryToken,
      "opc-request-id": deleteLookupRequest.opcRequestId,
      "if-match": deleteLookupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteLookupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/lookups/{lookupName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteLookupResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes parser with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteParserRequest
   * @return DeleteParserResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteParser.ts.html |here} to see how to use DeleteParser API.
   */
  public async deleteParser(
    deleteParserRequest: requests.DeleteParserRequest
  ): Promise<responses.DeleteParserResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#deleteParser.");
    const pathParams = {
      "{namespaceName}": deleteParserRequest.namespaceName,
      "{parserName}": deleteParserRequest.parserName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": deleteParserRequest.opcRetryToken,
      "opc-request-id": deleteParserRequest.opcRequestId,
      "if-match": deleteParserRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteParserRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/parsers/{parserName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteParserResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the scheduled task.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteScheduledTaskRequest
   * @return DeleteScheduledTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteScheduledTask.ts.html |here} to see how to use DeleteScheduledTask API.
   */
  public async deleteScheduledTask(
    deleteScheduledTaskRequest: requests.DeleteScheduledTaskRequest
  ): Promise<responses.DeleteScheduledTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#deleteScheduledTask.");
    const pathParams = {
      "{namespaceName}": deleteScheduledTaskRequest.namespaceName,
      "{scheduledTaskId}": deleteScheduledTaskRequest.scheduledTaskId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteScheduledTaskRequest.opcRequestId,
      "if-match": deleteScheduledTaskRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteScheduledTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteScheduledTaskResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes source with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteSourceRequest
   * @return DeleteSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteSource.ts.html |here} to see how to use DeleteSource API.
   */
  public async deleteSource(
    deleteSourceRequest: requests.DeleteSourceRequest
  ): Promise<responses.DeleteSourceResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#deleteSource.");
    const pathParams = {
      "{namespaceName}": deleteSourceRequest.namespaceName,
      "{sourceName}": deleteSourceRequest.sourceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": deleteSourceRequest.opcRetryToken,
      "opc-request-id": deleteSourceRequest.opcRequestId,
      "if-match": deleteSourceRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSourceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes an Upload by its reference.
   * It deletes all the logs in storage asscoiated with the upload and the corresponding upload metadata.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteUploadRequest
   * @return DeleteUploadResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteUpload.ts.html |here} to see how to use DeleteUpload API.
   */
  public async deleteUpload(
    deleteUploadRequest: requests.DeleteUploadRequest
  ): Promise<responses.DeleteUploadResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#deleteUpload.");
    const pathParams = {
      "{namespaceName}": deleteUploadRequest.namespaceName,
      "{uploadReference}": deleteUploadRequest.uploadReference
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteUploadRequest.ifMatch,
      "opc-request-id": deleteUploadRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteUploadRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/uploads/{uploadReference}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUploadResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-deleted-log-count"),
            key: "opcDeletedLogCount",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-deleted-logfile-count"),
            key: "opcDeletedLogfileCount",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a specific log file inside an upload by upload file reference.
   * It deletes all the logs from storage associated with the file and the corresponding metadata.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteUploadFileRequest
   * @return DeleteUploadFileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteUploadFile.ts.html |here} to see how to use DeleteUploadFile API.
   */
  public async deleteUploadFile(
    deleteUploadFileRequest: requests.DeleteUploadFileRequest
  ): Promise<responses.DeleteUploadFileResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#deleteUploadFile.");
    const pathParams = {
      "{namespaceName}": deleteUploadFileRequest.namespaceName,
      "{uploadReference}": deleteUploadFileRequest.uploadReference,
      "{fileReference}": deleteUploadFileRequest.fileReference
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteUploadFileRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteUploadFileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/uploads/{uploadReference}/files/{fileReference}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUploadFileResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-deleted-log-count"),
            key: "opcDeletedLogCount",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-deleted-logfile-count"),
            key: "opcDeletedLogfileCount",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Suppresses a specific warning inside an upload.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteUploadWarningRequest
   * @return DeleteUploadWarningResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DeleteUploadWarning.ts.html |here} to see how to use DeleteUploadWarning API.
   */
  public async deleteUploadWarning(
    deleteUploadWarningRequest: requests.DeleteUploadWarningRequest
  ): Promise<responses.DeleteUploadWarningResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#deleteUploadWarning.");
    const pathParams = {
      "{namespaceName}": deleteUploadWarningRequest.namespaceName,
      "{uploadReference}": deleteUploadWarningRequest.uploadReference,
      "{warningReference}": deleteUploadWarningRequest.warningReference
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteUploadWarningRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteUploadWarningRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/uploads/{uploadReference}/warnings/{warningReference}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteUploadWarningResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API disables archiving.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DisableArchivingRequest
   * @return DisableArchivingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DisableArchiving.ts.html |here} to see how to use DisableArchiving API.
   */
  public async disableArchiving(
    disableArchivingRequest: requests.DisableArchivingRequest
  ): Promise<responses.DisableArchivingResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#disableArchiving.");
    const pathParams = {
      "{namespaceName}": disableArchivingRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": disableArchivingRequest.opcRequestId,
      "if-match": disableArchivingRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      disableArchivingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/actions/disableArchiving",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DisableArchivingResponse>{},
        body: await response.json(),
        bodyKey: "success",
        bodyModel: model.Success,
        type: "model.Success",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Disables auto association for a log source. In the future, this log source would not be automatically
   * associated with any entity that becomes eligible for association. In addition, you may also optionally
   * remove all existing associations for this log source.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DisableAutoAssociationRequest
   * @return DisableAutoAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DisableAutoAssociation.ts.html |here} to see how to use DisableAutoAssociation API.
   */
  public async disableAutoAssociation(
    disableAutoAssociationRequest: requests.DisableAutoAssociationRequest
  ): Promise<responses.DisableAutoAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#disableAutoAssociation.");
    const pathParams = {
      "{namespaceName}": disableAutoAssociationRequest.namespaceName,
      "{sourceName}": disableAutoAssociationRequest.sourceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": disableAutoAssociationRequest.opcRetryToken,
      "opc-request-id": disableAutoAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      disableAutoAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/disableAutoAssociation",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        disableAutoAssociationRequest.disableAutoAssociationDetails,
        "DisableAutoAssociationDetails",
        model.DisableAutoAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DisableAutoAssociationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Disable one or more event types in a source.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DisableSourceEventTypesRequest
   * @return DisableSourceEventTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/DisableSourceEventTypes.ts.html |here} to see how to use DisableSourceEventTypes API.
   */
  public async disableSourceEventTypes(
    disableSourceEventTypesRequest: requests.DisableSourceEventTypesRequest
  ): Promise<responses.DisableSourceEventTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#disableSourceEventTypes.");
    const pathParams = {
      "{namespaceName}": disableSourceEventTypesRequest.namespaceName,
      "{sourceName}": disableSourceEventTypesRequest.sourceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": disableSourceEventTypesRequest.opcRetryToken,
      "opc-request-id": disableSourceEventTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      disableSourceEventTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/disableEventTypes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        disableSourceEventTypesRequest.disableEventTypeDetails,
        "EventTypeDetails",
        model.EventTypeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DisableSourceEventTypesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * THis API enables archiving.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param EnableArchivingRequest
   * @return EnableArchivingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/EnableArchiving.ts.html |here} to see how to use EnableArchiving API.
   */
  public async enableArchiving(
    enableArchivingRequest: requests.EnableArchivingRequest
  ): Promise<responses.EnableArchivingResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#enableArchiving.");
    const pathParams = {
      "{namespaceName}": enableArchivingRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": enableArchivingRequest.opcRequestId,
      "if-match": enableArchivingRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      enableArchivingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/actions/enableArchiving",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.EnableArchivingResponse>{},
        body: await response.json(),
        bodyKey: "success",
        bodyModel: model.Success,
        type: "model.Success",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enables auto association for a log source. This would initiate immediate association of the source
   * to any eligible entities it is not already associated with, and would also ensure the log source gets
   * associated with entities that are added or become eligible in the future.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param EnableAutoAssociationRequest
   * @return EnableAutoAssociationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/EnableAutoAssociation.ts.html |here} to see how to use EnableAutoAssociation API.
   */
  public async enableAutoAssociation(
    enableAutoAssociationRequest: requests.EnableAutoAssociationRequest
  ): Promise<responses.EnableAutoAssociationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#enableAutoAssociation.");
    const pathParams = {
      "{namespaceName}": enableAutoAssociationRequest.namespaceName,
      "{sourceName}": enableAutoAssociationRequest.sourceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": enableAutoAssociationRequest.opcRetryToken,
      "opc-request-id": enableAutoAssociationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      enableAutoAssociationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/enableAutoAssociation",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        enableAutoAssociationRequest.enableAutoAssociationDetails,
        "EnableAutoAssociationDetails",
        model.EnableAutoAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.EnableAutoAssociationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Enable one or more event types in a source. An event type and version can be enabled only in one source.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param EnableSourceEventTypesRequest
   * @return EnableSourceEventTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/EnableSourceEventTypes.ts.html |here} to see how to use EnableSourceEventTypes API.
   */
  public async enableSourceEventTypes(
    enableSourceEventTypesRequest: requests.EnableSourceEventTypesRequest
  ): Promise<responses.EnableSourceEventTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#enableSourceEventTypes.");
    const pathParams = {
      "{namespaceName}": enableSourceEventTypesRequest.namespaceName,
      "{sourceName}": enableSourceEventTypesRequest.sourceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": enableSourceEventTypesRequest.opcRetryToken,
      "opc-request-id": enableSourceEventTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      enableSourceEventTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/enableEventTypes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        enableSourceEventTypesRequest.enableEventTypeDetails,
        "EventTypeDetails",
        model.EventTypeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.EnableSourceEventTypesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API estimates the size of data to be purged based based on time interval, purge query etc.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param EstimatePurgeDataSizeRequest
   * @return EstimatePurgeDataSizeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/EstimatePurgeDataSize.ts.html |here} to see how to use EstimatePurgeDataSize API.
   */
  public async estimatePurgeDataSize(
    estimatePurgeDataSizeRequest: requests.EstimatePurgeDataSizeRequest
  ): Promise<responses.EstimatePurgeDataSizeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#estimatePurgeDataSize.");
    const pathParams = {
      "{namespaceName}": estimatePurgeDataSizeRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": estimatePurgeDataSizeRequest.opcRequestId,
      "opc-retry-token": estimatePurgeDataSizeRequest.opcRetryToken,
      "if-match": estimatePurgeDataSizeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      estimatePurgeDataSizeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/actions/estimatePurgeDataSize",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        estimatePurgeDataSizeRequest.estimatePurgeDataSizeDetails,
        "EstimatePurgeDataSizeDetails",
        model.EstimatePurgeDataSizeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.EstimatePurgeDataSizeResponse>{},
        body: await response.json(),
        bodyKey: "estimatePurgeDataSizeResult",
        bodyModel: model.EstimatePurgeDataSizeResult,
        type: "model.EstimatePurgeDataSizeResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API gives an active storage usage estimate for archived data to be recalled and the time range of such data.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param EstimateRecallDataSizeRequest
   * @return EstimateRecallDataSizeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/EstimateRecallDataSize.ts.html |here} to see how to use EstimateRecallDataSize API.
   */
  public async estimateRecallDataSize(
    estimateRecallDataSizeRequest: requests.EstimateRecallDataSizeRequest
  ): Promise<responses.EstimateRecallDataSizeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#estimateRecallDataSize.");
    const pathParams = {
      "{namespaceName}": estimateRecallDataSizeRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": estimateRecallDataSizeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      estimateRecallDataSizeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/actions/estimateRecallDataSize",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        estimateRecallDataSizeRequest.estimateRecallDataSizeDetails,
        "EstimateRecallDataSizeDetails",
        model.EstimateRecallDataSizeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.EstimateRecallDataSizeResponse>{},
        body: await response.json(),
        bodyKey: "estimateRecallDataSizeResult",
        bodyModel: model.EstimateRecallDataSizeResult,
        type: "model.EstimateRecallDataSizeResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API gives an active storage usage estimate for recalled data to be released and the time range of such data.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param EstimateReleaseDataSizeRequest
   * @return EstimateReleaseDataSizeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/EstimateReleaseDataSize.ts.html |here} to see how to use EstimateReleaseDataSize API.
   */
  public async estimateReleaseDataSize(
    estimateReleaseDataSizeRequest: requests.EstimateReleaseDataSizeRequest
  ): Promise<responses.EstimateReleaseDataSizeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#estimateReleaseDataSize.");
    const pathParams = {
      "{namespaceName}": estimateReleaseDataSizeRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": estimateReleaseDataSizeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      estimateReleaseDataSizeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/actions/estimateReleaseDataSize",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        estimateReleaseDataSizeRequest.estimateReleaseDataSizeDetails,
        "EstimateReleaseDataSizeDetails",
        model.EstimateReleaseDataSizeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.EstimateReleaseDataSizeResponse>{},
        body: await response.json(),
        bodyKey: "estimateReleaseDataSizeResult",
        bodyModel: model.EstimateReleaseDataSizeResult,
        type: "model.EstimateReleaseDataSizeResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Exports all custom details of the specified sources, parsers, fields and labels, in zip format.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ExportCustomContentRequest
   * @return ExportCustomContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ExportCustomContent.ts.html |here} to see how to use ExportCustomContent API.
   */
  public async exportCustomContent(
    exportCustomContentRequest: requests.ExportCustomContentRequest
  ): Promise<responses.ExportCustomContentResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#exportCustomContent.");
    const pathParams = {
      "{namespaceName}": exportCustomContentRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": exportCustomContentRequest.opcRetryToken,
      "opc-request-id": exportCustomContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      exportCustomContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/contents/actions/exportCustomContent",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        exportCustomContentRequest.exportCustomContentDetails,
        "ExportContent",
        model.ExportContent.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ExportCustomContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Export data based on query. Endpoint returns a stream of data. Endpoint is synchronous. Queries must deliver first result within 60 seconds or calls are subject to timeout.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ExportQueryResultRequest
   * @return ExportQueryResultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ExportQueryResult.ts.html |here} to see how to use ExportQueryResult API.
   */
  public async exportQueryResult(
    exportQueryResultRequest: requests.ExportQueryResultRequest
  ): Promise<responses.ExportQueryResultResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#exportQueryResult.");
    const pathParams = {
      "{namespaceName}": exportQueryResultRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": exportQueryResultRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      exportQueryResultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/search/actions/export",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        exportQueryResultRequest.exportDetails,
        "ExportDetails",
        model.ExportDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ExportQueryResultResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Extracts the field paths from the example json or xml content.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ExtractStructuredLogFieldPathsRequest
   * @return ExtractStructuredLogFieldPathsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ExtractStructuredLogFieldPaths.ts.html |here} to see how to use ExtractStructuredLogFieldPaths API.
   */
  public async extractStructuredLogFieldPaths(
    extractStructuredLogFieldPathsRequest: requests.ExtractStructuredLogFieldPathsRequest
  ): Promise<responses.ExtractStructuredLogFieldPathsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#extractStructuredLogFieldPaths.");
    const pathParams = {
      "{namespaceName}": extractStructuredLogFieldPathsRequest.namespaceName
    };

    const queryParams = {
      "parserType": extractStructuredLogFieldPathsRequest.parserType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": extractStructuredLogFieldPathsRequest.opcRetryToken,
      "opc-request-id": extractStructuredLogFieldPathsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      extractStructuredLogFieldPathsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/parsers/actions/extractLogFieldPaths",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        extractStructuredLogFieldPathsRequest.loganParserDetails,
        "LogAnalyticsParser",
        model.LogAnalyticsParser.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ExtractStructuredLogFieldPathsResponse>{},
        body: await response.json(),
        bodyKey: "extractLogFieldResults",
        bodyModel: model.ExtractLogFieldResults,
        type: "model.ExtractLogFieldResults",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Extracts the header paths from the example json or xml content.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ExtractStructuredLogHeaderPathsRequest
   * @return ExtractStructuredLogHeaderPathsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ExtractStructuredLogHeaderPaths.ts.html |here} to see how to use ExtractStructuredLogHeaderPaths API.
   */
  public async extractStructuredLogHeaderPaths(
    extractStructuredLogHeaderPathsRequest: requests.ExtractStructuredLogHeaderPathsRequest
  ): Promise<responses.ExtractStructuredLogHeaderPathsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#extractStructuredLogHeaderPaths.");
    const pathParams = {
      "{namespaceName}": extractStructuredLogHeaderPathsRequest.namespaceName
    };

    const queryParams = {
      "parserType": extractStructuredLogHeaderPathsRequest.parserType
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": extractStructuredLogHeaderPathsRequest.opcRetryToken,
      "opc-request-id": extractStructuredLogHeaderPathsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      extractStructuredLogHeaderPathsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/parsers/actions/extractLogHeaderPaths",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        extractStructuredLogHeaderPathsRequest.loganParserDetails,
        "LogAnalyticsParser",
        model.LogAnalyticsParser.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ExtractStructuredLogHeaderPathsResponse>{},
        body: await response.json(),
        bodyKey: "extractLogHeaderResults",
        bodyModel: model.ExtractLogHeaderResults,
        type: "model.ExtractLogHeaderResults",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Each filter specifies an operator, a field and one or more values to be inserted into the provided query as criteria.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param FilterRequest
   * @return FilterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/Filter.ts.html |here} to see how to use Filter API.
   */
  public async filter(filterRequest: requests.FilterRequest): Promise<responses.FilterResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#filter.");
    const pathParams = {
      "{namespaceName}": filterRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": filterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      filterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/search/actions/filter",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        filterRequest.filterDetails,
        "FilterDetails",
        model.FilterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.FilterResponse>{},
        body: await response.json(),
        bodyKey: "filterOutput",
        bodyModel: model.FilterOutput,
        type: "model.FilterOutput",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the count of source associations for entities in the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAssociationSummaryRequest
   * @return GetAssociationSummaryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetAssociationSummary.ts.html |here} to see how to use GetAssociationSummary API.
   */
  public async getAssociationSummary(
    getAssociationSummaryRequest: requests.GetAssociationSummaryRequest
  ): Promise<responses.GetAssociationSummaryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#getAssociationSummary.");
    const pathParams = {
      "{namespaceName}": getAssociationSummaryRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": getAssociationSummaryRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAssociationSummaryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAssociationSummaryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/associationSummary",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAssociationSummaryResponse>{},
        body: await response.json(),
        bodyKey: "associationSummaryReport",
        bodyModel: model.AssociationSummaryReport,
        type: "model.AssociationSummaryReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets detailed information about the category with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetCategoryRequest
   * @return GetCategoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetCategory.ts.html |here} to see how to use GetCategory API.
   */
  public async getCategory(
    getCategoryRequest: requests.GetCategoryRequest
  ): Promise<responses.GetCategoryResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getCategory.");
    const pathParams = {
      "{namespaceName}": getCategoryRequest.namespaceName,
      "{categoryName}": getCategoryRequest.categoryName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCategoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCategoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/categories/{categoryName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCategoryResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsCategory",
        bodyModel: model.LogAnalyticsCategory,
        type: "model.LogAnalyticsCategory",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Extracts column names from the input SQL query.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetColumnNamesRequest
   * @return GetColumnNamesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetColumnNames.ts.html |here} to see how to use GetColumnNames API.
   */
  public async getColumnNames(
    getColumnNamesRequest: requests.GetColumnNamesRequest
  ): Promise<responses.GetColumnNamesResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getColumnNames.");
    const pathParams = {
      "{namespaceName}": getColumnNamesRequest.namespaceName
    };

    const queryParams = {
      "sqlQuery": getColumnNamesRequest.sqlQuery
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": getColumnNamesRequest.opcRetryToken,
      "opc-request-id": getColumnNamesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getColumnNamesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/sqlColumnNames",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetColumnNamesResponse>{},
        body: await response.json(),
        bodyKey: "columnNameCollection",
        bodyModel: model.ColumnNameCollection,
        type: "model.ColumnNameCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns detailed information about the configuration work request with the specified id.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetConfigWorkRequestRequest
   * @return GetConfigWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetConfigWorkRequest.ts.html |here} to see how to use GetConfigWorkRequest API.
   */
  public async getConfigWorkRequest(
    getConfigWorkRequestRequest: requests.GetConfigWorkRequestRequest
  ): Promise<responses.GetConfigWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#getConfigWorkRequest.");
    const pathParams = {
      "{namespaceName}": getConfigWorkRequestRequest.namespaceName,
      "{workRequestId}": getConfigWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConfigWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConfigWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/configWorkRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConfigWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsConfigWorkRequest",
        bodyModel: model.LogAnalyticsConfigWorkRequest,
        type: "model.LogAnalyticsConfigWorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets detailed information about the field with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetFieldRequest
   * @return GetFieldResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetField.ts.html |here} to see how to use GetField API.
   */
  public async getField(
    getFieldRequest: requests.GetFieldRequest
  ): Promise<responses.GetFieldResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getField.");
    const pathParams = {
      "{namespaceName}": getFieldRequest.namespaceName,
      "{fieldName}": getFieldRequest.fieldName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFieldRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFieldRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/fields/{fieldName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFieldResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsField",
        bodyModel: model.LogAnalyticsField,
        type: "model.LogAnalyticsField",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the count of fields. You may optionally specify isShowDetail=true to view a summary of each field data type.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetFieldsSummaryRequest
   * @return GetFieldsSummaryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetFieldsSummary.ts.html |here} to see how to use GetFieldsSummary API.
   */
  public async getFieldsSummary(
    getFieldsSummaryRequest: requests.GetFieldsSummaryRequest
  ): Promise<responses.GetFieldsSummaryResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getFieldsSummary.");
    const pathParams = {
      "{namespaceName}": getFieldsSummaryRequest.namespaceName
    };

    const queryParams = {
      "isShowDetail": getFieldsSummaryRequest.isShowDetail
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFieldsSummaryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFieldsSummaryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/fieldSummary",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFieldsSummaryResponse>{},
        body: await response.json(),
        bodyKey: "fieldSummaryReport",
        bodyModel: model.FieldSummaryReport,
        type: "model.FieldSummaryReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets detailed information about the label with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLabelRequest
   * @return GetLabelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLabel.ts.html |here} to see how to use GetLabel API.
   */
  public async getLabel(
    getLabelRequest: requests.GetLabelRequest
  ): Promise<responses.GetLabelResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getLabel.");
    const pathParams = {
      "{namespaceName}": getLabelRequest.namespaceName,
      "{labelName}": getLabelRequest.labelName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLabelRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLabelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/labels/{labelName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLabelResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLabel",
        bodyModel: model.LogAnalyticsLabel,
        type: "model.LogAnalyticsLabel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the count of labels.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLabelSummaryRequest
   * @return GetLabelSummaryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLabelSummary.ts.html |here} to see how to use GetLabelSummary API.
   */
  public async getLabelSummary(
    getLabelSummaryRequest: requests.GetLabelSummaryRequest
  ): Promise<responses.GetLabelSummaryResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getLabelSummary.");
    const pathParams = {
      "{namespaceName}": getLabelSummaryRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLabelSummaryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLabelSummaryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/labelSummary",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLabelSummaryResponse>{},
        body: await response.json(),
        bodyKey: "labelSummaryReport",
        bodyModel: model.LabelSummaryReport,
        type: "model.LabelSummaryReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve the log analytics enterprise manager bridge with the given id.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLogAnalyticsEmBridgeRequest
   * @return GetLogAnalyticsEmBridgeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLogAnalyticsEmBridge.ts.html |here} to see how to use GetLogAnalyticsEmBridge API.
   */
  public async getLogAnalyticsEmBridge(
    getLogAnalyticsEmBridgeRequest: requests.GetLogAnalyticsEmBridgeRequest
  ): Promise<responses.GetLogAnalyticsEmBridgeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsEmBridge.");
    const pathParams = {
      "{namespaceName}": getLogAnalyticsEmBridgeRequest.namespaceName,
      "{logAnalyticsEmBridgeId}": getLogAnalyticsEmBridgeRequest.logAnalyticsEmBridgeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogAnalyticsEmBridgeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLogAnalyticsEmBridgeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEmBridges/{logAnalyticsEmBridgeId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogAnalyticsEmBridgeResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEmBridge",
        bodyModel: model.LogAnalyticsEmBridge,
        type: "model.LogAnalyticsEmBridge",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns log analytics enterprise manager bridges summary report.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLogAnalyticsEmBridgeSummaryRequest
   * @return GetLogAnalyticsEmBridgeSummaryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLogAnalyticsEmBridgeSummary.ts.html |here} to see how to use GetLogAnalyticsEmBridgeSummary API.
   */
  public async getLogAnalyticsEmBridgeSummary(
    getLogAnalyticsEmBridgeSummaryRequest: requests.GetLogAnalyticsEmBridgeSummaryRequest
  ): Promise<responses.GetLogAnalyticsEmBridgeSummaryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsEmBridgeSummary.");
    const pathParams = {
      "{namespaceName}": getLogAnalyticsEmBridgeSummaryRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": getLogAnalyticsEmBridgeSummaryRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogAnalyticsEmBridgeSummaryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLogAnalyticsEmBridgeSummaryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEmBridges/emBridgeSummary",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogAnalyticsEmBridgeSummaryResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEmBridgeSummaryReport",
        bodyModel: model.LogAnalyticsEmBridgeSummaryReport,
        type: "model.LogAnalyticsEmBridgeSummaryReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns log analytics entities count summary report.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLogAnalyticsEntitiesSummaryRequest
   * @return GetLogAnalyticsEntitiesSummaryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLogAnalyticsEntitiesSummary.ts.html |here} to see how to use GetLogAnalyticsEntitiesSummary API.
   */
  public async getLogAnalyticsEntitiesSummary(
    getLogAnalyticsEntitiesSummaryRequest: requests.GetLogAnalyticsEntitiesSummaryRequest
  ): Promise<responses.GetLogAnalyticsEntitiesSummaryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsEntitiesSummary.");
    const pathParams = {
      "{namespaceName}": getLogAnalyticsEntitiesSummaryRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": getLogAnalyticsEntitiesSummaryRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogAnalyticsEntitiesSummaryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLogAnalyticsEntitiesSummaryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEntities/entitySummary",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogAnalyticsEntitiesSummaryResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEntitySummaryReport",
        bodyModel: model.LogAnalyticsEntitySummaryReport,
        type: "model.LogAnalyticsEntitySummaryReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve the log analytics entity with the given id.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLogAnalyticsEntityRequest
   * @return GetLogAnalyticsEntityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLogAnalyticsEntity.ts.html |here} to see how to use GetLogAnalyticsEntity API.
   */
  public async getLogAnalyticsEntity(
    getLogAnalyticsEntityRequest: requests.GetLogAnalyticsEntityRequest
  ): Promise<responses.GetLogAnalyticsEntityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsEntity.");
    const pathParams = {
      "{namespaceName}": getLogAnalyticsEntityRequest.namespaceName,
      "{logAnalyticsEntityId}": getLogAnalyticsEntityRequest.logAnalyticsEntityId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogAnalyticsEntityRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLogAnalyticsEntityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogAnalyticsEntityResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEntity",
        bodyModel: model.LogAnalyticsEntity,
        type: "model.LogAnalyticsEntity",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve the log analytics entity type with the given name.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLogAnalyticsEntityTypeRequest
   * @return GetLogAnalyticsEntityTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLogAnalyticsEntityType.ts.html |here} to see how to use GetLogAnalyticsEntityType API.
   */
  public async getLogAnalyticsEntityType(
    getLogAnalyticsEntityTypeRequest: requests.GetLogAnalyticsEntityTypeRequest
  ): Promise<responses.GetLogAnalyticsEntityTypeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsEntityType.");
    const pathParams = {
      "{namespaceName}": getLogAnalyticsEntityTypeRequest.namespaceName,
      "{entityTypeName}": getLogAnalyticsEntityTypeRequest.entityTypeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogAnalyticsEntityTypeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLogAnalyticsEntityTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEntityTypes/{entityTypeName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogAnalyticsEntityTypeResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEntityType",
        bodyModel: model.LogAnalyticsEntityType,
        type: "model.LogAnalyticsEntityType",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets detailed information about the specified log group such as display name, description, defined tags, and free-form tags.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLogAnalyticsLogGroupRequest
   * @return GetLogAnalyticsLogGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLogAnalyticsLogGroup.ts.html |here} to see how to use GetLogAnalyticsLogGroup API.
   */
  public async getLogAnalyticsLogGroup(
    getLogAnalyticsLogGroupRequest: requests.GetLogAnalyticsLogGroupRequest
  ): Promise<responses.GetLogAnalyticsLogGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsLogGroup.");
    const pathParams = {
      "{namespaceName}": getLogAnalyticsLogGroupRequest.namespaceName,
      "{logAnalyticsLogGroupId}": getLogAnalyticsLogGroupRequest.logAnalyticsLogGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogAnalyticsLogGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLogAnalyticsLogGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsLogGroups/{logAnalyticsLogGroupId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogAnalyticsLogGroupResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLogGroup",
        bodyModel: model.LogAnalyticsLogGroup,
        type: "model.LogAnalyticsLogGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the count of log groups in a compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLogAnalyticsLogGroupsSummaryRequest
   * @return GetLogAnalyticsLogGroupsSummaryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLogAnalyticsLogGroupsSummary.ts.html |here} to see how to use GetLogAnalyticsLogGroupsSummary API.
   */
  public async getLogAnalyticsLogGroupsSummary(
    getLogAnalyticsLogGroupsSummaryRequest: requests.GetLogAnalyticsLogGroupsSummaryRequest
  ): Promise<responses.GetLogAnalyticsLogGroupsSummaryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsLogGroupsSummary.");
    const pathParams = {
      "{namespaceName}": getLogAnalyticsLogGroupsSummaryRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": getLogAnalyticsLogGroupsSummaryRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogAnalyticsLogGroupsSummaryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLogAnalyticsLogGroupsSummaryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsLogGroupsSummary",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogAnalyticsLogGroupsSummaryResponse>{},
        body: await response.json(),
        bodyKey: "logGroupSummaryReport",
        bodyModel: model.LogGroupSummaryReport,
        type: "model.LogGroupSummaryReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a configured object storage based collection rule by given id
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLogAnalyticsObjectCollectionRuleRequest
   * @return GetLogAnalyticsObjectCollectionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLogAnalyticsObjectCollectionRule.ts.html |here} to see how to use GetLogAnalyticsObjectCollectionRule API.
   */
  public async getLogAnalyticsObjectCollectionRule(
    getLogAnalyticsObjectCollectionRuleRequest: requests.GetLogAnalyticsObjectCollectionRuleRequest
  ): Promise<responses.GetLogAnalyticsObjectCollectionRuleResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LogAnalyticsClient#getLogAnalyticsObjectCollectionRule."
      );
    const pathParams = {
      "{namespaceName}": getLogAnalyticsObjectCollectionRuleRequest.namespaceName,
      "{logAnalyticsObjectCollectionRuleId}":
        getLogAnalyticsObjectCollectionRuleRequest.logAnalyticsObjectCollectionRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogAnalyticsObjectCollectionRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLogAnalyticsObjectCollectionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules/{logAnalyticsObjectCollectionRuleId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogAnalyticsObjectCollectionRuleResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsObjectCollectionRule",
        bodyModel: model.LogAnalyticsObjectCollectionRule,
        type: "model.LogAnalyticsObjectCollectionRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API returns the count of distinct log sets.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLogSetsCountRequest
   * @return GetLogSetsCountResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLogSetsCount.ts.html |here} to see how to use GetLogSetsCount API.
   */
  public async getLogSetsCount(
    getLogSetsCountRequest: requests.GetLogSetsCountRequest
  ): Promise<responses.GetLogSetsCountResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getLogSetsCount.");
    const pathParams = {
      "{namespaceName}": getLogSetsCountRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLogSetsCountRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLogSetsCountRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/logSetsCount",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLogSetsCountResponse>{},
        body: await response.json(),
        bodyKey: "logSetsCount",
        bodyModel: model.LogSetsCount,
        type: "model.LogSetsCount",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets detailed information about the lookup with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLookupRequest
   * @return GetLookupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLookup.ts.html |here} to see how to use GetLookup API.
   */
  public async getLookup(
    getLookupRequest: requests.GetLookupRequest
  ): Promise<responses.GetLookupResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getLookup.");
    const pathParams = {
      "{namespaceName}": getLookupRequest.namespaceName,
      "{lookupName}": getLookupRequest.lookupName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLookupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLookupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/lookups/{lookupName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLookupResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLookup",
        bodyModel: model.LogAnalyticsLookup,
        type: "model.LogAnalyticsLookup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the count of user created and oracle defined lookups.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetLookupSummaryRequest
   * @return GetLookupSummaryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetLookupSummary.ts.html |here} to see how to use GetLookupSummary API.
   */
  public async getLookupSummary(
    getLookupSummaryRequest: requests.GetLookupSummaryRequest
  ): Promise<responses.GetLookupSummaryResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getLookupSummary.");
    const pathParams = {
      "{namespaceName}": getLookupSummaryRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getLookupSummaryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getLookupSummaryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/lookupSummary",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetLookupSummaryResponse>{},
        body: await response.json(),
        bodyKey: "lookupSummaryReport",
        bodyModel: model.LookupSummaryReport,
        type: "model.LookupSummaryReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API gets the namespace details of a tenancy already onboarded in Logging Analytics Application
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetNamespaceRequest
   * @return GetNamespaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetNamespace.ts.html |here} to see how to use GetNamespace API.
   */
  public async getNamespace(
    getNamespaceRequest: requests.GetNamespaceRequest
  ): Promise<responses.GetNamespaceResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getNamespace.");
    const pathParams = {
      "{namespaceName}": getNamespaceRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNamespaceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNamespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNamespaceResponse>{},
        body: await response.json(),
        bodyKey: "namespace",
        bodyModel: model.Namespace,
        type: "model.Namespace",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets detailed information about the parser with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetParserRequest
   * @return GetParserResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetParser.ts.html |here} to see how to use GetParser API.
   */
  public async getParser(
    getParserRequest: requests.GetParserRequest
  ): Promise<responses.GetParserResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getParser.");
    const pathParams = {
      "{namespaceName}": getParserRequest.namespaceName,
      "{parserName}": getParserRequest.parserName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getParserRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getParserRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/parsers/{parserName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetParserResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsParser",
        bodyModel: model.LogAnalyticsParser,
        type: "model.LogAnalyticsParser",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the count of parsers.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetParserSummaryRequest
   * @return GetParserSummaryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetParserSummary.ts.html |here} to see how to use GetParserSummary API.
   */
  public async getParserSummary(
    getParserSummaryRequest: requests.GetParserSummaryRequest
  ): Promise<responses.GetParserSummaryResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getParserSummary.");
    const pathParams = {
      "{namespaceName}": getParserSummaryRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getParserSummaryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getParserSummaryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/parsersSummary",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetParserSummaryResponse>{},
        body: await response.json(),
        bodyKey: "parserSummaryReport",
        bodyModel: model.ParserSummaryReport,
        type: "model.ParserSummaryReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the preferences of the tenant. Currently, only \"DEFAULT_HOMEPAGE\" is supported.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPreferencesRequest
   * @return GetPreferencesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetPreferences.ts.html |here} to see how to use GetPreferences API.
   */
  public async getPreferences(
    getPreferencesRequest: requests.GetPreferencesRequest
  ): Promise<responses.GetPreferencesResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getPreferences.");
    const pathParams = {
      "{namespaceName}": getPreferencesRequest.namespaceName
    };

    const queryParams = {
      "sortOrder": getPreferencesRequest.sortOrder,
      "sortBy": getPreferencesRequest.sortBy,
      "limit": getPreferencesRequest.limit,
      "page": getPreferencesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPreferencesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPreferencesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/preferences",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPreferencesResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsPreferenceCollection",
        bodyModel: model.LogAnalyticsPreferenceCollection,
        type: "model.LogAnalyticsPreferenceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the intermediate results for a query that was specified to run asynchronously if the query has not completed,
   * otherwise the final query results identified by a queryWorkRequestId returned when submitting the query execute asynchronously.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetQueryResultRequest
   * @return GetQueryResultResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetQueryResult.ts.html |here} to see how to use GetQueryResult API.
   */
  public async getQueryResult(
    getQueryResultRequest: requests.GetQueryResultRequest
  ): Promise<responses.GetQueryResultResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getQueryResult.");
    const pathParams = {
      "{namespaceName}": getQueryResultRequest.namespaceName
    };

    const queryParams = {
      "workRequestId": getQueryResultRequest.workRequestId,
      "page": getQueryResultRequest.page,
      "limit": getQueryResultRequest.limit,
      "shouldIncludeColumns": getQueryResultRequest.shouldIncludeColumns,
      "shouldIncludeFields": getQueryResultRequest.shouldIncludeFields,
      "outputMode": getQueryResultRequest.outputMode
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getQueryResultRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getQueryResultRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/search/actions/query",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetQueryResultResponse>{},
        body: await response.json(),
        bodyKey: "queryAggregation",
        bodyModel: model.QueryAggregation,
        type: "model.QueryAggregation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve work request details by workRequestId. This endpoint can be polled for status tracking of work request. Clients should poll using the interval returned in the retry-after header.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetQueryWorkRequestRequest
   * @return GetQueryWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetQueryWorkRequest.ts.html |here} to see how to use GetQueryWorkRequest API.
   */
  public async getQueryWorkRequest(
    getQueryWorkRequestRequest: requests.GetQueryWorkRequestRequest
  ): Promise<responses.GetQueryWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getQueryWorkRequest.");
    const pathParams = {
      "{namespaceName}": getQueryWorkRequestRequest.namespaceName,
      "{workRequestId}": getQueryWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getQueryWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getQueryWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/queryWorkRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetQueryWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "queryWorkRequest",
        bodyModel: model.QueryWorkRequest,
        type: "model.QueryWorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the scheduled task for the specified task identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetScheduledTaskRequest
   * @return GetScheduledTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetScheduledTask.ts.html |here} to see how to use GetScheduledTask API.
   */
  public async getScheduledTask(
    getScheduledTaskRequest: requests.GetScheduledTaskRequest
  ): Promise<responses.GetScheduledTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getScheduledTask.");
    const pathParams = {
      "{namespaceName}": getScheduledTaskRequest.namespaceName,
      "{scheduledTaskId}": getScheduledTaskRequest.scheduledTaskId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getScheduledTaskRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getScheduledTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetScheduledTaskResponse>{},
        body: await response.json(),
        bodyKey: "scheduledTask",
        bodyModel: model.ScheduledTask,
        type: "model.ScheduledTask",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets detailed information about the source with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSourceRequest
   * @return GetSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetSource.ts.html |here} to see how to use GetSource API.
   */
  public async getSource(
    getSourceRequest: requests.GetSourceRequest
  ): Promise<responses.GetSourceResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getSource.");
    const pathParams = {
      "{namespaceName}": getSourceRequest.namespaceName,
      "{sourceName}": getSourceRequest.sourceName
    };

    const queryParams = {
      "compartmentId": getSourceRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSourceResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsSource",
        bodyModel: model.LogAnalyticsSource,
        type: "model.LogAnalyticsSource",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the count of sources.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSourceSummaryRequest
   * @return GetSourceSummaryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetSourceSummary.ts.html |here} to see how to use GetSourceSummary API.
   */
  public async getSourceSummary(
    getSourceSummaryRequest: requests.GetSourceSummaryRequest
  ): Promise<responses.GetSourceSummaryResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getSourceSummary.");
    const pathParams = {
      "{namespaceName}": getSourceSummaryRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSourceSummaryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSourceSummaryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sourceSummary",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSourceSummaryResponse>{},
        body: await response.json(),
        bodyKey: "sourceSummaryReport",
        bodyModel: model.SourceSummaryReport,
        type: "model.SourceSummaryReport",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API gets the storage configuration of a tenancy
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetStorageRequest
   * @return GetStorageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetStorage.ts.html |here} to see how to use GetStorage API.
   */
  public async getStorage(
    getStorageRequest: requests.GetStorageRequest
  ): Promise<responses.GetStorageResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getStorage.");
    const pathParams = {
      "{namespaceName}": getStorageRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getStorageRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getStorageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetStorageResponse>{},
        body: await response.json(),
        bodyKey: "storage",
        bodyModel: model.Storage,
        type: "model.Storage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API gets storage usage information of a tenancy.  Storage usage information includes active, archived or recalled
   * data.  The unit of return data is in bytes.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetStorageUsageRequest
   * @return GetStorageUsageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetStorageUsage.ts.html |here} to see how to use GetStorageUsage API.
   */
  public async getStorageUsage(
    getStorageUsageRequest: requests.GetStorageUsageRequest
  ): Promise<responses.GetStorageUsageResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getStorageUsage.");
    const pathParams = {
      "{namespaceName}": getStorageUsageRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getStorageUsageRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getStorageUsageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/usage",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetStorageUsageResponse>{},
        body: await response.json(),
        bodyKey: "storageUsage",
        bodyModel: model.StorageUsage,
        type: "model.StorageUsage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API returns work request details specified by {workRequestId}. This API can be polled for status tracking of
   * work request.  Clients should poll using the interval returned in retry-after header.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetStorageWorkRequestRequest
   * @return GetStorageWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetStorageWorkRequest.ts.html |here} to see how to use GetStorageWorkRequest API.
   */
  public async getStorageWorkRequest(
    getStorageWorkRequestRequest: requests.GetStorageWorkRequestRequest
  ): Promise<responses.GetStorageWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#getStorageWorkRequest.");
    const pathParams = {
      "{workRequestId}": getStorageWorkRequestRequest.workRequestId,
      "{namespaceName}": getStorageWorkRequestRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getStorageWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getStorageWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storageWorkRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetStorageWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "storageWorkRequest",
        bodyModel: model.StorageWorkRequest,
        type: "model.StorageWorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API retrieves details of the configured bucket that stores unprocessed payloads.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUnprocessedDataBucketRequest
   * @return GetUnprocessedDataBucketResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetUnprocessedDataBucket.ts.html |here} to see how to use GetUnprocessedDataBucket API.
   */
  public async getUnprocessedDataBucket(
    getUnprocessedDataBucketRequest: requests.GetUnprocessedDataBucketRequest
  ): Promise<responses.GetUnprocessedDataBucketResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#getUnprocessedDataBucket.");
    const pathParams = {
      "{namespaceName}": getUnprocessedDataBucketRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUnprocessedDataBucketRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUnprocessedDataBucketRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/unprocessedDataBucket",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUnprocessedDataBucketResponse>{},
        body: await response.json(),
        bodyKey: "unprocessedDataBucket",
        bodyModel: model.UnprocessedDataBucket,
        type: "model.UnprocessedDataBucket",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets an On-Demand Upload info by reference.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetUploadRequest
   * @return GetUploadResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetUpload.ts.html |here} to see how to use GetUpload API.
   */
  public async getUpload(
    getUploadRequest: requests.GetUploadRequest
  ): Promise<responses.GetUploadResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getUpload.");
    const pathParams = {
      "{namespaceName}": getUploadRequest.namespaceName,
      "{uploadReference}": getUploadRequest.uploadReference
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getUploadRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getUploadRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/uploads/{uploadReference}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetUploadResponse>{},
        body: await response.json(),
        bodyKey: "upload",
        bodyModel: model.Upload,
        type: "model.Upload",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request with the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#getWorkRequest.");
    const pathParams = {
      "{namespaceName}": getWorkRequestRequest.namespaceName,
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Imports the specified custom content from the input in zip format.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ImportCustomContentRequest
   * @return ImportCustomContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ImportCustomContent.ts.html |here} to see how to use ImportCustomContent API.
   */
  public async importCustomContent(
    importCustomContentRequest: requests.ImportCustomContentRequest
  ): Promise<responses.ImportCustomContentResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#importCustomContent.");
    const pathParams = {
      "{namespaceName}": importCustomContentRequest.namespaceName
    };

    const queryParams = {
      "isOverwrite": importCustomContentRequest.isOverwrite
    };

    let headerParams = {
      "opc-retry-token": importCustomContentRequest.opcRetryToken,
      "opc-request-id": importCustomContentRequest.opcRequestId,
      "expect": importCustomContentRequest.expect
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      importCustomContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/contents/actions/importCustomContent",
      method: "POST",
      bodyContent: importCustomContentRequest.importCustomContentFileBody,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ImportCustomContentResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsImportCustomContent",
        bodyModel: model.LogAnalyticsImportCustomContent,
        type: "model.LogAnalyticsImportCustomContent",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the entities in the specified compartment which are (in)eligible for association with this source.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAssociableEntitiesRequest
   * @return ListAssociableEntitiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListAssociableEntities.ts.html |here} to see how to use ListAssociableEntities API.
   */
  public async listAssociableEntities(
    listAssociableEntitiesRequest: requests.ListAssociableEntitiesRequest
  ): Promise<responses.ListAssociableEntitiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listAssociableEntities.");
    const pathParams = {
      "{namespaceName}": listAssociableEntitiesRequest.namespaceName,
      "{sourceName}": listAssociableEntitiesRequest.sourceName
    };

    const queryParams = {
      "compartmentId": listAssociableEntitiesRequest.compartmentId,
      "type": listAssociableEntitiesRequest.type,
      "searchText": listAssociableEntitiesRequest.searchText,
      "limit": listAssociableEntitiesRequest.limit,
      "page": listAssociableEntitiesRequest.page,
      "sortBy": listAssociableEntitiesRequest.sortBy,
      "sortOrder": listAssociableEntitiesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAssociableEntitiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAssociableEntitiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}/associableEntities",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAssociableEntitiesResponse>{},
        body: await response.json(),
        bodyKey: "associableEntityCollection",
        bodyModel: model.AssociableEntityCollection,
        type: "model.AssociableEntityCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the association details of entities in the specified compartment that are associated with at least one source.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAssociatedEntitiesRequest
   * @return ListAssociatedEntitiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListAssociatedEntities.ts.html |here} to see how to use ListAssociatedEntities API.
   */
  public async listAssociatedEntities(
    listAssociatedEntitiesRequest: requests.ListAssociatedEntitiesRequest
  ): Promise<responses.ListAssociatedEntitiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listAssociatedEntities.");
    const pathParams = {
      "{namespaceName}": listAssociatedEntitiesRequest.namespaceName
    };

    const queryParams = {
      "entityId": listAssociatedEntitiesRequest.entityId,
      "entityType": listAssociatedEntitiesRequest.entityType,
      "entityTypeDisplayName": listAssociatedEntitiesRequest.entityTypeDisplayName,
      "limit": listAssociatedEntitiesRequest.limit,
      "page": listAssociatedEntitiesRequest.page,
      "sortOrder": listAssociatedEntitiesRequest.sortOrder,
      "sortBy": listAssociatedEntitiesRequest.sortBy,
      "compartmentId": listAssociatedEntitiesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAssociatedEntitiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAssociatedEntitiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/associatedEntities",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAssociatedEntitiesResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsAssociatedEntityCollection",
        bodyModel: model.LogAnalyticsAssociatedEntityCollection,
        type: "model.LogAnalyticsAssociatedEntityCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information related to auto association for the source with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAutoAssociationsRequest
   * @return ListAutoAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListAutoAssociations.ts.html |here} to see how to use ListAutoAssociations API.
   */
  public async listAutoAssociations(
    listAutoAssociationsRequest: requests.ListAutoAssociationsRequest
  ): Promise<responses.ListAutoAssociationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listAutoAssociations.");
    const pathParams = {
      "{namespaceName}": listAutoAssociationsRequest.namespaceName,
      "{sourceName}": listAutoAssociationsRequest.sourceName
    };

    const queryParams = {
      "limit": listAutoAssociationsRequest.limit,
      "page": listAutoAssociationsRequest.page,
      "sortBy": listAutoAssociationsRequest.sortBy,
      "sortOrder": listAutoAssociationsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAutoAssociationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAutoAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}/autoAssociations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAutoAssociationsResponse>{},
        body: await response.json(),
        bodyKey: "autoAssociationCollection",
        bodyModel: model.AutoAssociationCollection,
        type: "model.AutoAssociationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of categories, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as category name or description.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListCategoriesRequest
   * @return ListCategoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListCategories.ts.html |here} to see how to use ListCategories API.
   */
  public async listCategories(
    listCategoriesRequest: requests.ListCategoriesRequest
  ): Promise<responses.ListCategoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listCategories.");
    const pathParams = {
      "{namespaceName}": listCategoriesRequest.namespaceName
    };

    const queryParams = {
      "categoryType": listCategoriesRequest.categoryType,
      "categoryDisplayText": listCategoriesRequest.categoryDisplayText,
      "sortOrder": listCategoriesRequest.sortOrder,
      "sortBy": listCategoriesRequest.sortBy,
      "limit": listCategoriesRequest.limit,
      "page": listCategoriesRequest.page,
      "name": listCategoriesRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCategoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCategoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/categories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCategoriesResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsCategoryCollection",
        bodyModel: model.LogAnalyticsCategoryCollection,
        type: "model.LogAnalyticsCategoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the list of configuration work requests such as association or lookup operations, containing detailed information about them. You may paginate or limit the number of results.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListConfigWorkRequestsRequest
   * @return ListConfigWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListConfigWorkRequests.ts.html |here} to see how to use ListConfigWorkRequests API.
   */
  public async listConfigWorkRequests(
    listConfigWorkRequestsRequest: requests.ListConfigWorkRequestsRequest
  ): Promise<responses.ListConfigWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listConfigWorkRequests.");
    const pathParams = {
      "{namespaceName}": listConfigWorkRequestsRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": listConfigWorkRequestsRequest.compartmentId,
      "sortOrder": listConfigWorkRequestsRequest.sortOrder,
      "sortBy": listConfigWorkRequestsRequest.sortBy,
      "limit": listConfigWorkRequestsRequest.limit,
      "page": listConfigWorkRequestsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConfigWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/configWorkRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConfigWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsConfigWorkRequestCollection",
        bodyModel: model.LogAnalyticsConfigWorkRequestCollection,
        type: "model.LogAnalyticsConfigWorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a list of log analytics entities associated with input source log analytics entity.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListEntityAssociationsRequest
   * @return ListEntityAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListEntityAssociations.ts.html |here} to see how to use ListEntityAssociations API.
   */
  public async listEntityAssociations(
    listEntityAssociationsRequest: requests.ListEntityAssociationsRequest
  ): Promise<responses.ListEntityAssociationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listEntityAssociations.");
    const pathParams = {
      "{namespaceName}": listEntityAssociationsRequest.namespaceName,
      "{logAnalyticsEntityId}": listEntityAssociationsRequest.logAnalyticsEntityId
    };

    const queryParams = {
      "directOrAllAssociations": listEntityAssociationsRequest.directOrAllAssociations,
      "limit": listEntityAssociationsRequest.limit,
      "page": listEntityAssociationsRequest.page,
      "sortOrder": listEntityAssociationsRequest.sortOrder,
      "sortBy": listEntityAssociationsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listEntityAssociationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listEntityAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}/entityAssociations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEntityAssociationsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEntityCollection",
        bodyModel: model.LogAnalyticsEntityCollection,
        type: "model.LogAnalyticsEntityCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the list of source associations for the specified entity.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListEntitySourceAssociationsRequest
   * @return ListEntitySourceAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListEntitySourceAssociations.ts.html |here} to see how to use ListEntitySourceAssociations API.
   */
  public async listEntitySourceAssociations(
    listEntitySourceAssociationsRequest: requests.ListEntitySourceAssociationsRequest
  ): Promise<responses.ListEntitySourceAssociationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listEntitySourceAssociations.");
    const pathParams = {
      "{namespaceName}": listEntitySourceAssociationsRequest.namespaceName
    };

    const queryParams = {
      "entityId": listEntitySourceAssociationsRequest.entityId,
      "entityType": listEntitySourceAssociationsRequest.entityType,
      "entityTypeDisplayName": listEntitySourceAssociationsRequest.entityTypeDisplayName,
      "lifeCycleState": listEntitySourceAssociationsRequest.lifeCycleState,
      "isShowTotal": listEntitySourceAssociationsRequest.isShowTotal,
      "limit": listEntitySourceAssociationsRequest.limit,
      "page": listEntitySourceAssociationsRequest.page,
      "sortOrder": listEntitySourceAssociationsRequest.sortOrder,
      "sortBy": listEntitySourceAssociationsRequest.sortBy,
      "compartmentId": listEntitySourceAssociationsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listEntitySourceAssociationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listEntitySourceAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/entityAssociations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEntitySourceAssociationsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsAssociationCollection",
        bodyModel: model.LogAnalyticsAssociationCollection,
        type: "model.LogAnalyticsAssociationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of log fields, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by specifying various options including parser and source names.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListFieldsRequest
   * @return ListFieldsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListFields.ts.html |here} to see how to use ListFields API.
   */
  public async listFields(
    listFieldsRequest: requests.ListFieldsRequest
  ): Promise<responses.ListFieldsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listFields.");
    const pathParams = {
      "{namespaceName}": listFieldsRequest.namespaceName
    };

    const queryParams = {
      "isMatchAll": listFieldsRequest.isMatchAll,
      "sourceIds": listFieldsRequest.sourceIds,
      "sourceNames": listFieldsRequest.sourceNames,
      "parserType": listFieldsRequest.parserType,
      "parserIds": listFieldsRequest.parserIds,
      "parserNames": listFieldsRequest.parserNames,
      "isIncludeParser": listFieldsRequest.isIncludeParser,
      "filter": listFieldsRequest.filter,
      "limit": listFieldsRequest.limit,
      "page": listFieldsRequest.page,
      "sortOrder": listFieldsRequest.sortOrder,
      "sortBy": listFieldsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFieldsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFieldsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/fields",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFieldsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsFieldCollection",
        bodyModel: model.LogAnalyticsFieldCollection,
        type: "model.LogAnalyticsFieldCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the available problem priorities that could be associated with a label.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLabelPrioritiesRequest
   * @return ListLabelPrioritiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListLabelPriorities.ts.html |here} to see how to use ListLabelPriorities API.
   */
  public async listLabelPriorities(
    listLabelPrioritiesRequest: requests.ListLabelPrioritiesRequest
  ): Promise<responses.ListLabelPrioritiesResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listLabelPriorities.");
    const pathParams = {
      "{namespaceName}": listLabelPrioritiesRequest.namespaceName
    };

    const queryParams = {
      "limit": listLabelPrioritiesRequest.limit,
      "page": listLabelPrioritiesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLabelPrioritiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLabelPrioritiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/labelPriorities",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLabelPrioritiesResponse>{},
        body: await response.json(),
        bodyKey: "labelPriorityCollection",
        bodyModel: model.LabelPriorityCollection,
        type: "model.LabelPriorityCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists sources using the label, along with configuration details like base field, operator and condition.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLabelSourceDetailsRequest
   * @return ListLabelSourceDetailsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListLabelSourceDetails.ts.html |here} to see how to use ListLabelSourceDetails API.
   */
  public async listLabelSourceDetails(
    listLabelSourceDetailsRequest: requests.ListLabelSourceDetailsRequest
  ): Promise<responses.ListLabelSourceDetailsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listLabelSourceDetails.");
    const pathParams = {
      "{namespaceName}": listLabelSourceDetailsRequest.namespaceName
    };

    const queryParams = {
      "labelName": listLabelSourceDetailsRequest.labelName,
      "limit": listLabelSourceDetailsRequest.limit,
      "page": listLabelSourceDetailsRequest.page,
      "sortOrder": listLabelSourceDetailsRequest.sortOrder,
      "labelSourceSortBy": listLabelSourceDetailsRequest.labelSourceSortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLabelSourceDetailsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLabelSourceDetailsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/labelSourceDetails",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLabelSourceDetailsResponse>{},
        body: await response.json(),
        bodyKey: "labelSourceCollection",
        bodyModel: model.LabelSourceCollection,
        type: "model.LabelSourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of labels, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as label name, display name, description and priority.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLabelsRequest
   * @return ListLabelsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListLabels.ts.html |here} to see how to use ListLabels API.
   */
  public async listLabels(
    listLabelsRequest: requests.ListLabelsRequest
  ): Promise<responses.ListLabelsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listLabels.");
    const pathParams = {
      "{namespaceName}": listLabelsRequest.namespaceName
    };

    const queryParams = {
      "labelName": listLabelsRequest.labelName,
      "labelDisplayText": listLabelsRequest.labelDisplayText,
      "isSystem": listLabelsRequest.isSystem,
      "labelPriority": listLabelsRequest.labelPriority,
      "isCountPop": listLabelsRequest.isCountPop,
      "isAliasPop": listLabelsRequest.isAliasPop,
      "limit": listLabelsRequest.limit,
      "page": listLabelsRequest.page,
      "sortOrder": listLabelsRequest.sortOrder,
      "labelSortBy": listLabelsRequest.labelSortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLabelsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLabelsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/labels",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLabelsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLabelCollection",
        bodyModel: model.LogAnalyticsLabelCollection,
        type: "model.LogAnalyticsLabelCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a list of log analytics enterprise manager bridges.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLogAnalyticsEmBridgesRequest
   * @return ListLogAnalyticsEmBridgesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListLogAnalyticsEmBridges.ts.html |here} to see how to use ListLogAnalyticsEmBridges API.
   */
  public async listLogAnalyticsEmBridges(
    listLogAnalyticsEmBridgesRequest: requests.ListLogAnalyticsEmBridgesRequest
  ): Promise<responses.ListLogAnalyticsEmBridgesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listLogAnalyticsEmBridges.");
    const pathParams = {
      "{namespaceName}": listLogAnalyticsEmBridgesRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": listLogAnalyticsEmBridgesRequest.compartmentId,
      "displayName": listLogAnalyticsEmBridgesRequest.displayName,
      "lifecycleState": listLogAnalyticsEmBridgesRequest.lifecycleState,
      "lifecycleDetailsContains": listLogAnalyticsEmBridgesRequest.lifecycleDetailsContains,
      "importStatus": listLogAnalyticsEmBridgesRequest.importStatus,
      "limit": listLogAnalyticsEmBridgesRequest.limit,
      "page": listLogAnalyticsEmBridgesRequest.page,
      "sortOrder": listLogAnalyticsEmBridgesRequest.sortOrder,
      "sortBy": listLogAnalyticsEmBridgesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLogAnalyticsEmBridgesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLogAnalyticsEmBridgesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEmBridges",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLogAnalyticsEmBridgesResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEmBridgeCollection",
        bodyModel: model.LogAnalyticsEmBridgeCollection,
        type: "model.LogAnalyticsEmBridgeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a list of log analytics entities.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLogAnalyticsEntitiesRequest
   * @return ListLogAnalyticsEntitiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListLogAnalyticsEntities.ts.html |here} to see how to use ListLogAnalyticsEntities API.
   */
  public async listLogAnalyticsEntities(
    listLogAnalyticsEntitiesRequest: requests.ListLogAnalyticsEntitiesRequest
  ): Promise<responses.ListLogAnalyticsEntitiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listLogAnalyticsEntities.");
    const pathParams = {
      "{namespaceName}": listLogAnalyticsEntitiesRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": listLogAnalyticsEntitiesRequest.compartmentId,
      "name": listLogAnalyticsEntitiesRequest.name,
      "nameContains": listLogAnalyticsEntitiesRequest.nameContains,
      "entityTypeName": listLogAnalyticsEntitiesRequest.entityTypeName,
      "cloudResourceId": listLogAnalyticsEntitiesRequest.cloudResourceId,
      "lifecycleState": listLogAnalyticsEntitiesRequest.lifecycleState,
      "lifecycleDetailsContains": listLogAnalyticsEntitiesRequest.lifecycleDetailsContains,
      "isManagementAgentIdNull": listLogAnalyticsEntitiesRequest.isManagementAgentIdNull,
      "hostname": listLogAnalyticsEntitiesRequest.hostname,
      "hostnameContains": listLogAnalyticsEntitiesRequest.hostnameContains,
      "sourceId": listLogAnalyticsEntitiesRequest.sourceId,
      "creationSourceType": listLogAnalyticsEntitiesRequest.creationSourceType,
      "creationSourceDetails": listLogAnalyticsEntitiesRequest.creationSourceDetails,
      "limit": listLogAnalyticsEntitiesRequest.limit,
      "page": listLogAnalyticsEntitiesRequest.page,
      "sortOrder": listLogAnalyticsEntitiesRequest.sortOrder,
      "sortBy": listLogAnalyticsEntitiesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLogAnalyticsEntitiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLogAnalyticsEntitiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEntities",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLogAnalyticsEntitiesResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEntityCollection",
        bodyModel: model.LogAnalyticsEntityCollection,
        type: "model.LogAnalyticsEntityCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a log analytics entity topology collection that contains a set of log analytics entities and a set of relationships between those, for the input source entity.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLogAnalyticsEntityTopologyRequest
   * @return ListLogAnalyticsEntityTopologyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListLogAnalyticsEntityTopology.ts.html |here} to see how to use ListLogAnalyticsEntityTopology API.
   */
  public async listLogAnalyticsEntityTopology(
    listLogAnalyticsEntityTopologyRequest: requests.ListLogAnalyticsEntityTopologyRequest
  ): Promise<responses.ListLogAnalyticsEntityTopologyResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listLogAnalyticsEntityTopology.");
    const pathParams = {
      "{namespaceName}": listLogAnalyticsEntityTopologyRequest.namespaceName,
      "{logAnalyticsEntityId}": listLogAnalyticsEntityTopologyRequest.logAnalyticsEntityId
    };

    const queryParams = {
      "lifecycleState": listLogAnalyticsEntityTopologyRequest.lifecycleState,
      "limit": listLogAnalyticsEntityTopologyRequest.limit,
      "page": listLogAnalyticsEntityTopologyRequest.page,
      "sortOrder": listLogAnalyticsEntityTopologyRequest.sortOrder,
      "sortBy": listLogAnalyticsEntityTopologyRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLogAnalyticsEntityTopologyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLogAnalyticsEntityTopologyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}/entityTopology",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLogAnalyticsEntityTopologyResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEntityTopologyCollection",
        bodyModel: model.LogAnalyticsEntityTopologyCollection,
        type: "model.LogAnalyticsEntityTopologyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a list of log analytics entity types.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLogAnalyticsEntityTypesRequest
   * @return ListLogAnalyticsEntityTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListLogAnalyticsEntityTypes.ts.html |here} to see how to use ListLogAnalyticsEntityTypes API.
   */
  public async listLogAnalyticsEntityTypes(
    listLogAnalyticsEntityTypesRequest: requests.ListLogAnalyticsEntityTypesRequest
  ): Promise<responses.ListLogAnalyticsEntityTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listLogAnalyticsEntityTypes.");
    const pathParams = {
      "{namespaceName}": listLogAnalyticsEntityTypesRequest.namespaceName
    };

    const queryParams = {
      "name": listLogAnalyticsEntityTypesRequest.name,
      "nameContains": listLogAnalyticsEntityTypesRequest.nameContains,
      "cloudType": listLogAnalyticsEntityTypesRequest.cloudType,
      "lifecycleState": listLogAnalyticsEntityTypesRequest.lifecycleState,
      "limit": listLogAnalyticsEntityTypesRequest.limit,
      "page": listLogAnalyticsEntityTypesRequest.page,
      "sortOrder": listLogAnalyticsEntityTypesRequest.sortOrder,
      "sortBy": listLogAnalyticsEntityTypesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLogAnalyticsEntityTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLogAnalyticsEntityTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEntityTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLogAnalyticsEntityTypesResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEntityTypeCollection",
        bodyModel: model.LogAnalyticsEntityTypeCollection,
        type: "model.LogAnalyticsEntityTypeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of log groups in a compartment. You may limit the number of log groups, provide sorting options, and filter the results by specifying a display name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLogAnalyticsLogGroupsRequest
   * @return ListLogAnalyticsLogGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListLogAnalyticsLogGroups.ts.html |here} to see how to use ListLogAnalyticsLogGroups API.
   */
  public async listLogAnalyticsLogGroups(
    listLogAnalyticsLogGroupsRequest: requests.ListLogAnalyticsLogGroupsRequest
  ): Promise<responses.ListLogAnalyticsLogGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listLogAnalyticsLogGroups.");
    const pathParams = {
      "{namespaceName}": listLogAnalyticsLogGroupsRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": listLogAnalyticsLogGroupsRequest.compartmentId,
      "displayName": listLogAnalyticsLogGroupsRequest.displayName,
      "limit": listLogAnalyticsLogGroupsRequest.limit,
      "page": listLogAnalyticsLogGroupsRequest.page,
      "sortOrder": listLogAnalyticsLogGroupsRequest.sortOrder,
      "sortBy": listLogAnalyticsLogGroupsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLogAnalyticsLogGroupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLogAnalyticsLogGroupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsLogGroups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLogAnalyticsLogGroupsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLogGroupSummaryCollection",
        bodyModel: model.LogAnalyticsLogGroupSummaryCollection,
        type: "model.LogAnalyticsLogGroupSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets list of collection rules.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLogAnalyticsObjectCollectionRulesRequest
   * @return ListLogAnalyticsObjectCollectionRulesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListLogAnalyticsObjectCollectionRules.ts.html |here} to see how to use ListLogAnalyticsObjectCollectionRules API.
   */
  public async listLogAnalyticsObjectCollectionRules(
    listLogAnalyticsObjectCollectionRulesRequest: requests.ListLogAnalyticsObjectCollectionRulesRequest
  ): Promise<responses.ListLogAnalyticsObjectCollectionRulesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LogAnalyticsClient#listLogAnalyticsObjectCollectionRules."
      );
    const pathParams = {
      "{namespaceName}": listLogAnalyticsObjectCollectionRulesRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": listLogAnalyticsObjectCollectionRulesRequest.compartmentId,
      "name": listLogAnalyticsObjectCollectionRulesRequest.name,
      "lifecycleState": listLogAnalyticsObjectCollectionRulesRequest.lifecycleState,
      "limit": listLogAnalyticsObjectCollectionRulesRequest.limit,
      "page": listLogAnalyticsObjectCollectionRulesRequest.page,
      "sortOrder": listLogAnalyticsObjectCollectionRulesRequest.sortOrder,
      "sortBy": listLogAnalyticsObjectCollectionRulesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLogAnalyticsObjectCollectionRulesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLogAnalyticsObjectCollectionRulesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLogAnalyticsObjectCollectionRulesResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsObjectCollectionRuleCollection",
        bodyModel: model.LogAnalyticsObjectCollectionRuleCollection,
        type: "model.LogAnalyticsObjectCollectionRuleCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API returns a list of log sets.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLogSetsRequest
   * @return ListLogSetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListLogSets.ts.html |here} to see how to use ListLogSets API.
   */
  public async listLogSets(
    listLogSetsRequest: requests.ListLogSetsRequest
  ): Promise<responses.ListLogSetsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listLogSets.");
    const pathParams = {
      "{namespaceName}": listLogSetsRequest.namespaceName
    };

    const queryParams = {
      "limit": listLogSetsRequest.limit,
      "page": listLogSetsRequest.page,
      "sortOrder": listLogSetsRequest.sortOrder,
      "logSetNameContains": listLogSetsRequest.logSetNameContains
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLogSetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLogSetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/logSets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLogSetsResponse>{},
        body: await response.json(),
        bodyKey: "logSetCollection",
        bodyModel: model.LogSetCollection,
        type: "model.LogSetCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of lookups, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as lookup name, description and type.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListLookupsRequest
   * @return ListLookupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListLookups.ts.html |here} to see how to use ListLookups API.
   */
  public async listLookups(
    listLookupsRequest: requests.ListLookupsRequest
  ): Promise<responses.ListLookupsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listLookups.");
    const pathParams = {
      "{namespaceName}": listLookupsRequest.namespaceName
    };

    const queryParams = {
      "lookupDisplayText": listLookupsRequest.lookupDisplayText,
      "type": listLookupsRequest.type,
      "isSystem": listLookupsRequest.isSystem,
      "sortBy": listLookupsRequest.sortBy,
      "status": listLookupsRequest.status,
      "categories": listLookupsRequest.categories,
      "isHideSpecial": listLookupsRequest.isHideSpecial,
      "limit": listLookupsRequest.limit,
      "page": listLookupsRequest.page,
      "sortOrder": listLookupsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listLookupsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listLookupsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/lookups",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListLookupsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLookupCollection",
        bodyModel: model.LogAnalyticsLookupCollection,
        type: "model.LogAnalyticsLookupCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the types of log sources supported.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListMetaSourceTypesRequest
   * @return ListMetaSourceTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListMetaSourceTypes.ts.html |here} to see how to use ListMetaSourceTypes API.
   */
  public async listMetaSourceTypes(
    listMetaSourceTypesRequest: requests.ListMetaSourceTypesRequest
  ): Promise<responses.ListMetaSourceTypesResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listMetaSourceTypes.");
    const pathParams = {
      "{namespaceName}": listMetaSourceTypesRequest.namespaceName
    };

    const queryParams = {
      "limit": listMetaSourceTypesRequest.limit,
      "page": listMetaSourceTypesRequest.page,
      "sortBy": listMetaSourceTypesRequest.sortBy,
      "sortOrder": listMetaSourceTypesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMetaSourceTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMetaSourceTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sourceMetaTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMetaSourceTypesResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsMetaSourceTypeCollection",
        bodyModel: model.LogAnalyticsMetaSourceTypeCollection,
        type: "model.LogAnalyticsMetaSourceTypeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Given a tenancy OCID, this API returns the namespace of the tenancy if it is valid and subscribed to the region.  The
   * result also indicates if the tenancy is onboarded with Logging Analytics.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListNamespacesRequest
   * @return ListNamespacesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListNamespaces.ts.html |here} to see how to use ListNamespaces API.
   */
  public async listNamespaces(
    listNamespacesRequest: requests.ListNamespacesRequest
  ): Promise<responses.ListNamespacesResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listNamespaces.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNamespacesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNamespacesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listNamespacesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNamespacesResponse>{},
        body: await response.json(),
        bodyKey: "namespaceCollection",
        bodyModel: model.NamespaceCollection,
        type: "model.NamespaceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the parser functions defined for the specified parser.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListParserFunctionsRequest
   * @return ListParserFunctionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListParserFunctions.ts.html |here} to see how to use ListParserFunctions API.
   */
  public async listParserFunctions(
    listParserFunctionsRequest: requests.ListParserFunctionsRequest
  ): Promise<responses.ListParserFunctionsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listParserFunctions.");
    const pathParams = {
      "{namespaceName}": listParserFunctionsRequest.namespaceName
    };

    const queryParams = {
      "parserName": listParserFunctionsRequest.parserName,
      "limit": listParserFunctionsRequest.limit,
      "page": listParserFunctionsRequest.page,
      "sortBy": listParserFunctionsRequest.sortBy,
      "sortOrder": listParserFunctionsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listParserFunctionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listParserFunctionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/parserFunctions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListParserFunctionsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsParserFunctionCollection",
        bodyModel: model.LogAnalyticsParserFunctionCollection,
        type: "model.LogAnalyticsParserFunctionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the parser meta plugins available for defining parser functions.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListParserMetaPluginsRequest
   * @return ListParserMetaPluginsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListParserMetaPlugins.ts.html |here} to see how to use ListParserMetaPlugins API.
   */
  public async listParserMetaPlugins(
    listParserMetaPluginsRequest: requests.ListParserMetaPluginsRequest
  ): Promise<responses.ListParserMetaPluginsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listParserMetaPlugins.");
    const pathParams = {
      "{namespaceName}": listParserMetaPluginsRequest.namespaceName
    };

    const queryParams = {
      "limit": listParserMetaPluginsRequest.limit,
      "page": listParserMetaPluginsRequest.page,
      "sortBy": listParserMetaPluginsRequest.sortBy,
      "sortOrder": listParserMetaPluginsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listParserMetaPluginsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listParserMetaPluginsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/parserMetaPlugins",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListParserMetaPluginsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsParserMetaPluginCollection",
        bodyModel: model.LogAnalyticsParserMetaPluginCollection,
        type: "model.LogAnalyticsParserMetaPluginCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of parsers, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as parser name, type, display name and description.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListParsersRequest
   * @return ListParsersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListParsers.ts.html |here} to see how to use ListParsers API.
   */
  public async listParsers(
    listParsersRequest: requests.ListParsersRequest
  ): Promise<responses.ListParsersResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listParsers.");
    const pathParams = {
      "{namespaceName}": listParsersRequest.namespaceName
    };

    const queryParams = {
      "isMatchAll": listParsersRequest.isMatchAll,
      "sourceType": listParsersRequest.sourceType,
      "parserName": listParsersRequest.parserName,
      "parserDisplayText": listParsersRequest.parserDisplayText,
      "parserType": listParsersRequest.parserType,
      "categories": listParsersRequest.categories,
      "isSystem": listParsersRequest.isSystem,
      "limit": listParsersRequest.limit,
      "page": listParsersRequest.page,
      "sortOrder": listParsersRequest.sortOrder,
      "sortBy": listParsersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listParsersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listParsersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/parsers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListParsersResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsParserCollection",
        bodyModel: model.LogAnalyticsParserCollection,
        type: "model.LogAnalyticsParserCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List active asynchronous queries.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListQueryWorkRequestsRequest
   * @return ListQueryWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListQueryWorkRequests.ts.html |here} to see how to use ListQueryWorkRequests API.
   */
  public async listQueryWorkRequests(
    listQueryWorkRequestsRequest: requests.ListQueryWorkRequestsRequest
  ): Promise<responses.ListQueryWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listQueryWorkRequests.");
    const pathParams = {
      "{namespaceName}": listQueryWorkRequestsRequest.namespaceName
    };

    const queryParams = {
      "mode": listQueryWorkRequestsRequest.mode,
      "compartmentId": listQueryWorkRequestsRequest.compartmentId,
      "limit": listQueryWorkRequestsRequest.limit,
      "page": listQueryWorkRequestsRequest.page,
      "sortOrder": listQueryWorkRequestsRequest.sortOrder,
      "sortBy": listQueryWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listQueryWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listQueryWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/queryWorkRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListQueryWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "queryWorkRequestCollection",
        bodyModel: model.QueryWorkRequestCollection,
        type: "model.QueryWorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API returns the list of recalled data of a tenancy.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListRecalledDataRequest
   * @return ListRecalledDataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListRecalledData.ts.html |here} to see how to use ListRecalledData API.
   */
  public async listRecalledData(
    listRecalledDataRequest: requests.ListRecalledDataRequest
  ): Promise<responses.ListRecalledDataResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listRecalledData.");
    const pathParams = {
      "{namespaceName}": listRecalledDataRequest.namespaceName
    };

    const queryParams = {
      "limit": listRecalledDataRequest.limit,
      "page": listRecalledDataRequest.page,
      "sortBy": listRecalledDataRequest.sortBy,
      "sortOrder": listRecalledDataRequest.sortOrder,
      "timeDataStartedGreaterThanOrEqual":
        listRecalledDataRequest.timeDataStartedGreaterThanOrEqual,
      "timeDataEndedLessThan": listRecalledDataRequest.timeDataEndedLessThan
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRecalledDataRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRecalledDataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/recalledData",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRecalledDataResponse>{},
        body: await response.json(),
        bodyKey: "recalledDataCollection",
        bodyModel: model.RecalledDataCollection,
        type: "model.RecalledDataCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of resources and their category assignments.
   * You may limit the number of results, provide sorting order, and filter by information such as resource type.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListResourceCategoriesRequest
   * @return ListResourceCategoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListResourceCategories.ts.html |here} to see how to use ListResourceCategories API.
   */
  public async listResourceCategories(
    listResourceCategoriesRequest: requests.ListResourceCategoriesRequest
  ): Promise<responses.ListResourceCategoriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listResourceCategories.");
    const pathParams = {
      "{namespaceName}": listResourceCategoriesRequest.namespaceName
    };

    const queryParams = {
      "categories": listResourceCategoriesRequest.categories,
      "resourceTypes": listResourceCategoriesRequest.resourceTypes,
      "resourceIds": listResourceCategoriesRequest.resourceIds,
      "sortOrder": listResourceCategoriesRequest.sortOrder,
      "sortBy": listResourceCategoriesRequest.sortBy,
      "limit": listResourceCategoriesRequest.limit,
      "page": listResourceCategoriesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResourceCategoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listResourceCategoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/categories/resourceCategories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResourceCategoriesResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsResourceCategoryCollection",
        bodyModel: model.LogAnalyticsResourceCategoryCollection,
        type: "model.LogAnalyticsResourceCategoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists scheduled tasks.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListScheduledTasksRequest
   * @return ListScheduledTasksResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListScheduledTasks.ts.html |here} to see how to use ListScheduledTasks API.
   */
  public async listScheduledTasks(
    listScheduledTasksRequest: requests.ListScheduledTasksRequest
  ): Promise<responses.ListScheduledTasksResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listScheduledTasks.");
    const pathParams = {
      "{namespaceName}": listScheduledTasksRequest.namespaceName
    };

    const queryParams = {
      "taskType": listScheduledTasksRequest.taskType,
      "compartmentId": listScheduledTasksRequest.compartmentId,
      "limit": listScheduledTasksRequest.limit,
      "page": listScheduledTasksRequest.page,
      "displayName": listScheduledTasksRequest.displayName,
      "sortOrder": listScheduledTasksRequest.sortOrder,
      "sortBy": listScheduledTasksRequest.sortBy,
      "savedSearchId": listScheduledTasksRequest.savedSearchId,
      "displayNameContains": listScheduledTasksRequest.displayNameContains
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listScheduledTasksRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listScheduledTasksRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/scheduledTasks",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListScheduledTasksResponse>{},
        body: await response.json(),
        bodyKey: "scheduledTaskCollection",
        bodyModel: model.ScheduledTaskCollection,
        type: "model.ScheduledTaskCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the list of entity associations in the input compartment for the specified source.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSourceAssociationsRequest
   * @return ListSourceAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListSourceAssociations.ts.html |here} to see how to use ListSourceAssociations API.
   */
  public async listSourceAssociations(
    listSourceAssociationsRequest: requests.ListSourceAssociationsRequest
  ): Promise<responses.ListSourceAssociationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listSourceAssociations.");
    const pathParams = {
      "{namespaceName}": listSourceAssociationsRequest.namespaceName
    };

    const queryParams = {
      "sourceName": listSourceAssociationsRequest.sourceName,
      "entityId": listSourceAssociationsRequest.entityId,
      "lifeCycleState": listSourceAssociationsRequest.lifeCycleState,
      "isShowTotal": listSourceAssociationsRequest.isShowTotal,
      "compartmentId": listSourceAssociationsRequest.compartmentId,
      "limit": listSourceAssociationsRequest.limit,
      "page": listSourceAssociationsRequest.page,
      "sortOrder": listSourceAssociationsRequest.sortOrder,
      "sortBy": listSourceAssociationsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSourceAssociationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSourceAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sourceAssociations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSourceAssociationsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsAssociationCollection",
        bodyModel: model.LogAnalyticsAssociationCollection,
        type: "model.LogAnalyticsAssociationCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the event types mapped to the source with the specified name. The event type string could be the fully qualified name or a prefix that matches the event type.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSourceEventTypesRequest
   * @return ListSourceEventTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListSourceEventTypes.ts.html |here} to see how to use ListSourceEventTypes API.
   */
  public async listSourceEventTypes(
    listSourceEventTypesRequest: requests.ListSourceEventTypesRequest
  ): Promise<responses.ListSourceEventTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listSourceEventTypes.");
    const pathParams = {
      "{namespaceName}": listSourceEventTypesRequest.namespaceName,
      "{sourceName}": listSourceEventTypesRequest.sourceName
    };

    const queryParams = {
      "displayText": listSourceEventTypesRequest.displayText,
      "isSystem": listSourceEventTypesRequest.isSystem,
      "isEnabled": listSourceEventTypesRequest.isEnabled,
      "limit": listSourceEventTypesRequest.limit,
      "page": listSourceEventTypesRequest.page,
      "sortBy": listSourceEventTypesRequest.sortBy,
      "sortOrder": listSourceEventTypesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSourceEventTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSourceEventTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}/eventTypes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSourceEventTypesResponse>{},
        body: await response.json(),
        bodyKey: "eventTypeCollection",
        bodyModel: model.EventTypeCollection,
        type: "model.EventTypeCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the extended field definitions for the source with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSourceExtendedFieldDefinitionsRequest
   * @return ListSourceExtendedFieldDefinitionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListSourceExtendedFieldDefinitions.ts.html |here} to see how to use ListSourceExtendedFieldDefinitions API.
   */
  public async listSourceExtendedFieldDefinitions(
    listSourceExtendedFieldDefinitionsRequest: requests.ListSourceExtendedFieldDefinitionsRequest
  ): Promise<responses.ListSourceExtendedFieldDefinitionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listSourceExtendedFieldDefinitions.");
    const pathParams = {
      "{namespaceName}": listSourceExtendedFieldDefinitionsRequest.namespaceName,
      "{sourceName}": listSourceExtendedFieldDefinitionsRequest.sourceName
    };

    const queryParams = {
      "limit": listSourceExtendedFieldDefinitionsRequest.limit,
      "page": listSourceExtendedFieldDefinitionsRequest.page,
      "sortBy": listSourceExtendedFieldDefinitionsRequest.sortBy,
      "sortOrder": listSourceExtendedFieldDefinitionsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSourceExtendedFieldDefinitionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSourceExtendedFieldDefinitionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}/extendedFieldDefinitions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSourceExtendedFieldDefinitionsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsSourceExtendedFieldDefinitionCollection",
        bodyModel: model.LogAnalyticsSourceExtendedFieldDefinitionCollection,
        type: "model.LogAnalyticsSourceExtendedFieldDefinitionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the supported conditional operators that could be used for matching log field values to generate a label. You may use patterns to specify a condition. If a log entry matches that condition, it is tagged with the corresponding label.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSourceLabelOperatorsRequest
   * @return ListSourceLabelOperatorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListSourceLabelOperators.ts.html |here} to see how to use ListSourceLabelOperators API.
   */
  public async listSourceLabelOperators(
    listSourceLabelOperatorsRequest: requests.ListSourceLabelOperatorsRequest
  ): Promise<responses.ListSourceLabelOperatorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listSourceLabelOperators.");
    const pathParams = {
      "{namespaceName}": listSourceLabelOperatorsRequest.namespaceName
    };

    const queryParams = {
      "limit": listSourceLabelOperatorsRequest.limit,
      "page": listSourceLabelOperatorsRequest.page,
      "sortBy": listSourceLabelOperatorsRequest.sortBy,
      "sortOrder": listSourceLabelOperatorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSourceLabelOperatorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSourceLabelOperatorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sourceLabelOperators",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSourceLabelOperatorsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLabelOperatorCollection",
        bodyModel: model.LogAnalyticsLabelOperatorCollection,
        type: "model.LogAnalyticsLabelOperatorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the functions that could be used to enrich log entries based on meaningful information extracted from the log fields.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSourceMetaFunctionsRequest
   * @return ListSourceMetaFunctionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListSourceMetaFunctions.ts.html |here} to see how to use ListSourceMetaFunctions API.
   */
  public async listSourceMetaFunctions(
    listSourceMetaFunctionsRequest: requests.ListSourceMetaFunctionsRequest
  ): Promise<responses.ListSourceMetaFunctionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listSourceMetaFunctions.");
    const pathParams = {
      "{namespaceName}": listSourceMetaFunctionsRequest.namespaceName
    };

    const queryParams = {
      "limit": listSourceMetaFunctionsRequest.limit,
      "page": listSourceMetaFunctionsRequest.page,
      "sortBy": listSourceMetaFunctionsRequest.sortBy,
      "sortOrder": listSourceMetaFunctionsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSourceMetaFunctionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSourceMetaFunctionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sourceMetaFunctions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSourceMetaFunctionsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsMetaFunctionCollection",
        bodyModel: model.LogAnalyticsMetaFunctionCollection,
        type: "model.LogAnalyticsMetaFunctionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the source patterns for the source with the specified name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSourcePatternsRequest
   * @return ListSourcePatternsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListSourcePatterns.ts.html |here} to see how to use ListSourcePatterns API.
   */
  public async listSourcePatterns(
    listSourcePatternsRequest: requests.ListSourcePatternsRequest
  ): Promise<responses.ListSourcePatternsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listSourcePatterns.");
    const pathParams = {
      "{namespaceName}": listSourcePatternsRequest.namespaceName,
      "{sourceName}": listSourcePatternsRequest.sourceName
    };

    const queryParams = {
      "isInclude": listSourcePatternsRequest.isInclude,
      "limit": listSourcePatternsRequest.limit,
      "page": listSourcePatternsRequest.page,
      "sortBy": listSourcePatternsRequest.sortBy,
      "sortOrder": listSourcePatternsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSourcePatternsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSourcePatternsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}/patterns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSourcePatternsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsSourcePatternCollection",
        bodyModel: model.LogAnalyticsSourcePatternCollection,
        type: "model.LogAnalyticsSourcePatternCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of sources, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as display name, description and entity type.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSourcesRequest
   * @return ListSourcesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListSources.ts.html |here} to see how to use ListSources API.
   */
  public async listSources(
    listSourcesRequest: requests.ListSourcesRequest
  ): Promise<responses.ListSourcesResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listSources.");
    const pathParams = {
      "{namespaceName}": listSourcesRequest.namespaceName
    };

    const queryParams = {
      "entityType": listSourcesRequest.entityType,
      "sourceDisplayText": listSourcesRequest.sourceDisplayText,
      "isSystem": listSourcesRequest.isSystem,
      "isAutoAssociated": listSourcesRequest.isAutoAssociated,
      "sortOrder": listSourcesRequest.sortOrder,
      "sortBy": listSourcesRequest.sortBy,
      "limit": listSourcesRequest.limit,
      "page": listSourcesRequest.page,
      "name": listSourcesRequest.name,
      "categories": listSourcesRequest.categories,
      "isSimplified": listSourcesRequest.isSimplified,
      "compartmentId": listSourcesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSourcesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSourcesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSourcesResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsSourceCollection",
        bodyModel: model.LogAnalyticsSourceCollection,
        type: "model.LogAnalyticsSourceCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API returns the list of work request errors if any.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListStorageWorkRequestErrorsRequest
   * @return ListStorageWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListStorageWorkRequestErrors.ts.html |here} to see how to use ListStorageWorkRequestErrors API.
   */
  public async listStorageWorkRequestErrors(
    listStorageWorkRequestErrorsRequest: requests.ListStorageWorkRequestErrorsRequest
  ): Promise<responses.ListStorageWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listStorageWorkRequestErrors.");
    const pathParams = {
      "{workRequestId}": listStorageWorkRequestErrorsRequest.workRequestId,
      "{namespaceName}": listStorageWorkRequestErrorsRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": listStorageWorkRequestErrorsRequest.compartmentId,
      "limit": listStorageWorkRequestErrorsRequest.limit,
      "page": listStorageWorkRequestErrorsRequest.page,
      "sortOrder": listStorageWorkRequestErrorsRequest.sortOrder,
      "sortBy": listStorageWorkRequestErrorsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listStorageWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listStorageWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storageWorkRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListStorageWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API lists storage work requests.  Use query parameters to narrow down or sort the result list.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListStorageWorkRequestsRequest
   * @return ListStorageWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListStorageWorkRequests.ts.html |here} to see how to use ListStorageWorkRequests API.
   */
  public async listStorageWorkRequests(
    listStorageWorkRequestsRequest: requests.ListStorageWorkRequestsRequest
  ): Promise<responses.ListStorageWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listStorageWorkRequests.");
    const pathParams = {
      "{namespaceName}": listStorageWorkRequestsRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": listStorageWorkRequestsRequest.compartmentId,
      "limit": listStorageWorkRequestsRequest.limit,
      "page": listStorageWorkRequestsRequest.page,
      "sortOrder": listStorageWorkRequestsRequest.sortOrder,
      "sortBy": listStorageWorkRequestsRequest.sortBy,
      "operationType": listStorageWorkRequestsRequest.operationType,
      "status": listStorageWorkRequestsRequest.status,
      "timeStarted": listStorageWorkRequestsRequest.timeStarted,
      "timeFinished": listStorageWorkRequestsRequest.timeFinished,
      "policyName": listStorageWorkRequestsRequest.policyName,
      "policyId": listStorageWorkRequestsRequest.policyId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listStorageWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listStorageWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storageWorkRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListStorageWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "storageWorkRequestCollection",
        bodyModel: model.StorageWorkRequestCollection,
        type: "model.StorageWorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets list of character encodings which are supported by on-demand upload.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSupportedCharEncodingsRequest
   * @return ListSupportedCharEncodingsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListSupportedCharEncodings.ts.html |here} to see how to use ListSupportedCharEncodings API.
   */
  public async listSupportedCharEncodings(
    listSupportedCharEncodingsRequest: requests.ListSupportedCharEncodingsRequest
  ): Promise<responses.ListSupportedCharEncodingsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listSupportedCharEncodings.");
    const pathParams = {
      "{namespaceName}": listSupportedCharEncodingsRequest.namespaceName
    };

    const queryParams = {
      "limit": listSupportedCharEncodingsRequest.limit,
      "page": listSupportedCharEncodingsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSupportedCharEncodingsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSupportedCharEncodingsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/supportedCharEncodings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSupportedCharEncodingsResponse>{},
        body: await response.json(),
        bodyKey: "charEncodingCollection",
        bodyModel: model.CharEncodingCollection,
        type: "model.CharEncodingCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets list of timezones which are supported by on-demand upload.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListSupportedTimezonesRequest
   * @return ListSupportedTimezonesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListSupportedTimezones.ts.html |here} to see how to use ListSupportedTimezones API.
   */
  public async listSupportedTimezones(
    listSupportedTimezonesRequest: requests.ListSupportedTimezonesRequest
  ): Promise<responses.ListSupportedTimezonesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listSupportedTimezones.");
    const pathParams = {
      "{namespaceName}": listSupportedTimezonesRequest.namespaceName
    };

    const queryParams = {
      "limit": listSupportedTimezonesRequest.limit,
      "page": listSupportedTimezonesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSupportedTimezonesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSupportedTimezonesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/supportedTimezones",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSupportedTimezonesResponse>{},
        body: await response.json(),
        bodyKey: "timezoneCollection",
        bodyModel: model.TimezoneCollection,
        type: "model.TimezoneCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets list of files in an upload along with its processing state.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListUploadFilesRequest
   * @return ListUploadFilesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListUploadFiles.ts.html |here} to see how to use ListUploadFiles API.
   */
  public async listUploadFiles(
    listUploadFilesRequest: requests.ListUploadFilesRequest
  ): Promise<responses.ListUploadFilesResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listUploadFiles.");
    const pathParams = {
      "{namespaceName}": listUploadFilesRequest.namespaceName,
      "{uploadReference}": listUploadFilesRequest.uploadReference
    };

    const queryParams = {
      "limit": listUploadFilesRequest.limit,
      "page": listUploadFilesRequest.page,
      "sortOrder": listUploadFilesRequest.sortOrder,
      "sortBy": listUploadFilesRequest.sortBy,
      "searchStr": listUploadFilesRequest.searchStr,
      "status": listUploadFilesRequest.status
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUploadFilesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUploadFilesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/uploads/{uploadReference}/files",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUploadFilesResponse>{},
        body: await response.json(),
        bodyKey: "uploadFileCollection",
        bodyModel: model.UploadFileCollection,
        type: "model.UploadFileCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets list of warnings in an upload caused by incorrect configuration.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListUploadWarningsRequest
   * @return ListUploadWarningsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListUploadWarnings.ts.html |here} to see how to use ListUploadWarnings API.
   */
  public async listUploadWarnings(
    listUploadWarningsRequest: requests.ListUploadWarningsRequest
  ): Promise<responses.ListUploadWarningsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listUploadWarnings.");
    const pathParams = {
      "{namespaceName}": listUploadWarningsRequest.namespaceName,
      "{uploadReference}": listUploadWarningsRequest.uploadReference
    };

    const queryParams = {
      "limit": listUploadWarningsRequest.limit,
      "page": listUploadWarningsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUploadWarningsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUploadWarningsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/uploads/{uploadReference}/warnings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUploadWarningsResponse>{},
        body: await response.json(),
        bodyKey: "uploadWarningCollection",
        bodyModel: model.UploadWarningCollection,
        type: "model.UploadWarningCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all On-demand uploads.
   * To use this and other API operations, you must be authorized in an IAM policy.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListUploadsRequest
   * @return ListUploadsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListUploads.ts.html |here} to see how to use ListUploads API.
   */
  public async listUploads(
    listUploadsRequest: requests.ListUploadsRequest
  ): Promise<responses.ListUploadsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listUploads.");
    const pathParams = {
      "{namespaceName}": listUploadsRequest.namespaceName
    };

    const queryParams = {
      "name": listUploadsRequest.name,
      "nameContains": listUploadsRequest.nameContains,
      "limit": listUploadsRequest.limit,
      "page": listUploadsRequest.page,
      "sortOrder": listUploadsRequest.sortOrder,
      "sortBy": listUploadsRequest.sortBy,
      "warningsFilter": listUploadsRequest.warningsFilter
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listUploadsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listUploadsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/uploads",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListUploadsResponse>{},
        body: await response.json(),
        bodyKey: "uploadCollection",
        bodyModel: model.UploadCollection,
        type: "model.UploadCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of collection warnings, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as start time, end time, warning type, warning state, source name, source pattern and entity name.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWarningsRequest
   * @return ListWarningsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListWarnings.ts.html |here} to see how to use ListWarnings API.
   */
  public async listWarnings(
    listWarningsRequest: requests.ListWarningsRequest
  ): Promise<responses.ListWarningsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listWarnings.");
    const pathParams = {
      "{namespaceName}": listWarningsRequest.namespaceName
    };

    const queryParams = {
      "warningState": listWarningsRequest.warningState,
      "sourceName": listWarningsRequest.sourceName,
      "sourcePattern": listWarningsRequest.sourcePattern,
      "warningMessage": listWarningsRequest.warningMessage,
      "entityName": listWarningsRequest.entityName,
      "entityType": listWarningsRequest.entityType,
      "warningType": listWarningsRequest.warningType,
      "isNoSource": listWarningsRequest.isNoSource,
      "startTime": listWarningsRequest.startTime,
      "endTime": listWarningsRequest.endTime,
      "compartmentId": listWarningsRequest.compartmentId,
      "limit": listWarningsRequest.limit,
      "page": listWarningsRequest.page,
      "sortOrder": listWarningsRequest.sortOrder,
      "sortBy": listWarningsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWarningsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWarningsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/warnings",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWarningsResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsWarningCollection",
        bodyModel: model.LogAnalyticsWarningCollection,
        type: "model.LogAnalyticsWarningCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of errors for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#listWorkRequestErrors.");
    const pathParams = {
      "{namespaceName}": listWorkRequestErrorsRequest.namespaceName,
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of logs for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listWorkRequestLogs.");
    const pathParams = {
      "{namespaceName}": listWorkRequestLogsRequest.namespaceName,
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogCollection",
        bodyModel: model.WorkRequestLogCollection,
        type: "model.WorkRequestLogCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#listWorkRequests.");
    const pathParams = {
      "{namespaceName}": listWorkRequestsRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: model.WorkRequestCollection,
        type: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Off-boards a tenant from Logging Analytics
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param OffboardNamespaceRequest
   * @return OffboardNamespaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/OffboardNamespace.ts.html |here} to see how to use OffboardNamespace API.
   */
  public async offboardNamespace(
    offboardNamespaceRequest: requests.OffboardNamespaceRequest
  ): Promise<responses.OffboardNamespaceResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#offboardNamespace.");
    const pathParams = {
      "{namespaceName}": offboardNamespaceRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": offboardNamespaceRequest.opcRequestId,
      "opc-retry-token": offboardNamespaceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      offboardNamespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/actions/offboard",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.OffboardNamespaceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * On-boards a tenant to Logging Analytics.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param OnboardNamespaceRequest
   * @return OnboardNamespaceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/OnboardNamespace.ts.html |here} to see how to use OnboardNamespace API.
   */
  public async onboardNamespace(
    onboardNamespaceRequest: requests.OnboardNamespaceRequest
  ): Promise<responses.OnboardNamespaceResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#onboardNamespace.");
    const pathParams = {
      "{namespaceName}": onboardNamespaceRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": onboardNamespaceRequest.opcRetryToken,
      "opc-request-id": onboardNamespaceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      onboardNamespaceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/actions/onboard",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.OnboardNamespaceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Describe query
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ParseQueryRequest
   * @return ParseQueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ParseQuery.ts.html |here} to see how to use ParseQuery API.
   */
  public async parseQuery(
    parseQueryRequest: requests.ParseQueryRequest
  ): Promise<responses.ParseQueryResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#parseQuery.");
    const pathParams = {
      "{namespaceName}": parseQueryRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": parseQueryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      parseQueryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/search/actions/parse",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        parseQueryRequest.parseQueryDetails,
        "ParseQueryDetails",
        model.ParseQueryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ParseQueryResponse>{},
        body: await response.json(),
        bodyKey: "parseQueryOutput",
        bodyModel: model.ParseQueryOutput,
        type: "model.ParseQueryOutput",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Pause the scheduled task specified by {scheduledTaskId}.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PauseScheduledTaskRequest
   * @return PauseScheduledTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/PauseScheduledTask.ts.html |here} to see how to use PauseScheduledTask API.
   */
  public async pauseScheduledTask(
    pauseScheduledTaskRequest: requests.PauseScheduledTaskRequest
  ): Promise<responses.PauseScheduledTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#pauseScheduledTask.");
    const pathParams = {
      "{namespaceName}": pauseScheduledTaskRequest.namespaceName,
      "{scheduledTaskId}": pauseScheduledTaskRequest.scheduledTaskId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": pauseScheduledTaskRequest.ifMatch,
      "opc-request-id": pauseScheduledTaskRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      pauseScheduledTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}/actions/pause",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.PauseScheduledTaskResponse>{},
        body: await response.json(),
        bodyKey: "scheduledTask",
        bodyModel: model.ScheduledTask,
        type: "model.ScheduledTask",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API submits a work request to purge data. Only data from log groups that the user has permission to delete
   * will be purged.  To purge all data, the user must have permission to all log groups.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PurgeStorageDataRequest
   * @return PurgeStorageDataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/PurgeStorageData.ts.html |here} to see how to use PurgeStorageData API.
   */
  public async purgeStorageData(
    purgeStorageDataRequest: requests.PurgeStorageDataRequest
  ): Promise<responses.PurgeStorageDataResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#purgeStorageData.");
    const pathParams = {
      "{namespaceName}": purgeStorageDataRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": purgeStorageDataRequest.opcRequestId,
      "opc-retry-token": purgeStorageDataRequest.opcRetryToken,
      "if-match": purgeStorageDataRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      purgeStorageDataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/actions/purgeData",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        purgeStorageDataRequest.purgeStorageDataDetails,
        "PurgeStorageDataDetails",
        model.PurgeStorageDataDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.PurgeStorageDataResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Put the work request specified by {workRequestId} into the background. Backgrounded queries will preserve query results on query completion for up to 7 days for recall. After 7 days the results and query expire.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PutQueryWorkRequestBackgroundRequest
   * @return PutQueryWorkRequestBackgroundResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/PutQueryWorkRequestBackground.ts.html |here} to see how to use PutQueryWorkRequestBackground API.
   */
  public async putQueryWorkRequestBackground(
    putQueryWorkRequestBackgroundRequest: requests.PutQueryWorkRequestBackgroundRequest
  ): Promise<responses.PutQueryWorkRequestBackgroundResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#putQueryWorkRequestBackground.");
    const pathParams = {
      "{namespaceName}": putQueryWorkRequestBackgroundRequest.namespaceName,
      "{workRequestId}": putQueryWorkRequestBackgroundRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": putQueryWorkRequestBackgroundRequest.opcRequestId,
      "if-match": putQueryWorkRequestBackgroundRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putQueryWorkRequestBackgroundRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/queryWorkRequests/{workRequestId}/actions/background",
      method: "PUT",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.PutQueryWorkRequestBackgroundResponse>{},
        body: await response.json(),
        bodyKey: "queryWorkRequest",
        bodyModel: model.QueryWorkRequest,
        type: "model.QueryWorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Performs a log analytics search, if shouldRunAsync is false returns the query results once they become available subject to 60 second timeout. If a query is subject to exceed that time then it should be run asynchronously. Asynchronous query submissions return the queryWorkRequestId to use for execution tracking, query submission lifecycle actions and to poll for query results.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param QueryRequest
   * @return QueryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/Query.ts.html |here} to see how to use Query API.
   */
  public async query(queryRequest: requests.QueryRequest): Promise<responses.QueryResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#query.");
    const pathParams = {
      "{namespaceName}": queryRequest.namespaceName
    };

    const queryParams = {
      "page": queryRequest.page,
      "limit": queryRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": queryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      queryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/search/actions/query",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        queryRequest.queryDetails,
        "QueryDetails",
        model.QueryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.QueryResponse>{},
        body: await response.json(),
        bodyKey: "queryAggregation",
        bodyModel: model.QueryAggregation,
        type: "model.QueryAggregation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page-id"),
            key: "opcNextPageId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page-id"),
            key: "opcPrevPageId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API submits a work request to recall archived data based on time interval and data type.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RecallArchivedDataRequest
   * @return RecallArchivedDataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/RecallArchivedData.ts.html |here} to see how to use RecallArchivedData API.
   */
  public async recallArchivedData(
    recallArchivedDataRequest: requests.RecallArchivedDataRequest
  ): Promise<responses.RecallArchivedDataResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#recallArchivedData.");
    const pathParams = {
      "{namespaceName}": recallArchivedDataRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": recallArchivedDataRequest.opcRequestId,
      "opc-retry-token": recallArchivedDataRequest.opcRetryToken,
      "if-match": recallArchivedDataRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      recallArchivedDataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/actions/recallArchivedData",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        recallArchivedDataRequest.recallArchivedDataDetails,
        "RecallArchivedDataDetails",
        model.RecallArchivedDataDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RecallArchivedDataResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a lookup with the specified name, type and description. The csv file containing the lookup content is passed in as binary data in the request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RegisterLookupRequest
   * @return RegisterLookupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/RegisterLookup.ts.html |here} to see how to use RegisterLookup API.
   */
  public async registerLookup(
    registerLookupRequest: requests.RegisterLookupRequest
  ): Promise<responses.RegisterLookupResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#registerLookup.");
    const pathParams = {
      "{namespaceName}": registerLookupRequest.namespaceName
    };

    const queryParams = {
      "name": registerLookupRequest.name,
      "description": registerLookupRequest.description,
      "charEncoding": registerLookupRequest.charEncoding,
      "isHidden": registerLookupRequest.isHidden,
      "type": registerLookupRequest.type
    };

    let headerParams = {
      "opc-retry-token": registerLookupRequest.opcRetryToken,
      "opc-request-id": registerLookupRequest.opcRequestId,
      "expect": registerLookupRequest.expect
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      registerLookupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/lookups/actions/register",
      method: "POST",
      bodyContent: registerLookupRequest.registerLookupContentFileBody,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RegisterLookupResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLookup",
        bodyModel: model.LogAnalyticsLookup,
        type: "model.LogAnalyticsLookup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API submits a work request to release recalled data based on time interval and data type.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ReleaseRecalledDataRequest
   * @return ReleaseRecalledDataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ReleaseRecalledData.ts.html |here} to see how to use ReleaseRecalledData API.
   */
  public async releaseRecalledData(
    releaseRecalledDataRequest: requests.ReleaseRecalledDataRequest
  ): Promise<responses.ReleaseRecalledDataResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#releaseRecalledData.");
    const pathParams = {
      "{namespaceName}": releaseRecalledDataRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": releaseRecalledDataRequest.opcRequestId,
      "opc-retry-token": releaseRecalledDataRequest.opcRetryToken,
      "if-match": releaseRecalledDataRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      releaseRecalledDataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage/actions/releaseRecalledData",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        releaseRecalledDataRequest.releaseRecalledDataDetails,
        "ReleaseRecalledDataDetails",
        model.ReleaseRecalledDataDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ReleaseRecalledDataResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete association between input source log analytics entity and destination entities.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveEntityAssociationsRequest
   * @return RemoveEntityAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/RemoveEntityAssociations.ts.html |here} to see how to use RemoveEntityAssociations API.
   */
  public async removeEntityAssociations(
    removeEntityAssociationsRequest: requests.RemoveEntityAssociationsRequest
  ): Promise<responses.RemoveEntityAssociationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#removeEntityAssociations.");
    const pathParams = {
      "{namespaceName}": removeEntityAssociationsRequest.namespaceName,
      "{logAnalyticsEntityId}": removeEntityAssociationsRequest.logAnalyticsEntityId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": removeEntityAssociationsRequest.ifMatch,
      "opc-request-id": removeEntityAssociationsRequest.opcRequestId,
      "opc-retry-token": removeEntityAssociationsRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeEntityAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}/actions/removeEntityAssociations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeEntityAssociationsRequest.removeEntityAssociationsDetails,
        "RemoveEntityAssociationsDetails",
        model.RemoveEntityAssociationsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveEntityAssociationsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the tenant preferences. Currently, only \"DEFAULT_HOMEPAGE\" is supported.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemovePreferencesRequest
   * @return RemovePreferencesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/RemovePreferences.ts.html |here} to see how to use RemovePreferences API.
   */
  public async removePreferences(
    removePreferencesRequest: requests.RemovePreferencesRequest
  ): Promise<responses.RemovePreferencesResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#removePreferences.");
    const pathParams = {
      "{namespaceName}": removePreferencesRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": removePreferencesRequest.opcRetryToken,
      "opc-request-id": removePreferencesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removePreferencesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/preferences/actions/removePreferences",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removePreferencesRequest.removePreferencesDetails,
        "LogAnalyticsPreferenceDetails",
        model.LogAnalyticsPreferenceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemovePreferencesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes the category assignments of DASHBOARD and SAVEDSEARCH resources.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveResourceCategoriesRequest
   * @return RemoveResourceCategoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/RemoveResourceCategories.ts.html |here} to see how to use RemoveResourceCategories API.
   */
  public async removeResourceCategories(
    removeResourceCategoriesRequest: requests.RemoveResourceCategoriesRequest
  ): Promise<responses.RemoveResourceCategoriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#removeResourceCategories.");
    const pathParams = {
      "{namespaceName}": removeResourceCategoriesRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeResourceCategoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeResourceCategoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/categories/actions/removeResourceCategories",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeResourceCategoriesRequest.removeResourceCategoriesDetails,
        "LogAnalyticsResourceCategoryDetails",
        model.LogAnalyticsResourceCategoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveResourceCategoriesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove one or more event types from a source.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveSourceEventTypesRequest
   * @return RemoveSourceEventTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/RemoveSourceEventTypes.ts.html |here} to see how to use RemoveSourceEventTypes API.
   */
  public async removeSourceEventTypes(
    removeSourceEventTypesRequest: requests.RemoveSourceEventTypesRequest
  ): Promise<responses.RemoveSourceEventTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#removeSourceEventTypes.");
    const pathParams = {
      "{namespaceName}": removeSourceEventTypesRequest.namespaceName,
      "{sourceName}": removeSourceEventTypesRequest.sourceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": removeSourceEventTypesRequest.opcRetryToken,
      "opc-request-id": removeSourceEventTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeSourceEventTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/removeEventTypes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeSourceEventTypesRequest.removeEventTypeDetails,
        "EventTypeDetails",
        model.EventTypeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveSourceEventTypesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Resume the scheduled task specified by {scheduledTaskId}.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ResumeScheduledTaskRequest
   * @return ResumeScheduledTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ResumeScheduledTask.ts.html |here} to see how to use ResumeScheduledTask API.
   */
  public async resumeScheduledTask(
    resumeScheduledTaskRequest: requests.ResumeScheduledTaskRequest
  ): Promise<responses.ResumeScheduledTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#resumeScheduledTask.");
    const pathParams = {
      "{namespaceName}": resumeScheduledTaskRequest.namespaceName,
      "{scheduledTaskId}": resumeScheduledTaskRequest.scheduledTaskId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": resumeScheduledTaskRequest.ifMatch,
      "opc-request-id": resumeScheduledTaskRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      resumeScheduledTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}/actions/resume",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ResumeScheduledTaskResponse>{},
        body: await response.json(),
        bodyKey: "scheduledTask",
        bodyModel: model.ScheduledTask,
        type: "model.ScheduledTask",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Execute the saved search acceleration task in the foreground.
   * The ScheduledTask taskType must be ACCELERATION.
   * Optionally specify time range (timeStart and timeEnd). The default is all time.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RunRequest
   * @return RunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/Run.ts.html |here} to see how to use Run API.
   */
  public async run(runRequest: requests.RunRequest): Promise<responses.RunResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#run.");
    const pathParams = {
      "{namespaceName}": runRequest.namespaceName,
      "{scheduledTaskId}": runRequest.scheduledTaskId
    };

    const queryParams = {
      "timeStart": runRequest.timeStart,
      "timeEnd": runRequest.timeEnd
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": runRequest.opcRequestId,
      "opc-retry-token": runRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      runRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}/actions/run",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.RunResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API configures a bucket to store unprocessed payloads.
   * While processing there could be reasons a payload cannot be processed (mismatched structure, corrupted archive format, etc),
   * if configured the payload would be uploaded to the bucket for verification.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SetUnprocessedDataBucketRequest
   * @return SetUnprocessedDataBucketResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/SetUnprocessedDataBucket.ts.html |here} to see how to use SetUnprocessedDataBucket API.
   */
  public async setUnprocessedDataBucket(
    setUnprocessedDataBucketRequest: requests.SetUnprocessedDataBucketRequest
  ): Promise<responses.SetUnprocessedDataBucketResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#setUnprocessedDataBucket.");
    const pathParams = {
      "{namespaceName}": setUnprocessedDataBucketRequest.namespaceName
    };

    const queryParams = {
      "bucketName": setUnprocessedDataBucketRequest.bucketName,
      "isEnabled": setUnprocessedDataBucketRequest.isEnabled
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": setUnprocessedDataBucketRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      setUnprocessedDataBucketRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/actions/setUnprocessedDataBucket",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SetUnprocessedDataBucketResponse>{},
        body: await response.json(),
        bodyKey: "unprocessedDataBucket",
        bodyModel: model.UnprocessedDataBucket,
        type: "model.UnprocessedDataBucket",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a context specific list of either commands, fields, or values to append to the end of the specified query string if applicable.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SuggestRequest
   * @return SuggestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/Suggest.ts.html |here} to see how to use Suggest API.
   */
  public async suggest(
    suggestRequest: requests.SuggestRequest
  ): Promise<responses.SuggestResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#suggest.");
    const pathParams = {
      "{namespaceName}": suggestRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": suggestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      suggestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/search/actions/suggest",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        suggestRequest.suggestDetails,
        "SuggestDetails",
        model.SuggestDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SuggestResponse>{},
        body: await response.json(),
        bodyKey: "suggestOutput",
        bodyModel: model.SuggestOutput,
        type: "model.SuggestOutput",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Supresses a list of warnings. Any unsuppressed warnings in the input list would be suppressed. Warnings in the input list which are already suppressed will not be modified.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param SuppressWarningRequest
   * @return SuppressWarningResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/SuppressWarning.ts.html |here} to see how to use SuppressWarning API.
   */
  public async suppressWarning(
    suppressWarningRequest: requests.SuppressWarningRequest
  ): Promise<responses.SuppressWarningResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#suppressWarning.");
    const pathParams = {
      "{namespaceName}": suppressWarningRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": suppressWarningRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": suppressWarningRequest.opcRetryToken,
      "opc-request-id": suppressWarningRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      suppressWarningRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/warnings/actions/suppress",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        suppressWarningRequest.warningReferenceDetails,
        "WarningReferenceDetails",
        model.WarningReferenceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.SuppressWarningResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Tests the parser definition against the specified example content to ensure fields are successfully extracted.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param TestParserRequest
   * @return TestParserResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/TestParser.ts.html |here} to see how to use TestParser API.
   */
  public async testParser(
    testParserRequest: requests.TestParserRequest
  ): Promise<responses.TestParserResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#testParser.");
    const pathParams = {
      "{namespaceName}": testParserRequest.namespaceName
    };

    const queryParams = {
      "scope": testParserRequest.scope,
      "reqOriginModule": testParserRequest.reqOriginModule
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": testParserRequest.opcRetryToken,
      "opc-request-id": testParserRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      testParserRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/parsers/actions/test",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        testParserRequest.testParserPayloadDetails,
        "TestParserPayloadDetails",
        model.TestParserPayloadDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.TestParserResponse>{},
        body: await response.json(),
        bodyKey: "parserTestResult",
        bodyModel: model.ParserTestResult,
        type: "model.ParserTestResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Unsupresses a list of warnings. Any suppressed warnings in the input list would be unsuppressed. Warnings in the input list which are already unsuppressed will not be modified.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UnsuppressWarningRequest
   * @return UnsuppressWarningResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UnsuppressWarning.ts.html |here} to see how to use UnsuppressWarning API.
   */
  public async unsuppressWarning(
    unsuppressWarningRequest: requests.UnsuppressWarningRequest
  ): Promise<responses.UnsuppressWarningResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#unsuppressWarning.");
    const pathParams = {
      "{namespaceName}": unsuppressWarningRequest.namespaceName
    };

    const queryParams = {
      "compartmentId": unsuppressWarningRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": unsuppressWarningRequest.opcRetryToken,
      "opc-request-id": unsuppressWarningRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      unsuppressWarningRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/warnings/actions/unsuppress",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        unsuppressWarningRequest.warningReferenceDetails,
        "WarningReferenceDetails",
        model.WarningReferenceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UnsuppressWarningResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update log analytics enterprise manager bridge with the given id.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateLogAnalyticsEmBridgeRequest
   * @return UpdateLogAnalyticsEmBridgeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpdateLogAnalyticsEmBridge.ts.html |here} to see how to use UpdateLogAnalyticsEmBridge API.
   */
  public async updateLogAnalyticsEmBridge(
    updateLogAnalyticsEmBridgeRequest: requests.UpdateLogAnalyticsEmBridgeRequest
  ): Promise<responses.UpdateLogAnalyticsEmBridgeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#updateLogAnalyticsEmBridge.");
    const pathParams = {
      "{namespaceName}": updateLogAnalyticsEmBridgeRequest.namespaceName,
      "{logAnalyticsEmBridgeId}": updateLogAnalyticsEmBridgeRequest.logAnalyticsEmBridgeId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLogAnalyticsEmBridgeRequest.ifMatch,
      "opc-request-id": updateLogAnalyticsEmBridgeRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLogAnalyticsEmBridgeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEmBridges/{logAnalyticsEmBridgeId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLogAnalyticsEmBridgeRequest.updateLogAnalyticsEmBridgeDetails,
        "UpdateLogAnalyticsEmBridgeDetails",
        model.UpdateLogAnalyticsEmBridgeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLogAnalyticsEmBridgeResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEmBridge",
        bodyModel: model.LogAnalyticsEmBridge,
        type: "model.LogAnalyticsEmBridge",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the log analytics entity with the given id.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateLogAnalyticsEntityRequest
   * @return UpdateLogAnalyticsEntityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpdateLogAnalyticsEntity.ts.html |here} to see how to use UpdateLogAnalyticsEntity API.
   */
  public async updateLogAnalyticsEntity(
    updateLogAnalyticsEntityRequest: requests.UpdateLogAnalyticsEntityRequest
  ): Promise<responses.UpdateLogAnalyticsEntityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#updateLogAnalyticsEntity.");
    const pathParams = {
      "{namespaceName}": updateLogAnalyticsEntityRequest.namespaceName,
      "{logAnalyticsEntityId}": updateLogAnalyticsEntityRequest.logAnalyticsEntityId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLogAnalyticsEntityRequest.ifMatch,
      "opc-request-id": updateLogAnalyticsEntityRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLogAnalyticsEntityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLogAnalyticsEntityRequest.updateLogAnalyticsEntityDetails,
        "UpdateLogAnalyticsEntityDetails",
        model.UpdateLogAnalyticsEntityDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLogAnalyticsEntityResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsEntity",
        bodyModel: model.LogAnalyticsEntity,
        type: "model.LogAnalyticsEntity",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update custom log analytics entity type. Out of box entity types cannot be udpated.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateLogAnalyticsEntityTypeRequest
   * @return UpdateLogAnalyticsEntityTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpdateLogAnalyticsEntityType.ts.html |here} to see how to use UpdateLogAnalyticsEntityType API.
   */
  public async updateLogAnalyticsEntityType(
    updateLogAnalyticsEntityTypeRequest: requests.UpdateLogAnalyticsEntityTypeRequest
  ): Promise<responses.UpdateLogAnalyticsEntityTypeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#updateLogAnalyticsEntityType.");
    const pathParams = {
      "{namespaceName}": updateLogAnalyticsEntityTypeRequest.namespaceName,
      "{entityTypeName}": updateLogAnalyticsEntityTypeRequest.entityTypeName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateLogAnalyticsEntityTypeRequest.opcRequestId,
      "if-match": updateLogAnalyticsEntityTypeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLogAnalyticsEntityTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsEntityTypes/{entityTypeName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLogAnalyticsEntityTypeRequest.updateLogAnalyticsEntityTypeDetails,
        "UpdateLogAnalyticsEntityTypeDetails",
        model.UpdateLogAnalyticsEntityTypeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLogAnalyticsEntityTypeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified log group's display name, description, defined tags, and free-form tags.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateLogAnalyticsLogGroupRequest
   * @return UpdateLogAnalyticsLogGroupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpdateLogAnalyticsLogGroup.ts.html |here} to see how to use UpdateLogAnalyticsLogGroup API.
   */
  public async updateLogAnalyticsLogGroup(
    updateLogAnalyticsLogGroupRequest: requests.UpdateLogAnalyticsLogGroupRequest
  ): Promise<responses.UpdateLogAnalyticsLogGroupResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#updateLogAnalyticsLogGroup.");
    const pathParams = {
      "{namespaceName}": updateLogAnalyticsLogGroupRequest.namespaceName,
      "{logAnalyticsLogGroupId}": updateLogAnalyticsLogGroupRequest.logAnalyticsLogGroupId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLogAnalyticsLogGroupRequest.ifMatch,
      "opc-request-id": updateLogAnalyticsLogGroupRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLogAnalyticsLogGroupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/logAnalyticsLogGroups/{logAnalyticsLogGroupId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLogAnalyticsLogGroupRequest.updateLogAnalyticsLogGroupDetails,
        "UpdateLogAnalyticsLogGroupDetails",
        model.UpdateLogAnalyticsLogGroupDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLogAnalyticsLogGroupResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLogGroup",
        bodyModel: model.LogAnalyticsLogGroup,
        type: "model.LogAnalyticsLogGroup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates configuration of the object collection rule for the given id.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateLogAnalyticsObjectCollectionRuleRequest
   * @return UpdateLogAnalyticsObjectCollectionRuleResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpdateLogAnalyticsObjectCollectionRule.ts.html |here} to see how to use UpdateLogAnalyticsObjectCollectionRule API.
   */
  public async updateLogAnalyticsObjectCollectionRule(
    updateLogAnalyticsObjectCollectionRuleRequest: requests.UpdateLogAnalyticsObjectCollectionRuleRequest
  ): Promise<responses.UpdateLogAnalyticsObjectCollectionRuleResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation LogAnalyticsClient#updateLogAnalyticsObjectCollectionRule."
      );
    const pathParams = {
      "{namespaceName}": updateLogAnalyticsObjectCollectionRuleRequest.namespaceName,
      "{logAnalyticsObjectCollectionRuleId}":
        updateLogAnalyticsObjectCollectionRuleRequest.logAnalyticsObjectCollectionRuleId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateLogAnalyticsObjectCollectionRuleRequest.ifMatch,
      "opc-request-id": updateLogAnalyticsObjectCollectionRuleRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLogAnalyticsObjectCollectionRuleRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules/{logAnalyticsObjectCollectionRuleId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLogAnalyticsObjectCollectionRuleRequest.updateLogAnalyticsObjectCollectionRuleDetails,
        "UpdateLogAnalyticsObjectCollectionRuleDetails",
        model.UpdateLogAnalyticsObjectCollectionRuleDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLogAnalyticsObjectCollectionRuleResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsObjectCollectionRule",
        bodyModel: model.LogAnalyticsObjectCollectionRule,
        type: "model.LogAnalyticsObjectCollectionRule",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the metadata of the specified lookup, such as the lookup description.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateLookupRequest
   * @return UpdateLookupResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpdateLookup.ts.html |here} to see how to use UpdateLookup API.
   */
  public async updateLookup(
    updateLookupRequest: requests.UpdateLookupRequest
  ): Promise<responses.UpdateLookupResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#updateLookup.");
    const pathParams = {
      "{namespaceName}": updateLookupRequest.namespaceName,
      "{lookupName}": updateLookupRequest.lookupName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateLookupRequest.opcRetryToken,
      "opc-request-id": updateLookupRequest.opcRequestId,
      "if-match": updateLookupRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLookupRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/lookups/{lookupName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateLookupRequest.updateLookupMetadataDetails,
        "UpdateLookupMetadataDetails",
        model.UpdateLookupMetadataDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLookupResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLookup",
        bodyModel: model.LogAnalyticsLookup,
        type: "model.LogAnalyticsLookup",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the lookup content. The csv file containing the content to be updated is passed in as binary data in the request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateLookupDataRequest
   * @return UpdateLookupDataResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpdateLookupData.ts.html |here} to see how to use UpdateLookupData API.
   */
  public async updateLookupData(
    updateLookupDataRequest: requests.UpdateLookupDataRequest
  ): Promise<responses.UpdateLookupDataResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#updateLookupData.");
    const pathParams = {
      "{namespaceName}": updateLookupDataRequest.namespaceName,
      "{lookupName}": updateLookupDataRequest.lookupName
    };

    const queryParams = {
      "isForce": updateLookupDataRequest.isForce,
      "charEncoding": updateLookupDataRequest.charEncoding
    };

    let headerParams = {
      "opc-retry-token": updateLookupDataRequest.opcRetryToken,
      "opc-request-id": updateLookupDataRequest.opcRequestId,
      "if-match": updateLookupDataRequest.ifMatch,
      "expect": updateLookupDataRequest.expect
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateLookupDataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/lookups/{lookupName}/actions/updateData",
      method: "POST",
      bodyContent: updateLookupDataRequest.updateLookupFileBody,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateLookupDataResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the tenant preferences. Currently, only \"DEFAULT_HOMEPAGE\" is supported.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdatePreferencesRequest
   * @return UpdatePreferencesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpdatePreferences.ts.html |here} to see how to use UpdatePreferences API.
   */
  public async updatePreferences(
    updatePreferencesRequest: requests.UpdatePreferencesRequest
  ): Promise<responses.UpdatePreferencesResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#updatePreferences.");
    const pathParams = {
      "{namespaceName}": updatePreferencesRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updatePreferencesRequest.opcRetryToken,
      "opc-request-id": updatePreferencesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updatePreferencesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/preferences/actions/updatePreferences",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updatePreferencesRequest.updatePreferencesDetails,
        "LogAnalyticsPreferenceDetails",
        model.LogAnalyticsPreferenceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdatePreferencesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the category assignments of DASHBOARD and SAVEDSEARCH resources.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateResourceCategoriesRequest
   * @return UpdateResourceCategoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpdateResourceCategories.ts.html |here} to see how to use UpdateResourceCategories API.
   */
  public async updateResourceCategories(
    updateResourceCategoriesRequest: requests.UpdateResourceCategoriesRequest
  ): Promise<responses.UpdateResourceCategoriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#updateResourceCategories.");
    const pathParams = {
      "{namespaceName}": updateResourceCategoriesRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateResourceCategoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateResourceCategoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/categories/actions/updateResourceCategories",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        updateResourceCategoriesRequest.updateResourceCategoriesDetails,
        "LogAnalyticsResourceCategoryDetails",
        model.LogAnalyticsResourceCategoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateResourceCategoriesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the scheduled task. Schedules may be updated only for taskType SAVED_SEARCH and PURGE.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateScheduledTaskRequest
   * @return UpdateScheduledTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpdateScheduledTask.ts.html |here} to see how to use UpdateScheduledTask API.
   */
  public async updateScheduledTask(
    updateScheduledTaskRequest: requests.UpdateScheduledTaskRequest
  ): Promise<responses.UpdateScheduledTaskResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#updateScheduledTask.");
    const pathParams = {
      "{namespaceName}": updateScheduledTaskRequest.namespaceName,
      "{scheduledTaskId}": updateScheduledTaskRequest.scheduledTaskId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateScheduledTaskRequest.opcRequestId,
      "if-match": updateScheduledTaskRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateScheduledTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateScheduledTaskRequest.updateScheduledTaskDetails,
        "UpdateScheduledTaskDetails",
        model.UpdateScheduledTaskDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateScheduledTaskResponse>{},
        body: await response.json(),
        bodyKey: "scheduledTask",
        bodyModel: model.ScheduledTask,
        type: "model.ScheduledTask",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This API updates the archiving configuration
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateStorageRequest
   * @return UpdateStorageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpdateStorage.ts.html |here} to see how to use UpdateStorage API.
   */
  public async updateStorage(
    updateStorageRequest: requests.UpdateStorageRequest
  ): Promise<responses.UpdateStorageResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#updateStorage.");
    const pathParams = {
      "{namespaceName}": updateStorageRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateStorageRequest.opcRequestId,
      "if-match": updateStorageRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateStorageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/storage",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateStorageRequest.updateStorageDetails,
        "UpdateStorageDetails",
        model.UpdateStorageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateStorageResponse>{},
        body: await response.json(),
        bodyKey: "storage",
        bodyModel: model.Storage,
        type: "model.Storage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Accepts log events for processing by Logging Analytics.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UploadLogEventsFileRequest
   * @return UploadLogEventsFileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UploadLogEventsFile.ts.html |here} to see how to use UploadLogEventsFile API.
   */
  public async uploadLogEventsFile(
    uploadLogEventsFileRequest: requests.UploadLogEventsFileRequest
  ): Promise<responses.UploadLogEventsFileResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#uploadLogEventsFile.");
    const pathParams = {
      "{namespaceName}": uploadLogEventsFileRequest.namespaceName
    };

    const queryParams = {
      "logGroupId": uploadLogEventsFileRequest.logGroupId,
      "logSet": uploadLogEventsFileRequest.logSet,
      "payloadType": uploadLogEventsFileRequest.payloadType
    };

    let headerParams = {
      "opc-request-id": uploadLogEventsFileRequest.opcRequestId,
      "content-type": uploadLogEventsFileRequest.contentType,
      "opc-retry-token": uploadLogEventsFileRequest.opcRetryToken,
      "expect": uploadLogEventsFileRequest.expect
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      uploadLogEventsFileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/actions/uploadLogEventsFile",
      method: "POST",
      bodyContent: uploadLogEventsFileRequest.uploadLogEventsFileDetails,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request, true);
      const sdkResponse = composeResponse({
        responseObject: <responses.UploadLogEventsFileResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-object-id"),
            key: "opcObjectId",
            dataType: "string"
          },
          {
            value: response.headers.get("timeCreated"),
            key: "timeCreated",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Accepts log data for processing by Logging Analytics.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UploadLogFileRequest
   * @return UploadLogFileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UploadLogFile.ts.html |here} to see how to use UploadLogFile API.
   */
  public async uploadLogFile(
    uploadLogFileRequest: requests.UploadLogFileRequest
  ): Promise<responses.UploadLogFileResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#uploadLogFile.");
    const pathParams = {
      "{namespaceName}": uploadLogFileRequest.namespaceName
    };

    const queryParams = {
      "uploadName": uploadLogFileRequest.uploadName,
      "logSourceName": uploadLogFileRequest.logSourceName,
      "entityId": uploadLogFileRequest.entityId,
      "timezone": uploadLogFileRequest.timezone,
      "charEncoding": uploadLogFileRequest.charEncoding,
      "dateFormat": uploadLogFileRequest.dateFormat,
      "dateYear": uploadLogFileRequest.dateYear,
      "invalidateCache": uploadLogFileRequest.invalidateCache,
      "filename": uploadLogFileRequest.filename,
      "logSet": uploadLogFileRequest.logSet
    };

    let headerParams = {
      "opc-request-id": uploadLogFileRequest.opcRequestId,
      "content-md5": uploadLogFileRequest.contentMd5,
      "content-type": uploadLogFileRequest.contentType,
      "opc-meta-loggrpid": uploadLogFileRequest.opcMetaLoggrpid,
      "opc-retry-token": uploadLogFileRequest.opcRetryToken,
      "expect": uploadLogFileRequest.expect
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      uploadLogFileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/actions/uploadLogFile",
      method: "POST",
      bodyContent: uploadLogFileRequest.uploadLogFileBody,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request, true);
      const sdkResponse = composeResponse({
        responseObject: <responses.UploadLogFileResponse>{},
        body: await response.json(),
        bodyKey: "upload",
        bodyModel: model.Upload,
        type: "model.Upload",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-content-md5"),
            key: "opcContentMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-object-id"),
            key: "opcObjectId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates or updates associations between sources and entities. All entities should belong to the specified input compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpsertAssociationsRequest
   * @return UpsertAssociationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpsertAssociations.ts.html |here} to see how to use UpsertAssociations API.
   */
  public async upsertAssociations(
    upsertAssociationsRequest: requests.UpsertAssociationsRequest
  ): Promise<responses.UpsertAssociationsResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#upsertAssociations.");
    const pathParams = {
      "{namespaceName}": upsertAssociationsRequest.namespaceName
    };

    const queryParams = {
      "isFromRepublish": upsertAssociationsRequest.isFromRepublish
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": upsertAssociationsRequest.opcRetryToken,
      "opc-request-id": upsertAssociationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      upsertAssociationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/associations/actions/upsert",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        upsertAssociationsRequest.upsertLogAnalyticsAssociationDetails,
        "UpsertLogAnalyticsAssociationDetails",
        model.UpsertLogAnalyticsAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpsertAssociationsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates or updates a field that could be used in parser expressions to extract and assign value. To create a field, specify its display name. A name would be generated for the field. For subsequent calls to update the field, include the name attribute.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpsertFieldRequest
   * @return UpsertFieldResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpsertField.ts.html |here} to see how to use UpsertField API.
   */
  public async upsertField(
    upsertFieldRequest: requests.UpsertFieldRequest
  ): Promise<responses.UpsertFieldResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#upsertField.");
    const pathParams = {
      "{namespaceName}": upsertFieldRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": upsertFieldRequest.opcRetryToken,
      "opc-request-id": upsertFieldRequest.opcRequestId,
      "if-match": upsertFieldRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      upsertFieldRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/fields/actions/upsert",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        upsertFieldRequest.upsertLogAnalyticsFieldDetails,
        "UpsertLogAnalyticsFieldDetails",
        model.UpsertLogAnalyticsFieldDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpsertFieldResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsField",
        bodyModel: model.LogAnalyticsField,
        type: "model.LogAnalyticsField",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates or updates a label that could be used to tag a log entry. You may optionally designate the label as a problem, and assign it a priority. You may also provide its related terms (aliases). To create a label, specify its display name. A name would be generated for the label. For subsequent calls to update the label, include the name attribute.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpsertLabelRequest
   * @return UpsertLabelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpsertLabel.ts.html |here} to see how to use UpsertLabel API.
   */
  public async upsertLabel(
    upsertLabelRequest: requests.UpsertLabelRequest
  ): Promise<responses.UpsertLabelResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#upsertLabel.");
    const pathParams = {
      "{namespaceName}": upsertLabelRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": upsertLabelRequest.opcRetryToken,
      "opc-request-id": upsertLabelRequest.opcRequestId,
      "if-match": upsertLabelRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      upsertLabelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/labels/actions/upsert",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        upsertLabelRequest.upsertLogAnalyticsLabelDetails,
        "UpsertLogAnalyticsLabelDetails",
        model.UpsertLogAnalyticsLabelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpsertLabelResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsLabel",
        bodyModel: model.LogAnalyticsLabel,
        type: "model.LogAnalyticsLabel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates or updates a parser, which defines how fields are extracted from a log entry.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpsertParserRequest
   * @return UpsertParserResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpsertParser.ts.html |here} to see how to use UpsertParser API.
   */
  public async upsertParser(
    upsertParserRequest: requests.UpsertParserRequest
  ): Promise<responses.UpsertParserResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#upsertParser.");
    const pathParams = {
      "{namespaceName}": upsertParserRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": upsertParserRequest.opcRetryToken,
      "opc-request-id": upsertParserRequest.opcRequestId,
      "if-match": upsertParserRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      upsertParserRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/parsers/actions/upsert",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        upsertParserRequest.upsertLogAnalyticsParserDetails,
        "UpsertLogAnalyticsParserDetails",
        model.UpsertLogAnalyticsParserDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpsertParserResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsParser",
        bodyModel: model.LogAnalyticsParser,
        type: "model.LogAnalyticsParser",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates or updates a log source. You may also specify parsers, labels, extended fields etc., for the source.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpsertSourceRequest
   * @return UpsertSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/UpsertSource.ts.html |here} to see how to use UpsertSource API.
   */
  public async upsertSource(
    upsertSourceRequest: requests.UpsertSourceRequest
  ): Promise<responses.UpsertSourceResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#upsertSource.");
    const pathParams = {
      "{namespaceName}": upsertSourceRequest.namespaceName
    };

    const queryParams = {
      "createLikeSourceId": upsertSourceRequest.createLikeSourceId,
      "isIncremental": upsertSourceRequest.isIncremental,
      "isIgnoreWarning": upsertSourceRequest.isIgnoreWarning
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": upsertSourceRequest.opcRetryToken,
      "opc-request-id": upsertSourceRequest.opcRequestId,
      "if-match": upsertSourceRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      upsertSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/actions/upsert",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        upsertSourceRequest.upsertLogAnalyticsSourceDetails,
        "UpsertLogAnalyticsSourceDetails",
        model.UpsertLogAnalyticsSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpsertSourceResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsSource",
        bodyModel: model.LogAnalyticsSource,
        type: "model.LogAnalyticsSource",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Checks if the passed in entities could be associated with the specified sources. The validation is performed to ensure that the entities have the relevant property values that are used in the corresponding source patterns.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ValidateAssociationParametersRequest
   * @return ValidateAssociationParametersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ValidateAssociationParameters.ts.html |here} to see how to use ValidateAssociationParameters API.
   */
  public async validateAssociationParameters(
    validateAssociationParametersRequest: requests.ValidateAssociationParametersRequest
  ): Promise<responses.ValidateAssociationParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#validateAssociationParameters.");
    const pathParams = {
      "{namespaceName}": validateAssociationParametersRequest.namespaceName
    };

    const queryParams = {
      "limit": validateAssociationParametersRequest.limit,
      "page": validateAssociationParametersRequest.page,
      "sortOrder": validateAssociationParametersRequest.sortOrder,
      "sortBy": validateAssociationParametersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": validateAssociationParametersRequest.opcRetryToken,
      "opc-request-id": validateAssociationParametersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateAssociationParametersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/associations/actions/validateParameters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        validateAssociationParametersRequest.upsertLogAnalyticsAssociationDetails,
        "UpsertLogAnalyticsAssociationDetails",
        model.UpsertLogAnalyticsAssociationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateAssociationParametersResponse>{},
        body: await response.json(),
        bodyKey: "logAnalyticsAssociationParameterCollection",
        bodyModel: model.LogAnalyticsAssociationParameterCollection,
        type: "model.LogAnalyticsAssociationParameterCollection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Validates a log file to check whether it is eligible to be uploaded or not.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ValidateFileRequest
   * @return ValidateFileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ValidateFile.ts.html |here} to see how to use ValidateFile API.
   */
  public async validateFile(
    validateFileRequest: requests.ValidateFileRequest
  ): Promise<responses.ValidateFileResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#validateFile.");
    const pathParams = {
      "{namespaceName}": validateFileRequest.namespaceName
    };

    const queryParams = {
      "objectLocation": validateFileRequest.objectLocation,
      "filename": validateFileRequest.filename
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": validateFileRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateFileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/uploads/actions/validateFile",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateFileResponse>{},
        body: await response.json(),
        bodyKey: "fileValidationResponse",
        bodyModel: model.FileValidationResponse,
        type: "model.FileValidationResponse",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Checks if the specified input is a valid log source definition.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ValidateSourceRequest
   * @return ValidateSourceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ValidateSource.ts.html |here} to see how to use ValidateSource API.
   */
  public async validateSource(
    validateSourceRequest: requests.ValidateSourceRequest
  ): Promise<responses.ValidateSourceResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#validateSource.");
    const pathParams = {
      "{namespaceName}": validateSourceRequest.namespaceName
    };

    const queryParams = {
      "createLikeSourceId": validateSourceRequest.createLikeSourceId,
      "isIncremental": validateSourceRequest.isIncremental,
      "isIgnoreWarning": validateSourceRequest.isIgnoreWarning
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": validateSourceRequest.opcRetryToken,
      "opc-request-id": validateSourceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateSourceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/actions/validate",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        validateSourceRequest.upsertLogAnalyticsSourceDetails,
        "UpsertLogAnalyticsSourceDetails",
        model.UpsertLogAnalyticsSourceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateSourceResponse>{},
        body: await response.json(),
        bodyKey: "sourceValidateResults",
        bodyModel: model.SourceValidateResults,
        type: "model.SourceValidateResults",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Checks if the specified input contains valid extended field definitions against the provided example content.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ValidateSourceExtendedFieldDetailsRequest
   * @return ValidateSourceExtendedFieldDetailsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ValidateSourceExtendedFieldDetails.ts.html |here} to see how to use ValidateSourceExtendedFieldDetails API.
   */
  public async validateSourceExtendedFieldDetails(
    validateSourceExtendedFieldDetailsRequest: requests.ValidateSourceExtendedFieldDetailsRequest
  ): Promise<responses.ValidateSourceExtendedFieldDetailsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#validateSourceExtendedFieldDetails.");
    const pathParams = {
      "{namespaceName}": validateSourceExtendedFieldDetailsRequest.namespaceName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": validateSourceExtendedFieldDetailsRequest.opcRetryToken,
      "opc-request-id": validateSourceExtendedFieldDetailsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateSourceExtendedFieldDetailsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/sources/actions/validateExtendedFields",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        validateSourceExtendedFieldDetailsRequest.logAnalyticsSource,
        "LogAnalyticsSource",
        model.LogAnalyticsSource.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateSourceExtendedFieldDetailsResponse>{},
        body: await response.json(),
        bodyKey: "extendedFieldsValidationResult",
        bodyModel: model.ExtendedFieldsValidationResult,
        type: "model.ExtendedFieldsValidationResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Validates the source mapping for a given file and provides match status and the parsed representation of log data.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ValidateSourceMappingRequest
   * @return ValidateSourceMappingResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/ValidateSourceMapping.ts.html |here} to see how to use ValidateSourceMapping API.
   */
  public async validateSourceMapping(
    validateSourceMappingRequest: requests.ValidateSourceMappingRequest
  ): Promise<responses.ValidateSourceMappingResponse> {
    if (this.logger)
      this.logger.debug("Calling operation LogAnalyticsClient#validateSourceMapping.");
    const pathParams = {
      "{namespaceName}": validateSourceMappingRequest.namespaceName
    };

    const queryParams = {
      "objectLocation": validateSourceMappingRequest.objectLocation,
      "filename": validateSourceMappingRequest.filename,
      "logSourceName": validateSourceMappingRequest.logSourceName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": validateSourceMappingRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateSourceMappingRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/uploads/actions/validateSourceMapping",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateSourceMappingResponse>{},
        body: await response.json(),
        bodyKey: "sourceMappingResponse",
        bodyModel: model.SourceMappingResponse,
        type: "model.SourceMappingResponse",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Verify the accelerated saved search task specified by {scheduledTaskId}.
   * For internal use only.
   * Optionally specify whether to return accelerated search results; the default is false.
   * The ScheduledTask taskType must be ACCELERATION.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param VerifyRequest
   * @return VerifyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/loganalytics/Verify.ts.html |here} to see how to use Verify API.
   */
  public async verify(verifyRequest: requests.VerifyRequest): Promise<responses.VerifyResponse> {
    if (this.logger) this.logger.debug("Calling operation LogAnalyticsClient#verify.");
    const pathParams = {
      "{namespaceName}": verifyRequest.namespaceName,
      "{scheduledTaskId}": verifyRequest.scheduledTaskId
    };

    const queryParams = {
      "shouldIncludeResults": verifyRequest.shouldIncludeResults
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": verifyRequest.opcRequestId,
      "opc-retry-token": verifyRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      verifyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}/actions/verify",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.VerifyResponse>{},
        body: await response.json(),
        bodyKey: "verifyOutput",
        bodyModel: model.VerifyOutput,
        type: "model.VerifyOutput",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

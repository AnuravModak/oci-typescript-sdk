/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * LogAnalyticsSourceFunction
 */
export interface LogAnalyticsSourceFunction {
  /**
   * argument
   */
  "arguments"?: Array<model.LogAnalyticsMetaFunctionArgument>;
  /**
   * enabled flag
   */
  "isEnabled"?: boolean;
  "function"?: model.LogAnalyticsMetaFunction;
  /**
   * source function Id
   */
  "functionId"?: number;
  /**
   * source function order
   */
  "order"?: number;
  /**
   * is system flag
   */
  "isSystem"?: boolean;
  /**
   * column
   */
  "lookupColumn"?: string;
  /**
   * column position
   */
  "lookupColumnPosition"?: number;
  /**
   * lookup display name
   */
  "lookupDisplayName"?: string;
  /**
   * lookup mode
   */
  "lookupMode"?: number;
  /**
   * lookup table
   */
  "lookupTable"?: string;
  /**
   * source Id
   */
  "sourceId"?: number;
}

export namespace LogAnalyticsSourceFunction {
  export function getJsonObj(obj: LogAnalyticsSourceFunction): object {
    const jsonObj = {
      ...obj,
      ...{
        "arguments": obj.arguments
          ? obj.arguments.map(item => {
              return model.LogAnalyticsMetaFunctionArgument.getJsonObj(item);
            })
          : undefined,

        "function": obj.function
          ? model.LogAnalyticsMetaFunction.getJsonObj(obj.function)
          : undefined
      }
    };

    return jsonObj;
  }
}

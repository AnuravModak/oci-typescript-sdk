/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * LogAnalyticsSourcePattern
 */
export interface LogAnalyticsSourcePattern {
  /**
   * converted text
   */
  "convertedText"?: string;
  /**
   * parser Id
   */
  "dbParserId"?: number;
  /**
   * date time columns
   */
  "dbPatternDateTimeColumns"?: string;
  /**
   * date time field
   */
  "dbPatternDateTimeField"?: string;
  /**
   * sequence column
   */
  "dbPatternSequenceColumn"?: string;
  /**
   * field list
   */
  "fields"?: Array<model.LogAnalyticsParserField>;
  /**
   * is include flag
   */
  "isInclude"?: boolean;
  /**
   * is default flag
   */
  "isDefault"?: boolean;
  "patternFilter"?: model.LogAnalyticsPatternFilter;
  /**
   * alias
   */
  "alias"?: string;
  /**
   * description
   */
  "description"?: string;
  /**
   * is enabled flag
   */
  "isEnabled"?: boolean;
  /**
   * pattern Id
   */
  "patternId"?: number;
  /**
   * is system flag
   */
  "isSystem"?: boolean;
  /**
   * source Id
   */
  "sourceId"?: number;
  /**
   * suppress agent warning
   */
  "isAgentWarningSuppressed"?: boolean;
  /**
   * pattern text
   */
  "patternText"?: string;
  /**
   * pattern type
   */
  "patternType"?: number;
  /**
   * source entity types
   */
  "entityType"?: Array<string>;
}

export namespace LogAnalyticsSourcePattern {
  export function getJsonObj(obj: LogAnalyticsSourcePattern): object {
    const jsonObj = {
      ...obj,
      ...{
        "fields": obj.fields
          ? obj.fields.map(item => {
              return model.LogAnalyticsParserField.getJsonObj(item);
            })
          : undefined,

        "patternFilter": obj.patternFilter
          ? model.LogAnalyticsPatternFilter.getJsonObj(obj.patternFilter)
          : undefined
      }
    };

    return jsonObj;
  }
}

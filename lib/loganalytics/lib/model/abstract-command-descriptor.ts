/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Generic command descriptor defining all attributes common to all querylanguage commands for parse output.
 *
 */
export interface AbstractCommandDescriptor {
  /**
   * Command fragment display string from user specified query string formatted by query builder.
   *
   */
  "displayQueryString": string;
  /**
   * Command fragment internal string from user specified query string formatted by query builder.
   *
   */
  "internalQueryString": string;
  /**
   * querylanguage command designation for example; reporting vs filtering
   *
   */
  "category"?: string;
  /**
   * Fields referenced in command fragment from user specified query string.
   *
   */
  "referencedFields"?: Array<model.AbstractField>;
  /**
   * Fields declared in command fragment from user specified query string.
   *
   */
  "declaredFields"?: Array<model.AbstractField>;

  "name": string;
}

export namespace AbstractCommandDescriptor {
  export function getJsonObj(obj: AbstractCommandDescriptor): object {
    const jsonObj = {
      ...obj,
      ...{
        "referencedFields": obj.referencedFields
          ? obj.referencedFields.map(item => {
              return model.AbstractField.getJsonObj(item);
            })
          : undefined,
        "declaredFields": obj.declaredFields
          ? obj.declaredFields.map(item => {
              return model.AbstractField.getJsonObj(item);
            })
          : undefined
      }
    };

    if ("name" in obj && obj.name) {
      switch (obj.name) {
        case "TOP":
          return model.TopCommandDescriptor.getJsonObj(
            <model.TopCommandDescriptor>(<object>jsonObj),
            true
          );
        case "HIGHLIGHT":
          return model.HighlightCommandDescriptor.getJsonObj(
            <model.HighlightCommandDescriptor>(<object>jsonObj),
            true
          );
        case "MULTI_SEARCH":
          return model.MultiSearchCommandDescriptor.getJsonObj(
            <model.MultiSearchCommandDescriptor>(<object>jsonObj),
            true
          );
        case "STATS":
          return model.StatsCommandDescriptor.getJsonObj(
            <model.StatsCommandDescriptor>(<object>jsonObj),
            true
          );
        case "TIME_COMPARE":
          return model.TimeCompareCommandDescriptor.getJsonObj(
            <model.TimeCompareCommandDescriptor>(<object>jsonObj),
            true
          );
        case "TAIL":
          return model.TailCommandDescriptor.getJsonObj(
            <model.TailCommandDescriptor>(<object>jsonObj),
            true
          );
        case "REGEX":
          return model.RegexCommandDescriptor.getJsonObj(
            <model.RegexCommandDescriptor>(<object>jsonObj),
            true
          );
        case "DELTA":
          return model.DeltaCommandDescriptor.getJsonObj(
            <model.DeltaCommandDescriptor>(<object>jsonObj),
            true
          );
        case "LOOKUP":
          return model.LookupCommandDescriptor.getJsonObj(
            <model.LookupCommandDescriptor>(<object>jsonObj),
            true
          );
        case "DEMO_MODE":
          return model.DemoModeCommandDescriptor.getJsonObj(
            <model.DemoModeCommandDescriptor>(<object>jsonObj),
            true
          );
        case "FIELD_SUMMARY":
          return model.FieldSummaryCommandDescriptor.getJsonObj(
            <model.FieldSummaryCommandDescriptor>(<object>jsonObj),
            true
          );
        case "EVENT_STATS":
          return model.EventStatsCommandDescriptor.getJsonObj(
            <model.EventStatsCommandDescriptor>(<object>jsonObj),
            true
          );
        case "WHERE":
          return model.WhereCommandDescriptor.getJsonObj(
            <model.WhereCommandDescriptor>(<object>jsonObj),
            true
          );
        case "CLUSTER_SPLIT":
          return model.ClusterSplitCommandDescriptor.getJsonObj(
            <model.ClusterSplitCommandDescriptor>(<object>jsonObj),
            true
          );
        case "TIME_STATS":
          return model.TimeStatsCommandDescriptor.getJsonObj(
            <model.TimeStatsCommandDescriptor>(<object>jsonObj),
            true
          );
        case "CLUSTER":
          return model.ClusterCommandDescriptor.getJsonObj(
            <model.ClusterCommandDescriptor>(<object>jsonObj),
            true
          );
        case "CLUSTER_DETAILS":
          return model.ClusterDetailsCommandDescriptor.getJsonObj(
            <model.ClusterDetailsCommandDescriptor>(<object>jsonObj),
            true
          );
        case "DELETE":
          return model.DeleteCommandDescriptor.getJsonObj(
            <model.DeleteCommandDescriptor>(<object>jsonObj),
            true
          );
        case "CLUSTER_COMPARE":
          return model.ClusterCompareCommandDescriptor.getJsonObj(
            <model.ClusterCompareCommandDescriptor>(<object>jsonObj),
            true
          );
        case "SEARCH":
          return model.SearchCommandDescriptor.getJsonObj(
            <model.SearchCommandDescriptor>(<object>jsonObj),
            true
          );
        case "BUCKET":
          return model.BucketCommandDescriptor.getJsonObj(
            <model.BucketCommandDescriptor>(<object>jsonObj),
            true
          );
        case "COMMAND":
          return model.CommandDescriptor.getJsonObj(
            <model.CommandDescriptor>(<object>jsonObj),
            true
          );
        case "DISTINCT":
          return model.DistinctCommandDescriptor.getJsonObj(
            <model.DistinctCommandDescriptor>(<object>jsonObj),
            true
          );
        case "LINK":
          return model.LinkCommandDescriptor.getJsonObj(
            <model.LinkCommandDescriptor>(<object>jsonObj),
            true
          );
        case "SORT":
          return model.SortCommandDescriptor.getJsonObj(
            <model.SortCommandDescriptor>(<object>jsonObj),
            true
          );
        case "EXTRACT":
          return model.ExtractCommandDescriptor.getJsonObj(
            <model.ExtractCommandDescriptor>(<object>jsonObj),
            true
          );
        case "BOTTOM":
          return model.BottomCommandDescriptor.getJsonObj(
            <model.BottomCommandDescriptor>(<object>jsonObj),
            true
          );
        case "FIELDS":
          return model.FieldsCommandDescriptor.getJsonObj(
            <model.FieldsCommandDescriptor>(<object>jsonObj),
            true
          );
        case "HIGHLIGHT_ROWS":
          return model.HighlightRowsCommandDescriptor.getJsonObj(
            <model.HighlightRowsCommandDescriptor>(<object>jsonObj),
            true
          );
        case "MACRO":
          return model.MacroCommandDescriptor.getJsonObj(
            <model.MacroCommandDescriptor>(<object>jsonObj),
            true
          );
        case "CLASSIFY":
          return model.ClassifyCommandDescriptor.getJsonObj(
            <model.ClassifyCommandDescriptor>(<object>jsonObj),
            true
          );
        case "LINK_DETAILS":
          return model.LinkDetailsCommandDescriptor.getJsonObj(
            <model.LinkDetailsCommandDescriptor>(<object>jsonObj),
            true
          );
        case "SEARCH_LOOKUP":
          return model.SearchLookupCommandDescriptor.getJsonObj(
            <model.SearchLookupCommandDescriptor>(<object>jsonObj),
            true
          );
        case "HEAD":
          return model.HeadCommandDescriptor.getJsonObj(
            <model.HeadCommandDescriptor>(<object>jsonObj),
            true
          );
        case "ADD_FIELDS":
          return model.AddFieldsCommandDescriptor.getJsonObj(
            <model.AddFieldsCommandDescriptor>(<object>jsonObj),
            true
          );
        case "EVAL":
          return model.EvalCommandDescriptor.getJsonObj(
            <model.EvalCommandDescriptor>(<object>jsonObj),
            true
          );
        case "RENAME":
          return model.RenameCommandDescriptor.getJsonObj(
            <model.RenameCommandDescriptor>(<object>jsonObj),
            true
          );
        default:
          throw Error("Unknown value for: " + obj.name);
      }
    }
    return jsonObj;
  }
}

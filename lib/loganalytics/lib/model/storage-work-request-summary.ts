/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Storage work request summary for list operation.
 *
 */
export interface StorageWorkRequestSummary {
  /**
   * Unique OCID identifier to reference this storage work Request with.
   *
   */
  "id": string;
  /**
   * Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
   */
  "compartmentId": string;
  /**
   * When the work request started.
   */
  "timeStarted"?: Date;
  /**
   * When the work request was accepted. Should match timeStarted in all cases.
   *
   */
  "timeAccepted"?: Date;
  /**
   * When the work request finished execution.
   */
  "timeFinished"?: Date;
  /**
   * When the work request will expire.
   */
  "timeExpires"?: Date;
  /**
   * Percentage progress completion of the work request.
   *
   */
  "percentComplete"?: number;
  /**
   * Work request status.
   *
   */
  "status": model.WorkRequestStatus;
  /**
   * the start of the time interval
   */
  "timeDataStarted"?: Date;
  /**
   * the end of the time interval
   */
  "timeDataEnded": Date;
  /**
   * the solr data filter query, '*' means all
   */
  "purgeQueryString"?: string;
  /**
   * the type of the log data to be purged
   */
  "dataType": model.StorageDataType;
  /**
   * more detailed status if applicable
   */
  "statusDetails"?: string;
  /**
   * more detailed info about this operation if applicable
   */
  "operationDetails"?: string;
  /**
   * policy name if applicable (e.g. purge policy)
   */
  "policyName"?: string;
  /**
   * purge policy ID
   */
  "policyId"?: string;
  /**
   * storage usage in bytes if applicable
   */
  "storageUsageInBytes"?: number;
  /**
   * if true, purge child compartments data, only applicable to purge request
   */
  "compartmentIdInSubtree"?: boolean;
  /**
   * Asynchronous storage request name.
   *
   */
  "operationType": model.StorageOperationType;
}

export namespace StorageWorkRequestSummary {
  export function getJsonObj(obj: StorageWorkRequestSummary): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}

/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * UpsertLogAnalyticsParserDetails
 */
export interface UpsertLogAnalyticsParserDetails {
  /**
   * content
   */
  "content"?: string;
  /**
   * description
   */
  "description"?: string;
  /**
   * display name
   */
  "displayName"?: string;
  /**
   * edit version Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "editVersion"?: number;
  /**
   * encoding
   */
  "encoding"?: string;
  /**
   * example content
   */
  "exampleContent"?: string;
  /**
   * fields Maps
   */
  "fieldMaps"?: Array<model.LogAnalyticsParserField>;
  /**
   * footer regular expression
   */
  "footerContent"?: string;
  /**
   * header content
   */
  "headerContent"?: string;
  /**
   * Name
   */
  "name"?: string;
  /**
   * is default flag
   */
  "isDefault"?: boolean;
  /**
   * is single line content
   */
  "isSingleLineContent"?: boolean;
  /**
   * is system flag
   */
  "isSystem"?: boolean;
  /**
   * language
   */
  "language"?: string;
  /**
   * log type test request version Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "logTypeTestRequestVersion"?: number;
  /**
   * parser ignore line characters
   */
  "parserIgnorelineCharacters"?: string;
  /**
   * sequence Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "parserSequence"?: number;
  /**
   * time zone
   */
  "parserTimezone"?: string;
  /**
   * write once
   */
  "isParserWrittenOnce"?: boolean;
  /**
   * plugin instance list
   */
  "parserFunctions"?: Array<model.LogAnalyticsParserFunction>;
  /**
   * tokenize original text
   */
  "shouldTokenizeOriginalText"?: boolean;
  /**
   * type
   */
  "type"?: UpsertLogAnalyticsParserDetails.Type;
}

export namespace UpsertLogAnalyticsParserDetails {
  export enum Type {
    Xml = "XML",
    Json = "JSON",
    Regex = "REGEX",
    Odl = "ODL"
  }

  export function getJsonObj(obj: UpsertLogAnalyticsParserDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "fieldMaps": obj.fieldMaps
          ? obj.fieldMaps.map(item => {
              return model.LogAnalyticsParserField.getJsonObj(item);
            })
          : undefined,

        "parserFunctions": obj.parserFunctions
          ? obj.parserFunctions.map(item => {
              return model.LogAnalyticsParserFunction.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}

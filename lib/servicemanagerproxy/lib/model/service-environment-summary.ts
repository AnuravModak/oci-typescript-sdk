/**
 * Service Manager Proxy API
 * API to manage Service manager proxy.
 * OpenAPI spec version: 20210914
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Model describing service environment details.
 */
export interface ServiceEnvironmentSummary {
  /**
   * Unqiue identifier for the entitlement related to the environment.
   *
   */
  "id": string;
  /**
   * The subscription Id corresponding to the service environment Id.
   *
   */
  "subscriptionId": string;
  /**
   * Status of the entitlement registration for the service.
   */
  "status": model.ServiceEntitlementRegistrationStatus;
  /**
   * Compartment Id associated with the service.
   */
  "compartmentId": string;
  "serviceDefinition": model.ServiceDefinition;
  /**
   * The URL for the console.
   */
  "consoleUrl"?: string;
  /**
   * Array of service environment end points.
   */
  "serviceEnvironmentEndpoints"?: Array<model.ServiceEnvironmentEndPointOverview>;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: `{\"bar-key\": \"value\"}`
   *
   */
  "freeformTags"?: { [key: string]: string };
}

export namespace ServiceEnvironmentSummary {
  export function getJsonObj(obj: ServiceEnvironmentSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "serviceDefinition": obj.serviceDefinition
          ? model.ServiceDefinition.getJsonObj(obj.serviceDefinition)
          : undefined,

        "serviceEnvironmentEndpoints": obj.serviceEnvironmentEndpoints
          ? obj.serviceEnvironmentEndpoints.map(item => {
              return model.ServiceEnvironmentEndPointOverview.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ServiceEnvironmentSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "serviceDefinition": obj.serviceDefinition
          ? model.ServiceDefinition.getDeserializedJsonObj(obj.serviceDefinition)
          : undefined,

        "serviceEnvironmentEndpoints": obj.serviceEnvironmentEndpoints
          ? obj.serviceEnvironmentEndpoints.map(item => {
              return model.ServiceEnvironmentEndPointOverview.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}

/**
 * DNS API
 * API for the DNS service. Use this API to manage DNS zones, records, and other DNS resources.
For more information, see [Overview of the DNS Service](/iaas/Content/DNS/Concepts/dnszonemanagement.htm).

 * OpenAPI spec version: 20180115
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import {
  paginateRecords,
  paginateResponses,
  genericPaginateRecords,
  genericPaginateResponses
} from "oci-common";
import { DnsWaiter } from "./dns-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DnsApiKeys {}

export class DnsClient {
  protected static serviceEndpointTemplate = "https://dns.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DnsWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20180115";
    if (this.logger) this.logger.info(`DnsClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DnsClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DnsClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new DnsWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DnsWaiter {
    this._waiters = new DnsWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DnsWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Moves a resolver into a different compartment along with its protected default view and any endpoints.
   * Zones in the default view are not moved. Requires a `PRIVATE` scope query parameter.
   *
   * @param ChangeResolverCompartmentRequest
   * @return ChangeResolverCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ChangeResolverCompartment.ts.html |here} to see how to use ChangeResolverCompartment API.
   */
  public async changeResolverCompartment(
    changeResolverCompartmentRequest: requests.ChangeResolverCompartmentRequest
  ): Promise<responses.ChangeResolverCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#changeResolverCompartment.");
    const pathParams = {
      "{resolverId}": changeResolverCompartmentRequest.resolverId
    };

    const queryParams = {
      "scope": changeResolverCompartmentRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": changeResolverCompartmentRequest.ifMatch,
      "opc-retry-token": changeResolverCompartmentRequest.opcRetryToken,
      "opc-request-id": changeResolverCompartmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeResolverCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resolvers/{resolverId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeResolverCompartmentRequest.changeResolverCompartmentDetails,
        "ChangeResolverCompartmentDetails",
        model.ChangeResolverCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeResolverCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a steering policy into a different compartment.
   *
   * @param ChangeSteeringPolicyCompartmentRequest
   * @return ChangeSteeringPolicyCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ChangeSteeringPolicyCompartment.ts.html |here} to see how to use ChangeSteeringPolicyCompartment API.
   */
  public async changeSteeringPolicyCompartment(
    changeSteeringPolicyCompartmentRequest: requests.ChangeSteeringPolicyCompartmentRequest
  ): Promise<responses.ChangeSteeringPolicyCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DnsClient#changeSteeringPolicyCompartment.");
    const pathParams = {
      "{steeringPolicyId}": changeSteeringPolicyCompartmentRequest.steeringPolicyId
    };

    const queryParams = {
      "scope": changeSteeringPolicyCompartmentRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": changeSteeringPolicyCompartmentRequest.ifMatch,
      "opc-retry-token": changeSteeringPolicyCompartmentRequest.opcRetryToken,
      "opc-request-id": changeSteeringPolicyCompartmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeSteeringPolicyCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/steeringPolicies/{steeringPolicyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeSteeringPolicyCompartmentRequest.changeSteeringPolicyCompartmentDetails,
        "ChangeSteeringPolicyCompartmentDetails",
        model.ChangeSteeringPolicyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeSteeringPolicyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a TSIG key into a different compartment.
   *
   * @param ChangeTsigKeyCompartmentRequest
   * @return ChangeTsigKeyCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ChangeTsigKeyCompartment.ts.html |here} to see how to use ChangeTsigKeyCompartment API.
   */
  public async changeTsigKeyCompartment(
    changeTsigKeyCompartmentRequest: requests.ChangeTsigKeyCompartmentRequest
  ): Promise<responses.ChangeTsigKeyCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#changeTsigKeyCompartment.");
    const pathParams = {
      "{tsigKeyId}": changeTsigKeyCompartmentRequest.tsigKeyId
    };

    const queryParams = {
      "scope": changeTsigKeyCompartmentRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": changeTsigKeyCompartmentRequest.ifMatch,
      "opc-retry-token": changeTsigKeyCompartmentRequest.opcRetryToken,
      "opc-request-id": changeTsigKeyCompartmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeTsigKeyCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/tsigKeys/{tsigKeyId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeTsigKeyCompartmentRequest.changeTsigKeyCompartmentDetails,
        "ChangeTsigKeyCompartmentDetails",
        model.ChangeTsigKeyCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeTsigKeyCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a view into a different compartment. Protected views cannot have their compartment changed. Requires a
   * `PRIVATE` scope query parameter.
   *
   * @param ChangeViewCompartmentRequest
   * @return ChangeViewCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ChangeViewCompartment.ts.html |here} to see how to use ChangeViewCompartment API.
   */
  public async changeViewCompartment(
    changeViewCompartmentRequest: requests.ChangeViewCompartmentRequest
  ): Promise<responses.ChangeViewCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#changeViewCompartment.");
    const pathParams = {
      "{viewId}": changeViewCompartmentRequest.viewId
    };

    const queryParams = {
      "scope": changeViewCompartmentRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": changeViewCompartmentRequest.ifMatch,
      "opc-retry-token": changeViewCompartmentRequest.opcRetryToken,
      "opc-request-id": changeViewCompartmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeViewCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/views/{viewId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeViewCompartmentRequest.changeViewCompartmentDetails,
        "ChangeViewCompartmentDetails",
        model.ChangeViewCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeViewCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a zone into a different compartment. Protected zones cannot have their compartment changed. For private
   * zones, the scope query parameter is required with a value of `PRIVATE`. When the zone name is provided as a
   * path parameter and `PRIVATE` is used for the scope query parameter then the viewId query parameter is required.
   * <p>
   **Note:** All SteeringPolicyAttachment objects associated with this zone will also be moved into the provided compartment.
   *
   * @param ChangeZoneCompartmentRequest
   * @return ChangeZoneCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ChangeZoneCompartment.ts.html |here} to see how to use ChangeZoneCompartment API.
   */
  public async changeZoneCompartment(
    changeZoneCompartmentRequest: requests.ChangeZoneCompartmentRequest
  ): Promise<responses.ChangeZoneCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#changeZoneCompartment.");
    const pathParams = {
      "{zoneId}": changeZoneCompartmentRequest.zoneId
    };

    const queryParams = {
      "scope": changeZoneCompartmentRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": changeZoneCompartmentRequest.ifMatch,
      "opc-retry-token": changeZoneCompartmentRequest.opcRetryToken,
      "opc-request-id": changeZoneCompartmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeZoneCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeZoneCompartmentRequest.changeZoneCompartmentDetails,
        "ChangeZoneCompartmentDetails",
        model.ChangeZoneCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeZoneCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new resolver endpoint. Requires a `PRIVATE` scope query parameter.
   *
   * @param CreateResolverEndpointRequest
   * @return CreateResolverEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateResolverEndpoint.ts.html |here} to see how to use CreateResolverEndpoint API.
   */
  public async createResolverEndpoint(
    createResolverEndpointRequest: requests.CreateResolverEndpointRequest
  ): Promise<responses.CreateResolverEndpointResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#createResolverEndpoint.");
    const pathParams = {
      "{resolverId}": createResolverEndpointRequest.resolverId
    };

    const queryParams = {
      "scope": createResolverEndpointRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createResolverEndpointRequest.opcRetryToken,
      "opc-request-id": createResolverEndpointRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createResolverEndpointRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resolvers/{resolverId}/endpoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createResolverEndpointRequest.createResolverEndpointDetails,
        "CreateResolverEndpointDetails",
        model.CreateResolverEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateResolverEndpointResponse>{},
        body: await response.json(),
        bodyKey: "resolverEndpoint",
        bodyModel: model.ResolverEndpoint,
        type: "model.ResolverEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new steering policy in the specified compartment. For more information on
   * creating policies with templates, see [Traffic Management API Guide](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
   *
   * @param CreateSteeringPolicyRequest
   * @return CreateSteeringPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateSteeringPolicy.ts.html |here} to see how to use CreateSteeringPolicy API.
   */
  public async createSteeringPolicy(
    createSteeringPolicyRequest: requests.CreateSteeringPolicyRequest
  ): Promise<responses.CreateSteeringPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#createSteeringPolicy.");
    const pathParams = {};

    const queryParams = {
      "scope": createSteeringPolicyRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSteeringPolicyRequest.opcRetryToken,
      "opc-request-id": createSteeringPolicyRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createSteeringPolicyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/steeringPolicies",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSteeringPolicyRequest.createSteeringPolicyDetails,
        "CreateSteeringPolicyDetails",
        model.CreateSteeringPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSteeringPolicyResponse>{},
        body: await response.json(),
        bodyKey: "steeringPolicy",
        bodyModel: model.SteeringPolicy,
        type: "model.SteeringPolicy",
        responseHeaders: [
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new attachment between a steering policy and a domain, giving the
* policy permission to answer queries for the specified domain. A steering policy must
* be attached to a domain for the policy to answer DNS queries for that domain.
* <p>
For the purposes of access control, the attachment is automatically placed
* into the same compartment as the domain's zone.
* 
     * @param CreateSteeringPolicyAttachmentRequest
     * @return CreateSteeringPolicyAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateSteeringPolicyAttachment.ts.html |here} to see how to use CreateSteeringPolicyAttachment API.
     */
  public async createSteeringPolicyAttachment(
    createSteeringPolicyAttachmentRequest: requests.CreateSteeringPolicyAttachmentRequest
  ): Promise<responses.CreateSteeringPolicyAttachmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DnsClient#createSteeringPolicyAttachment.");
    const pathParams = {};

    const queryParams = {
      "scope": createSteeringPolicyAttachmentRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createSteeringPolicyAttachmentRequest.opcRetryToken,
      "opc-request-id": createSteeringPolicyAttachmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createSteeringPolicyAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/steeringPolicyAttachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSteeringPolicyAttachmentRequest.createSteeringPolicyAttachmentDetails,
        "CreateSteeringPolicyAttachmentDetails",
        model.CreateSteeringPolicyAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSteeringPolicyAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "steeringPolicyAttachment",
        bodyModel: model.SteeringPolicyAttachment,
        type: "model.SteeringPolicyAttachment",
        responseHeaders: [
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new TSIG key in the specified compartment. There is no
   * `opc-retry-token` header since TSIG key names must be globally unique.
   *
   * @param CreateTsigKeyRequest
   * @return CreateTsigKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateTsigKey.ts.html |here} to see how to use CreateTsigKey API.
   */
  public async createTsigKey(
    createTsigKeyRequest: requests.CreateTsigKeyRequest
  ): Promise<responses.CreateTsigKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#createTsigKey.");
    const pathParams = {};

    const queryParams = {
      "scope": createTsigKeyRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createTsigKeyRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createTsigKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/tsigKeys",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTsigKeyRequest.createTsigKeyDetails,
        "CreateTsigKeyDetails",
        model.CreateTsigKeyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTsigKeyResponse>{},
        body: await response.json(),
        bodyKey: "tsigKey",
        bodyModel: model.TsigKey,
        type: "model.TsigKey",
        responseHeaders: [
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new view in the specified compartment. Requires a `PRIVATE` scope query parameter.
   *
   * @param CreateViewRequest
   * @return CreateViewResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateView.ts.html |here} to see how to use CreateView API.
   */
  public async createView(
    createViewRequest: requests.CreateViewRequest
  ): Promise<responses.CreateViewResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#createView.");
    const pathParams = {};

    const queryParams = {
      "scope": createViewRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createViewRequest.opcRetryToken,
      "opc-request-id": createViewRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createViewRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/views",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createViewRequest.createViewDetails,
        "CreateViewDetails",
        model.CreateViewDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateViewResponse>{},
        body: await response.json(),
        bodyKey: "view",
        bodyModel: model.View,
        type: "model.View",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new zone in the specified compartment. For global zones, if the `Content-Type` header for the request
   * is `text/dns`, the `compartmentId` query parameter is required. `text/dns` for the `Content-Type` header is
   * not supported for private zones. Query parameter scope with a value of `PRIVATE` is required when creating a
   * private zone. Private zones must have a zone type of `PRIMARY`. Creating a private zone at or under
   * `oraclevcn.com` within the default protected view of a VCN-dedicated resolver is not permitted.
   *
   * @param CreateZoneRequest
   * @return CreateZoneResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateZone.ts.html |here} to see how to use CreateZone API.
   */
  public async createZone(
    createZoneRequest: requests.CreateZoneRequest
  ): Promise<responses.CreateZoneResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#createZone.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": createZoneRequest.compartmentId,
      "scope": createZoneRequest.scope,
      "viewId": createZoneRequest.viewId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createZoneRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createZoneRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createZoneRequest.createZoneDetails,
        "CreateZoneBaseDetails",
        model.CreateZoneBaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateZoneResponse>{},
        body: await response.json(),
        bodyKey: "zone",
        bodyModel: model.Zone,
        type: "model.Zone",
        responseHeaders: [
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes all records at the specified zone and domain. For private zones, the scope query parameter is
   * required with a value of `PRIVATE`. When the zone name is provided as a path parameter and `PRIVATE` is used
   * for the scope query parameter then the viewId query parameter is required.
   *
   * @param DeleteDomainRecordsRequest
   * @return DeleteDomainRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteDomainRecords.ts.html |here} to see how to use DeleteDomainRecords API.
   */
  public async deleteDomainRecords(
    deleteDomainRecordsRequest: requests.DeleteDomainRecordsRequest
  ): Promise<responses.DeleteDomainRecordsResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#deleteDomainRecords.");
    const pathParams = {
      "{zoneNameOrId}": deleteDomainRecordsRequest.zoneNameOrId,
      "{domain}": deleteDomainRecordsRequest.domain
    };

    const queryParams = {
      "scope": deleteDomainRecordsRequest.scope,
      "viewId": deleteDomainRecordsRequest.viewId,
      "compartmentId": deleteDomainRecordsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": deleteDomainRecordsRequest.ifMatch,
      "If-Unmodified-Since": deleteDomainRecordsRequest.ifUnmodifiedSince,
      "opc-request-id": deleteDomainRecordsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteDomainRecordsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/records/{domain}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDomainRecordsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes all records in the specified RRSet. For private zones, the scope query parameter is required with a
   * value of `PRIVATE`. When the zone name is provided as a path parameter and `PRIVATE` is used for the scope
   * query parameter then the viewId query parameter is required.
   *
   * @param DeleteRRSetRequest
   * @return DeleteRRSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteRRSet.ts.html |here} to see how to use DeleteRRSet API.
   */
  public async deleteRRSet(
    deleteRRSetRequest: requests.DeleteRRSetRequest
  ): Promise<responses.DeleteRRSetResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#deleteRRSet.");
    const pathParams = {
      "{zoneNameOrId}": deleteRRSetRequest.zoneNameOrId,
      "{domain}": deleteRRSetRequest.domain,
      "{rtype}": deleteRRSetRequest.rtype
    };

    const queryParams = {
      "compartmentId": deleteRRSetRequest.compartmentId,
      "scope": deleteRRSetRequest.scope,
      "viewId": deleteRRSetRequest.viewId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": deleteRRSetRequest.ifMatch,
      "If-Unmodified-Since": deleteRRSetRequest.ifUnmodifiedSince,
      "opc-request-id": deleteRRSetRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteRRSetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/records/{domain}/{rtype}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRRSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified resolver endpoint. Note that attempting to delete a resolver endpoint in the
   * DELETED lifecycle state will result in a `404` response to be consistent with other operations of the API.
   * Resolver endpoints may not be deleted if they are referenced by a resolver rule. Requires a `PRIVATE` scope
   * query parameter.
   *
   * @param DeleteResolverEndpointRequest
   * @return DeleteResolverEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteResolverEndpoint.ts.html |here} to see how to use DeleteResolverEndpoint API.
   */
  public async deleteResolverEndpoint(
    deleteResolverEndpointRequest: requests.DeleteResolverEndpointRequest
  ): Promise<responses.DeleteResolverEndpointResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#deleteResolverEndpoint.");
    const pathParams = {
      "{resolverId}": deleteResolverEndpointRequest.resolverId,
      "{resolverEndpointName}": deleteResolverEndpointRequest.resolverEndpointName
    };

    const queryParams = {
      "scope": deleteResolverEndpointRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": deleteResolverEndpointRequest.ifMatch,
      "If-Unmodified-Since": deleteResolverEndpointRequest.ifUnmodifiedSince,
      "opc-request-id": deleteResolverEndpointRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteResolverEndpointRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resolvers/{resolverId}/endpoints/{resolverEndpointName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteResolverEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified steering policy.
   * A `204` response indicates that the delete has been successful.
   * Deletion will fail if the policy is attached to any zones. To detach a
   * policy from a zone, see `DeleteSteeringPolicyAttachment`.
   *
   * @param DeleteSteeringPolicyRequest
   * @return DeleteSteeringPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteSteeringPolicy.ts.html |here} to see how to use DeleteSteeringPolicy API.
   */
  public async deleteSteeringPolicy(
    deleteSteeringPolicyRequest: requests.DeleteSteeringPolicyRequest
  ): Promise<responses.DeleteSteeringPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#deleteSteeringPolicy.");
    const pathParams = {
      "{steeringPolicyId}": deleteSteeringPolicyRequest.steeringPolicyId
    };

    const queryParams = {
      "scope": deleteSteeringPolicyRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": deleteSteeringPolicyRequest.ifMatch,
      "If-Unmodified-Since": deleteSteeringPolicyRequest.ifUnmodifiedSince,
      "opc-request-id": deleteSteeringPolicyRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteSteeringPolicyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/steeringPolicies/{steeringPolicyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSteeringPolicyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified steering policy attachment.
   * A `204` response indicates that the delete has been successful.
   *
   * @param DeleteSteeringPolicyAttachmentRequest
   * @return DeleteSteeringPolicyAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteSteeringPolicyAttachment.ts.html |here} to see how to use DeleteSteeringPolicyAttachment API.
   */
  public async deleteSteeringPolicyAttachment(
    deleteSteeringPolicyAttachmentRequest: requests.DeleteSteeringPolicyAttachmentRequest
  ): Promise<responses.DeleteSteeringPolicyAttachmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DnsClient#deleteSteeringPolicyAttachment.");
    const pathParams = {
      "{steeringPolicyAttachmentId}":
        deleteSteeringPolicyAttachmentRequest.steeringPolicyAttachmentId
    };

    const queryParams = {
      "scope": deleteSteeringPolicyAttachmentRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": deleteSteeringPolicyAttachmentRequest.ifMatch,
      "If-Unmodified-Since": deleteSteeringPolicyAttachmentRequest.ifUnmodifiedSince,
      "opc-request-id": deleteSteeringPolicyAttachmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteSteeringPolicyAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/steeringPolicyAttachments/{steeringPolicyAttachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSteeringPolicyAttachmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified TSIG key.
   *
   * @param DeleteTsigKeyRequest
   * @return DeleteTsigKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteTsigKey.ts.html |here} to see how to use DeleteTsigKey API.
   */
  public async deleteTsigKey(
    deleteTsigKeyRequest: requests.DeleteTsigKeyRequest
  ): Promise<responses.DeleteTsigKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#deleteTsigKey.");
    const pathParams = {
      "{tsigKeyId}": deleteTsigKeyRequest.tsigKeyId
    };

    const queryParams = {
      "scope": deleteTsigKeyRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": deleteTsigKeyRequest.ifMatch,
      "If-Unmodified-Since": deleteTsigKeyRequest.ifUnmodifiedSince,
      "opc-request-id": deleteTsigKeyRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteTsigKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/tsigKeys/{tsigKeyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTsigKeyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified view. Note that attempting to delete a
   * view in the DELETED lifecycleState will result in a `404` response to be
   * consistent with other operations of the API. Views cannot be
   * deleted if they are referenced by non-deleted zones or resolvers.
   * Protected views cannot be deleted. Requires a `PRIVATE` scope query parameter.
   *
   * @param DeleteViewRequest
   * @return DeleteViewResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteView.ts.html |here} to see how to use DeleteView API.
   */
  public async deleteView(
    deleteViewRequest: requests.DeleteViewRequest
  ): Promise<responses.DeleteViewResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#deleteView.");
    const pathParams = {
      "{viewId}": deleteViewRequest.viewId
    };

    const queryParams = {
      "scope": deleteViewRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": deleteViewRequest.ifMatch,
      "If-Unmodified-Since": deleteViewRequest.ifUnmodifiedSince,
      "opc-request-id": deleteViewRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteViewRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/views/{viewId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteViewResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified zone and all its steering policy attachments. A `204` response indicates that the zone has
   * been successfully deleted. Protected zones cannot be deleted. For private zones, the scope query parameter is
   * required with a value of `PRIVATE`. When the zone name is provided as a path parameter and `PRIVATE` is used
   * for the scope query parameter then the viewId query parameter is required.
   *
   * @param DeleteZoneRequest
   * @return DeleteZoneResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteZone.ts.html |here} to see how to use DeleteZone API.
   */
  public async deleteZone(
    deleteZoneRequest: requests.DeleteZoneRequest
  ): Promise<responses.DeleteZoneResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#deleteZone.");
    const pathParams = {
      "{zoneNameOrId}": deleteZoneRequest.zoneNameOrId
    };

    const queryParams = {
      "scope": deleteZoneRequest.scope,
      "viewId": deleteZoneRequest.viewId,
      "compartmentId": deleteZoneRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": deleteZoneRequest.ifMatch,
      "If-Unmodified-Since": deleteZoneRequest.ifUnmodifiedSince,
      "opc-request-id": deleteZoneRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteZoneRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteZoneResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a list of all records at the specified zone and domain. The results are sorted by `rtype` in
   * alphabetical order by default. You can optionally filter and/or sort the results using the listed parameters.
   * For private zones, the scope query parameter is required with a value of `PRIVATE`. When the zone name is
   * provided as a path parameter and `PRIVATE` is used for the scope query parameter then the viewId query
   * parameter is required.
   *
   * @param GetDomainRecordsRequest
   * @return GetDomainRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetDomainRecords.ts.html |here} to see how to use GetDomainRecords API.
   */
  public async getDomainRecords(
    getDomainRecordsRequest: requests.GetDomainRecordsRequest
  ): Promise<responses.GetDomainRecordsResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#getDomainRecords.");
    const pathParams = {
      "{zoneNameOrId}": getDomainRecordsRequest.zoneNameOrId,
      "{domain}": getDomainRecordsRequest.domain
    };

    const queryParams = {
      "limit": getDomainRecordsRequest.limit,
      "page": getDomainRecordsRequest.page,
      "zoneVersion": getDomainRecordsRequest.zoneVersion,
      "rtype": getDomainRecordsRequest.rtype,
      "scope": getDomainRecordsRequest.scope,
      "viewId": getDomainRecordsRequest.viewId,
      "sortBy": getDomainRecordsRequest.sortBy,
      "sortOrder": getDomainRecordsRequest.sortOrder,
      "compartmentId": getDomainRecordsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-None-Match": getDomainRecordsRequest.ifNoneMatch,
      "If-Modified-Since": getDomainRecordsRequest.ifModifiedSince,
      "opc-request-id": getDomainRecordsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDomainRecordsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/records/{domain}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDomainRecordsResponse>{},
        body: await response.json(),
        bodyKey: "recordCollection",
        bodyModel: model.RecordCollection,
        type: "model.RecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of getDomainRecordsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Record objects
   * contained in responses from the getDomainRecords operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllDomainRecords(
    request: requests.GetDomainRecordsRequest
  ): AsyncIterableIterator<model.Record> {
    return genericPaginateRecords(
      request,
      req => this.getDomainRecords(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken),
      res => res.recordCollection.items || []
    );
  }

  /**
   * NOTE: This function is deprecated in favor of getDomainRecordsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the getDomainRecords operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllDomainRecordsResponses(
    request: requests.GetDomainRecordsRequest
  ): AsyncIterableIterator<responses.GetDomainRecordsResponse> {
    return genericPaginateResponses(
      request,
      req => this.getDomainRecords(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the models.Record objects
   * contained in responses from the getDomainRecords operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getDomainRecordsRecordIterator(
    request: requests.GetDomainRecordsRequest
  ): AsyncIterableIterator<model.Record> {
    return genericPaginateRecords(
      request,
      req => this.getDomainRecords(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken),
      res => res.recordCollection.items || []
    );
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the getDomainRecords operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getDomainRecordsResponseIterator(
    request: requests.GetDomainRecordsRequest
  ): AsyncIterableIterator<responses.GetDomainRecordsResponse> {
    return genericPaginateResponses(
      request,
      req => this.getDomainRecords(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken)
    );
  }

  /**
   * Gets a list of all records in the specified RRSet. The results are sorted by `recordHash` by default. For
   * private zones, the scope query parameter is required with a value of `PRIVATE`. When the zone name is
   * provided as a path parameter and `PRIVATE` is used for the scope query parameter then the viewId query
   * parameter is required.
   *
   * @param GetRRSetRequest
   * @return GetRRSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetRRSet.ts.html |here} to see how to use GetRRSet API.
   */
  public async getRRSet(
    getRRSetRequest: requests.GetRRSetRequest
  ): Promise<responses.GetRRSetResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#getRRSet.");
    const pathParams = {
      "{zoneNameOrId}": getRRSetRequest.zoneNameOrId,
      "{domain}": getRRSetRequest.domain,
      "{rtype}": getRRSetRequest.rtype
    };

    const queryParams = {
      "limit": getRRSetRequest.limit,
      "page": getRRSetRequest.page,
      "zoneVersion": getRRSetRequest.zoneVersion,
      "compartmentId": getRRSetRequest.compartmentId,
      "scope": getRRSetRequest.scope,
      "viewId": getRRSetRequest.viewId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-None-Match": getRRSetRequest.ifNoneMatch,
      "If-Modified-Since": getRRSetRequest.ifModifiedSince,
      "opc-request-id": getRRSetRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getRRSetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/records/{domain}/{rtype}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRRSetResponse>{},
        body: await response.json(),
        bodyKey: "rRSet",
        bodyModel: model.RRSet,
        type: "model.RRSet",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of getRRSetRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Record objects
   * contained in responses from the getRRSet operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllRRSet(request: requests.GetRRSetRequest): AsyncIterableIterator<model.Record> {
    return genericPaginateRecords(
      request,
      req => this.getRRSet(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken),
      res => res.rRSet.items || []
    );
  }

  /**
   * NOTE: This function is deprecated in favor of getRRSetResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the getRRSet operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllRRSetResponses(
    request: requests.GetRRSetRequest
  ): AsyncIterableIterator<responses.GetRRSetResponse> {
    return genericPaginateResponses(
      request,
      req => this.getRRSet(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the models.Record objects
   * contained in responses from the getRRSet operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getRRSetRecordIterator(
    request: requests.GetRRSetRequest
  ): AsyncIterableIterator<model.Record> {
    return genericPaginateRecords(
      request,
      req => this.getRRSet(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken),
      res => res.rRSet.items || []
    );
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the getRRSet operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getRRSetResponseIterator(
    request: requests.GetRRSetRequest
  ): AsyncIterableIterator<responses.GetRRSetResponse> {
    return genericPaginateResponses(
      request,
      req => this.getRRSet(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken)
    );
  }

  /**
   * Gets information about a specific resolver. Note that attempting to get a
   * resolver in the DELETED lifecycleState will result in a `404` response to be
   * consistent with other operations of the API. Requires a `PRIVATE` scope query parameter.
   *
   * @param GetResolverRequest
   * @return GetResolverResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetResolver.ts.html |here} to see how to use GetResolver API.
   */
  public async getResolver(
    getResolverRequest: requests.GetResolverRequest
  ): Promise<responses.GetResolverResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#getResolver.");
    const pathParams = {
      "{resolverId}": getResolverRequest.resolverId
    };

    const queryParams = {
      "scope": getResolverRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Modified-Since": getResolverRequest.ifModifiedSince,
      "If-None-Match": getResolverRequest.ifNoneMatch,
      "opc-request-id": getResolverRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getResolverRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resolvers/{resolverId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetResolverResponse>{},
        body: await response.json(),
        bodyKey: "resolver",
        bodyModel: model.Resolver,
        type: "model.Resolver",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a specific resolver endpoint. Note that attempting to get a resolver endpoint
   * in the DELETED lifecycle state will result in a `404` response to be consistent with other operations of the
   * API. Requires a `PRIVATE` scope query parameter.
   *
   * @param GetResolverEndpointRequest
   * @return GetResolverEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetResolverEndpoint.ts.html |here} to see how to use GetResolverEndpoint API.
   */
  public async getResolverEndpoint(
    getResolverEndpointRequest: requests.GetResolverEndpointRequest
  ): Promise<responses.GetResolverEndpointResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#getResolverEndpoint.");
    const pathParams = {
      "{resolverId}": getResolverEndpointRequest.resolverId,
      "{resolverEndpointName}": getResolverEndpointRequest.resolverEndpointName
    };

    const queryParams = {
      "scope": getResolverEndpointRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Modified-Since": getResolverEndpointRequest.ifModifiedSince,
      "If-None-Match": getResolverEndpointRequest.ifNoneMatch,
      "opc-request-id": getResolverEndpointRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getResolverEndpointRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resolvers/{resolverId}/endpoints/{resolverEndpointName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetResolverEndpointResponse>{},
        body: await response.json(),
        bodyKey: "resolverEndpoint",
        bodyModel: model.ResolverEndpoint,
        type: "model.ResolverEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified steering policy.
   *
   * @param GetSteeringPolicyRequest
   * @return GetSteeringPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetSteeringPolicy.ts.html |here} to see how to use GetSteeringPolicy API.
   */
  public async getSteeringPolicy(
    getSteeringPolicyRequest: requests.GetSteeringPolicyRequest
  ): Promise<responses.GetSteeringPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#getSteeringPolicy.");
    const pathParams = {
      "{steeringPolicyId}": getSteeringPolicyRequest.steeringPolicyId
    };

    const queryParams = {
      "scope": getSteeringPolicyRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-None-Match": getSteeringPolicyRequest.ifNoneMatch,
      "If-Modified-Since": getSteeringPolicyRequest.ifModifiedSince,
      "opc-request-id": getSteeringPolicyRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getSteeringPolicyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/steeringPolicies/{steeringPolicyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSteeringPolicyResponse>{},
        body: await response.json(),
        bodyKey: "steeringPolicy",
        bodyModel: model.SteeringPolicy,
        type: "model.SteeringPolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified steering policy attachment.
   *
   * @param GetSteeringPolicyAttachmentRequest
   * @return GetSteeringPolicyAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetSteeringPolicyAttachment.ts.html |here} to see how to use GetSteeringPolicyAttachment API.
   */
  public async getSteeringPolicyAttachment(
    getSteeringPolicyAttachmentRequest: requests.GetSteeringPolicyAttachmentRequest
  ): Promise<responses.GetSteeringPolicyAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#getSteeringPolicyAttachment.");
    const pathParams = {
      "{steeringPolicyAttachmentId}": getSteeringPolicyAttachmentRequest.steeringPolicyAttachmentId
    };

    const queryParams = {
      "scope": getSteeringPolicyAttachmentRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-None-Match": getSteeringPolicyAttachmentRequest.ifNoneMatch,
      "If-Modified-Since": getSteeringPolicyAttachmentRequest.ifModifiedSince,
      "opc-request-id": getSteeringPolicyAttachmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getSteeringPolicyAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/steeringPolicyAttachments/{steeringPolicyAttachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSteeringPolicyAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "steeringPolicyAttachment",
        bodyModel: model.SteeringPolicyAttachment,
        type: "model.SteeringPolicyAttachment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified TSIG key.
   *
   * @param GetTsigKeyRequest
   * @return GetTsigKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetTsigKey.ts.html |here} to see how to use GetTsigKey API.
   */
  public async getTsigKey(
    getTsigKeyRequest: requests.GetTsigKeyRequest
  ): Promise<responses.GetTsigKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#getTsigKey.");
    const pathParams = {
      "{tsigKeyId}": getTsigKeyRequest.tsigKeyId
    };

    const queryParams = {
      "scope": getTsigKeyRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-None-Match": getTsigKeyRequest.ifNoneMatch,
      "If-Modified-Since": getTsigKeyRequest.ifModifiedSince,
      "opc-request-id": getTsigKeyRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getTsigKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/tsigKeys/{tsigKeyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTsigKeyResponse>{},
        body: await response.json(),
        bodyKey: "tsigKey",
        bodyModel: model.TsigKey,
        type: "model.TsigKey",
        responseHeaders: [
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about a specific view. Note that attempting to get a
   * view in the DELETED lifecycleState will result in a `404` response to be
   * consistent with other operations of the API. Requires a `PRIVATE` scope query parameter.
   *
   * @param GetViewRequest
   * @return GetViewResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetView.ts.html |here} to see how to use GetView API.
   */
  public async getView(
    getViewRequest: requests.GetViewRequest
  ): Promise<responses.GetViewResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#getView.");
    const pathParams = {
      "{viewId}": getViewRequest.viewId
    };

    const queryParams = {
      "scope": getViewRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Modified-Since": getViewRequest.ifModifiedSince,
      "If-None-Match": getViewRequest.ifNoneMatch,
      "opc-request-id": getViewRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getViewRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/views/{viewId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetViewResponse>{},
        body: await response.json(),
        bodyKey: "view",
        bodyModel: model.View,
        type: "model.View",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets information about the specified zone, including its creation date, zone type, and serial. For private
   * zones, the scope query parameter is required with a value of `PRIVATE`. When the zone name is provided as a
   * path parameter and `PRIVATE` is used for the scope query parameter then the viewId query parameter is required.
   *
   * @param GetZoneRequest
   * @return GetZoneResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetZone.ts.html |here} to see how to use GetZone API.
   */
  public async getZone(
    getZoneRequest: requests.GetZoneRequest
  ): Promise<responses.GetZoneResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#getZone.");
    const pathParams = {
      "{zoneNameOrId}": getZoneRequest.zoneNameOrId
    };

    const queryParams = {
      "scope": getZoneRequest.scope,
      "viewId": getZoneRequest.viewId,
      "compartmentId": getZoneRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-None-Match": getZoneRequest.ifNoneMatch,
      "If-Modified-Since": getZoneRequest.ifModifiedSince,
      "opc-request-id": getZoneRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getZoneRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetZoneResponse>{},
        body: await response.json(),
        bodyKey: "zone",
        bodyModel: model.Zone,
        type: "model.Zone",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the requested zone's zone file.
   *
   * @param GetZoneContentRequest
   * @return GetZoneContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetZoneContent.ts.html |here} to see how to use GetZoneContent API.
   */
  public async getZoneContent(
    getZoneContentRequest: requests.GetZoneContentRequest
  ): Promise<responses.GetZoneContentResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#getZoneContent.");
    const pathParams = {
      "{zoneNameOrId}": getZoneContentRequest.zoneNameOrId
    };

    const queryParams = {
      "scope": getZoneContentRequest.scope,
      "viewId": getZoneContentRequest.viewId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-None-Match": getZoneContentRequest.ifNoneMatch,
      "If-Modified-Since": getZoneContentRequest.ifModifiedSince,
      "opc-request-id": getZoneContentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getZoneContentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetZoneContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets all records in the specified zone. The results are sorted by `domain` in alphabetical order by default.
   * For more information about records, see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
   * For private zones, the scope query parameter is required with a value of `PRIVATE`. When the zone name is
   * provided as a path parameter and `PRIVATE` is used for the scope query parameter then the viewId query
   * parameter is required.
   *
   * @param GetZoneRecordsRequest
   * @return GetZoneRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetZoneRecords.ts.html |here} to see how to use GetZoneRecords API.
   */
  public async getZoneRecords(
    getZoneRecordsRequest: requests.GetZoneRecordsRequest
  ): Promise<responses.GetZoneRecordsResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#getZoneRecords.");
    const pathParams = {
      "{zoneNameOrId}": getZoneRecordsRequest.zoneNameOrId
    };

    const queryParams = {
      "limit": getZoneRecordsRequest.limit,
      "page": getZoneRecordsRequest.page,
      "zoneVersion": getZoneRecordsRequest.zoneVersion,
      "domain": getZoneRecordsRequest.domain,
      "domainContains": getZoneRecordsRequest.domainContains,
      "rtype": getZoneRecordsRequest.rtype,
      "sortBy": getZoneRecordsRequest.sortBy,
      "sortOrder": getZoneRecordsRequest.sortOrder,
      "compartmentId": getZoneRecordsRequest.compartmentId,
      "scope": getZoneRecordsRequest.scope,
      "viewId": getZoneRecordsRequest.viewId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-None-Match": getZoneRecordsRequest.ifNoneMatch,
      "If-Modified-Since": getZoneRecordsRequest.ifModifiedSince,
      "opc-request-id": getZoneRecordsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getZoneRecordsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/records",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetZoneRecordsResponse>{},
        body: await response.json(),
        bodyKey: "recordCollection",
        bodyModel: model.RecordCollection,
        type: "model.RecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of getZoneRecordsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Record objects
   * contained in responses from the getZoneRecords operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllZoneRecords(
    request: requests.GetZoneRecordsRequest
  ): AsyncIterableIterator<model.Record> {
    return genericPaginateRecords(
      request,
      req => this.getZoneRecords(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken),
      res => res.recordCollection.items || []
    );
  }

  /**
   * NOTE: This function is deprecated in favor of getZoneRecordsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the getZoneRecords operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getAllZoneRecordsResponses(
    request: requests.GetZoneRecordsRequest
  ): AsyncIterableIterator<responses.GetZoneRecordsResponse> {
    return genericPaginateResponses(
      request,
      req => this.getZoneRecords(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken)
    );
  }

  /**
   * Creates a new async iterator which will iterate over the models.Record objects
   * contained in responses from the getZoneRecords operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getZoneRecordsRecordIterator(
    request: requests.GetZoneRecordsRequest
  ): AsyncIterableIterator<model.Record> {
    return genericPaginateRecords(
      request,
      req => this.getZoneRecords(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken),
      res => res.recordCollection.items || []
    );
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the getZoneRecords operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public getZoneRecordsResponseIterator(
    request: requests.GetZoneRecordsRequest
  ): AsyncIterableIterator<responses.GetZoneRecordsResponse> {
    return genericPaginateResponses(
      request,
      req => this.getZoneRecords(req),
      res => res.opcNextPage,
      (req, nextPageToken) => (req.page = nextPageToken)
    );
  }

  /**
   * Gets a list of all endpoints within a resolver. The collection can be filtered by name or lifecycle state.
   * It can be sorted on creation time or name both in ASC or DESC order. Note that when no lifecycleState
   * query parameter is provided, the collection does not include resolver endpoints in the DELETED
   * lifecycle state to be consistent with other operations of the API. Requires a `PRIVATE` scope query parameter.
   *
   * @param ListResolverEndpointsRequest
   * @return ListResolverEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListResolverEndpoints.ts.html |here} to see how to use ListResolverEndpoints API.
   */
  public async listResolverEndpoints(
    listResolverEndpointsRequest: requests.ListResolverEndpointsRequest
  ): Promise<responses.ListResolverEndpointsResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#listResolverEndpoints.");
    const pathParams = {
      "{resolverId}": listResolverEndpointsRequest.resolverId
    };

    const queryParams = {
      "name": listResolverEndpointsRequest.name,
      "page": listResolverEndpointsRequest.page,
      "limit": listResolverEndpointsRequest.limit,
      "sortOrder": listResolverEndpointsRequest.sortOrder,
      "sortBy": listResolverEndpointsRequest.sortBy,
      "lifecycleState": listResolverEndpointsRequest.lifecycleState,
      "scope": listResolverEndpointsRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResolverEndpointsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listResolverEndpointsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resolvers/{resolverId}/endpoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResolverEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ResolverEndpointSummary,
        type: "Array<model.ResolverEndpointSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listResolverEndpointsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ResolverEndpointSummary objects
   * contained in responses from the listResolverEndpoints operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllResolverEndpoints(
    request: requests.ListResolverEndpointsRequest
  ): AsyncIterableIterator<model.ResolverEndpointSummary> {
    return paginateRecords(request, req => this.listResolverEndpoints(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listResolverEndpointsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listResolverEndpoints operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllResolverEndpointsResponses(
    request: requests.ListResolverEndpointsRequest
  ): AsyncIterableIterator<responses.ListResolverEndpointsResponse> {
    return paginateResponses(request, req => this.listResolverEndpoints(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ResolverEndpointSummary objects
   * contained in responses from the listResolverEndpoints operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listResolverEndpointsRecordIterator(
    request: requests.ListResolverEndpointsRequest
  ): AsyncIterableIterator<model.ResolverEndpointSummary> {
    return paginateRecords(request, req => this.listResolverEndpoints(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listResolverEndpoints operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listResolverEndpointsResponseIterator(
    request: requests.ListResolverEndpointsRequest
  ): AsyncIterableIterator<responses.ListResolverEndpointsResponse> {
    return paginateResponses(request, req => this.listResolverEndpoints(req));
  }

  /**
   * Gets a list of all resolvers within a compartment. The collection can
   * be filtered by display name, id, or lifecycle state. It can be sorted
   * on creation time or displayName both in ASC or DESC order. Note that
   * when no lifecycleState query parameter is provided, the collection
   * does not include resolvers in the DELETED lifecycleState to be consistent
   * with other operations of the API. Requires a `PRIVATE` scope query parameter.
   *
   * @param ListResolversRequest
   * @return ListResolversResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListResolvers.ts.html |here} to see how to use ListResolvers API.
   */
  public async listResolvers(
    listResolversRequest: requests.ListResolversRequest
  ): Promise<responses.ListResolversResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#listResolvers.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listResolversRequest.compartmentId,
      "displayName": listResolversRequest.displayName,
      "id": listResolversRequest.id,
      "page": listResolversRequest.page,
      "limit": listResolversRequest.limit,
      "sortOrder": listResolversRequest.sortOrder,
      "sortBy": listResolversRequest.sortBy,
      "lifecycleState": listResolversRequest.lifecycleState,
      "scope": listResolversRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listResolversRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listResolversRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resolvers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListResolversResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ResolverSummary,
        type: "Array<model.ResolverSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listResolversRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ResolverSummary objects
   * contained in responses from the listResolvers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllResolvers(
    request: requests.ListResolversRequest
  ): AsyncIterableIterator<model.ResolverSummary> {
    return paginateRecords(request, req => this.listResolvers(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listResolversResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listResolvers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllResolversResponses(
    request: requests.ListResolversRequest
  ): AsyncIterableIterator<responses.ListResolversResponse> {
    return paginateResponses(request, req => this.listResolvers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ResolverSummary objects
   * contained in responses from the listResolvers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listResolversRecordIterator(
    request: requests.ListResolversRequest
  ): AsyncIterableIterator<model.ResolverSummary> {
    return paginateRecords(request, req => this.listResolvers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listResolvers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listResolversResponseIterator(
    request: requests.ListResolversRequest
  ): AsyncIterableIterator<responses.ListResolversResponse> {
    return paginateResponses(request, req => this.listResolvers(req));
  }

  /**
   * Gets a list of all steering policies in the specified compartment.
   *
   * @param ListSteeringPoliciesRequest
   * @return ListSteeringPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListSteeringPolicies.ts.html |here} to see how to use ListSteeringPolicies API.
   */
  public async listSteeringPolicies(
    listSteeringPoliciesRequest: requests.ListSteeringPoliciesRequest
  ): Promise<responses.ListSteeringPoliciesResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#listSteeringPolicies.");
    const pathParams = {};

    const queryParams = {
      "limit": listSteeringPoliciesRequest.limit,
      "page": listSteeringPoliciesRequest.page,
      "compartmentId": listSteeringPoliciesRequest.compartmentId,
      "id": listSteeringPoliciesRequest.id,
      "displayName": listSteeringPoliciesRequest.displayName,
      "displayNameContains": listSteeringPoliciesRequest.displayNameContains,
      "healthCheckMonitorId": listSteeringPoliciesRequest.healthCheckMonitorId,
      "timeCreatedGreaterThanOrEqualTo":
        listSteeringPoliciesRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listSteeringPoliciesRequest.timeCreatedLessThan,
      "template": listSteeringPoliciesRequest.template,
      "lifecycleState": listSteeringPoliciesRequest.lifecycleState,
      "sortBy": listSteeringPoliciesRequest.sortBy,
      "sortOrder": listSteeringPoliciesRequest.sortOrder,
      "scope": listSteeringPoliciesRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSteeringPoliciesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listSteeringPoliciesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/steeringPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSteeringPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SteeringPolicySummary,
        type: "Array<model.SteeringPolicySummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSteeringPoliciesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SteeringPolicySummary objects
   * contained in responses from the listSteeringPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSteeringPolicies(
    request: requests.ListSteeringPoliciesRequest
  ): AsyncIterableIterator<model.SteeringPolicySummary> {
    return paginateRecords(request, req => this.listSteeringPolicies(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSteeringPoliciesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSteeringPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSteeringPoliciesResponses(
    request: requests.ListSteeringPoliciesRequest
  ): AsyncIterableIterator<responses.ListSteeringPoliciesResponse> {
    return paginateResponses(request, req => this.listSteeringPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SteeringPolicySummary objects
   * contained in responses from the listSteeringPolicies operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSteeringPoliciesRecordIterator(
    request: requests.ListSteeringPoliciesRequest
  ): AsyncIterableIterator<model.SteeringPolicySummary> {
    return paginateRecords(request, req => this.listSteeringPolicies(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSteeringPolicies operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSteeringPoliciesResponseIterator(
    request: requests.ListSteeringPoliciesRequest
  ): AsyncIterableIterator<responses.ListSteeringPoliciesResponse> {
    return paginateResponses(request, req => this.listSteeringPolicies(req));
  }

  /**
   * Lists the steering policy attachments in the specified compartment.
   *
   * @param ListSteeringPolicyAttachmentsRequest
   * @return ListSteeringPolicyAttachmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListSteeringPolicyAttachments.ts.html |here} to see how to use ListSteeringPolicyAttachments API.
   */
  public async listSteeringPolicyAttachments(
    listSteeringPolicyAttachmentsRequest: requests.ListSteeringPolicyAttachmentsRequest
  ): Promise<responses.ListSteeringPolicyAttachmentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DnsClient#listSteeringPolicyAttachments.");
    const pathParams = {};

    const queryParams = {
      "limit": listSteeringPolicyAttachmentsRequest.limit,
      "page": listSteeringPolicyAttachmentsRequest.page,
      "compartmentId": listSteeringPolicyAttachmentsRequest.compartmentId,
      "id": listSteeringPolicyAttachmentsRequest.id,
      "displayName": listSteeringPolicyAttachmentsRequest.displayName,
      "steeringPolicyId": listSteeringPolicyAttachmentsRequest.steeringPolicyId,
      "zoneId": listSteeringPolicyAttachmentsRequest.zoneId,
      "domain": listSteeringPolicyAttachmentsRequest.domain,
      "domainContains": listSteeringPolicyAttachmentsRequest.domainContains,
      "timeCreatedGreaterThanOrEqualTo":
        listSteeringPolicyAttachmentsRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listSteeringPolicyAttachmentsRequest.timeCreatedLessThan,
      "lifecycleState": listSteeringPolicyAttachmentsRequest.lifecycleState,
      "sortBy": listSteeringPolicyAttachmentsRequest.sortBy,
      "sortOrder": listSteeringPolicyAttachmentsRequest.sortOrder,
      "scope": listSteeringPolicyAttachmentsRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSteeringPolicyAttachmentsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listSteeringPolicyAttachmentsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/steeringPolicyAttachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSteeringPolicyAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.SteeringPolicyAttachmentSummary,
        type: "Array<model.SteeringPolicyAttachmentSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listSteeringPolicyAttachmentsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.SteeringPolicyAttachmentSummary objects
   * contained in responses from the listSteeringPolicyAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSteeringPolicyAttachments(
    request: requests.ListSteeringPolicyAttachmentsRequest
  ): AsyncIterableIterator<model.SteeringPolicyAttachmentSummary> {
    return paginateRecords(request, req => this.listSteeringPolicyAttachments(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listSteeringPolicyAttachmentsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listSteeringPolicyAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllSteeringPolicyAttachmentsResponses(
    request: requests.ListSteeringPolicyAttachmentsRequest
  ): AsyncIterableIterator<responses.ListSteeringPolicyAttachmentsResponse> {
    return paginateResponses(request, req => this.listSteeringPolicyAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.SteeringPolicyAttachmentSummary objects
   * contained in responses from the listSteeringPolicyAttachments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSteeringPolicyAttachmentsRecordIterator(
    request: requests.ListSteeringPolicyAttachmentsRequest
  ): AsyncIterableIterator<model.SteeringPolicyAttachmentSummary> {
    return paginateRecords(request, req => this.listSteeringPolicyAttachments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listSteeringPolicyAttachments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listSteeringPolicyAttachmentsResponseIterator(
    request: requests.ListSteeringPolicyAttachmentsRequest
  ): AsyncIterableIterator<responses.ListSteeringPolicyAttachmentsResponse> {
    return paginateResponses(request, req => this.listSteeringPolicyAttachments(req));
  }

  /**
   * Gets a list of all TSIG keys in the specified compartment.
   *
   * @param ListTsigKeysRequest
   * @return ListTsigKeysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListTsigKeys.ts.html |here} to see how to use ListTsigKeys API.
   */
  public async listTsigKeys(
    listTsigKeysRequest: requests.ListTsigKeysRequest
  ): Promise<responses.ListTsigKeysResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#listTsigKeys.");
    const pathParams = {};

    const queryParams = {
      "limit": listTsigKeysRequest.limit,
      "page": listTsigKeysRequest.page,
      "compartmentId": listTsigKeysRequest.compartmentId,
      "id": listTsigKeysRequest.id,
      "name": listTsigKeysRequest.name,
      "lifecycleState": listTsigKeysRequest.lifecycleState,
      "sortBy": listTsigKeysRequest.sortBy,
      "sortOrder": listTsigKeysRequest.sortOrder,
      "scope": listTsigKeysRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTsigKeysRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listTsigKeysRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/tsigKeys",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTsigKeysResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.TsigKeySummary,
        type: "Array<model.TsigKeySummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listTsigKeysRecordIterator function.
   * Creates a new async iterator which will iterate over the models.TsigKeySummary objects
   * contained in responses from the listTsigKeys operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTsigKeys(
    request: requests.ListTsigKeysRequest
  ): AsyncIterableIterator<model.TsigKeySummary> {
    return paginateRecords(request, req => this.listTsigKeys(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listTsigKeysResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listTsigKeys operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllTsigKeysResponses(
    request: requests.ListTsigKeysRequest
  ): AsyncIterableIterator<responses.ListTsigKeysResponse> {
    return paginateResponses(request, req => this.listTsigKeys(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.TsigKeySummary objects
   * contained in responses from the listTsigKeys operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listTsigKeysRecordIterator(
    request: requests.ListTsigKeysRequest
  ): AsyncIterableIterator<model.TsigKeySummary> {
    return paginateRecords(request, req => this.listTsigKeys(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listTsigKeys operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listTsigKeysResponseIterator(
    request: requests.ListTsigKeysRequest
  ): AsyncIterableIterator<responses.ListTsigKeysResponse> {
    return paginateResponses(request, req => this.listTsigKeys(req));
  }

  /**
   * Gets a list of all views within a compartment. The collection can
   * be filtered by display name, id, or lifecycle state. It can be sorted
   * on creation time or displayName both in ASC or DESC order. Note that
   * when no lifecycleState query parameter is provided, the collection
   * does not include views in the DELETED lifecycleState to be consistent
   * with other operations of the API. Requires a `PRIVATE` scope query parameter.
   *
   * @param ListViewsRequest
   * @return ListViewsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListViews.ts.html |here} to see how to use ListViews API.
   */
  public async listViews(
    listViewsRequest: requests.ListViewsRequest
  ): Promise<responses.ListViewsResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#listViews.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listViewsRequest.compartmentId,
      "displayName": listViewsRequest.displayName,
      "id": listViewsRequest.id,
      "page": listViewsRequest.page,
      "limit": listViewsRequest.limit,
      "sortOrder": listViewsRequest.sortOrder,
      "sortBy": listViewsRequest.sortBy,
      "lifecycleState": listViewsRequest.lifecycleState,
      "scope": listViewsRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listViewsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listViewsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/views",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListViewsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ViewSummary,
        type: "Array<model.ViewSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listViewsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ViewSummary objects
   * contained in responses from the listViews operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllViews(
    request: requests.ListViewsRequest
  ): AsyncIterableIterator<model.ViewSummary> {
    return paginateRecords(request, req => this.listViews(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listViewsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listViews operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllViewsResponses(
    request: requests.ListViewsRequest
  ): AsyncIterableIterator<responses.ListViewsResponse> {
    return paginateResponses(request, req => this.listViews(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ViewSummary objects
   * contained in responses from the listViews operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listViewsRecordIterator(
    request: requests.ListViewsRequest
  ): AsyncIterableIterator<model.ViewSummary> {
    return paginateRecords(request, req => this.listViews(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listViews operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listViewsResponseIterator(
    request: requests.ListViewsRequest
  ): AsyncIterableIterator<responses.ListViewsResponse> {
    return paginateResponses(request, req => this.listViews(req));
  }

  /**
   * Gets a list of IP addresses of OCI nameservers for inbound and outbound transfer of zones in the specified
   * compartment (which must be the root compartment of a tenancy) that transfer zone data with external master or
   * downstream nameservers.
   *
   * @param ListZoneTransferServersRequest
   * @return ListZoneTransferServersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListZoneTransferServers.ts.html |here} to see how to use ListZoneTransferServers API.
   */
  public async listZoneTransferServers(
    listZoneTransferServersRequest: requests.ListZoneTransferServersRequest
  ): Promise<responses.ListZoneTransferServersResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#listZoneTransferServers.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listZoneTransferServersRequest.compartmentId,
      "scope": listZoneTransferServersRequest.scope,
      "page": listZoneTransferServersRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listZoneTransferServersRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listZoneTransferServersRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zoneTransferServers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListZoneTransferServersResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ZoneTransferServer,
        type: "Array<model.ZoneTransferServer>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listZoneTransferServersRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ZoneTransferServer objects
   * contained in responses from the listZoneTransferServers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllZoneTransferServers(
    request: requests.ListZoneTransferServersRequest
  ): AsyncIterableIterator<model.ZoneTransferServer> {
    return paginateRecords(request, req => this.listZoneTransferServers(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listZoneTransferServersResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listZoneTransferServers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllZoneTransferServersResponses(
    request: requests.ListZoneTransferServersRequest
  ): AsyncIterableIterator<responses.ListZoneTransferServersResponse> {
    return paginateResponses(request, req => this.listZoneTransferServers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ZoneTransferServer objects
   * contained in responses from the listZoneTransferServers operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listZoneTransferServersRecordIterator(
    request: requests.ListZoneTransferServersRequest
  ): AsyncIterableIterator<model.ZoneTransferServer> {
    return paginateRecords(request, req => this.listZoneTransferServers(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listZoneTransferServers operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listZoneTransferServersResponseIterator(
    request: requests.ListZoneTransferServersRequest
  ): AsyncIterableIterator<responses.ListZoneTransferServersResponse> {
    return paginateResponses(request, req => this.listZoneTransferServers(req));
  }

  /**
   * Gets a list of all zones in the specified compartment. The collection can be filtered by name, time created,
   * scope, associated view, and zone type. Filtering by view is only supported for private zones.
   *
   * @param ListZonesRequest
   * @return ListZonesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListZones.ts.html |here} to see how to use ListZones API.
   */
  public async listZones(
    listZonesRequest: requests.ListZonesRequest
  ): Promise<responses.ListZonesResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#listZones.");
    const pathParams = {};

    const queryParams = {
      "limit": listZonesRequest.limit,
      "page": listZonesRequest.page,
      "compartmentId": listZonesRequest.compartmentId,
      "name": listZonesRequest.name,
      "nameContains": listZonesRequest.nameContains,
      "zoneType": listZonesRequest.zoneType,
      "timeCreatedGreaterThanOrEqualTo": listZonesRequest.timeCreatedGreaterThanOrEqualTo,
      "timeCreatedLessThan": listZonesRequest.timeCreatedLessThan,
      "lifecycleState": listZonesRequest.lifecycleState,
      "sortBy": listZonesRequest.sortBy,
      "sortOrder": listZonesRequest.sortOrder,
      "scope": listZonesRequest.scope,
      "viewId": listZonesRequest.viewId,
      "tsigKeyId": listZonesRequest.tsigKeyId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listZonesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listZonesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListZonesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ZoneSummary,
        type: "Array<model.ZoneSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listZonesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ZoneSummary objects
   * contained in responses from the listZones operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllZones(
    request: requests.ListZonesRequest
  ): AsyncIterableIterator<model.ZoneSummary> {
    return paginateRecords(request, req => this.listZones(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listZonesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listZones operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllZonesResponses(
    request: requests.ListZonesRequest
  ): AsyncIterableIterator<responses.ListZonesResponse> {
    return paginateResponses(request, req => this.listZones(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ZoneSummary objects
   * contained in responses from the listZones operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listZonesRecordIterator(
    request: requests.ListZonesRequest
  ): AsyncIterableIterator<model.ZoneSummary> {
    return paginateRecords(request, req => this.listZones(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listZones operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listZonesResponseIterator(
    request: requests.ListZonesRequest
  ): AsyncIterableIterator<responses.ListZonesResponse> {
    return paginateResponses(request, req => this.listZones(req));
  }

  /**
   * Updates records in the specified zone at a domain. You can update one record or all records for the specified
   * zone depending on the changes provided in the request body. You can also add or remove records using this
   * function. For private zones, the scope query parameter is required with a value of `PRIVATE`. When the zone
   * name is provided as a path parameter and `PRIVATE` is used for the scope query parameter then the viewId
   * query parameter is required.
   *
   * @param PatchDomainRecordsRequest
   * @return PatchDomainRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/PatchDomainRecords.ts.html |here} to see how to use PatchDomainRecords API.
   */
  public async patchDomainRecords(
    patchDomainRecordsRequest: requests.PatchDomainRecordsRequest
  ): Promise<responses.PatchDomainRecordsResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#patchDomainRecords.");
    const pathParams = {
      "{zoneNameOrId}": patchDomainRecordsRequest.zoneNameOrId,
      "{domain}": patchDomainRecordsRequest.domain
    };

    const queryParams = {
      "scope": patchDomainRecordsRequest.scope,
      "viewId": patchDomainRecordsRequest.viewId,
      "compartmentId": patchDomainRecordsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": patchDomainRecordsRequest.ifMatch,
      "If-Unmodified-Since": patchDomainRecordsRequest.ifUnmodifiedSince,
      "opc-request-id": patchDomainRecordsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      patchDomainRecordsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/records/{domain}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchDomainRecordsRequest.patchDomainRecordsDetails,
        "PatchDomainRecordsDetails",
        model.PatchDomainRecordsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchDomainRecordsResponse>{},
        body: await response.json(),
        bodyKey: "recordCollection",
        bodyModel: model.RecordCollection,
        type: "model.RecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates records in the specified RRSet. For private zones, the scope query parameter is required with a value
   * of `PRIVATE`. When the zone name is provided as a path parameter and `PRIVATE` is used for the scope query
   * parameter then the viewId query parameter is required.
   *
   * @param PatchRRSetRequest
   * @return PatchRRSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/PatchRRSet.ts.html |here} to see how to use PatchRRSet API.
   */
  public async patchRRSet(
    patchRRSetRequest: requests.PatchRRSetRequest
  ): Promise<responses.PatchRRSetResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#patchRRSet.");
    const pathParams = {
      "{zoneNameOrId}": patchRRSetRequest.zoneNameOrId,
      "{domain}": patchRRSetRequest.domain,
      "{rtype}": patchRRSetRequest.rtype
    };

    const queryParams = {
      "scope": patchRRSetRequest.scope,
      "viewId": patchRRSetRequest.viewId,
      "compartmentId": patchRRSetRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": patchRRSetRequest.ifMatch,
      "If-Unmodified-Since": patchRRSetRequest.ifUnmodifiedSince,
      "opc-request-id": patchRRSetRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      patchRRSetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/records/{domain}/{rtype}",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchRRSetRequest.patchRRSetDetails,
        "PatchRRSetDetails",
        model.PatchRRSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchRRSetResponse>{},
        body: await response.json(),
        bodyKey: "recordCollection",
        bodyModel: model.RecordCollection,
        type: "model.RecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a collection of records in the specified zone. You can update one record or all records for the
   * specified zone depending on the changes provided in the request body. You can also add or remove records
   * using this function. For private zones, the scope query parameter is required with a value of `PRIVATE`. When
   * the zone name is provided as a path parameter and `PRIVATE` is used for the scope query parameter then the
   * viewId query parameter is required.
   *
   * @param PatchZoneRecordsRequest
   * @return PatchZoneRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/PatchZoneRecords.ts.html |here} to see how to use PatchZoneRecords API.
   */
  public async patchZoneRecords(
    patchZoneRecordsRequest: requests.PatchZoneRecordsRequest
  ): Promise<responses.PatchZoneRecordsResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#patchZoneRecords.");
    const pathParams = {
      "{zoneNameOrId}": patchZoneRecordsRequest.zoneNameOrId
    };

    const queryParams = {
      "scope": patchZoneRecordsRequest.scope,
      "viewId": patchZoneRecordsRequest.viewId,
      "compartmentId": patchZoneRecordsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": patchZoneRecordsRequest.ifMatch,
      "If-Unmodified-Since": patchZoneRecordsRequest.ifUnmodifiedSince,
      "opc-request-id": patchZoneRecordsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      patchZoneRecordsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/records",
      method: "PATCH",
      bodyContent: common.ObjectSerializer.serialize(
        patchZoneRecordsRequest.patchZoneRecordsDetails,
        "PatchZoneRecordsDetails",
        model.PatchZoneRecordsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.PatchZoneRecordsResponse>{},
        body: await response.json(),
        bodyKey: "recordCollection",
        bodyModel: model.RecordCollection,
        type: "model.RecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replaces records in the specified zone at a domain with the records specified in the request body. If a
   * specified record does not exist, it will be created. If the record exists, then it will be updated to
   * represent the record in the body of the request. If a record in the zone does not exist in the request body,
   * the record will be removed from the zone. For private zones, the scope query parameter is required with a
   * value of `PRIVATE`. When the zone name is provided as a path parameter and `PRIVATE` is used for the scope
   * query parameter then the viewId query parameter is required.
   *
   * @param UpdateDomainRecordsRequest
   * @return UpdateDomainRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateDomainRecords.ts.html |here} to see how to use UpdateDomainRecords API.
   */
  public async updateDomainRecords(
    updateDomainRecordsRequest: requests.UpdateDomainRecordsRequest
  ): Promise<responses.UpdateDomainRecordsResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#updateDomainRecords.");
    const pathParams = {
      "{zoneNameOrId}": updateDomainRecordsRequest.zoneNameOrId,
      "{domain}": updateDomainRecordsRequest.domain
    };

    const queryParams = {
      "scope": updateDomainRecordsRequest.scope,
      "viewId": updateDomainRecordsRequest.viewId,
      "compartmentId": updateDomainRecordsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": updateDomainRecordsRequest.ifMatch,
      "If-Unmodified-Since": updateDomainRecordsRequest.ifUnmodifiedSince,
      "opc-request-id": updateDomainRecordsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateDomainRecordsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/records/{domain}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDomainRecordsRequest.updateDomainRecordsDetails,
        "UpdateDomainRecordsDetails",
        model.UpdateDomainRecordsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDomainRecordsResponse>{},
        body: await response.json(),
        bodyKey: "recordCollection",
        bodyModel: model.RecordCollection,
        type: "model.RecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replaces records in the specified RRSet. For private zones, the scope query parameter is required with a
   * value of `PRIVATE`. When the zone name is provided as a path parameter and `PRIVATE` is used for the scope
   * query parameter then the viewId query parameter is required.
   *
   * @param UpdateRRSetRequest
   * @return UpdateRRSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateRRSet.ts.html |here} to see how to use UpdateRRSet API.
   */
  public async updateRRSet(
    updateRRSetRequest: requests.UpdateRRSetRequest
  ): Promise<responses.UpdateRRSetResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#updateRRSet.");
    const pathParams = {
      "{zoneNameOrId}": updateRRSetRequest.zoneNameOrId,
      "{domain}": updateRRSetRequest.domain,
      "{rtype}": updateRRSetRequest.rtype
    };

    const queryParams = {
      "scope": updateRRSetRequest.scope,
      "viewId": updateRRSetRequest.viewId,
      "compartmentId": updateRRSetRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": updateRRSetRequest.ifMatch,
      "If-Unmodified-Since": updateRRSetRequest.ifUnmodifiedSince,
      "opc-request-id": updateRRSetRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateRRSetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/records/{domain}/{rtype}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRRSetRequest.updateRRSetDetails,
        "UpdateRRSetDetails",
        model.UpdateRRSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRRSetResponse>{},
        body: await response.json(),
        bodyKey: "recordCollection",
        bodyModel: model.RecordCollection,
        type: "model.RecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified resolver with your new information. Requires a `PRIVATE` scope query parameter.
   *
   * @param UpdateResolverRequest
   * @return UpdateResolverResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateResolver.ts.html |here} to see how to use UpdateResolver API.
   */
  public async updateResolver(
    updateResolverRequest: requests.UpdateResolverRequest
  ): Promise<responses.UpdateResolverResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#updateResolver.");
    const pathParams = {
      "{resolverId}": updateResolverRequest.resolverId
    };

    const queryParams = {
      "scope": updateResolverRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": updateResolverRequest.ifMatch,
      "If-Unmodified-Since": updateResolverRequest.ifUnmodifiedSince,
      "opc-request-id": updateResolverRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateResolverRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resolvers/{resolverId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateResolverRequest.updateResolverDetails,
        "UpdateResolverDetails",
        model.UpdateResolverDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateResolverResponse>{},
        body: await response.json(),
        bodyKey: "resolver",
        bodyModel: model.Resolver,
        type: "model.Resolver",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified resolver endpoint with your new information. Requires a `PRIVATE` scope query parameter.
   *
   * @param UpdateResolverEndpointRequest
   * @return UpdateResolverEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateResolverEndpoint.ts.html |here} to see how to use UpdateResolverEndpoint API.
   */
  public async updateResolverEndpoint(
    updateResolverEndpointRequest: requests.UpdateResolverEndpointRequest
  ): Promise<responses.UpdateResolverEndpointResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#updateResolverEndpoint.");
    const pathParams = {
      "{resolverId}": updateResolverEndpointRequest.resolverId,
      "{resolverEndpointName}": updateResolverEndpointRequest.resolverEndpointName
    };

    const queryParams = {
      "scope": updateResolverEndpointRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": updateResolverEndpointRequest.ifMatch,
      "If-Unmodified-Since": updateResolverEndpointRequest.ifUnmodifiedSince,
      "opc-request-id": updateResolverEndpointRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateResolverEndpointRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/resolvers/{resolverId}/endpoints/{resolverEndpointName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateResolverEndpointRequest.updateResolverEndpointDetails,
        "UpdateResolverEndpointDetails",
        model.UpdateResolverEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateResolverEndpointResponse>{},
        body: await response.json(),
        bodyKey: "resolverEndpoint",
        bodyModel: model.ResolverEndpoint,
        type: "model.ResolverEndpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the configuration of the specified steering policy.
   *
   * @param UpdateSteeringPolicyRequest
   * @return UpdateSteeringPolicyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateSteeringPolicy.ts.html |here} to see how to use UpdateSteeringPolicy API.
   */
  public async updateSteeringPolicy(
    updateSteeringPolicyRequest: requests.UpdateSteeringPolicyRequest
  ): Promise<responses.UpdateSteeringPolicyResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#updateSteeringPolicy.");
    const pathParams = {
      "{steeringPolicyId}": updateSteeringPolicyRequest.steeringPolicyId
    };

    const queryParams = {
      "scope": updateSteeringPolicyRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": updateSteeringPolicyRequest.ifMatch,
      "If-Unmodified-Since": updateSteeringPolicyRequest.ifUnmodifiedSince,
      "opc-request-id": updateSteeringPolicyRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateSteeringPolicyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/steeringPolicies/{steeringPolicyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSteeringPolicyRequest.updateSteeringPolicyDetails,
        "UpdateSteeringPolicyDetails",
        model.UpdateSteeringPolicyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSteeringPolicyResponse>{},
        body: await response.json(),
        bodyKey: "steeringPolicy",
        bodyModel: model.SteeringPolicy,
        type: "model.SteeringPolicy",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified steering policy attachment with your new information.
   *
   * @param UpdateSteeringPolicyAttachmentRequest
   * @return UpdateSteeringPolicyAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateSteeringPolicyAttachment.ts.html |here} to see how to use UpdateSteeringPolicyAttachment API.
   */
  public async updateSteeringPolicyAttachment(
    updateSteeringPolicyAttachmentRequest: requests.UpdateSteeringPolicyAttachmentRequest
  ): Promise<responses.UpdateSteeringPolicyAttachmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DnsClient#updateSteeringPolicyAttachment.");
    const pathParams = {
      "{steeringPolicyAttachmentId}":
        updateSteeringPolicyAttachmentRequest.steeringPolicyAttachmentId
    };

    const queryParams = {
      "scope": updateSteeringPolicyAttachmentRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": updateSteeringPolicyAttachmentRequest.ifMatch,
      "If-Unmodified-Since": updateSteeringPolicyAttachmentRequest.ifUnmodifiedSince,
      "opc-request-id": updateSteeringPolicyAttachmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateSteeringPolicyAttachmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/steeringPolicyAttachments/{steeringPolicyAttachmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSteeringPolicyAttachmentRequest.updateSteeringPolicyAttachmentDetails,
        "UpdateSteeringPolicyAttachmentDetails",
        model.UpdateSteeringPolicyAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSteeringPolicyAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "steeringPolicyAttachment",
        bodyModel: model.SteeringPolicyAttachment,
        type: "model.SteeringPolicyAttachment",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified TSIG key.
   *
   * @param UpdateTsigKeyRequest
   * @return UpdateTsigKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateTsigKey.ts.html |here} to see how to use UpdateTsigKey API.
   */
  public async updateTsigKey(
    updateTsigKeyRequest: requests.UpdateTsigKeyRequest
  ): Promise<responses.UpdateTsigKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#updateTsigKey.");
    const pathParams = {
      "{tsigKeyId}": updateTsigKeyRequest.tsigKeyId
    };

    const queryParams = {
      "scope": updateTsigKeyRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": updateTsigKeyRequest.ifMatch,
      "If-Unmodified-Since": updateTsigKeyRequest.ifUnmodifiedSince,
      "opc-request-id": updateTsigKeyRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateTsigKeyRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/tsigKeys/{tsigKeyId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTsigKeyRequest.updateTsigKeyDetails,
        "UpdateTsigKeyDetails",
        model.UpdateTsigKeyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTsigKeyResponse>{},
        body: await response.json(),
        bodyKey: "tsigKey",
        bodyModel: model.TsigKey,
        type: "model.TsigKey",
        responseHeaders: [
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified view with your new information. Requires a `PRIVATE` scope query parameter.
   *
   * @param UpdateViewRequest
   * @return UpdateViewResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateView.ts.html |here} to see how to use UpdateView API.
   */
  public async updateView(
    updateViewRequest: requests.UpdateViewRequest
  ): Promise<responses.UpdateViewResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#updateView.");
    const pathParams = {
      "{viewId}": updateViewRequest.viewId
    };

    const queryParams = {
      "scope": updateViewRequest.scope
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": updateViewRequest.ifMatch,
      "If-Unmodified-Since": updateViewRequest.ifUnmodifiedSince,
      "opc-request-id": updateViewRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateViewRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/views/{viewId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateViewRequest.updateViewDetails,
        "UpdateViewDetails",
        model.UpdateViewDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateViewResponse>{},
        body: await response.json(),
        bodyKey: "view",
        bodyModel: model.View,
        type: "model.View",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the zone with the specified information. Global secondary zones may have their external masters updated.
   * For more information about secondary zone, see [Manage DNS Service Zone](https://docs.cloud.oracle.com/iaas/Content/DNS/Tasks/managingdnszones.htm).
   * For private zones, the scope query parameter is required with a value of `PRIVATE`. When the zone name is
   * provided as a path parameter and `PRIVATE` is used for the scope query parameter then the viewId query
   * parameter is required.
   *
   * @param UpdateZoneRequest
   * @return UpdateZoneResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateZone.ts.html |here} to see how to use UpdateZone API.
   */
  public async updateZone(
    updateZoneRequest: requests.UpdateZoneRequest
  ): Promise<responses.UpdateZoneResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#updateZone.");
    const pathParams = {
      "{zoneNameOrId}": updateZoneRequest.zoneNameOrId
    };

    const queryParams = {
      "scope": updateZoneRequest.scope,
      "viewId": updateZoneRequest.viewId,
      "compartmentId": updateZoneRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": updateZoneRequest.ifMatch,
      "If-Unmodified-Since": updateZoneRequest.ifUnmodifiedSince,
      "opc-request-id": updateZoneRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateZoneRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateZoneRequest.updateZoneDetails,
        "UpdateZoneDetails",
        model.UpdateZoneDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateZoneResponse>{},
        body: await response.json(),
        bodyKey: "zone",
        bodyModel: model.Zone,
        type: "model.Zone",
        responseHeaders: [
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Replaces records in the specified zone with the records specified in the request body. If a specified record
   * does not exist, it will be created. If the record exists, then it will be updated to represent the record in
   * the body of the request. If a record in the zone does not exist in the request body, the record will be
   * removed from the zone. For private zones, the scope query parameter is required with a value of `PRIVATE`.
   * When the zone name is provided as a path parameter and `PRIVATE` is used for the scope query parameter then
   * the viewId query parameter is required.
   *
   * @param UpdateZoneRecordsRequest
   * @return UpdateZoneRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateZoneRecords.ts.html |here} to see how to use UpdateZoneRecords API.
   */
  public async updateZoneRecords(
    updateZoneRecordsRequest: requests.UpdateZoneRecordsRequest
  ): Promise<responses.UpdateZoneRecordsResponse> {
    if (this.logger) this.logger.debug("Calling operation DnsClient#updateZoneRecords.");
    const pathParams = {
      "{zoneNameOrId}": updateZoneRecordsRequest.zoneNameOrId
    };

    const queryParams = {
      "scope": updateZoneRecordsRequest.scope,
      "viewId": updateZoneRecordsRequest.viewId,
      "compartmentId": updateZoneRecordsRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "If-Match": updateZoneRecordsRequest.ifMatch,
      "If-Unmodified-Since": updateZoneRecordsRequest.ifUnmodifiedSince,
      "opc-request-id": updateZoneRecordsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateZoneRecordsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/zones/{zoneNameOrId}/records",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateZoneRecordsRequest.updateZoneRecordsDetails,
        "UpdateZoneRecordsDetails",
        model.UpdateZoneRecordsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateZoneRecordsResponse>{},
        body: await response.json(),
        bodyKey: "recordCollection",
        bodyModel: model.RecordCollection,
        type: "model.RecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

/**
 * Java Management Service Query API
 * API for the Java Management Service. Use this API to view and manage Fleets.
 * OpenAPI spec version: 20210610
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Java Runtime usage during a specified time period. A Java Runtime is identified by its vendor and version.
 */
export interface JreUsage {
  /**
   * The vendor of the Java Runtime.
   */
  "vendor": string;
  /**
   * The distribution of a Java Runtime is the name of the lineage of product to which it belongs, for example _Java(TM) SE Runtime Environment_.
   */
  "distribution": string;
  /**
   * The version of the Java Runtime.
   */
  "version": string;
  /**
   * The approximate count of installations that are installations of this Java Runtime. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "approximateInstallationCount"?: number;
  /**
   * The approximate count of the applications running on this Java Runtime. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "approximateApplicationCount"?: number;
  /**
   * The approximate count of the managed instances that report this Java Runtime. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "approximateManagedInstanceCount"?: number;
  /**
   * Lower bound of the specified time period filter.
   */
  "timeStart"?: Date;
  /**
   * Upper bound of the specified time period filter.
   */
  "timeEnd"?: Date;
  /**
   * The date and time the resource was _first_ reported to JMS.
   * This is potentially _before_ the specified time period provided by the filters.
   * For example, a resource can be first reported to JMS before the start of a specified time period,
   * if it is also reported during the time period.
   *
   */
  "timeFirstSeen"?: Date;
  /**
   * The date and time the resource was _last_ reported to JMS.
   * This is potentially _after_ the specified time period provided by the filters.
   * For example, a resource can be last reported to JMS before the start of a specified time period,
   * if it is also reported during the time period.
   *
   */
  "timeLastSeen"?: Date;
}

export namespace JreUsage {
  export function getJsonObj(obj: JreUsage): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: JreUsage): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}

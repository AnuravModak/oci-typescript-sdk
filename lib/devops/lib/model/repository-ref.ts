/**
 * DevOps API
 * Use the DevOps APIs to create a DevOps project to group the pipelines,  add reference to target deployment environments, add artifacts to deploy,  and create deployment pipelines needed to deploy your software.
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Ref object with name and commitId
 */
export interface RepositoryRef {
  /**
   * Unique Ref name inside a repository
   */
  "refName": string;
  /**
   * Unique full ref name inside a repository
   */
  "fullRefName": string;
  /**
   * The OCID of the repository containing the ref.
   */
  "repositoryId": string;

  "refType": string;
}

export namespace RepositoryRef {
  export function getJsonObj(obj: RepositoryRef): object {
    const jsonObj = { ...obj, ...{} };

    if ("refType" in obj && obj.refType) {
      switch (obj.refType) {
        case "BRANCH":
          return model.RepositoryBranch.getJsonObj(<model.RepositoryBranch>(<object>jsonObj), true);
        case "TAG":
          return model.RepositoryTag.getJsonObj(<model.RepositoryTag>(<object>jsonObj), true);
        default:
          throw Error("Unknown value for: " + obj.refType);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: RepositoryRef): object {
    const jsonObj = { ...obj, ...{} };

    if ("refType" in obj && obj.refType) {
      switch (obj.refType) {
        case "BRANCH":
          return model.RepositoryBranch.getDeserializedJsonObj(
            <model.RepositoryBranch>(<object>jsonObj),
            true
          );
        case "TAG":
          return model.RepositoryTag.getDeserializedJsonObj(
            <model.RepositoryTag>(<object>jsonObj),
            true
          );
        default:
          throw Error("Unknown value for: " + obj.refType);
      }
    }
    return jsonObj;
  }
}

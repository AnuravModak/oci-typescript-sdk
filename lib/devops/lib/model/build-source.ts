/**
 * DevOps API
 * Use the DevOps APIs to create a DevOps project to group the pipelines,  add reference to target deployment environments, add artifacts to deploy,  and create deployment pipelines needed to deploy your software.
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Build Source required for Build Stage.
 */
export interface BuildSource {
  /**
   * Name of the Build source. This must be unique within a BuildSourceCollection. The name can be used by customers to locate the working directory pertinent to this repository.
   */
  "name": string;
  /**
   * Url for repository
   */
  "repositoryUrl": string;
  /**
   * branch name
   */
  "branch": string;

  "connectionType": string;
}

export namespace BuildSource {
  export function getJsonObj(obj: BuildSource): object {
    const jsonObj = { ...obj, ...{} };

    if ("connectionType" in obj && obj.connectionType) {
      switch (obj.connectionType) {
        case "GITHUB":
          return model.GithubBuildSource.getJsonObj(
            <model.GithubBuildSource>(<object>jsonObj),
            true
          );
        case "DEVOPS_CODE_REPOSITORY":
          return model.DevopsCodeRepositoryBuildSource.getJsonObj(
            <model.DevopsCodeRepositoryBuildSource>(<object>jsonObj),
            true
          );
        case "GITLAB":
          return model.GitlabBuildSource.getJsonObj(
            <model.GitlabBuildSource>(<object>jsonObj),
            true
          );
        default:
          throw Error("Unknown value for: " + obj.connectionType);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: BuildSource): object {
    const jsonObj = { ...obj, ...{} };

    if ("connectionType" in obj && obj.connectionType) {
      switch (obj.connectionType) {
        case "GITHUB":
          return model.GithubBuildSource.getDeserializedJsonObj(
            <model.GithubBuildSource>(<object>jsonObj),
            true
          );
        case "DEVOPS_CODE_REPOSITORY":
          return model.DevopsCodeRepositoryBuildSource.getDeserializedJsonObj(
            <model.DevopsCodeRepositoryBuildSource>(<object>jsonObj),
            true
          );
        case "GITLAB":
          return model.GitlabBuildSource.getDeserializedJsonObj(
            <model.GitlabBuildSource>(<object>jsonObj),
            true
          );
        default:
          throw Error("Unknown value for: " + obj.connectionType);
      }
    }
    return jsonObj;
  }
}

/**
 * DevOps API
 * Use the DevOps APIs to create a DevOps project to group the pipelines,  add reference to target deployment environments, add artifacts to deploy,  and create deployment pipelines needed to deploy your software.
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Specifies the Container Engine for Kubernetes(OKE) cluster deployment stage.
 */
export interface OkeDeployStage extends model.DeployStage {
  /**
   * Kubernetes cluster environment OCID for deployment.
   */
  "okeClusterDeployEnvironmentId": string;
  /**
   * List of Kubernetes manifest artifact OCIDs, the manifests should not include any job resource.
   */
  "kubernetesManifestDeployArtifactIds": Array<string>;
  /**
   * Default Namespace to be used for Kubernetes deployment when not specified in the manifest.
   */
  "namespace": string;
  "rollbackPolicy"?: model.NoDeployStageRollbackPolicy | model.AutomatedDeployStageRollbackPolicy;

  "deployStageType": string;
}

export namespace OkeDeployStage {
  export function getJsonObj(obj: OkeDeployStage, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.DeployStage.getJsonObj(obj) as OkeDeployStage)),
      ...{
        "rollbackPolicy": obj.rollbackPolicy
          ? model.DeployStageRollbackPolicy.getJsonObj(obj.rollbackPolicy)
          : undefined
      }
    };

    return jsonObj;
  }
  export const deployStageType = "OKE_DEPLOYMENT";
  export function getDeserializedJsonObj(obj: OkeDeployStage, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.DeployStage.getDeserializedJsonObj(obj) as OkeDeployStage)),
      ...{
        "rollbackPolicy": obj.rollbackPolicy
          ? model.DeployStageRollbackPolicy.getDeserializedJsonObj(obj.rollbackPolicy)
          : undefined
      }
    };

    return jsonObj;
  }
}

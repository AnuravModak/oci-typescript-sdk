/**
 * DevOps API
 * Use the DevOps APIs to create a DevOps project to group the pipelines,  add reference to target deployment environments, add artifacts to deploy,  and create deployment pipelines needed to deploy your software.
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The details about the run progress of a Stage in a BuildRun.
 */
export interface BuildPipelineStageRunProgress {
  /**
   * BuildRun identifier which can be renamed and is not necessarily unique
   */
  "stageDisplayName"?: string;
  /**
   * Stage id
   */
  "buildPipelineStageId"?: string;
  /**
   * The time the Stage was started executing. An RFC3339 formatted datetime string
   */
  "timeStarted"?: Date;
  /**
   * The time the Stage was finished executing. An RFC3339 formatted datetime string
   */
  "timeFinished"?: Date;
  /**
   * The current status of the Stage.
   */
  "status"?: BuildPipelineStageRunProgress.Status;
  "buildPipelineStagePredecessors"?: model.BuildPipelineStagePredecessorCollection;

  "buildPipelineStageType": string;
}

export namespace BuildPipelineStageRunProgress {
  export enum Status {
    Accepted = "ACCEPTED",
    InProgress = "IN_PROGRESS",
    Failed = "FAILED",
    Succeeded = "SUCCEEDED",
    Canceling = "CANCELING",
    Canceled = "CANCELED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: BuildPipelineStageRunProgress): object {
    const jsonObj = {
      ...obj,
      ...{
        "buildPipelineStagePredecessors": obj.buildPipelineStagePredecessors
          ? model.BuildPipelineStagePredecessorCollection.getJsonObj(
              obj.buildPipelineStagePredecessors
            )
          : undefined
      }
    };

    if ("buildPipelineStageType" in obj && obj.buildPipelineStageType) {
      switch (obj.buildPipelineStageType) {
        case "DELIVER_ARTIFACT":
          return model.DeliverArtifactStageRunProgress.getJsonObj(
            <model.DeliverArtifactStageRunProgress>(<object>jsonObj),
            true
          );
        case "WAIT":
          return model.WaitStageRunProgress.getJsonObj(
            <model.WaitStageRunProgress>(<object>jsonObj),
            true
          );
        case "TRIGGER_DEPLOYMENT_PIPELINE":
          return model.TriggerDeploymentPipelineStageRunProgress.getJsonObj(
            <model.TriggerDeploymentPipelineStageRunProgress>(<object>jsonObj),
            true
          );
        case "BUILD":
          return model.BuildStageRunProgress.getJsonObj(
            <model.BuildStageRunProgress>(<object>jsonObj),
            true
          );
        default:
          throw Error("Unknown value for: " + obj.buildPipelineStageType);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: BuildPipelineStageRunProgress): object {
    const jsonObj = {
      ...obj,
      ...{
        "buildPipelineStagePredecessors": obj.buildPipelineStagePredecessors
          ? model.BuildPipelineStagePredecessorCollection.getDeserializedJsonObj(
              obj.buildPipelineStagePredecessors
            )
          : undefined
      }
    };

    if ("buildPipelineStageType" in obj && obj.buildPipelineStageType) {
      switch (obj.buildPipelineStageType) {
        case "DELIVER_ARTIFACT":
          return model.DeliverArtifactStageRunProgress.getDeserializedJsonObj(
            <model.DeliverArtifactStageRunProgress>(<object>jsonObj),
            true
          );
        case "WAIT":
          return model.WaitStageRunProgress.getDeserializedJsonObj(
            <model.WaitStageRunProgress>(<object>jsonObj),
            true
          );
        case "TRIGGER_DEPLOYMENT_PIPELINE":
          return model.TriggerDeploymentPipelineStageRunProgress.getDeserializedJsonObj(
            <model.TriggerDeploymentPipelineStageRunProgress>(<object>jsonObj),
            true
          );
        case "BUILD":
          return model.BuildStageRunProgress.getDeserializedJsonObj(
            <model.BuildStageRunProgress>(<object>jsonObj),
            true
          );
        default:
          throw Error("Unknown value for: " + obj.buildPipelineStageType);
      }
    }
    return jsonObj;
  }
}

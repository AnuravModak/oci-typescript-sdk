/**
 * DevOps API
 * Use the DevOps APIs to create a DevOps project to group the pipelines,  add reference to target deployment environments, add artifacts to deploy,  and create deployment pipelines needed to deploy your software.
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Response object for obtaining list of changed files.
 */
export interface DiffResponse {
  /**
   * Boolean for whether all changes are included in the response.
   */
  "areAllChangesIncluded"?: boolean;
  /**
   * Count of each type of change in diff.
   */
  "changeTypeCount"?: { [key: string]: number };
  /**
   * The ID of the common commit between source and target.
   */
  "commonCommit"?: string;
  /**
   * The number of commits source is ahead of target by. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "commitsAheadCount"?: number;
  /**
   * The number of commits source is behind target by. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "commitsBehindCount"?: number;
  /**
   * The number of lines added in whole diff. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "addedLinesCount"?: number;
  /**
   * The number of lines deleted in whole diff. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "deletedLinesCount"?: number;
  /**
   * List of changes in the diff.
   */
  "changes": Array<model.DiffResponseEntry>;
}

export namespace DiffResponse {
  export function getJsonObj(obj: DiffResponse): object {
    const jsonObj = {
      ...obj,
      ...{
        "changes": obj.changes
          ? obj.changes.map(item => {
              return model.DiffResponseEntry.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DiffResponse): object {
    const jsonObj = {
      ...obj,
      ...{
        "changes": obj.changes
          ? obj.changes.map(item => {
              return model.DiffResponseEntry.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}

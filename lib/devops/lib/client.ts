/**
 * DevOps API
 * Use the DevOps APIs to create a DevOps project to group the pipelines,  add reference to target deployment environments, add artifacts to deploy,  and create deployment pipelines needed to deploy your software.
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DevopsWaiter } from "./devops-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DevopsApiKeys {}

export class DevopsClient {
  protected static serviceEndpointTemplate = "https://devops.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DevopsWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    if (!this._circuitBreaker && common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!)) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20210630";
    if (this.logger) this.logger.info(`DevopsClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DevopsClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DevopsClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new DevopsWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DevopsWaiter {
    this._waiters = new DevopsWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DevopsWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Submit stage approval.
   * @param ApproveDeploymentRequest
   * @return ApproveDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ApproveDeployment.ts.html |here} to see how to use ApproveDeployment API.
   */
  public async approveDeployment(
    approveDeploymentRequest: requests.ApproveDeploymentRequest
  ): Promise<responses.ApproveDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#approveDeployment.");
    const pathParams = {
      "{deploymentId}": approveDeploymentRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": approveDeploymentRequest.ifMatch,
      "opc-request-id": approveDeploymentRequest.opcRequestId,
      "opc-retry-token": approveDeploymentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      approveDeploymentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/approve",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        approveDeploymentRequest.approveDeploymentDetails,
        "ApproveDeploymentDetails",
        model.ApproveDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ApproveDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancels a deployment resource by identifier.
   * @param CancelDeploymentRequest
   * @return CancelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CancelDeployment.ts.html |here} to see how to use CancelDeployment API.
   */
  public async cancelDeployment(
    cancelDeploymentRequest: requests.CancelDeploymentRequest
  ): Promise<responses.CancelDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#cancelDeployment.");
    const pathParams = {
      "{deploymentId}": cancelDeploymentRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelDeploymentRequest.ifMatch,
      "opc-request-id": cancelDeploymentRequest.opcRequestId,
      "opc-retry-token": cancelDeploymentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      cancelDeploymentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/cancel",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        cancelDeploymentRequest.cancelDeploymentDetails,
        "CancelDeploymentDetails",
        model.CancelDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a project resource from one compartment OCID to another.
   * @param ChangeProjectCompartmentRequest
   * @return ChangeProjectCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ChangeProjectCompartment.ts.html |here} to see how to use ChangeProjectCompartment API.
   */
  public async changeProjectCompartment(
    changeProjectCompartmentRequest: requests.ChangeProjectCompartmentRequest
  ): Promise<responses.ChangeProjectCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#changeProjectCompartment.");
    const pathParams = {
      "{projectId}": changeProjectCompartmentRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeProjectCompartmentRequest.ifMatch,
      "opc-request-id": changeProjectCompartmentRequest.opcRequestId,
      "opc-retry-token": changeProjectCompartmentRequest.opcRetryToken
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeProjectCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeProjectCompartmentRequest.changeProjectCompartmentDetails,
        "ChangeProjectCompartmentDetails",
        model.ChangeProjectCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeProjectCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new deployment artifact.
   * @param CreateDeployArtifactRequest
   * @return CreateDeployArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateDeployArtifact.ts.html |here} to see how to use CreateDeployArtifact API.
   */
  public async createDeployArtifact(
    createDeployArtifactRequest: requests.CreateDeployArtifactRequest
  ): Promise<responses.CreateDeployArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createDeployArtifact.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeployArtifactRequest.opcRetryToken,
      "opc-request-id": createDeployArtifactRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createDeployArtifactRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployArtifacts",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeployArtifactRequest.createDeployArtifactDetails,
        "CreateDeployArtifactDetails",
        model.CreateDeployArtifactDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeployArtifactResponse>{},
        body: await response.json(),
        bodyKey: "deployArtifact",
        bodyModel: model.DeployArtifact,
        type: "model.DeployArtifact",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new deployment environment.
   * @param CreateDeployEnvironmentRequest
   * @return CreateDeployEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateDeployEnvironment.ts.html |here} to see how to use CreateDeployEnvironment API.
   */
  public async createDeployEnvironment(
    createDeployEnvironmentRequest: requests.CreateDeployEnvironmentRequest
  ): Promise<responses.CreateDeployEnvironmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createDeployEnvironment.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeployEnvironmentRequest.opcRetryToken,
      "opc-request-id": createDeployEnvironmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createDeployEnvironmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployEnvironments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeployEnvironmentRequest.createDeployEnvironmentDetails,
        "CreateDeployEnvironmentDetails",
        model.CreateDeployEnvironmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeployEnvironmentResponse>{},
        body: await response.json(),
        bodyKey: "deployEnvironment",
        bodyModel: model.DeployEnvironment,
        type: "model.DeployEnvironment",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new deployment pipeline.
   * @param CreateDeployPipelineRequest
   * @return CreateDeployPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateDeployPipeline.ts.html |here} to see how to use CreateDeployPipeline API.
   */
  public async createDeployPipeline(
    createDeployPipelineRequest: requests.CreateDeployPipelineRequest
  ): Promise<responses.CreateDeployPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createDeployPipeline.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeployPipelineRequest.opcRetryToken,
      "opc-request-id": createDeployPipelineRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createDeployPipelineRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployPipelines",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeployPipelineRequest.createDeployPipelineDetails,
        "CreateDeployPipelineDetails",
        model.CreateDeployPipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeployPipelineResponse>{},
        body: await response.json(),
        bodyKey: "deployPipeline",
        bodyModel: model.DeployPipeline,
        type: "model.DeployPipeline",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new deployment stage.
   * @param CreateDeployStageRequest
   * @return CreateDeployStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateDeployStage.ts.html |here} to see how to use CreateDeployStage API.
   */
  public async createDeployStage(
    createDeployStageRequest: requests.CreateDeployStageRequest
  ): Promise<responses.CreateDeployStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createDeployStage.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeployStageRequest.opcRetryToken,
      "opc-request-id": createDeployStageRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createDeployStageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployStages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeployStageRequest.createDeployStageDetails,
        "CreateDeployStageDetails",
        model.CreateDeployStageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeployStageResponse>{},
        body: await response.json(),
        bodyKey: "deployStage",
        bodyModel: model.DeployStage,
        type: "model.DeployStage",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new deployment.
   * @param CreateDeploymentRequest
   * @return CreateDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateDeployment.ts.html |here} to see how to use CreateDeployment API.
   */
  public async createDeployment(
    createDeploymentRequest: requests.CreateDeploymentRequest
  ): Promise<responses.CreateDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createDeployment.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeploymentRequest.opcRetryToken,
      "opc-request-id": createDeploymentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createDeploymentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeploymentRequest.createDeploymentDetails,
        "CreateDeploymentDetails",
        model.CreateDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new project.
   * @param CreateProjectRequest
   * @return CreateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateProject.ts.html |here} to see how to use CreateProject API.
   */
  public async createProject(
    createProjectRequest: requests.CreateProjectRequest
  ): Promise<responses.CreateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createProject.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createProjectRequest.opcRetryToken,
      "opc-request-id": createProjectRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createProjectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProjectRequest.createProjectDetails,
        "CreateProjectDetails",
        model.CreateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a deployment artifact resource by identifier.
   * @param DeleteDeployArtifactRequest
   * @return DeleteDeployArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteDeployArtifact.ts.html |here} to see how to use DeleteDeployArtifact API.
   */
  public async deleteDeployArtifact(
    deleteDeployArtifactRequest: requests.DeleteDeployArtifactRequest
  ): Promise<responses.DeleteDeployArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteDeployArtifact.");
    const pathParams = {
      "{deployArtifactId}": deleteDeployArtifactRequest.deployArtifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDeployArtifactRequest.ifMatch,
      "opc-request-id": deleteDeployArtifactRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteDeployArtifactRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployArtifacts/{deployArtifactId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDeployArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a deployment environment resource by identifier.
   * @param DeleteDeployEnvironmentRequest
   * @return DeleteDeployEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteDeployEnvironment.ts.html |here} to see how to use DeleteDeployEnvironment API.
   */
  public async deleteDeployEnvironment(
    deleteDeployEnvironmentRequest: requests.DeleteDeployEnvironmentRequest
  ): Promise<responses.DeleteDeployEnvironmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteDeployEnvironment.");
    const pathParams = {
      "{deployEnvironmentId}": deleteDeployEnvironmentRequest.deployEnvironmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDeployEnvironmentRequest.ifMatch,
      "opc-request-id": deleteDeployEnvironmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteDeployEnvironmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployEnvironments/{deployEnvironmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDeployEnvironmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a deployment pipeline resource by identifier.
   * @param DeleteDeployPipelineRequest
   * @return DeleteDeployPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteDeployPipeline.ts.html |here} to see how to use DeleteDeployPipeline API.
   */
  public async deleteDeployPipeline(
    deleteDeployPipelineRequest: requests.DeleteDeployPipelineRequest
  ): Promise<responses.DeleteDeployPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteDeployPipeline.");
    const pathParams = {
      "{deployPipelineId}": deleteDeployPipelineRequest.deployPipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDeployPipelineRequest.ifMatch,
      "opc-request-id": deleteDeployPipelineRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteDeployPipelineRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployPipelines/{deployPipelineId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDeployPipelineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a deployment stage resource by identifier.
   * @param DeleteDeployStageRequest
   * @return DeleteDeployStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteDeployStage.ts.html |here} to see how to use DeleteDeployStage API.
   */
  public async deleteDeployStage(
    deleteDeployStageRequest: requests.DeleteDeployStageRequest
  ): Promise<responses.DeleteDeployStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteDeployStage.");
    const pathParams = {
      "{deployStageId}": deleteDeployStageRequest.deployStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDeployStageRequest.ifMatch,
      "opc-request-id": deleteDeployStageRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteDeployStageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployStages/{deployStageId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDeployStageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a project resource by identifier
   * @param DeleteProjectRequest
   * @return DeleteProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteProject.ts.html |here} to see how to use DeleteProject API.
   */
  public async deleteProject(
    deleteProjectRequest: requests.DeleteProjectRequest
  ): Promise<responses.DeleteProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteProject.");
    const pathParams = {
      "{projectId}": deleteProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProjectRequest.ifMatch,
      "opc-request-id": deleteProjectRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteProjectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment artifact by identifier.
   * @param GetDeployArtifactRequest
   * @return GetDeployArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetDeployArtifact.ts.html |here} to see how to use GetDeployArtifact API.
   */
  public async getDeployArtifact(
    getDeployArtifactRequest: requests.GetDeployArtifactRequest
  ): Promise<responses.GetDeployArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getDeployArtifact.");
    const pathParams = {
      "{deployArtifactId}": getDeployArtifactRequest.deployArtifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeployArtifactRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDeployArtifactRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployArtifacts/{deployArtifactId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeployArtifactResponse>{},
        body: await response.json(),
        bodyKey: "deployArtifact",
        bodyModel: model.DeployArtifact,
        type: "model.DeployArtifact",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment environment by identifier.
   * @param GetDeployEnvironmentRequest
   * @return GetDeployEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetDeployEnvironment.ts.html |here} to see how to use GetDeployEnvironment API.
   */
  public async getDeployEnvironment(
    getDeployEnvironmentRequest: requests.GetDeployEnvironmentRequest
  ): Promise<responses.GetDeployEnvironmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getDeployEnvironment.");
    const pathParams = {
      "{deployEnvironmentId}": getDeployEnvironmentRequest.deployEnvironmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeployEnvironmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDeployEnvironmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployEnvironments/{deployEnvironmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeployEnvironmentResponse>{},
        body: await response.json(),
        bodyKey: "deployEnvironment",
        bodyModel: model.DeployEnvironment,
        type: "model.DeployEnvironment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment pipeline by identifier.
   * @param GetDeployPipelineRequest
   * @return GetDeployPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetDeployPipeline.ts.html |here} to see how to use GetDeployPipeline API.
   */
  public async getDeployPipeline(
    getDeployPipelineRequest: requests.GetDeployPipelineRequest
  ): Promise<responses.GetDeployPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getDeployPipeline.");
    const pathParams = {
      "{deployPipelineId}": getDeployPipelineRequest.deployPipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeployPipelineRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDeployPipelineRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployPipelines/{deployPipelineId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeployPipelineResponse>{},
        body: await response.json(),
        bodyKey: "deployPipeline",
        bodyModel: model.DeployPipeline,
        type: "model.DeployPipeline",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment stage by identifier.
   * @param GetDeployStageRequest
   * @return GetDeployStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetDeployStage.ts.html |here} to see how to use GetDeployStage API.
   */
  public async getDeployStage(
    getDeployStageRequest: requests.GetDeployStageRequest
  ): Promise<responses.GetDeployStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getDeployStage.");
    const pathParams = {
      "{deployStageId}": getDeployStageRequest.deployStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeployStageRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDeployStageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployStages/{deployStageId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeployStageResponse>{},
        body: await response.json(),
        bodyKey: "deployStage",
        bodyModel: model.DeployStage,
        type: "model.DeployStage",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment by identifier.
   * @param GetDeploymentRequest
   * @return GetDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetDeployment.ts.html |here} to see how to use GetDeployment API.
   */
  public async getDeployment(
    getDeploymentRequest: requests.GetDeploymentRequest
  ): Promise<responses.GetDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getDeployment.");
    const pathParams = {
      "{deploymentId}": getDeploymentRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeploymentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getDeploymentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a project by identifier.
   * @param GetProjectRequest
   * @return GetProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetProject.ts.html |here} to see how to use GetProject API.
   */
  public async getProject(
    getProjectRequest: requests.GetProjectRequest
  ): Promise<responses.GetProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getProject.");
    const pathParams = {
      "{projectId}": getProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProjectRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getProjectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the status of the work request with the given ID.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getWorkRequest.");
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getWorkRequestRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of deployment artifacts.
   * @param ListDeployArtifactsRequest
   * @return ListDeployArtifactsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListDeployArtifacts.ts.html |here} to see how to use ListDeployArtifacts API.
   */
  public async listDeployArtifacts(
    listDeployArtifactsRequest: requests.ListDeployArtifactsRequest
  ): Promise<responses.ListDeployArtifactsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listDeployArtifacts.");
    const pathParams = {};

    const queryParams = {
      "id": listDeployArtifactsRequest.id,
      "projectId": listDeployArtifactsRequest.projectId,
      "compartmentId": listDeployArtifactsRequest.compartmentId,
      "lifecycleState": listDeployArtifactsRequest.lifecycleState,
      "displayName": listDeployArtifactsRequest.displayName,
      "limit": listDeployArtifactsRequest.limit,
      "page": listDeployArtifactsRequest.page,
      "sortOrder": listDeployArtifactsRequest.sortOrder,
      "sortBy": listDeployArtifactsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeployArtifactsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDeployArtifactsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployArtifacts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeployArtifactsResponse>{},
        body: await response.json(),
        bodyKey: "deployArtifactCollection",
        bodyModel: model.DeployArtifactCollection,
        type: "model.DeployArtifactCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of deployment environments.
   * @param ListDeployEnvironmentsRequest
   * @return ListDeployEnvironmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListDeployEnvironments.ts.html |here} to see how to use ListDeployEnvironments API.
   */
  public async listDeployEnvironments(
    listDeployEnvironmentsRequest: requests.ListDeployEnvironmentsRequest
  ): Promise<responses.ListDeployEnvironmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listDeployEnvironments.");
    const pathParams = {};

    const queryParams = {
      "projectId": listDeployEnvironmentsRequest.projectId,
      "compartmentId": listDeployEnvironmentsRequest.compartmentId,
      "id": listDeployEnvironmentsRequest.id,
      "lifecycleState": listDeployEnvironmentsRequest.lifecycleState,
      "displayName": listDeployEnvironmentsRequest.displayName,
      "limit": listDeployEnvironmentsRequest.limit,
      "page": listDeployEnvironmentsRequest.page,
      "sortOrder": listDeployEnvironmentsRequest.sortOrder,
      "sortBy": listDeployEnvironmentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeployEnvironmentsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDeployEnvironmentsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployEnvironments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeployEnvironmentsResponse>{},
        body: await response.json(),
        bodyKey: "deployEnvironmentCollection",
        bodyModel: model.DeployEnvironmentCollection,
        type: "model.DeployEnvironmentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of deployment pipelines.
   * @param ListDeployPipelinesRequest
   * @return ListDeployPipelinesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListDeployPipelines.ts.html |here} to see how to use ListDeployPipelines API.
   */
  public async listDeployPipelines(
    listDeployPipelinesRequest: requests.ListDeployPipelinesRequest
  ): Promise<responses.ListDeployPipelinesResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listDeployPipelines.");
    const pathParams = {};

    const queryParams = {
      "id": listDeployPipelinesRequest.id,
      "projectId": listDeployPipelinesRequest.projectId,
      "compartmentId": listDeployPipelinesRequest.compartmentId,
      "lifecycleState": listDeployPipelinesRequest.lifecycleState,
      "displayName": listDeployPipelinesRequest.displayName,
      "limit": listDeployPipelinesRequest.limit,
      "page": listDeployPipelinesRequest.page,
      "sortOrder": listDeployPipelinesRequest.sortOrder,
      "sortBy": listDeployPipelinesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeployPipelinesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDeployPipelinesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployPipelines",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeployPipelinesResponse>{},
        body: await response.json(),
        bodyKey: "deployPipelineCollection",
        bodyModel: model.DeployPipelineCollection,
        type: "model.DeployPipelineCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of deployment stages.
   * @param ListDeployStagesRequest
   * @return ListDeployStagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListDeployStages.ts.html |here} to see how to use ListDeployStages API.
   */
  public async listDeployStages(
    listDeployStagesRequest: requests.ListDeployStagesRequest
  ): Promise<responses.ListDeployStagesResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listDeployStages.");
    const pathParams = {};

    const queryParams = {
      "id": listDeployStagesRequest.id,
      "deployPipelineId": listDeployStagesRequest.deployPipelineId,
      "compartmentId": listDeployStagesRequest.compartmentId,
      "lifecycleState": listDeployStagesRequest.lifecycleState,
      "displayName": listDeployStagesRequest.displayName,
      "limit": listDeployStagesRequest.limit,
      "page": listDeployStagesRequest.page,
      "sortOrder": listDeployStagesRequest.sortOrder,
      "sortBy": listDeployStagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeployStagesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDeployStagesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployStages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeployStagesResponse>{},
        body: await response.json(),
        bodyKey: "deployStageCollection",
        bodyModel: model.DeployStageCollection,
        type: "model.DeployStageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of deployments.
   * @param ListDeploymentsRequest
   * @return ListDeploymentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListDeployments.ts.html |here} to see how to use ListDeployments API.
   */
  public async listDeployments(
    listDeploymentsRequest: requests.ListDeploymentsRequest
  ): Promise<responses.ListDeploymentsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listDeployments.");
    const pathParams = {};

    const queryParams = {
      "deployPipelineId": listDeploymentsRequest.deployPipelineId,
      "id": listDeploymentsRequest.id,
      "compartmentId": listDeploymentsRequest.compartmentId,
      "projectId": listDeploymentsRequest.projectId,
      "lifecycleState": listDeploymentsRequest.lifecycleState,
      "displayName": listDeploymentsRequest.displayName,
      "limit": listDeploymentsRequest.limit,
      "page": listDeploymentsRequest.page,
      "sortOrder": listDeploymentsRequest.sortOrder,
      "sortBy": listDeploymentsRequest.sortBy,
      "timeCreatedLessThan": listDeploymentsRequest.timeCreatedLessThan,
      "timeCreatedGreaterThanOrEqualTo": listDeploymentsRequest.timeCreatedGreaterThanOrEqualTo
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeploymentsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listDeploymentsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeploymentsResponse>{},
        body: await response.json(),
        bodyKey: "deploymentCollection",
        bodyModel: model.DeploymentCollection,
        type: "model.DeploymentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of projects.
   * @param ListProjectsRequest
   * @return ListProjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListProjects.ts.html |here} to see how to use ListProjects API.
   */
  public async listProjects(
    listProjectsRequest: requests.ListProjectsRequest
  ): Promise<responses.ListProjectsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listProjects.");
    const pathParams = {};

    const queryParams = {
      "id": listProjectsRequest.id,
      "compartmentId": listProjectsRequest.compartmentId,
      "lifecycleState": listProjectsRequest.lifecycleState,
      "name": listProjectsRequest.name,
      "limit": listProjectsRequest.limit,
      "page": listProjectsRequest.page,
      "sortOrder": listProjectsRequest.sortOrder,
      "sortBy": listProjectsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProjectsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listProjectsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProjectsResponse>{},
        body: await response.json(),
        bodyKey: "projectCollection",
        bodyModel: model.ProjectCollection,
        type: "model.ProjectCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of errors for a given work request.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listWorkRequestErrors.");
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder,
      "sortBy": listWorkRequestErrorsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestErrorsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of logs for a given work request.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listWorkRequestLogs.");
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortOrder": listWorkRequestLogsRequest.sortOrder,
      "sortBy": listWorkRequestLogsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestLogsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listWorkRequests.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: model.WorkRequestCollection,
        type: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the deployment artifact.
   * @param UpdateDeployArtifactRequest
   * @return UpdateDeployArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateDeployArtifact.ts.html |here} to see how to use UpdateDeployArtifact API.
   */
  public async updateDeployArtifact(
    updateDeployArtifactRequest: requests.UpdateDeployArtifactRequest
  ): Promise<responses.UpdateDeployArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateDeployArtifact.");
    const pathParams = {
      "{deployArtifactId}": updateDeployArtifactRequest.deployArtifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeployArtifactRequest.ifMatch,
      "opc-request-id": updateDeployArtifactRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateDeployArtifactRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployArtifacts/{deployArtifactId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeployArtifactRequest.updateDeployArtifactDetails,
        "UpdateDeployArtifactDetails",
        model.UpdateDeployArtifactDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeployArtifactResponse>{},
        body: await response.json(),
        bodyKey: "deployArtifact",
        bodyModel: model.DeployArtifact,
        type: "model.DeployArtifact",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the deployment environment.
   * @param UpdateDeployEnvironmentRequest
   * @return UpdateDeployEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateDeployEnvironment.ts.html |here} to see how to use UpdateDeployEnvironment API.
   */
  public async updateDeployEnvironment(
    updateDeployEnvironmentRequest: requests.UpdateDeployEnvironmentRequest
  ): Promise<responses.UpdateDeployEnvironmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateDeployEnvironment.");
    const pathParams = {
      "{deployEnvironmentId}": updateDeployEnvironmentRequest.deployEnvironmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeployEnvironmentRequest.ifMatch,
      "opc-request-id": updateDeployEnvironmentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateDeployEnvironmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployEnvironments/{deployEnvironmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeployEnvironmentRequest.updateDeployEnvironmentDetails,
        "UpdateDeployEnvironmentDetails",
        model.UpdateDeployEnvironmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeployEnvironmentResponse>{},
        body: await response.json(),
        bodyKey: "deployEnvironment",
        bodyModel: model.DeployEnvironment,
        type: "model.DeployEnvironment",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the deployment pipeline.
   * @param UpdateDeployPipelineRequest
   * @return UpdateDeployPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateDeployPipeline.ts.html |here} to see how to use UpdateDeployPipeline API.
   */
  public async updateDeployPipeline(
    updateDeployPipelineRequest: requests.UpdateDeployPipelineRequest
  ): Promise<responses.UpdateDeployPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateDeployPipeline.");
    const pathParams = {
      "{deployPipelineId}": updateDeployPipelineRequest.deployPipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeployPipelineRequest.ifMatch,
      "opc-request-id": updateDeployPipelineRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateDeployPipelineRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployPipelines/{deployPipelineId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeployPipelineRequest.updateDeployPipelineDetails,
        "UpdateDeployPipelineDetails",
        model.UpdateDeployPipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeployPipelineResponse>{},
        body: await response.json(),
        bodyKey: "deployPipeline",
        bodyModel: model.DeployPipeline,
        type: "model.DeployPipeline",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the deployment stage.
   * @param UpdateDeployStageRequest
   * @return UpdateDeployStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateDeployStage.ts.html |here} to see how to use UpdateDeployStage API.
   */
  public async updateDeployStage(
    updateDeployStageRequest: requests.UpdateDeployStageRequest
  ): Promise<responses.UpdateDeployStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateDeployStage.");
    const pathParams = {
      "{deployStageId}": updateDeployStageRequest.deployStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeployStageRequest.ifMatch,
      "opc-request-id": updateDeployStageRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateDeployStageRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployStages/{deployStageId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeployStageRequest.updateDeployStageDetails,
        "UpdateDeployStageDetails",
        model.UpdateDeployStageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeployStageResponse>{},
        body: await response.json(),
        bodyKey: "deployStage",
        bodyModel: model.DeployStage,
        type: "model.DeployStage",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the deployment.
   * @param UpdateDeploymentRequest
   * @return UpdateDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateDeployment.ts.html |here} to see how to use UpdateDeployment API.
   */
  public async updateDeployment(
    updateDeploymentRequest: requests.UpdateDeploymentRequest
  ): Promise<responses.UpdateDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateDeployment.");
    const pathParams = {
      "{deploymentId}": updateDeploymentRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeploymentRequest.ifMatch,
      "opc-request-id": updateDeploymentRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateDeploymentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeploymentRequest.updateDeploymentDetails,
        "UpdateDeploymentDetails",
        model.UpdateDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the project.
   * @param UpdateProjectRequest
   * @return UpdateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateProject.ts.html |here} to see how to use UpdateProject API.
   */
  public async updateProject(
    updateProjectRequest: requests.UpdateProjectRequest
  ): Promise<responses.UpdateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateProject.");
    const pathParams = {
      "{projectId}": updateProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateProjectRequest.ifMatch,
      "opc-request-id": updateProjectRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateProjectRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProjectRequest.updateProjectDetails,
        "UpdateProjectDetails",
        model.UpdateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

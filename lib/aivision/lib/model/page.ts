/**
 * VisionService API
 * A description of the VisionService API.
 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * One page document analysis result.
 */
export interface Page {
  /**
   * Document page number. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "pageNumber": number;
  "dimensions"?: model.Dimensions;
  /**
   * An array of detected document types.
   */
  "detectedDocumentTypes"?: Array<model.DetectedDocumentType>;
  /**
   * An array of detected languages.
   */
  "detectedLanguages"?: Array<model.DetectedLanguage>;
  /**
   * Words detected on the page.
   */
  "words"?: Array<model.Word>;
  /**
   * Text lines detected on the page.
   */
  "lines"?: Array<model.Line>;
  /**
   * Tables detected on the page.
   */
  "tables"?: Array<model.Table>;
  /**
   * Form fields detected on the page.
   */
  "documentFields"?: Array<model.DocumentField>;
}

export namespace Page {
  export function getJsonObj(obj: Page): object {
    const jsonObj = {
      ...obj,
      ...{
        "dimensions": obj.dimensions ? model.Dimensions.getJsonObj(obj.dimensions) : undefined,
        "detectedDocumentTypes": obj.detectedDocumentTypes
          ? obj.detectedDocumentTypes.map(item => {
              return model.DetectedDocumentType.getJsonObj(item);
            })
          : undefined,
        "detectedLanguages": obj.detectedLanguages
          ? obj.detectedLanguages.map(item => {
              return model.DetectedLanguage.getJsonObj(item);
            })
          : undefined,
        "words": obj.words
          ? obj.words.map(item => {
              return model.Word.getJsonObj(item);
            })
          : undefined,
        "lines": obj.lines
          ? obj.lines.map(item => {
              return model.Line.getJsonObj(item);
            })
          : undefined,
        "tables": obj.tables
          ? obj.tables.map(item => {
              return model.Table.getJsonObj(item);
            })
          : undefined,
        "documentFields": obj.documentFields
          ? obj.documentFields.map(item => {
              return model.DocumentField.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: Page): object {
    const jsonObj = {
      ...obj,
      ...{
        "dimensions": obj.dimensions
          ? model.Dimensions.getDeserializedJsonObj(obj.dimensions)
          : undefined,
        "detectedDocumentTypes": obj.detectedDocumentTypes
          ? obj.detectedDocumentTypes.map(item => {
              return model.DetectedDocumentType.getDeserializedJsonObj(item);
            })
          : undefined,
        "detectedLanguages": obj.detectedLanguages
          ? obj.detectedLanguages.map(item => {
              return model.DetectedLanguage.getDeserializedJsonObj(item);
            })
          : undefined,
        "words": obj.words
          ? obj.words.map(item => {
              return model.Word.getDeserializedJsonObj(item);
            })
          : undefined,
        "lines": obj.lines
          ? obj.lines.map(item => {
              return model.Line.getDeserializedJsonObj(item);
            })
          : undefined,
        "tables": obj.tables
          ? obj.tables.map(item => {
              return model.Table.getDeserializedJsonObj(item);
            })
          : undefined,
        "documentFields": obj.documentFields
          ? obj.documentFields.map(item => {
              return model.DocumentField.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}

/**
 * Language API
 * OCI Language Service solutions can help enterprise customers integrate AI into their products immediately using our proven,
    pre-trained and custom models or containers, without a need to set up an house team of AI and ML experts.
    This allows enterprises to focus on business drivers and development work rather than AI and ML operations, which shortens the time to market.

 * OpenAPI spec version: 20210101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AIServiceLanguageApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class AIServiceLanguageClient {
  protected static serviceEndpointTemplate =
    "https://language.aiservice.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  public targetService = "AIServiceLanguage";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20210101";
    if (this.logger) this.logger.info(`AIServiceLanguageClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      AIServiceLanguageClient.serviceEndpointTemplate,
      region,
      AIServiceLanguageClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      AIServiceLanguageClient.serviceEndpointTemplate,
      regionId,
      AIServiceLanguageClient.endpointServiceName
    );
  }

  /**
   * Make a detect call to language detection pre-deployed model.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BatchDetectDominantLanguageRequest
   * @return BatchDetectDominantLanguageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/ailanguage/BatchDetectDominantLanguage.ts.html |here} to see how to use BatchDetectDominantLanguage API.
   */
  public async batchDetectDominantLanguage(
    batchDetectDominantLanguageRequest: requests.BatchDetectDominantLanguageRequest
  ): Promise<responses.BatchDetectDominantLanguageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceLanguageClient#batchDetectDominantLanguage.");
    const operationName = "batchDetectDominantLanguage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/language/20210101/BatchDetectDominantLanguage/BatchDetectDominantLanguage";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": batchDetectDominantLanguageRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      batchDetectDominantLanguageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/batchDetectDominantLanguage",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        batchDetectDominantLanguageRequest.batchDetectDominantLanguageDetails,
        "BatchDetectDominantLanguageDetails",
        model.BatchDetectDominantLanguageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BatchDetectDominantLanguageResponse>{},
        body: await response.json(),
        bodyKey: "batchDetectDominantLanguageResult",
        bodyModel: model.BatchDetectDominantLanguageResult,
        type: "model.BatchDetectDominantLanguageResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Make a batch detect call to entity pre-deployed model
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BatchDetectLanguageEntitiesRequest
   * @return BatchDetectLanguageEntitiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/ailanguage/BatchDetectLanguageEntities.ts.html |here} to see how to use BatchDetectLanguageEntities API.
   */
  public async batchDetectLanguageEntities(
    batchDetectLanguageEntitiesRequest: requests.BatchDetectLanguageEntitiesRequest
  ): Promise<responses.BatchDetectLanguageEntitiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceLanguageClient#batchDetectLanguageEntities.");
    const operationName = "batchDetectLanguageEntities";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/language/20210101/BatchDetectLanguageEntities/BatchDetectLanguageEntities";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": batchDetectLanguageEntitiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      batchDetectLanguageEntitiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/batchDetectLanguageEntities",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        batchDetectLanguageEntitiesRequest.batchDetectLanguageEntitiesDetails,
        "BatchDetectLanguageEntitiesDetails",
        model.BatchDetectLanguageEntitiesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BatchDetectLanguageEntitiesResponse>{},
        body: await response.json(),
        bodyKey: "batchDetectLanguageEntitiesResult",
        bodyModel: model.BatchDetectLanguageEntitiesResult,
        type: "model.BatchDetectLanguageEntitiesResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Make a detect call to the keyPhrase pre-deployed model.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BatchDetectLanguageKeyPhrasesRequest
   * @return BatchDetectLanguageKeyPhrasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/ailanguage/BatchDetectLanguageKeyPhrases.ts.html |here} to see how to use BatchDetectLanguageKeyPhrases API.
   */
  public async batchDetectLanguageKeyPhrases(
    batchDetectLanguageKeyPhrasesRequest: requests.BatchDetectLanguageKeyPhrasesRequest
  ): Promise<responses.BatchDetectLanguageKeyPhrasesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceLanguageClient#batchDetectLanguageKeyPhrases.");
    const operationName = "batchDetectLanguageKeyPhrases";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/language/20210101/BatchDetectLanguageKeyPhrases/BatchDetectLanguageKeyPhrases";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": batchDetectLanguageKeyPhrasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      batchDetectLanguageKeyPhrasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/batchDetectLanguageKeyPhrases",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        batchDetectLanguageKeyPhrasesRequest.batchDetectLanguageKeyPhrasesDetails,
        "BatchDetectLanguageKeyPhrasesDetails",
        model.BatchDetectLanguageKeyPhrasesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BatchDetectLanguageKeyPhrasesResponse>{},
        body: await response.json(),
        bodyKey: "batchDetectLanguageKeyPhrasesResult",
        bodyModel: model.BatchDetectLanguageKeyPhrasesResult,
        type: "model.BatchDetectLanguageKeyPhrasesResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Make a detect call to sentiment pre-deployed model.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BatchDetectLanguageSentimentsRequest
   * @return BatchDetectLanguageSentimentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/ailanguage/BatchDetectLanguageSentiments.ts.html |here} to see how to use BatchDetectLanguageSentiments API.
   */
  public async batchDetectLanguageSentiments(
    batchDetectLanguageSentimentsRequest: requests.BatchDetectLanguageSentimentsRequest
  ): Promise<responses.BatchDetectLanguageSentimentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceLanguageClient#batchDetectLanguageSentiments.");
    const operationName = "batchDetectLanguageSentiments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/language/20210101/BatchDetectLanguageSentiments/BatchDetectLanguageSentiments";
    const pathParams = {};

    const queryParams = {
      "level": batchDetectLanguageSentimentsRequest.level
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": batchDetectLanguageSentimentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      batchDetectLanguageSentimentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/batchDetectLanguageSentiments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        batchDetectLanguageSentimentsRequest.batchDetectLanguageSentimentsDetails,
        "BatchDetectLanguageSentimentsDetails",
        model.BatchDetectLanguageSentimentsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BatchDetectLanguageSentimentsResponse>{},
        body: await response.json(),
        bodyKey: "batchDetectLanguageSentimentsResult",
        bodyModel: model.BatchDetectLanguageSentimentsResult,
        type: "model.BatchDetectLanguageSentimentsResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Make a detect call to text classification from the pre-deployed model.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param BatchDetectLanguageTextClassificationRequest
   * @return BatchDetectLanguageTextClassificationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/ailanguage/BatchDetectLanguageTextClassification.ts.html |here} to see how to use BatchDetectLanguageTextClassification API.
   */
  public async batchDetectLanguageTextClassification(
    batchDetectLanguageTextClassificationRequest: requests.BatchDetectLanguageTextClassificationRequest
  ): Promise<responses.BatchDetectLanguageTextClassificationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation AIServiceLanguageClient#batchDetectLanguageTextClassification."
      );
    const operationName = "batchDetectLanguageTextClassification";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/language/20210101/BatchDetectLanguageTextClassification/BatchDetectLanguageTextClassification";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": batchDetectLanguageTextClassificationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      batchDetectLanguageTextClassificationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/batchDetectLanguageTextClassification",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        batchDetectLanguageTextClassificationRequest.batchDetectLanguageTextClassificationDetails,
        "BatchDetectLanguageTextClassificationDetails",
        model.BatchDetectLanguageTextClassificationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.BatchDetectLanguageTextClassificationResponse>{},
        body: await response.json(),
        bodyKey: "batchDetectLanguageTextClassificationResult",
        bodyModel: model.BatchDetectLanguageTextClassificationResult,
        type: "model.BatchDetectLanguageTextClassificationResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Make a detect call to language detection pre-deployed model.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DetectDominantLanguageRequest
   * @return DetectDominantLanguageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/ailanguage/DetectDominantLanguage.ts.html |here} to see how to use DetectDominantLanguage API.
   */
  public async detectDominantLanguage(
    detectDominantLanguageRequest: requests.DetectDominantLanguageRequest
  ): Promise<responses.DetectDominantLanguageResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceLanguageClient#detectDominantLanguage.");
    const operationName = "detectDominantLanguage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/language/20210101/DetectDominantLanguage/DetectDominantLanguage";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": detectDominantLanguageRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detectDominantLanguageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/detectDominantLanguage",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detectDominantLanguageRequest.detectDominantLanguageDetails,
        "DetectDominantLanguageDetails",
        model.DetectDominantLanguageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetectDominantLanguageResponse>{},
        body: await response.json(),
        bodyKey: "detectDominantLanguageResult",
        bodyModel: model.DetectDominantLanguageResult,
        type: "model.DetectDominantLanguageResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Make a detect call to enitiy pre-deployed model
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DetectLanguageEntitiesRequest
   * @return DetectLanguageEntitiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/ailanguage/DetectLanguageEntities.ts.html |here} to see how to use DetectLanguageEntities API.
   */
  public async detectLanguageEntities(
    detectLanguageEntitiesRequest: requests.DetectLanguageEntitiesRequest
  ): Promise<responses.DetectLanguageEntitiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceLanguageClient#detectLanguageEntities.");
    const operationName = "detectLanguageEntities";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/language/20210101/DetectLanguageEntities/DetectLanguageEntities";
    const pathParams = {};

    const queryParams = {
      "modelVersion": detectLanguageEntitiesRequest.modelVersion,
      "isPii": detectLanguageEntitiesRequest.isPii
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": detectLanguageEntitiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detectLanguageEntitiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/detectLanguageEntities",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detectLanguageEntitiesRequest.detectLanguageEntitiesDetails,
        "DetectLanguageEntitiesDetails",
        model.DetectLanguageEntitiesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetectLanguageEntitiesResponse>{},
        body: await response.json(),
        bodyKey: "detectLanguageEntitiesResult",
        bodyModel: model.DetectLanguageEntitiesResult,
        type: "model.DetectLanguageEntitiesResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Make a detect call to the keyPhrase pre-deployed model.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DetectLanguageKeyPhrasesRequest
   * @return DetectLanguageKeyPhrasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/ailanguage/DetectLanguageKeyPhrases.ts.html |here} to see how to use DetectLanguageKeyPhrases API.
   */
  public async detectLanguageKeyPhrases(
    detectLanguageKeyPhrasesRequest: requests.DetectLanguageKeyPhrasesRequest
  ): Promise<responses.DetectLanguageKeyPhrasesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceLanguageClient#detectLanguageKeyPhrases.");
    const operationName = "detectLanguageKeyPhrases";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/language/20210101/DetectLanguageKeyPhrases/DetectLanguageKeyPhrases";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": detectLanguageKeyPhrasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detectLanguageKeyPhrasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/detectLanguageKeyPhrases",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detectLanguageKeyPhrasesRequest.detectLanguageKeyPhrasesDetails,
        "DetectLanguageKeyPhrasesDetails",
        model.DetectLanguageKeyPhrasesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetectLanguageKeyPhrasesResponse>{},
        body: await response.json(),
        bodyKey: "detectLanguageKeyPhrasesResult",
        bodyModel: model.DetectLanguageKeyPhrasesResult,
        type: "model.DetectLanguageKeyPhrasesResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Make a detect call to sentiment pre-deployed model.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DetectLanguageSentimentsRequest
   * @return DetectLanguageSentimentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/ailanguage/DetectLanguageSentiments.ts.html |here} to see how to use DetectLanguageSentiments API.
   */
  public async detectLanguageSentiments(
    detectLanguageSentimentsRequest: requests.DetectLanguageSentimentsRequest
  ): Promise<responses.DetectLanguageSentimentsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation AIServiceLanguageClient#detectLanguageSentiments.");
    const operationName = "detectLanguageSentiments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/language/20210101/DetectLanguageSentiments/DetectLanguageSentiments";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": detectLanguageSentimentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detectLanguageSentimentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/detectLanguageSentiments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detectLanguageSentimentsRequest.detectLanguageSentimentsDetails,
        "DetectLanguageSentimentsDetails",
        model.DetectLanguageSentimentsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetectLanguageSentimentsResponse>{},
        body: await response.json(),
        bodyKey: "detectLanguageSentimentsResult",
        bodyModel: model.DetectLanguageSentimentsResult,
        type: "model.DetectLanguageSentimentsResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Make a detect call to text classification from the pre-deployed model.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DetectLanguageTextClassificationRequest
   * @return DetectLanguageTextClassificationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/ailanguage/DetectLanguageTextClassification.ts.html |here} to see how to use DetectLanguageTextClassification API.
   */
  public async detectLanguageTextClassification(
    detectLanguageTextClassificationRequest: requests.DetectLanguageTextClassificationRequest
  ): Promise<responses.DetectLanguageTextClassificationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation AIServiceLanguageClient#detectLanguageTextClassification."
      );
    const operationName = "detectLanguageTextClassification";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/language/20210101/DetectLanguageTextClassification/DetectLanguageTextClassification";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": detectLanguageTextClassificationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      detectLanguageTextClassificationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/actions/detectLanguageTextClassification",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        detectLanguageTextClassificationRequest.detectLanguageTextClassificationDetails,
        "DetectLanguageTextClassificationDetails",
        model.DetectLanguageTextClassificationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DetectLanguageTextClassificationResponse>{},
        body: await response.json(),
        bodyKey: "detectLanguageTextClassificationResult",
        bodyModel: model.DetectLanguageTextClassificationResult,
        type: "model.DetectLanguageTextClassificationResult",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

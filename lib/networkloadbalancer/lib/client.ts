/**
 * NetworkLoadBalancer API
 * A description of the network load balancer API
 * OpenAPI spec version: 20200501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { NetworkLoadBalancerWaiter } from "./networkloadbalancer-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum NetworkLoadBalancerApiKeys {}

export class NetworkLoadBalancerClient {
  protected static serviceEndpointTemplate =
    "https://network-load-balancer-api.{region}.oci.{secondLevelDomain}";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": NetworkLoadBalancerWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
    }
    this._httpClient =
      params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20200501";
    if (this.logger)
      this.logger.info(`NetworkLoadBalancerClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      NetworkLoadBalancerClient.serviceEndpointTemplate,
      region
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      NetworkLoadBalancerClient.serviceEndpointTemplate,
      regionId
    );
  }

  /**
   * Creates a new NetworkLoadBalancerWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): NetworkLoadBalancerWaiter {
    this._waiters = new NetworkLoadBalancerWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): NetworkLoadBalancerWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Moves a network load balancer into a different compartment within the same tenancy. For information about moving resources
   * between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   *
   * @param ChangeNetworkLoadBalancerCompartmentRequest
   * @return ChangeNetworkLoadBalancerCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/ChangeNetworkLoadBalancerCompartment.ts.html |here} to see how to use ChangeNetworkLoadBalancerCompartment API.
   */
  public async changeNetworkLoadBalancerCompartment(
    changeNetworkLoadBalancerCompartmentRequest: requests.ChangeNetworkLoadBalancerCompartmentRequest
  ): Promise<responses.ChangeNetworkLoadBalancerCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation NetworkLoadBalancerClient#changeNetworkLoadBalancerCompartment."
      );
    const pathParams = {
      "{networkLoadBalancerId}": changeNetworkLoadBalancerCompartmentRequest.networkLoadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeNetworkLoadBalancerCompartmentRequest.opcRequestId,
      "opc-retry-token": changeNetworkLoadBalancerCompartmentRequest.opcRetryToken,
      "if-match": changeNetworkLoadBalancerCompartmentRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      changeNetworkLoadBalancerCompartmentRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeNetworkLoadBalancerCompartmentRequest.changeNetworkLoadBalancerCompartmentDetails,
        "ChangeNetworkLoadBalancerCompartmentDetails",
        models.ChangeNetworkLoadBalancerCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeNetworkLoadBalancerCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a backend server to a backend set.
   * @param CreateBackendRequest
   * @return CreateBackendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/CreateBackend.ts.html |here} to see how to use CreateBackend API.
   */
  public async createBackend(
    createBackendRequest: requests.CreateBackendRequest
  ): Promise<responses.CreateBackendResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#createBackend.");
    const pathParams = {
      "{networkLoadBalancerId}": createBackendRequest.networkLoadBalancerId,
      "{backendSetName}": createBackendRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createBackendRequest.opcRequestId,
      "opc-retry-token": createBackendRequest.opcRetryToken,
      "if-match": createBackendRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createBackendRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}/backends",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBackendRequest.createBackendDetails,
        "CreateBackendDetails",
        models.CreateBackendDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBackendResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a backend set to a network load balancer.
   * @param CreateBackendSetRequest
   * @return CreateBackendSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/CreateBackendSet.ts.html |here} to see how to use CreateBackendSet API.
   */
  public async createBackendSet(
    createBackendSetRequest: requests.CreateBackendSetRequest
  ): Promise<responses.CreateBackendSetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#createBackendSet.");
    const pathParams = {
      "{networkLoadBalancerId}": createBackendSetRequest.networkLoadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createBackendSetRequest.opcRequestId,
      "opc-retry-token": createBackendSetRequest.opcRetryToken,
      "if-match": createBackendSetRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createBackendSetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/backendSets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBackendSetRequest.createBackendSetDetails,
        "CreateBackendSetDetails",
        models.CreateBackendSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBackendSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds a listener to a network load balancer.
   * @param CreateListenerRequest
   * @return CreateListenerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/CreateListener.ts.html |here} to see how to use CreateListener API.
   */
  public async createListener(
    createListenerRequest: requests.CreateListenerRequest
  ): Promise<responses.CreateListenerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#createListener.");
    const pathParams = {
      "{networkLoadBalancerId}": createListenerRequest.networkLoadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createListenerRequest.opcRequestId,
      "opc-retry-token": createListenerRequest.opcRetryToken,
      "if-match": createListenerRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createListenerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/listeners",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createListenerRequest.createListenerDetails,
        "CreateListenerDetails",
        models.CreateListenerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateListenerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a network load balancer.
   *
   * @param CreateNetworkLoadBalancerRequest
   * @return CreateNetworkLoadBalancerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/CreateNetworkLoadBalancer.ts.html |here} to see how to use CreateNetworkLoadBalancer API.
   */
  public async createNetworkLoadBalancer(
    createNetworkLoadBalancerRequest: requests.CreateNetworkLoadBalancerRequest
  ): Promise<responses.CreateNetworkLoadBalancerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#createNetworkLoadBalancer.");
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createNetworkLoadBalancerRequest.opcRetryToken,
      "opc-request-id": createNetworkLoadBalancerRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      createNetworkLoadBalancerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createNetworkLoadBalancerRequest.createNetworkLoadBalancerDetails,
        "CreateNetworkLoadBalancerDetails",
        models.CreateNetworkLoadBalancerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateNetworkLoadBalancerResponse>{},
        body: await response.json(),
        bodyKey: "networkLoadBalancer",
        bodyModel: "model.NetworkLoadBalancer",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a backend server from a given network load balancer and backend set.
   * @param DeleteBackendRequest
   * @return DeleteBackendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/DeleteBackend.ts.html |here} to see how to use DeleteBackend API.
   */
  public async deleteBackend(
    deleteBackendRequest: requests.DeleteBackendRequest
  ): Promise<responses.DeleteBackendResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#deleteBackend.");
    const pathParams = {
      "{networkLoadBalancerId}": deleteBackendRequest.networkLoadBalancerId,
      "{backendSetName}": deleteBackendRequest.backendSetName,
      "{backendName}": deleteBackendRequest.backendName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteBackendRequest.opcRequestId,
      "if-match": deleteBackendRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteBackendRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}/backends/{backendName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBackendResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified backend set. Note that deleting a backend set removes its backend servers from the network load balancer.
* <p>
Before you can delete a backend set, you must remove it from any active listeners.
* 
     * @param DeleteBackendSetRequest
     * @return DeleteBackendSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/DeleteBackendSet.ts.html |here} to see how to use DeleteBackendSet API.
     */
  public async deleteBackendSet(
    deleteBackendSetRequest: requests.DeleteBackendSetRequest
  ): Promise<responses.DeleteBackendSetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#deleteBackendSet.");
    const pathParams = {
      "{networkLoadBalancerId}": deleteBackendSetRequest.networkLoadBalancerId,
      "{backendSetName}": deleteBackendSetRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteBackendSetRequest.opcRequestId,
      "if-match": deleteBackendSetRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteBackendSetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBackendSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a listener from a network load balancer.
   * @param DeleteListenerRequest
   * @return DeleteListenerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/DeleteListener.ts.html |here} to see how to use DeleteListener API.
   */
  public async deleteListener(
    deleteListenerRequest: requests.DeleteListenerRequest
  ): Promise<responses.DeleteListenerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#deleteListener.");
    const pathParams = {
      "{networkLoadBalancerId}": deleteListenerRequest.networkLoadBalancerId,
      "{listenerName}": deleteListenerRequest.listenerName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteListenerRequest.opcRequestId,
      "if-match": deleteListenerRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteListenerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/listeners/{listenerName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteListenerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("ETag"),
            key: "eTag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a network load balancer resource by identifier.
   * @param DeleteNetworkLoadBalancerRequest
   * @return DeleteNetworkLoadBalancerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/DeleteNetworkLoadBalancer.ts.html |here} to see how to use DeleteNetworkLoadBalancer API.
   */
  public async deleteNetworkLoadBalancer(
    deleteNetworkLoadBalancerRequest: requests.DeleteNetworkLoadBalancerRequest
  ): Promise<responses.DeleteNetworkLoadBalancerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#deleteNetworkLoadBalancer.");
    const pathParams = {
      "{networkLoadBalancerId}": deleteNetworkLoadBalancerRequest.networkLoadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteNetworkLoadBalancerRequest.ifMatch,
      "opc-request-id": deleteNetworkLoadBalancerRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      deleteNetworkLoadBalancerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNetworkLoadBalancerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the configuration information for the specified backend server.
   * @param GetBackendRequest
   * @return GetBackendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/GetBackend.ts.html |here} to see how to use GetBackend API.
   */
  public async getBackend(
    getBackendRequest: requests.GetBackendRequest
  ): Promise<responses.GetBackendResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkLoadBalancerClient#getBackend.");
    const pathParams = {
      "{networkLoadBalancerId}": getBackendRequest.networkLoadBalancerId,
      "{backendSetName}": getBackendRequest.backendSetName,
      "{backendName}": getBackendRequest.backendName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBackendRequest.opcRequestId,
      "if-none-match": getBackendRequest.ifNoneMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getBackendRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}/backends/{backendName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBackendResponse>{},
        body: await response.json(),
        bodyKey: "backend",
        bodyModel: "model.Backend",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the current health status of the specified backend server.
   * @param GetBackendHealthRequest
   * @return GetBackendHealthResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/GetBackendHealth.ts.html |here} to see how to use GetBackendHealth API.
   */
  public async getBackendHealth(
    getBackendHealthRequest: requests.GetBackendHealthRequest
  ): Promise<responses.GetBackendHealthResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#getBackendHealth.");
    const pathParams = {
      "{networkLoadBalancerId}": getBackendHealthRequest.networkLoadBalancerId,
      "{backendSetName}": getBackendHealthRequest.backendSetName,
      "{backendName}": getBackendHealthRequest.backendName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBackendHealthRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getBackendHealthRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}/backends/{backendName}/health",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBackendHealthResponse>{},
        body: await response.json(),
        bodyKey: "backendHealth",
        bodyModel: "model.BackendHealth",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the configuration information for the specified backend set.
   * @param GetBackendSetRequest
   * @return GetBackendSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/GetBackendSet.ts.html |here} to see how to use GetBackendSet API.
   */
  public async getBackendSet(
    getBackendSetRequest: requests.GetBackendSetRequest
  ): Promise<responses.GetBackendSetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#getBackendSet.");
    const pathParams = {
      "{networkLoadBalancerId}": getBackendSetRequest.networkLoadBalancerId,
      "{backendSetName}": getBackendSetRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBackendSetRequest.opcRequestId,
      "if-none-match": getBackendSetRequest.ifNoneMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getBackendSetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBackendSetResponse>{},
        body: await response.json(),
        bodyKey: "backendSet",
        bodyModel: "model.BackendSet",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the health status for the specified backend set.
   * @param GetBackendSetHealthRequest
   * @return GetBackendSetHealthResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/GetBackendSetHealth.ts.html |here} to see how to use GetBackendSetHealth API.
   */
  public async getBackendSetHealth(
    getBackendSetHealthRequest: requests.GetBackendSetHealthRequest
  ): Promise<responses.GetBackendSetHealthResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#getBackendSetHealth.");
    const pathParams = {
      "{networkLoadBalancerId}": getBackendSetHealthRequest.networkLoadBalancerId,
      "{backendSetName}": getBackendSetHealthRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBackendSetHealthRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getBackendSetHealthRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}/health",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBackendSetHealthResponse>{},
        body: await response.json(),
        bodyKey: "backendSetHealth",
        bodyModel: "model.BackendSetHealth",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the health check policy information for a given network load balancer and backend set.
   * @param GetHealthCheckerRequest
   * @return GetHealthCheckerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/GetHealthChecker.ts.html |here} to see how to use GetHealthChecker API.
   */
  public async getHealthChecker(
    getHealthCheckerRequest: requests.GetHealthCheckerRequest
  ): Promise<responses.GetHealthCheckerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#getHealthChecker.");
    const pathParams = {
      "{networkLoadBalancerId}": getHealthCheckerRequest.networkLoadBalancerId,
      "{backendSetName}": getHealthCheckerRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getHealthCheckerRequest.opcRequestId,
      "opc-retry-token": getHealthCheckerRequest.opcRetryToken,
      "if-none-match": getHealthCheckerRequest.ifNoneMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getHealthCheckerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}/healthChecker",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetHealthCheckerResponse>{},
        body: await response.json(),
        bodyKey: "healthChecker",
        bodyModel: "model.HealthChecker",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves listener properties associated with a given network load balancer and listener name.
   * @param GetListenerRequest
   * @return GetListenerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/GetListener.ts.html |here} to see how to use GetListener API.
   */
  public async getListener(
    getListenerRequest: requests.GetListenerRequest
  ): Promise<responses.GetListenerResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkLoadBalancerClient#getListener.");
    const pathParams = {
      "{networkLoadBalancerId}": getListenerRequest.networkLoadBalancerId,
      "{listenerName}": getListenerRequest.listenerName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getListenerRequest.opcRequestId,
      "if-none-match": getListenerRequest.ifNoneMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getListenerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/listeners/{listenerName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetListenerResponse>{},
        body: await response.json(),
        bodyKey: "listener",
        bodyModel: "model.Listener",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves network load balancer configuration information by identifier.
   * @param GetNetworkLoadBalancerRequest
   * @return GetNetworkLoadBalancerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/GetNetworkLoadBalancer.ts.html |here} to see how to use GetNetworkLoadBalancer API.
   */
  public async getNetworkLoadBalancer(
    getNetworkLoadBalancerRequest: requests.GetNetworkLoadBalancerRequest
  ): Promise<responses.GetNetworkLoadBalancerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#getNetworkLoadBalancer.");
    const pathParams = {
      "{networkLoadBalancerId}": getNetworkLoadBalancerRequest.networkLoadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-none-match": getNetworkLoadBalancerRequest.ifNoneMatch,
      "opc-request-id": getNetworkLoadBalancerRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getNetworkLoadBalancerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNetworkLoadBalancerResponse>{},
        body: await response.json(),
        bodyKey: "networkLoadBalancer",
        bodyModel: "model.NetworkLoadBalancer",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the health status for the specified network load balancer.
   * @param GetNetworkLoadBalancerHealthRequest
   * @return GetNetworkLoadBalancerHealthResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/GetNetworkLoadBalancerHealth.ts.html |here} to see how to use GetNetworkLoadBalancerHealth API.
   */
  public async getNetworkLoadBalancerHealth(
    getNetworkLoadBalancerHealthRequest: requests.GetNetworkLoadBalancerHealthRequest
  ): Promise<responses.GetNetworkLoadBalancerHealthResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation NetworkLoadBalancerClient#getNetworkLoadBalancerHealth."
      );
    const pathParams = {
      "{networkLoadBalancerId}": getNetworkLoadBalancerHealthRequest.networkLoadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNetworkLoadBalancerHealthRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getNetworkLoadBalancerHealthRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/health",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNetworkLoadBalancerHealthResponse>{},
        body: await response.json(),
        bodyKey: "networkLoadBalancerHealth",
        bodyModel: "model.NetworkLoadBalancerHealth",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the details of the work request with the given identifier.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#getWorkRequest.");
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      getWorkRequestRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all backend sets associated with a given network load balancer.
   * @param ListBackendSetsRequest
   * @return ListBackendSetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/ListBackendSets.ts.html |here} to see how to use ListBackendSets API.
   */
  public async listBackendSets(
    listBackendSetsRequest: requests.ListBackendSetsRequest
  ): Promise<responses.ListBackendSetsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#listBackendSets.");
    const pathParams = {
      "{networkLoadBalancerId}": listBackendSetsRequest.networkLoadBalancerId
    };

    const queryParams = {
      "limit": listBackendSetsRequest.limit,
      "page": listBackendSetsRequest.page,
      "sortOrder": listBackendSetsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBackendSetsRequest.opcRequestId,
      "if-none-match": listBackendSetsRequest.ifNoneMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listBackendSetsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/backendSets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBackendSetsResponse>{},
        body: await response.json(),
        bodyKey: "backendSetCollection",
        bodyModel: "model.BackendSetCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the backend servers for a given network load balancer and backend set.
   * @param ListBackendsRequest
   * @return ListBackendsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/ListBackends.ts.html |here} to see how to use ListBackends API.
   */
  public async listBackends(
    listBackendsRequest: requests.ListBackendsRequest
  ): Promise<responses.ListBackendsResponse> {
    if (this.logger) this.logger.debug("Calling operation NetworkLoadBalancerClient#listBackends.");
    const pathParams = {
      "{networkLoadBalancerId}": listBackendsRequest.networkLoadBalancerId,
      "{backendSetName}": listBackendsRequest.backendSetName
    };

    const queryParams = {
      "limit": listBackendsRequest.limit,
      "page": listBackendsRequest.page,
      "sortOrder": listBackendsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBackendsRequest.opcRequestId,
      "if-none-match": listBackendsRequest.ifNoneMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listBackendsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}/backends",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBackendsResponse>{},
        body: await response.json(),
        bodyKey: "backendCollection",
        bodyModel: "model.BackendCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all listeners associated with a given network load balancer.
   * @param ListListenersRequest
   * @return ListListenersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/ListListeners.ts.html |here} to see how to use ListListeners API.
   */
  public async listListeners(
    listListenersRequest: requests.ListListenersRequest
  ): Promise<responses.ListListenersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#listListeners.");
    const pathParams = {
      "{networkLoadBalancerId}": listListenersRequest.networkLoadBalancerId
    };

    const queryParams = {
      "limit": listListenersRequest.limit,
      "page": listListenersRequest.page,
      "sortOrder": listListenersRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listListenersRequest.opcRequestId,
      "if-none-match": listListenersRequest.ifNoneMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listListenersRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/listeners",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListListenersResponse>{},
        body: await response.json(),
        bodyKey: "listenerCollection",
        bodyModel: "model.ListenerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the summary health statuses for all network load balancers in the specified compartment.
   * @param ListNetworkLoadBalancerHealthsRequest
   * @return ListNetworkLoadBalancerHealthsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/ListNetworkLoadBalancerHealths.ts.html |here} to see how to use ListNetworkLoadBalancerHealths API.
   */
  public async listNetworkLoadBalancerHealths(
    listNetworkLoadBalancerHealthsRequest: requests.ListNetworkLoadBalancerHealthsRequest
  ): Promise<responses.ListNetworkLoadBalancerHealthsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation NetworkLoadBalancerClient#listNetworkLoadBalancerHealths."
      );
    const pathParams = {};

    const queryParams = {
      "sortOrder": listNetworkLoadBalancerHealthsRequest.sortOrder,
      "sortBy": listNetworkLoadBalancerHealthsRequest.sortBy,
      "compartmentId": listNetworkLoadBalancerHealthsRequest.compartmentId,
      "limit": listNetworkLoadBalancerHealthsRequest.limit,
      "page": listNetworkLoadBalancerHealthsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNetworkLoadBalancerHealthsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listNetworkLoadBalancerHealthsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/health",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkLoadBalancerHealthsResponse>{},
        body: await response.json(),
        bodyKey: "networkLoadBalancerHealthCollection",
        bodyModel: "model.NetworkLoadBalancerHealthCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of network load balancers.
   *
   * @param ListNetworkLoadBalancersRequest
   * @return ListNetworkLoadBalancersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/ListNetworkLoadBalancers.ts.html |here} to see how to use ListNetworkLoadBalancers API.
   */
  public async listNetworkLoadBalancers(
    listNetworkLoadBalancersRequest: requests.ListNetworkLoadBalancersRequest
  ): Promise<responses.ListNetworkLoadBalancersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#listNetworkLoadBalancers.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNetworkLoadBalancersRequest.compartmentId,
      "lifecycleState": listNetworkLoadBalancersRequest.lifecycleState,
      "displayName": listNetworkLoadBalancersRequest.displayName,
      "limit": listNetworkLoadBalancersRequest.limit,
      "page": listNetworkLoadBalancersRequest.page,
      "sortOrder": listNetworkLoadBalancersRequest.sortOrder,
      "sortBy": listNetworkLoadBalancersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNetworkLoadBalancersRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listNetworkLoadBalancersRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkLoadBalancersResponse>{},
        body: await response.json(),
        bodyKey: "networkLoadBalancerCollection",
        bodyModel: "model.NetworkLoadBalancerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the available network load balancer policies.
   * @param ListNetworkLoadBalancersPoliciesRequest
   * @return ListNetworkLoadBalancersPoliciesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/ListNetworkLoadBalancersPolicies.ts.html |here} to see how to use ListNetworkLoadBalancersPolicies API.
   */
  public async listNetworkLoadBalancersPolicies(
    listNetworkLoadBalancersPoliciesRequest: requests.ListNetworkLoadBalancersPoliciesRequest
  ): Promise<responses.ListNetworkLoadBalancersPoliciesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation NetworkLoadBalancerClient#listNetworkLoadBalancersPolicies."
      );
    const pathParams = {};

    const queryParams = {
      "limit": listNetworkLoadBalancersPoliciesRequest.limit,
      "page": listNetworkLoadBalancersPoliciesRequest.page,
      "sortOrder": listNetworkLoadBalancersPoliciesRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNetworkLoadBalancersPoliciesRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listNetworkLoadBalancersPoliciesRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancersPolicies",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkLoadBalancersPoliciesResponse>{},
        body: await response.json(),
        bodyKey: "networkLoadBalancersPolicyCollection",
        bodyModel: "model.NetworkLoadBalancersPolicyCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all supported traffic protocols.
   * @param ListNetworkLoadBalancersProtocolsRequest
   * @return ListNetworkLoadBalancersProtocolsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/ListNetworkLoadBalancersProtocols.ts.html |here} to see how to use ListNetworkLoadBalancersProtocols API.
   */
  public async listNetworkLoadBalancersProtocols(
    listNetworkLoadBalancersProtocolsRequest: requests.ListNetworkLoadBalancersProtocolsRequest
  ): Promise<responses.ListNetworkLoadBalancersProtocolsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation NetworkLoadBalancerClient#listNetworkLoadBalancersProtocols."
      );
    const pathParams = {};

    const queryParams = {
      "limit": listNetworkLoadBalancersProtocolsRequest.limit,
      "page": listNetworkLoadBalancersProtocolsRequest.page,
      "sortOrder": listNetworkLoadBalancersProtocolsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNetworkLoadBalancersProtocolsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listNetworkLoadBalancersProtocolsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancersProtocols",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNetworkLoadBalancersProtocolsResponse>{},
        body: await response.json(),
        bodyKey: "networkLoadBalancersProtocolCollection",
        bodyModel: "model.NetworkLoadBalancersProtocolCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of errors for a given work request.
   *
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#listWorkRequestErrors.");
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "compartmentId": listWorkRequestErrorsRequest.compartmentId,
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestErrorsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of logs for a given work request.
   *
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#listWorkRequestLogs.");
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "compartmentId": listWorkRequestLogsRequest.compartmentId,
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestLogsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists all work requests.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#listWorkRequests.");
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "limit": listWorkRequestsRequest.limit,
      "page": listWorkRequestsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      listWorkRequestsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the configuration of a backend server within the specified backend set.
   * @param UpdateBackendRequest
   * @return UpdateBackendResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/UpdateBackend.ts.html |here} to see how to use UpdateBackend API.
   */
  public async updateBackend(
    updateBackendRequest: requests.UpdateBackendRequest
  ): Promise<responses.UpdateBackendResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#updateBackend.");
    const pathParams = {
      "{networkLoadBalancerId}": updateBackendRequest.networkLoadBalancerId,
      "{backendSetName}": updateBackendRequest.backendSetName,
      "{backendName}": updateBackendRequest.backendName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateBackendRequest.opcRequestId,
      "opc-retry-token": updateBackendRequest.opcRetryToken,
      "if-match": updateBackendRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateBackendRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}/backends/{backendName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBackendRequest.updateBackendDetails,
        "UpdateBackendDetails",
        models.UpdateBackendDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBackendResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a backend set.
   * @param UpdateBackendSetRequest
   * @return UpdateBackendSetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/UpdateBackendSet.ts.html |here} to see how to use UpdateBackendSet API.
   */
  public async updateBackendSet(
    updateBackendSetRequest: requests.UpdateBackendSetRequest
  ): Promise<responses.UpdateBackendSetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#updateBackendSet.");
    const pathParams = {
      "{networkLoadBalancerId}": updateBackendSetRequest.networkLoadBalancerId,
      "{backendSetName}": updateBackendSetRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateBackendSetRequest.opcRequestId,
      "opc-retry-token": updateBackendSetRequest.opcRetryToken,
      "if-match": updateBackendSetRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateBackendSetRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBackendSetRequest.updateBackendSetDetails,
        "UpdateBackendSetDetails",
        models.UpdateBackendSetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBackendSetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the health check policy for a given network load balancer and backend set.
   * @param UpdateHealthCheckerRequest
   * @return UpdateHealthCheckerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/UpdateHealthChecker.ts.html |here} to see how to use UpdateHealthChecker API.
   */
  public async updateHealthChecker(
    updateHealthCheckerRequest: requests.UpdateHealthCheckerRequest
  ): Promise<responses.UpdateHealthCheckerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#updateHealthChecker.");
    const pathParams = {
      "{networkLoadBalancerId}": updateHealthCheckerRequest.networkLoadBalancerId,
      "{backendSetName}": updateHealthCheckerRequest.backendSetName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateHealthCheckerRequest.opcRequestId,
      "opc-retry-token": updateHealthCheckerRequest.opcRetryToken,
      "if-match": updateHealthCheckerRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateHealthCheckerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}/healthChecker",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateHealthCheckerRequest.updateHealthCheckerDetails,
        "UpdateHealthCheckerDetails",
        models.UpdateHealthCheckerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateHealthCheckerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a listener for a given network load balancer.
   * @param UpdateListenerRequest
   * @return UpdateListenerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/UpdateListener.ts.html |here} to see how to use UpdateListener API.
   */
  public async updateListener(
    updateListenerRequest: requests.UpdateListenerRequest
  ): Promise<responses.UpdateListenerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#updateListener.");
    const pathParams = {
      "{networkLoadBalancerId}": updateListenerRequest.networkLoadBalancerId,
      "{listenerName}": updateListenerRequest.listenerName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateListenerRequest.opcRequestId,
      "opc-retry-token": updateListenerRequest.opcRetryToken,
      "if-match": updateListenerRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateListenerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/listeners/{listenerName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateListenerRequest.updateListenerDetails,
        "UpdateListenerDetails",
        models.UpdateListenerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateListenerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the network load balancer.
   * @param UpdateNetworkLoadBalancerRequest
   * @return UpdateNetworkLoadBalancerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/UpdateNetworkLoadBalancer.ts.html |here} to see how to use UpdateNetworkLoadBalancer API.
   */
  public async updateNetworkLoadBalancer(
    updateNetworkLoadBalancerRequest: requests.UpdateNetworkLoadBalancerRequest
  ): Promise<responses.UpdateNetworkLoadBalancerResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#updateNetworkLoadBalancer.");
    const pathParams = {
      "{networkLoadBalancerId}": updateNetworkLoadBalancerRequest.networkLoadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateNetworkLoadBalancerRequest.ifMatch,
      "opc-request-id": updateNetworkLoadBalancerRequest.opcRequestId
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateNetworkLoadBalancerRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNetworkLoadBalancerRequest.updateNetworkLoadBalancerDetails,
        "UpdateNetworkLoadBalancerDetails",
        models.UpdateNetworkLoadBalancerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNetworkLoadBalancerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the network security groups associated with the specified network load balancer.
   * @param UpdateNetworkSecurityGroupsRequest
   * @return UpdateNetworkSecurityGroupsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/networkloadbalancer/UpdateNetworkSecurityGroups.ts.html |here} to see how to use UpdateNetworkSecurityGroups API.
   */
  public async updateNetworkSecurityGroups(
    updateNetworkSecurityGroupsRequest: requests.UpdateNetworkSecurityGroupsRequest
  ): Promise<responses.UpdateNetworkSecurityGroupsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation NetworkLoadBalancerClient#updateNetworkSecurityGroups.");
    const pathParams = {
      "{networkLoadBalancerId}": updateNetworkSecurityGroupsRequest.networkLoadBalancerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateNetworkSecurityGroupsRequest.opcRequestId,
      "opc-retry-token": updateNetworkSecurityGroupsRequest.opcRetryToken,
      "if-match": updateNetworkSecurityGroupsRequest.ifMatch
    };

    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {},
      updateNetworkSecurityGroupsRequest.retryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/networkLoadBalancers/{networkLoadBalancerId}/networkSecurityGroups",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNetworkSecurityGroupsRequest.updateNetworkSecurityGroupsDetails,
        "UpdateNetworkSecurityGroupsDetails",
        models.UpdateNetworkSecurityGroupsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(this._httpClient, request);
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNetworkSecurityGroupsResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}

/**
 * Threat Intelligence API
 * Use the Threat Intelligence API to view indicators of compromise and related items. For more information, see [Overview of Threat Intelligence](/Content/ThreatIntelligence/Concepts/threatintelligenceoverview.htm).
 * OpenAPI spec version: 20210831
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The confidence, source information, and visibility for a particular sighting or observation of some data associated with an indicator such as threat type, attribute or relationship.
 */
export interface DataAttribution {
  /**
   * Confidence is an integer from 0 to 100 that provides a measure of our certainty in the maliciousness of data attributed to an indicator.  For example, if the source of the data being attributed is the Tor Project, our confidence that the associated indicator is a tor exit node would be 100. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "confidence": number;
  "source": model.IndicatorSourceSummary;
  "visibility": model.DataVisibility;
  /**
   * The time the data was first seen for this entity. Defaults to time last seen if no time first seen is provided from the data source. An RFC3339 formatted datetime string
   */
  "timeFirstSeen"?: Date;
  /**
   * The last time this data was seen for this entity. An RFC3339 formatted datetime string
   */
  "timeLastSeen": Date;
}

export namespace DataAttribution {
  export function getJsonObj(obj: DataAttribution): object {
    const jsonObj = {
      ...obj,
      ...{
        "source": obj.source ? model.IndicatorSourceSummary.getJsonObj(obj.source) : undefined,
        "visibility": obj.visibility ? model.DataVisibility.getJsonObj(obj.visibility) : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DataAttribution): object {
    const jsonObj = {
      ...obj,
      ...{
        "source": obj.source
          ? model.IndicatorSourceSummary.getDeserializedJsonObj(obj.source)
          : undefined,
        "visibility": obj.visibility
          ? model.DataVisibility.getDeserializedJsonObj(obj.visibility)
          : undefined
      }
    };

    return jsonObj;
  }
}

/**
 * Threat Intelligence API
 * Use the Threat Intelligence API to view indicators of compromise and related items. For more information, see [Overview of Threat Intelligence](/Content/ThreatIntelligence/Concepts/threatintelligenceoverview.htm).
 * OpenAPI spec version: 20210831
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Summary of a data signature observed on a network or host that indicates a potential security threat.
 */
export interface IndicatorSummary {
  /**
   * The OCID of the indicator.
   */
  "id": string;
  /**
   * Type of indicator
   */
  "type": model.IndicatorType;
  /**
   * The value of indicator.
   */
  "value": string;
  /**
   * Confidence is an integer from 0 to 100 that provides a measure of our certainty in the maliciousness of the indicator.  This confidence value is aggregated from the confidence in the threat types, attributes, and relationships to create an overall value for the indicator. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "confidence"?: number;
  /**
   * Compartment Identifier
   */
  "compartmentId"?: string;
  /**
   * Characteristics of the threat indicator based on previous observations or behavior. May include related tactics, techniques, and procedures.
   */
  "threatTypes": Array<model.ThreatType>;
  /**
   * The state of the indicator.  It will always be ACTIVE.  This field is added for consistency.
   */
  "lifecycleState"?: model.LifecycleState;
  /**
   * The time the data was first seen for this indicator. An RFC3339 formatted datetime string
   */
  "timeCreated": Date;
  /**
   * The last time this indicator was updated. It starts with the same value as timeCreated and is never empty. An RFC3339 formatted datetime string
   */
  "timeUpdated": Date;
}

export namespace IndicatorSummary {
  export function getJsonObj(obj: IndicatorSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "threatTypes": obj.threatTypes
          ? obj.threatTypes.map(item => {
              return model.ThreatType.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: IndicatorSummary): object {
    const jsonObj = {
      ...obj,
      ...{
        "threatTypes": obj.threatTypes
          ? obj.threatTypes.map(item => {
              return model.ThreatType.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
